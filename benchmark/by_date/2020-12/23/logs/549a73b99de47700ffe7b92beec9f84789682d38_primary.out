cset: moving following pidspec: 12348
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.818123408 seconds)
loading group "shootout"... done (took 1.194014707 seconds)
loading group "string"... done (took 0.669032569 seconds)
loading group "linalg"... done (took 8.626531892 seconds)
loading group "parallel"... done (took 0.165540007 seconds)
loading group "find"... done (took 3.038689938 seconds)
loading group "tuple"... done (took 2.14233021 seconds)
loading group "union"... done (took 14.852972631 seconds)
loading group "dates"... done (took 1.476752718 seconds)
loading group "micro"... done (took 0.219419521 seconds)
loading group "simd"... done (took 4.780033202 seconds)
loading group "io"... done (took 1.08587398 seconds)
loading group "random"... done (took 9.547150053 seconds)
loading group "problem"... done (took 1.528327305 seconds)
loading group "array"... done (took 25.367895562 seconds)
loading group "misc"... done (took 1.892822658 seconds)
loading group "scalar"... done (took 43.642335906 seconds)
loading group "sort"... done (took 3.335042196 seconds)
loading group "sparse"... done (took 12.753577301 seconds)
loading group "collection"... done (took 18.727319844 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422171018 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.116004569 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129050611 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114835181 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.188016952 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120467829 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127873197 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08234218 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.920930559 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.133746357 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112742763 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.428082885 seconds)
done (took 5.322408342 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164182089 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.08918911 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081720728 seconds)
  done (took 1.369041803 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070077632 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061202553 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066630577 seconds)
  done (took 1.397021581 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064835567 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132744016 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065451476 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066621423 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06667651 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065659724 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065813489 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065844878 seconds)
  done (took 1.731078304 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070163281 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065681859 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064133551 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066921518 seconds)
  done (took 1.469281461 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063461942 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119735708 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063522146 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063923797 seconds)
  done (took 1.510540068 seconds)
done (took 8.927488591 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138275756 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.823702927 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.767777717 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123510191 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249845117 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367072591 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122555825 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180359251 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087104473 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074137483 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122584939 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07807511 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.389507844 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.501391839 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069266147 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170131001 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649155755 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087455436 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134752886 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.446359346 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071602781 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087403671 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085842745 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069391732 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.324969046 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.150998974 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669416841 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091203226 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06656939 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094144391 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070856017 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078307705 seconds)
  done (took 10.680378262 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090864405 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088771389 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067250427 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123442458 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094804932 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070408073 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075556226 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067579802 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089212606 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125155927 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091322287 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098705976 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06637439 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068938989 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073593547 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19831482 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081218864 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081578633 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067656428 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081483719 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106292179 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07938566 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078883569 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078258553 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132632532 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17090679 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09799245 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098930387 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066513053 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079784375 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115358321 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12681727 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067060152 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065409094 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120986814 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095780729 seconds)
  done (took 4.637975877 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.880787052 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095579568 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083358085 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074864327 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107236069 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112449895 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122716734 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123023782 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100497973 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068813737 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.099171437 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152492864 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.667264282 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.163014885 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070067464 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.121028678 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360809314 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.064177309 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068838261 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066327229 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070924184 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069932525 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113169006 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065682842 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17880553 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.579546949 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069310379 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069327247 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096198978 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065317748 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141616086 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092584138 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070095157 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.081197496 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.538261111 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064234947 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06338653 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.200995251 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093274246 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065562601 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066451604 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077270034 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064818318 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107848673 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079971982 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.520479576 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070191917 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.591232921 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22729805 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072797557 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072156326 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064623 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101364253 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063841901 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067544902 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.98128325 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.140297274 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065325459 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271091408 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068424745 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068040272 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069342084 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101857036 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067037211 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06805565 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07290122 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096350252 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.810416962 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.08855849 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096392464 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067246629 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.407827835 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074331847 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068874742 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06928911 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069279079 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107217104 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066552823 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066301695 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112148173 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096251905 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089859047 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069709195 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067760709 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065898628 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.326509329 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.1665378 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064451105 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065171872 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.471119192 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062183558 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064388167 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066522769 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.20754732 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067503547 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063096978 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065266902 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.0996728 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068934627 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336172708 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067624103 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.486294392 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06708505 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101114366 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.117989108 seconds)
    (105/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063492277 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066189511 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098696625 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066561585 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063471399 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072603596 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065659401 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064299754 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069787136 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065894212 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066355325 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069210173 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068604938 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067703121 seconds)
  done (took 22.779154516 seconds)
done (took 40.183316787 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312172364 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.07932379 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079431935 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07996477 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079330627 seconds)
  done (took 1.87943959 seconds)
done (took 3.222963106 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249488283 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073967605 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06279866 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.206040726 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089468645 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17869593 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.216926662 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.166293499 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089351154 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089179708 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089339389 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.224791954 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.231106535 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089598431 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161332534 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.231255466 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.089899122 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063816347 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.087354611 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086488434 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086584477 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062132626 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.085987956 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086405622 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155818449 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.085944126 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062016073 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.155205099 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085138415 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155638993 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.086691686 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087700074 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087890746 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158981391 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086740934 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157323906 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06252151 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087172483 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.087942013 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087841453 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.087366205 seconds)
  done (took 6.171001343 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072821621 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.193127719 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082809045 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060564968 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070564408 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080476316 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061724277 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082241301 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090543157 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082269631 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082304784 seconds)
  done (took 2.294261109 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068530213 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081148916 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084713643 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061639685 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073426562 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08358675 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061824548 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082959796 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086228032 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083608392 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083731369 seconds)
  done (took 2.134814182 seconds)
done (took 11.869057113 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.0952369 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065180501 seconds)
  done (took 1.425974145 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.226610319 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499417731 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.931669162 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090933561 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070048244 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084323462 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.195649789 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065619588 seconds)
  done (took 7.62160692 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.096569359 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070385615 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065620505 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065740419 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066730851 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067929553 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066281726 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069024618 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067589645 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069269772 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067670463 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068126662 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069852565 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068577464 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068809256 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06766693 seconds)
  done (took 2.50000954 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101723721 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069440708 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099847536 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061981116 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071911149 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062117216 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070775367 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072987181 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070160561 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071480418 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072439717 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071610854 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071569155 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071984382 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073384131 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073399056 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073371283 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.07085553 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073241539 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073976045 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072472183 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073234887 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073647603 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071800679 seconds)
  done (took 3.171242241 seconds)
done (took 16.001271921 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171861013 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073266414 seconds)
  done (took 1.52335539 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065874065 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066491521 seconds)
  done (took 1.425766579 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071047538 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059184123 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075860631 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068482227 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059509877 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059489208 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07551129 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061070247 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061268456 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061278535 seconds)
  done (took 1.94590065 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061139409 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066540925 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064431665 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063009481 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.06510551 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060726598 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064659482 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062395324 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069380803 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061732811 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065390071 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08312842 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06563824 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084077732 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065264843 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065909343 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06747105 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065090868 seconds)
  done (took 2.496080944 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.05918916 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059553134 seconds)
  done (took 1.41873759 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062886941 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060088811 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062986505 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064244501 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061432162 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061258127 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061657128 seconds)
  done (took 1.728191267 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422452945 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124843866 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.349620048 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069083167 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077400089 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259146371 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063849037 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069003516 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068649977 seconds)
  done (took 2.842559368 seconds)
done (took 14.690279004 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080542884 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179006111 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085395017 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.381939622 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091905859 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067364039 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112484556 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.180294587 seconds)
done (took 2.499835303 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276961644 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.243300346 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.411155346 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126583793 seconds)
  done (took 3.086565374 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330577797 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077180174 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075983572 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066975342 seconds)
  done (took 1.866650284 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063398883 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069218712 seconds)
  done (took 1.442638167 seconds)
done (took 7.991520577 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06972761 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.05987732 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065334384 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06178911 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.06185708 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061174486 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091235555 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064354656 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061569619 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064040787 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063814383 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064406351 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063728608 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063297566 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064204686 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063023523 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063384552 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063411179 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063411093 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062947963 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06149243 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063790923 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062918709 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063528164 seconds)
  done (took 2.886224241 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077293993 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063817566 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066090874 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066529756 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066655519 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066358431 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066694823 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065347613 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066853102 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065047525 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066933683 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067270265 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06494433 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067073426 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065221797 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067150638 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066772737 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065486498 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064881473 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067135103 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066748165 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065499019 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067351421 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06667023 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067472057 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067017307 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065290172 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065560035 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066836074 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067170807 seconds)
  done (took 3.325395335 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064521781 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058534502 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059974801 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069478612 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059491918 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05990527 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059689065 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.05936371 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059684982 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060984629 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060418531 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05961583 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060709138 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059964333 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059823478 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060731302 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064956806 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079872846 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060146086 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060071378 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064142186 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059677879 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059876969 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059918627 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060464749 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059565027 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059637799 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06044821 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059989135 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06088898 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06002487 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064200163 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065602429 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060086026 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070100321 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064914009 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060302583 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064304184 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061226467 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060402233 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060023259 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060375867 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060145246 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060026845 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070811683 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06022418 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061217433 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060967471 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060381739 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059946949 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06022325 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062012327 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068341076 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061819651 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060095014 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060853711 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059955624 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060886317 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06013363 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060481439 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059959168 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064386478 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061716866 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060746103 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080274042 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061921975 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070834145 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060097432 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06069602 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064086011 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061204739 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078622565 seconds)
  done (took 5.806385519 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.06962784 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070003915 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078078281 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070500246 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064272352 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061077991 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06497143 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06102747 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070386298 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065229945 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061053819 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064859043 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070499416 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064967728 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062080641 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070263457 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065181212 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064358897 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060856833 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064895749 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062331939 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064598637 seconds)
  done (took 2.784168808 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136840082 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064578577 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103339534 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069614913 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069176849 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070291111 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066458515 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066721562 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06694715 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066935413 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0671445 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066788066 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068892936 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066997078 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066822496 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066923963 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066450151 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066691911 seconds)
  done (took 2.640986718 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074724231 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063904399 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087678631 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065421346 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065893623 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065416528 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069725316 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070558001 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065588567 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065989214 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070294098 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065357274 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065490722 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066348027 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065684024 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065911865 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065856868 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065832674 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070227471 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069722152 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069706968 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070966796 seconds)
  done (took 2.832159328 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077235401 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063863244 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080847327 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066603121 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059900533 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060149706 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066133136 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065478675 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066958628 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064961196 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065676275 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060588575 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067684912 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065526154 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067303924 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065345443 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065042188 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065471707 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06497622 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060449233 seconds)
  done (took 2.647863637 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070058787 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06190874 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062508701 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067942755 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062838896 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063289916 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06887434 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063548711 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063383875 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085593102 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063211395 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07382267 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069130967 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066835325 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063857722 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068805276 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068861501 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068712932 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063658714 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063624758 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085759032 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063662997 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068683498 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063679147 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063487107 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063330451 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06344961 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066908191 seconds)
  done (took 3.210520723 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062973693 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062679697 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063298361 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063211213 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062715559 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063068541 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063431982 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062951457 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063205008 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063363849 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063008002 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063336466 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065814019 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063391462 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063513689 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063063856 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063603962 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063654295 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063723411 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063596781 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062925123 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06335707 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063156671 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06350563 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063386986 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063389707 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063430588 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063303694 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062941771 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063387332 seconds)
  done (took 3.236648034 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071173453 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069882514 seconds)
  done (took 1.473348914 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059644852 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075737472 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059041657 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072215556 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06836071 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063892175 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069233759 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070192505 seconds)
  done (took 1.866430795 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064785666 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089441849 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06175071 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061929678 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064945266 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128609616 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075075644 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074214551 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076548792 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064615904 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062976343 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074715915 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061671739 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075345854 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063356332 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070932608 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069267286 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079850444 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075048079 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060518868 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075060198 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062790868 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060503549 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062374958 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061516406 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068745389 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077456452 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074328001 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070422826 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059806304 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081031534 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060507377 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.0618354 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070580775 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065589438 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061581138 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.0994441 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061678689 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066942604 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061102797 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074182838 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082526581 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075992082 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080123499 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062784237 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062999883 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060171655 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062522168 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064548441 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070192897 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060307501 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068486674 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060582045 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063173293 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07257505 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061983985 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066858476 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07129793 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07566815 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072620931 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070536242 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077787786 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070524111 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069490678 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062234733 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081187145 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062242566 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074168328 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075955636 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061689623 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074096639 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060144978 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059390956 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060131334 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09505865 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062309719 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061556543 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060576217 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060438603 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06216462 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070588885 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066195174 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068514457 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064391927 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076850269 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070278321 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060829169 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067439428 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078901333 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064227594 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060929056 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077976036 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064144978 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059703833 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078742229 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070640531 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062250717 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061617471 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064080481 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074201926 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061380754 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059347377 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069345219 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062376477 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063283575 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065020283 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069081923 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.06059769 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070762269 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065126719 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062168246 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058874376 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064657693 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061090159 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059282382 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069861807 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060124744 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074516394 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066183519 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074315269 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075114851 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.0708724 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076000537 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059768041 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.05872108 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077937222 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069432354 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061483599 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078119964 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059245335 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072813875 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058875327 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.061129342 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.207716823 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061115677 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064044848 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062985612 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066968204 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063109655 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063617554 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067133139 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.07047808 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073698801 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062154873 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070239084 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061178845 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076639991 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071102468 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065347518 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063966841 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06135407 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072832364 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067782227 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.07027936 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060130845 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061142356 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060265389 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07141283 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070618644 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062361362 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068141498 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065523273 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061333989 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06056488 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061755129 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064261646 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06404908 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061464808 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06872654 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070221323 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074832929 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068046054 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069808906 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059688556 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059952465 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062039312 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.0600815 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065664549 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069917038 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076441708 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072122112 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081868168 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060418674 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070306002 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062069526 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077962975 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074627673 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061816374 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065318332 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059609516 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061962799 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070518294 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072323918 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074914711 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075964442 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065416832 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065076934 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059923447 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076035702 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060827045 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069272266 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070110955 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065453208 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060525219 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062116115 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070041423 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065242228 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060713482 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076502756 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066952556 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06009026 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075474368 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060858385 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071722427 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060176922 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064172682 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066207506 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062369761 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070571365 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07610093 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05944594 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06113844 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076782973 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062803297 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062433296 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068983578 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076284232 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064976219 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068832885 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07170046 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070738525 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065624881 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070677228 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061510979 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070111116 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063581829 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072573844 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060545428 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079201301 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059319134 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076177159 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06082947 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072235007 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061496498 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070231093 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061907213 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077788834 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062284968 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060940885 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072530761 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05914927 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070057899 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059616998 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065350245 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066971256 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069496786 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061454592 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069300474 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061419231 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068888882 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064707074 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068086255 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069051801 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064267231 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059075381 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068544702 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07117342 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067849124 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061072276 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060936384 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060271474 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.212224806 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064039228 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063953309 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070706349 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066699145 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067786774 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063504505 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063246265 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063121547 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0693214 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070901458 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079400437 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071095717 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068667395 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070421558 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060474632 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077167873 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060973306 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071090005 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059569464 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066270217 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.07014389 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060617695 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080182809 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06248709 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06866851 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073384697 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069151314 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064462251 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078800738 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064033141 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069297296 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069108641 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06547965 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067099724 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06270285 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.06910715 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070745904 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071580154 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061468008 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068944108 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069907185 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062024166 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06817128 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062328439 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069123688 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062050728 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059728869 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065329186 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072436765 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065270434 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065759931 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060846793 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059887236 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061159397 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067964195 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065696637 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069616115 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076412604 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059298542 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061527939 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060175447 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06449338 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079152744 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070443336 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068998881 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065188528 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059749695 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062320491 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062487793 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060862193 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063979463 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059676343 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060337849 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071706771 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062400834 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064971223 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060953369 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062070739 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070292447 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065390587 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061014573 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067207949 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060207512 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065788485 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059823538 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062033076 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065416496 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060019883 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064005643 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071213531 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077144836 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067281265 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069659078 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061444282 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068801007 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076175324 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06758219 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061630471 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07053192 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059791527 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079467694 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070276137 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069617767 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070656539 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061472016 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077877705 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065624596 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070944465 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076210054 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061389625 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067053054 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059834038 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076288199 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065073358 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059667132 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068760008 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068318559 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066759901 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07262742 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061152142 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068469108 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065502024 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063741987 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.06167477 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061188627 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068912573 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076031728 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060881296 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063991094 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068189887 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068603623 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065026769 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071951373 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.0682013 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060736521 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061529098 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063683303 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.207668677 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072683094 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060916081 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065136281 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065384943 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06097255 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067953465 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077789697 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070618607 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070387233 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060345733 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059849832 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079021225 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064431579 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063980141 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069056989 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070151082 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073195002 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070177734 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077780121 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061070788 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.0666984 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07489947 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061396819 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060511684 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064498212 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062146469 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069928378 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070583345 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068055084 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062605857 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067822862 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07502724 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062007494 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065606514 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065461044 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.0610319 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070959805 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068595895 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072306131 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062077637 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059942118 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063909603 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069686992 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06855475 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069964918 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06136704 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067347013 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074619686 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068234196 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0636352 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060006144 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06356285 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.06992978 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065441039 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06030613 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065589357 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064625938 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067708524 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070535659 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065270423 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060287338 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078078018 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068789301 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070112102 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062531737 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062670571 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061072703 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.06011311 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071886756 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059781883 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062112977 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065281197 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062688119 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078936298 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069283768 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076830587 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061832705 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065167659 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060168759 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070483331 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065216351 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061193309 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071499133 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059766179 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076620988 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073249195 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065957268 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060046571 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065620251 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068629565 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076084328 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070601926 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069971261 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064523184 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071007226 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062737084 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072012604 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060442462 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059747525 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071022933 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069726046 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073414746 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060242396 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071327495 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062676653 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069422434 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06902565 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062296663 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062131145 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06207434 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070226 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064955711 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070470106 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065837119 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07765777 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061363283 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07257868 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069784837 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071112493 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07418211 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073065087 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068545678 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061075621 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067986072 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068628008 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061167574 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06496126 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063087321 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081400363 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061548862 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061183725 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073936911 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065906371 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059816335 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065709217 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.208241233 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071738939 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062944345 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072370255 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065669712 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062301683 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065676 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065847021 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060130096 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060544224 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060612799 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071066119 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065323445 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060739993 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080023201 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062110716 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069542601 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071735452 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067243407 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062375619 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059320342 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061448664 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074285424 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076224061 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064315119 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069615653 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062182231 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070057189 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059489513 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069581597 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069200634 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069958267 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060168141 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060804392 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076909123 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076502964 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065156933 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070126049 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069917436 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062177276 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083217018 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069567988 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06204013 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072286313 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063241985 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060133339 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059831118 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062159835 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072329859 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060074435 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062814077 seconds)
  done (took 41.90693528 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09614964 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060831624 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060474943 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060189735 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068568806 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061640634 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060764122 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061317269 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061474931 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06315852 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060857993 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062954106 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066830851 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073884479 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068969612 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064124398 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060204522 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061437583 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060332745 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061490854 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066916332 seconds)
  done (took 2.807543005 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062417023 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062555496 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0627379 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063024883 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062308386 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060120639 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065018924 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060257332 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065138146 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061099334 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065055566 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06059106 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060816546 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060901801 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060766325 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062463816 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065078733 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064186259 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.0602729 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064342744 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061976215 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064275635 seconds)
  done (took 2.800134957 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061082859 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06121601 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069311944 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059771428 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059539655 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063638507 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059549823 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064488306 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064580081 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064384449 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069302935 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060649121 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059646545 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065622656 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059233606 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060833833 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103774935 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061237652 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060983924 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059607822 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062542949 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069842487 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060174097 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059881966 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064574272 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063237863 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060001208 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062736554 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06174313 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064492893 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061170048 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059760393 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069653603 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069024563 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064268021 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064389036 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061714879 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061206019 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059858817 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060137213 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068956673 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061571403 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060172843 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061641643 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069692627 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059618312 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059467998 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069830983 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059530327 seconds)
  done (took 4.548636576 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069127084 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112972155 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066156679 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09387592 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07348611 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066766431 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065740993 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095051668 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061039227 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061905158 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074289239 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074662328 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063364662 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064325691 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067361623 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06283871 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063630594 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06254149 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064383076 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06115587 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063905068 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066140185 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.0714764 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071366166 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062268557 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061179586 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062756264 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06408258 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.072907881 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066297395 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064492954 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065232607 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073327278 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06587146 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062725388 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062951155 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074168077 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063280637 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062864418 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061270173 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062828632 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064333226 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067597502 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074906063 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063020681 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067951106 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063003024 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061271499 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073568837 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063255955 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067166266 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074989781 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064045717 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063552721 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064927691 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074121462 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063292146 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062062521 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06336202 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073488229 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061583752 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064225712 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076995602 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062920268 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066962063 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074477645 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066967979 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064382548 seconds)
  done (took 6.18529035 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06773505 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095184732 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076886654 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075937734 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070814164 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070924045 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070915023 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070826096 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07068224 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074293692 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070905192 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105900887 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067154407 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072811745 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072861344 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071191179 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071093944 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07135444 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071050264 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070849739 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070856468 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075874342 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071236209 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076068644 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074059397 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067314165 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070778745 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071018017 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076490691 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070525755 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073437931 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070844046 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071335649 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076470029 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073368735 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070899763 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061216523 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071026848 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07084713 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070941939 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066966601 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076245521 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070633699 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066909162 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07089695 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070855943 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076831048 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074629666 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072969731 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07458164 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071143321 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076311802 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071035089 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07097011 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076665244 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078827223 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076897881 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076246488 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07113705 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077168885 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076644246 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079051313 seconds)
  done (took 6.014071567 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071719306 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065001574 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077439122 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059271229 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059897508 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069945415 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059881027 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060934691 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067363436 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06731335 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06876091 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069444254 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071581731 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06844337 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069618665 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072180226 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069363048 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0699214 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067312572 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069775348 seconds)
  done (took 2.815558916 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073647922 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078345588 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066010299 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069295722 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065387541 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069572011 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065203594 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065476003 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06668907 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066118758 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070882826 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070692433 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066270024 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069545536 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070483265 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069702663 seconds)
  done (took 2.544196636 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062368288 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066801989 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.064912168 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.05980085 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061749268 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059093423 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059985868 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05835235 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061395246 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072970553 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060011054 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062547158 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061201515 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060206357 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060828471 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063769386 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06284642 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060871136 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061401716 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06571087 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069845395 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062270444 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063842085 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061216477 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063466064 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070054116 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062582921 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063819801 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060986979 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063530737 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06364771 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067732296 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063823347 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061477531 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060482602 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061481424 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061596622 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063943696 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064686376 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06166985 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060026971 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065883934 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06151703 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062127739 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062822373 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063930106 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063034403 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066638443 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061967693 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06368469 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061513088 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06318615 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061887861 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067456373 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062705194 seconds)
  done (took 4.908592652 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076153563 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064302504 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058674153 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05867985 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06396564 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06464713 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064896977 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06387136 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064379256 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058789205 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064812228 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063840134 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065419987 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065604853 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066154441 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065609396 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059874169 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06582375 seconds)
  done (took 2.615312429 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.064664344 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064444733 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063206211 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060818981 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061839408 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066618401 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06045921 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061711099 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061636307 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06222381 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061691201 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061444516 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061982814 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061355835 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066317179 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061946856 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061349402 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060097707 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062315106 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060202784 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066605628 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060152262 seconds)
  done (took 2.823623047 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086006651 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082164479 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125328238 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080062955 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088555461 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071406324 seconds)
  done (took 1.987340746 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091547376 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096995182 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064765383 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064901033 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070321953 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067980404 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068115775 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068504711 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071924783 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072738462 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068317256 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072042374 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071556638 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073523284 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070403862 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070389125 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068493147 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068396761 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06584536 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076240197 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068767197 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072235018 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06864892 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068598367 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068550268 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074046884 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071819831 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072552872 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068224041 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072079219 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070406706 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068662731 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072165077 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072491037 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065196935 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071668922 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068600882 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076411223 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070332075 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073756443 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064973901 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069846922 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071834634 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071711723 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072128286 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068610999 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072075561 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068838254 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068721186 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077654079 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070833536 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074011137 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070509884 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072525909 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072571758 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078030007 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072663087 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074413335 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070802633 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072635746 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074443988 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070998585 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074336458 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072919377 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070838071 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074479868 seconds)
  done (took 6.186020553 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101728159 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064551348 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069045191 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072694817 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074179658 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068735716 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069183846 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068768134 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068914531 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06622846 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104636909 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069239453 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074393215 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076778418 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069280157 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072164854 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068864398 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074276851 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06653743 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077203333 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068918557 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073624369 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073960768 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073858163 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072092976 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07054169 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068565547 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068229203 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068569747 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068444203 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071488036 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068915031 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074096336 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066125557 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073645247 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068718604 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068662121 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071670181 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068594159 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070366998 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074207857 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076804197 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068574295 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068560729 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072752149 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068090766 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068756022 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065553539 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068873665 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065747433 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072328349 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072856903 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072756657 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074271444 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069244452 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068931817 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068819962 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068790378 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068867609 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070835258 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074437559 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068859546 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078658534 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069297676 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068797706 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074213256 seconds)
  done (took 6.201008484 seconds)
done (took 128.367261817 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216070341 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187721613 seconds)
  done (took 1.8411556 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072589003 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163285483 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07274836 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072843701 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108038479 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.104885102 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073360216 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070990229 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07405378 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071321828 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138616202 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07363227 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070136144 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071263487 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071332417 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071492943 seconds)
  done (took 2.837280585 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.104621649 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.182856057 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.101312065 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068975594 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.1512906 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076415972 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071055735 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076148761 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075969502 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069080049 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106595413 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082680647 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074799073 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076073055 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071193339 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074867436 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076177717 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076442172 seconds)
  done (took 3.080711702 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100993132 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089292418 seconds)
  done (took 1.65605827 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.152610182 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102695623 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141884228 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.341092298 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137684249 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138448068 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.140305152 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138402276 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110553795 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131045965 seconds)
  done (took 2.99364 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.102949531 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102310216 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30753213 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102082919 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081365899 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075968696 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073997464 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078937887 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074358601 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07528738 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124434732 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073767664 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071124079 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123547341 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098614232 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105306089 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069452209 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076846508 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07848397 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069601272 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075521256 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078864025 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176205534 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077135656 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099645901 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074294955 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076870415 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073450386 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073275291 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077732441 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07879433 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099301751 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077373697 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.081399301 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076181475 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096306855 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070611879 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098358103 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073548302 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071008773 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074154756 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078537039 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070889873 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077723716 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074335041 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07623133 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079112935 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069886974 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073914834 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073544957 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071141326 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075441408 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074949652 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07616903 seconds)
  done (took 6.19517839 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104273653 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.104780984 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068808329 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111922295 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104742953 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0691004 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103579105 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.09952078 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.107641183 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06892987 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067924595 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068200944 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07516951 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080539575 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115110817 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.104968972 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068995764 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068812948 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106233538 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10671001 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067824292 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101303477 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098927606 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106397067 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067714424 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068634527 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067686117 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067998298 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073066179 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073998498 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068213407 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075012372 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082953729 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07254272 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066244957 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067540451 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067413795 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.074430003 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075769437 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075409274 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074178816 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066889314 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067500093 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068018562 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068388051 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067094722 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073895765 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.074888621 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074102044 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06755658 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068101438 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067699519 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067912761 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07466169 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073766914 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075926273 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07529235 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06759036 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067789695 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069386137 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076122902 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079257201 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075922882 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068731025 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076301081 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067659499 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077209329 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07986943 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068056612 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068377242 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067864003 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067677471 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068665108 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073776255 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074335975 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068501425 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067977615 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068260123 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076619943 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074595672 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068251913 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073523714 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067178216 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068018395 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068362135 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068420455 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073737764 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075349163 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069141381 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068257415 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067913302 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067968276 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.0670964 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073896393 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075257667 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075174905 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074359815 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06866295 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074594975 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074101666 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068208461 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073849493 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067282401 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067614332 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067795297 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073290513 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072173961 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074539755 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067670965 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066944571 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072878677 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075011612 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06752447 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072609115 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07545563 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.211349895 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067131805 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078181887 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069056002 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077675765 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068791576 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076913241 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068698453 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074430961 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068276262 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067195544 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067900354 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074195867 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068353085 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067833543 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068094102 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067574814 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073976787 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077907744 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068842728 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073930561 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074259929 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06857936 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07383982 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067968866 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075392611 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068350554 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068128015 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06684067 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076813544 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067592806 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067532251 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06749921 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076406683 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068434141 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076173869 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073676486 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066813055 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080563595 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076413959 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073726713 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076410413 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06882867 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067972337 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067691914 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070015679 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0729696 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074307826 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068310359 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067560567 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073634051 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076203926 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067551737 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073934959 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074190586 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073824609 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068638087 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067741828 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07728588 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076997749 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074805294 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074472898 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075155684 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06792911 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073753673 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.0744548 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067858589 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080002479 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068502906 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078370093 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075031673 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073673218 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075261721 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.075972333 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076748218 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077247661 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07851128 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068214572 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067923051 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074416401 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068222842 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068419561 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074265411 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069028078 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072859573 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080013605 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066722371 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075222167 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066750532 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075423269 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067639 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068206304 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078882578 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069060107 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068568935 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074115756 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06800148 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073989 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077657235 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073789816 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067847274 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068380186 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074878085 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075094424 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068053603 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067856994 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068388566 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073681784 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072963987 seconds)
  done (took 18.139828782 seconds)
done (took 38.221442581 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.165820178 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112025169 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208199577 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202330485 seconds)
  done (took 2.25566389 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097455995 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062648946 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077444919 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087345555 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.062641717 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073752026 seconds)
  done (took 1.972390769 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.197809893 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172781863 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241834678 seconds)
  done (took 2.11334638 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.361068371 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.144910246 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217535863 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.496860205 seconds)
  done (took 2.826441251 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.106579965 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097279165 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07478315 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108831102 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08433632 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061513763 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133704173 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068536576 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099828943 seconds)
  done (took 2.383668402 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138107349 seconds)
done (took 13.220614538 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.231390235 seconds)
    (2/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.105271185 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.219718946 seconds)
    (4/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073947701 seconds)
    (5/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.329346525 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.155026117 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.128132943 seconds)
    (8/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.179428168 seconds)
    (9/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.183289858 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.21876191 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.075716337 seconds)
    (12/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.177461473 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.207255374 seconds)
    (14/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.290847154 seconds)
    (15/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.197282426 seconds)
    (16/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.176204747 seconds)
    (17/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199417322 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075138296 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091521702 seconds)
    (20/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.137929957 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091204509 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07681289 seconds)
    (23/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077753472 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142027916 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077138629 seconds)
    (26/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.182105509 seconds)
    (27/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.217656211 seconds)
    (28/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.093501775 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073214039 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.243958807 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07358277 seconds)
    (32/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068150626 seconds)
    (33/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.231571517 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.141122469 seconds)
    (35/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.15014461 seconds)
    (36/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190194725 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.207360117 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088536528 seconds)
    (39/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073876575 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072233717 seconds)
    (41/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162451785 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064535886 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076020599 seconds)
    (44/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.18147427 seconds)
    (45/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.06580759 seconds)
    (46/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.20003758 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.070641917 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129329198 seconds)
    (49/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.232755444 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085868276 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084025055 seconds)
    (52/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.164011165 seconds)
    (53/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065665037 seconds)
    (54/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.228079409 seconds)
    (55/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.078781245 seconds)
    (56/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082310302 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.128777987 seconds)
    (58/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.08345988 seconds)
    (59/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.187839043 seconds)
    (60/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.157684026 seconds)
    (61/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.08218399 seconds)
    (62/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.193641177 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068024316 seconds)
    (64/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.116570603 seconds)
    (65/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075776331 seconds)
    (66/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.201071253 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074162999 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086757529 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06646676 seconds)
    (70/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08061156 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.090103358 seconds)
    (72/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.162048172 seconds)
    (73/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068075766 seconds)
    (74/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072590143 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.231210463 seconds)
    (76/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.077195369 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.072348458 seconds)
    (78/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064708463 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073110004 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118691663 seconds)
    (81/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074931946 seconds)
    (82/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077466769 seconds)
    (83/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066445871 seconds)
    (84/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074022131 seconds)
    (85/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079538011 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06502579 seconds)
    (87/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.202108195 seconds)
    (88/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076426966 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088082084 seconds)
    (90/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064897413 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123715099 seconds)
    (92/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.167123129 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152169195 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06749585 seconds)
    (95/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.076495209 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.197860293 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132339637 seconds)
    (98/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.142176455 seconds)
    (99/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.148065696 seconds)
    (100/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.0726878 seconds)
    (101/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.081831057 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.085291976 seconds)
    (103/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.141918184 seconds)
    (104/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.197535672 seconds)
    (105/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.209095152 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072615309 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.073599248 seconds)
    (108/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068608795 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090562004 seconds)
    (110/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080276327 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064291571 seconds)
    (112/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071042757 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.091115728 seconds)
    (114/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071756091 seconds)
    (115/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.199543081 seconds)
    (116/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064969212 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073308414 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065462233 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091121155 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065537862 seconds)
    (121/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065446719 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.071819963 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.079401393 seconds)
    (124/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.150979389 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074881029 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068474486 seconds)
    (127/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143004849 seconds)
    (128/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.196770466 seconds)
    (129/341) benchmarking ("sort", Int8, false)...
    done (took 0.149309902 seconds)
    (130/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06509759 seconds)
    (131/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07197125 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.087612944 seconds)
    (133/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137569217 seconds)
    (134/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066789915 seconds)
    (135/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067622408 seconds)
    (136/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.161765712 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073827164 seconds)
    (138/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062861942 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064941192 seconds)
    (140/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.064576092 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083844176 seconds)
    (142/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077239039 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065546789 seconds)
    (144/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066999523 seconds)
    (145/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.219932147 seconds)
    (146/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063215005 seconds)
    (147/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065108975 seconds)
    (148/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075885829 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072676977 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074621047 seconds)
    (151/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075775828 seconds)
    (152/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072091124 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074048149 seconds)
    (154/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.22032399 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 0.144079641 seconds)
    (156/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077438894 seconds)
    (157/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066617512 seconds)
    (158/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064921165 seconds)
    (159/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074411704 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065801376 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083246221 seconds)
    (162/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.08298492 seconds)
    (163/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178024619 seconds)
    (164/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145696524 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065110996 seconds)
    (166/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066555041 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072033913 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074260976 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165734203 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.066094716 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194051349 seconds)
    (172/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064629836 seconds)
    (173/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.227197105 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.088121852 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.15535961 seconds)
    (176/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064621556 seconds)
    (177/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152937685 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06376206 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082084756 seconds)
    (180/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064555184 seconds)
    (181/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064489005 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.180253287 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06462646 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064311036 seconds)
    (185/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065030213 seconds)
    (186/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.13595165 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072964958 seconds)
    (188/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063917623 seconds)
    (189/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.246040528 seconds)
    (190/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.064915758 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063669547 seconds)
    (192/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067542938 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066131604 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069192001 seconds)
    (195/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.167882434 seconds)
    (196/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.0841591 seconds)
    (197/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065995063 seconds)
    (198/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.144705187 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147545832 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093482045 seconds)
    (201/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074134945 seconds)
    (202/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065874998 seconds)
    (203/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073691529 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133021909 seconds)
    (205/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065075674 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064501288 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151360078 seconds)
    (208/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084149543 seconds)
    (209/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065456197 seconds)
    (210/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065227055 seconds)
    (211/341) benchmarking ("sort", Float64, false)...
    done (took 0.137115809 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063408389 seconds)
    (213/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065041864 seconds)
    (214/341) benchmarking ("sort", Float32, false)...
    done (took 0.13952713 seconds)
    (215/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065340146 seconds)
    (216/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.083405712 seconds)
    (217/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064812708 seconds)
    (218/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090303139 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072401617 seconds)
    (220/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.068743416 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071578206 seconds)
    (222/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066165645 seconds)
    (223/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069345616 seconds)
    (224/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063558835 seconds)
    (225/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064158291 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064237462 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066873971 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064215982 seconds)
    (229/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.140494784 seconds)
    (230/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.065895769 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143018119 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.15157958 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064616079 seconds)
    (234/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083066628 seconds)
    (235/341) benchmarking ("sort", BigInt, false)...
    done (took 0.263007831 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076987318 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075083082 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088015916 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150479715 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066566379 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11208171 seconds)
    (242/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065333306 seconds)
    (243/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076545842 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152829046 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072077398 seconds)
    (246/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064894466 seconds)
    (247/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06480831 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087890134 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083660661 seconds)
    (250/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.0645178 seconds)
    (251/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069107078 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071770043 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068613057 seconds)
    (254/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064810108 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090080408 seconds)
    (256/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080678247 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063153902 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072391343 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090958305 seconds)
    (260/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064825817 seconds)
    (261/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066982177 seconds)
    (262/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063624859 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066136852 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088990073 seconds)
    (265/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067200526 seconds)
    (266/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069472426 seconds)
    (267/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065487512 seconds)
    (268/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072150552 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077541261 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08614156 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08419568 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064469486 seconds)
    (273/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064840394 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069444633 seconds)
    (275/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.07939517 seconds)
    (276/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072835115 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065351058 seconds)
    (278/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065644291 seconds)
    (279/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071873364 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064105971 seconds)
    (281/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064856679 seconds)
    (282/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064978553 seconds)
    (283/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064948366 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147625949 seconds)
    (285/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07440309 seconds)
    (286/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.0654212 seconds)
    (287/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.190942615 seconds)
    (288/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063361354 seconds)
    (289/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.068716411 seconds)
    (290/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064780064 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065309286 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125853711 seconds)
    (293/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065486535 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149359727 seconds)
    (295/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092614725 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065243884 seconds)
    (297/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.131177587 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065100894 seconds)
    (299/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064997172 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13282833 seconds)
    (301/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064998548 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065543919 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171957675 seconds)
    (304/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065626934 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063970073 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064735748 seconds)
    (307/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065684028 seconds)
    (308/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066415447 seconds)
    (309/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062247906 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06440647 seconds)
    (311/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064618169 seconds)
    (312/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065954296 seconds)
    (313/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.066575868 seconds)
    (314/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141342408 seconds)
    (315/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.064584363 seconds)
    (316/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.06379703 seconds)
    (317/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065370548 seconds)
    (318/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066161564 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06519825 seconds)
    (320/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.066341331 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075308764 seconds)
    (322/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.341245709 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066090988 seconds)
    (324/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065506928 seconds)
    (325/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068100862 seconds)
    (326/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065453796 seconds)
    (327/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068662282 seconds)
    (328/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06475905 seconds)
    (329/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073057555 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065677767 seconds)
    (331/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065753781 seconds)
    (332/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069681959 seconds)
    (333/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.06542285 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068124794 seconds)
    (335/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072055726 seconds)
    (336/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.19057967 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068189296 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125642401 seconds)
    (339/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066000185 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069434639 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169775427 seconds)
  done (took 36.718778505 seconds)
done (took 38.244535862 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.086101228 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076232987 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.074351483 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072133463 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.0751911 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073620944 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.074861411 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073376268 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.074802152 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075621771 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075581836 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063742198 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072649862 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079509687 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073227739 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079754041 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076475509 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079114201 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064662731 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078790405 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092460084 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075310018 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07266144 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078228398 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06456843 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073928165 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088861452 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08614693 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071555175 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074031363 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072533964 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082321101 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072047741 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070566435 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074229379 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070452194 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074103448 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071527104 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089025915 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070149109 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065111892 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076864834 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072074535 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072926337 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073312227 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076772781 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070030079 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078162161 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064238877 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075970441 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088395283 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069255209 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070637567 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072872334 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069579112 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074366391 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071036599 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076373512 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069721922 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076083665 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076211651 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073233206 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064294743 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073503311 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071639339 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071979568 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063307531 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069399502 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064461164 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064848627 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063305996 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073142609 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071338393 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069416155 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063880539 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064129075 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063641571 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076652214 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070525532 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07458774 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064391804 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070087635 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069278518 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064656836 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069641518 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075869613 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063517322 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064380003 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06374146 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078476068 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070696127 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064273243 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075859739 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069539139 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06955218 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06428448 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063278835 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069459565 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072745151 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064323307 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063074712 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070110218 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069153139 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072825037 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064799016 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069926475 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06965211 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06322491 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073328932 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071295463 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073379921 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077310825 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07311681 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076362343 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064931131 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063028976 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073632789 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065100342 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069587247 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071703967 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069418056 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072536778 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064467281 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063139687 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069693267 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070402422 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064681895 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064947884 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064438725 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073963204 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071310482 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063317896 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064262563 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073212965 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072969762 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063566846 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063590737 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073965759 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06448184 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069490595 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069455593 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072082208 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063024164 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063973954 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062693272 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06294146 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062818102 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069154246 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072634915 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064168372 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072235635 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.21608302 seconds)
done (took 12.577139982 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064456857 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105277818 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078378523 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080938907 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078412718 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065784971 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069055547 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08423701 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068336947 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089873204 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.090980194 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086648341 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096376341 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063551153 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064768385 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065516535 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063023461 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077257059 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081929934 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088468196 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100690064 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064502565 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081303074 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084968176 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079490401 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082700153 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066296887 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065905818 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067950868 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084149788 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090911105 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064686978 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066251229 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083445206 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080781744 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07337446 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065772343 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071705284 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068212104 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065084958 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066807767 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082746317 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071685443 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072313887 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065422768 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.064685503 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.063870197 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070293249 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080693881 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069000593 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075893436 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084163173 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067600844 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065820649 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063464741 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072579261 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065412205 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066187357 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065705405 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064908054 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065461911 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067735472 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07036953 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071479793 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068886602 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071858627 seconds)
  done (took 6.474935677 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.0791824 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.088991838 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07832012 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080220501 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06429784 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065301315 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065571933 seconds)
  done (took 2.159596171 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064779386 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073283698 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07804902 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077504165 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087357805 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075243122 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065616201 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097349313 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064524382 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074042388 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081730852 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079247132 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068753378 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077991025 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065790999 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.077313879 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065490401 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072425882 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073636616 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079013887 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069777677 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095905176 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079011293 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065806082 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.079114048 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073099565 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06778053 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065953408 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065963113 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064955992 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06497668 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089224972 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071890078 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078015063 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06557515 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064432697 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069723045 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065698913 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.069748958 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074526753 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069328087 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065352636 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066058167 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065169528 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06629456 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069993596 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066029632 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065104756 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065157748 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073023817 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064338268 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.071929418 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06787699 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070516892 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070052984 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069667072 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072162729 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065541259 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072681027 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071484426 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065039642 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078129739 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077114152 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069054093 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077552756 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073978358 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071962619 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069367931 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064596275 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064386852 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065290742 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077258644 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068495627 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067418519 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065998075 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069948191 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068945858 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.080672447 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.080932392 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078703061 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067634413 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065350285 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069108713 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.080872671 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070436348 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065158346 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066334088 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064944062 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070277939 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065113621 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070227661 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06550586 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072331218 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067876288 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.067471609 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073756166 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065444943 seconds)
  done (took 8.523217317 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066422791 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067758351 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066417965 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066913003 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066820243 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066753755 seconds)
  done (took 2.071919513 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087184068 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064204269 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076183653 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065947078 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088168337 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.072670739 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.072432631 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067797462 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.08199454 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076527804 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072252188 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.075136238 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075483525 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067478215 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072467873 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066645892 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071952111 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068974586 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.075585686 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068183435 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081779332 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068062694 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067853033 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079241136 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068663056 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066526987 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067005447 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075901931 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.075582308 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067345532 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067035129 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068452475 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074331558 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067456267 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072248962 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074378302 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065527625 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071076089 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068189224 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068740155 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.074342447 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067371027 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067764775 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071463187 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.06736655 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074523929 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070923978 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069669075 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072041469 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07088951 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071262441 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066124655 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06858483 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071291827 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074102313 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067213539 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071478373 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07197991 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067262356 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074612215 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065634055 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068811275 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067673438 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068647548 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070877147 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07133012 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074823047 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067630799 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069610943 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065827515 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071125885 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065505805 seconds)
  done (took 6.753415547 seconds)
done (took 27.600684643 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542993311 seconds)
  done (took 2.154532818 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.887826213 seconds)
  done (took 2.540844038 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.020376106 seconds)
  done (took 9.67718903 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.342376883 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.405973033 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726925249 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.12942279 seconds)
  done (took 3.301996269 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.753565364 seconds)
  done (took 2.416773873 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226240557 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217733616 seconds)
  done (took 2.116842859 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331107502 seconds)
  done (took 1.983527424 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.151826207 seconds)
  done (took 2.803340399 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230152343 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159144155 seconds)
  done (took 2.051777159 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.532422521 seconds)
  done (took 2.188467485 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.224563699 seconds)
  done (took 5.883415034 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.227409524 seconds)
  done (took 1.92944487 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.22561647 seconds)
  done (took 1.890503424 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.001435972 seconds)
  done (took 3.659529093 seconds)
done (took 46.259508249 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.080863328 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08347314 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083244541 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078685897 seconds)
  done (took 1.960952738 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071585297 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067561452 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070601678 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.070996128 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068806091 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069778995 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07155776 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068780448 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070692281 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069335893 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067890651 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069130909 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072012069 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069411939 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071722792 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073087209 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068970925 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068916198 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071700284 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069036109 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072199177 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069286944 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067290284 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068882237 seconds)
  done (took 3.337756338 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076387842 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070678653 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074187275 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070555205 seconds)
  done (took 1.950325762 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074240514 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.073743025 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082544352 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087197985 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073245232 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076076795 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083105898 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083551579 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06472628 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086670896 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067421344 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065882189 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066167971 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08548517 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082524119 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061873941 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06308344 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076596406 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07522707 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077948948 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067690469 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064942754 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075632496 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076404192 seconds)
  done (took 3.451488197 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079882976 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06447096 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081213695 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090538869 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091320027 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064742838 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07903479 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.0922998 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127679552 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064911052 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.070766927 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064691812 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104813489 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06514908 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080543621 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108468325 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111695163 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068735104 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098367461 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06485851 seconds)
  done (took 3.341671243 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073688397 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.066864694 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067577322 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063154512 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074389964 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072053292 seconds)
  done (took 2.095035112 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.065866539 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065552548 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066958577 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069639211 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065680892 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065285428 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064973117 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063808851 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063618014 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064607677 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065451868 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066861176 seconds)
  done (took 2.458326716 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145985707 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066490575 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067503346 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064082 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065315624 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064370406 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079106129 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067995344 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084781332 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066016036 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066593624 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068323464 seconds)
  done (took 2.576765963 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101647106 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108158199 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141789781 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114151213 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114339301 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095416263 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125241087 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095021244 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15987396 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136472316 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116380417 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093018842 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086433387 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068912928 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099398014 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118559984 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138043383 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072474527 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113384157 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.16524428 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132615825 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134916035 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148325945 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116809626 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090097443 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148268523 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097286293 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102222952 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124354312 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126058344 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119164887 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097327868 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070812698 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070254729 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149196656 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103383439 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121182555 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092556323 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105014076 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08761292 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107096133 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068796837 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085268082 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113228554 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08430814 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131633092 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087536215 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115152175 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081182159 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137373603 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121815012 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096127118 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084626295 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101632425 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.285887544 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109602405 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131031856 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107555476 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082877749 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11832977 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102417696 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101096779 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107202734 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079755573 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176959193 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087644572 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.110178884 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109359735 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092853693 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094164536 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106695908 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135870749 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125102199 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.124921611 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136845165 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092085433 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118638854 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097085702 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125751831 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101682351 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071434503 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121463131 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128605995 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098938024 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101085367 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130161756 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091365136 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076664459 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098847516 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118067862 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079814059 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112505701 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080336077 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10902292 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134603213 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097087537 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111804005 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117263633 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077343436 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155898437 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108976362 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071922994 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116859744 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112257157 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153995994 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093677506 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07520766 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098735199 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.258961277 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146459032 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104680462 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077990083 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110580218 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139803171 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094968409 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169553859 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09539379 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140158138 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111857437 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086883974 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074177741 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089230597 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112286301 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106604559 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111941163 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089716672 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083526828 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086292475 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111413445 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091398254 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079919006 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112790769 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.100904589 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074030461 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088751016 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078518285 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142138101 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077700651 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137818173 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125573364 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078335371 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106128453 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097610462 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108897266 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097682829 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116403323 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141008527 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116326025 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089966475 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.093369573 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108001701 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144500133 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127499044 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092152469 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076237875 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10029988 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112253344 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097560235 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126498933 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100152118 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108782437 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103236292 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141326652 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143212627 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099270795 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099630355 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104279827 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.281384743 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075549598 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155905391 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103929169 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118089051 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084409978 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140743333 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.113886148 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089184239 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086825939 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100156488 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.103865767 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106204724 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142486567 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094866477 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071360222 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092395201 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143009748 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075677202 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109071503 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.089815934 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09191424 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118207218 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.092591611 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080861564 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06738668 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127540299 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158767236 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069065167 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114067693 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.111194918 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103694468 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121388905 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068768477 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119337573 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138561617 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117809451 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140965518 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14716356 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115203922 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116083256 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114298273 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105712151 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079039295 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124855963 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13523882 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096270641 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092783696 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135888477 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118053821 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133514831 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113786413 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112137954 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102311032 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.264698621 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101006927 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101893397 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144783916 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120932531 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124129746 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084975678 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105216609 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117231978 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134378167 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082006693 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141345251 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.083077644 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117401245 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076284433 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123151371 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078490559 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110283657 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078458272 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099571715 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068457407 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073088206 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14057946 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.111631625 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105697978 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099674824 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137668467 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136215758 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08050104 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107874559 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115653214 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101275085 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116409054 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109269794 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088672318 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094740873 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108589403 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084826877 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081463304 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11511347 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094044579 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127459151 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083990392 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074366582 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140893405 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104602526 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095774475 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078880163 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108668015 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121763777 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092641045 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087039684 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115351381 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10492538 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142634187 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090010211 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096736952 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123785449 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079437241 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091124994 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068387707 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085506344 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074892883 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.286498665 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076225097 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117076928 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068487845 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130409689 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086488606 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092522506 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102246676 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110811853 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127894996 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093999708 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139442837 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088803462 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118125035 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106636204 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093597997 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08798361 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102842574 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100384666 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.121703514 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09517822 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122164448 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14277931 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104593061 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142082285 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091467214 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121898605 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106740635 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12439383 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11236134 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14740276 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138508982 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113155201 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111609035 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074773473 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094589704 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104987822 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111532709 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174433728 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126383492 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071750086 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108102318 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094042174 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108810836 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105121656 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082547747 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146979113 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102611872 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087967953 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112137037 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090049928 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102272411 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074625732 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094068254 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098202544 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.249676257 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095759642 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112996879 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124452099 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112778685 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14267571 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098384105 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092563296 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.11733223 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109721457 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109554707 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085472938 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086073037 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137794058 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11779206 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128349312 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.09987302 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10848313 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111023244 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099880075 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12436718 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107689153 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.126057386 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080015671 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075025122 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067641816 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071333549 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123205946 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108401295 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11177696 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098626999 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071809614 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103025361 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105891901 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071147543 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08827599 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093944653 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099281897 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091587482 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106919647 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11354689 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090702196 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104283983 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099237877 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145793215 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099881127 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088866633 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14451885 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150895801 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087861903 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092642765 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070657597 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078798491 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113722126 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15067063 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150795912 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076637251 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085084942 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084002184 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084452871 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070026494 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.243441617 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087512756 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102397349 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096772217 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109908876 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101954666 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073341719 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10017207 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096289874 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089752941 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10073114 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114601803 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120774148 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.13659808 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106801666 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103520769 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073457017 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077355632 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073071316 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076491449 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101219759 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077056526 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073594566 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138916495 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.088855886 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101846983 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105484321 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085602074 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073221188 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1337615 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06874632 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13472404 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071001306 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082099364 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082229734 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078464229 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09359226 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139713078 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110025532 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113169833 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106954926 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104515658 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140307527 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155888181 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079796919 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143313878 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075279821 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074797327 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075559429 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113738823 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08988421 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115609022 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141532357 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09113957 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103931757 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07674448 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144579487 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098673542 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103016643 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08581262 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077898092 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140096222 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078011277 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078133624 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087938575 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107937949 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.069380481 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100799952 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082921776 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078051519 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138471537 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.627940295 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088140901 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073350244 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093235749 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136084276 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117040338 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087603059 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099197487 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.109490392 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091365352 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088399795 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099600804 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.175795162 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069273121 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086651621 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.094965597 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091038644 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093264847 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091444703 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.079984933 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.086109946 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08274934 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07666224 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10101492 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083213217 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08961501 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099645556 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077625294 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.080224806 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120159708 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.095283898 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.075086566 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080807323 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.09960775 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082341516 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092261502 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.065171077 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104989802 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086434903 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106316927 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.08564194 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099906582 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117681426 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083588939 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124542502 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.09725784 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113709871 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0820574 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.072908622 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112537255 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080353742 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072386786 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.402150651 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.09654099 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097542935 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107545753 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100120705 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116992579 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120136706 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114105933 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100292835 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080610561 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101872888 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.105046343 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086794893 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079571547 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076111987 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077968506 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109040912 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086539835 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085218468 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117559415 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09080003 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105377905 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101462358 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124989983 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084454005 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103199753 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111592718 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093759105 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111103866 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101571068 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129998896 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176670637 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12621052 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128868938 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132939731 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077218211 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076577652 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068763606 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116446853 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079855484 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090145481 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081446899 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135342043 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082807264 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112513542 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.235358238 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080592975 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095052663 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097471287 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070099417 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083096297 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106330344 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08492022 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078225739 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11655171 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081086741 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125075346 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108760354 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097183522 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095147838 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081459032 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115635122 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105918426 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12956249 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095290911 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075004831 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.27634366 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10296446 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137735361 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072843748 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080506739 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129529412 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104118022 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133552071 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080397365 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151291237 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143518698 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100243725 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134512904 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070694973 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083313019 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088885122 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126630689 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084646474 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111912918 seconds)
  done (took 67.2228138 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.14659238 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140918054 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079896155 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101387742 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.184716157 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194904611 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117453092 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09393522 seconds)
  done (took 2.922356038 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.065709442 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080190028 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079382899 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.206277502 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096024718 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066368184 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072847967 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081552064 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067052747 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067008358 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101412677 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067415742 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06680784 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372441964 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065757317 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07204843 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067050814 seconds)
  done (took 3.532892107 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329177062 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.945219532 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.226215004 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.205165979 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.142658497 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.551532423 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.073285821 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.079851472 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.689489053 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.367418582 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.139494692 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086974335 seconds)
  done (took 19.684183237 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07522098 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077321922 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077112333 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073963964 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.0732576 seconds)
  done (took 2.301873025 seconds)
done (took 118.522651568 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081694755 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170821674 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066563585 seconds)
  done (took 2.121143506 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08023971 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079116191 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079040351 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076765469 seconds)
  done (took 2.171843822 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.073210616 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074508025 seconds)
  done (took 1.995431688 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219442745 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176430777 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091886938 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080426127 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077615817 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078688398 seconds)
  done (took 2.103908731 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.06956331 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.06945378 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069741281 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069955435 seconds)
  done (took 2.131769394 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066088962 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06465162 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066993724 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069631836 seconds)
  done (took 2.12097002 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.083063886 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083939797 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11431935 seconds)
  done (took 2.128709778 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081758553 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082917997 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078104622 seconds)
  done (took 2.097851533 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106852201 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095576337 seconds)
  done (took 2.053307204 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.07834588 seconds)
  done (took 1.930243707 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087717221 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096620056 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136516265 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105021157 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.138043326 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124350203 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074987377 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076371076 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071531967 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07116062 seconds)
  done (took 2.829285807 seconds)
done (took 26.103424343 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077045878 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368295247 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358148657 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084933992 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671814846 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357516895 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.98159211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092281125 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102584926 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068920197 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086523365 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649221991 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.974822358 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327225424 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.958424526 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.32601742 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653099323 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069051631 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067960637 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069113317 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.968420665 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068377602 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068788385 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069010465 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651101904 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376762019 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069541438 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325602493 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068232843 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072736738 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358321725 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069660561 seconds)
  done (took 16.333839066 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067994332 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.122175242 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072485306 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084871616 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070674093 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069754362 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071652498 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069236863 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.1132887 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068807805 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086960022 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067974753 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072463611 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070000415 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089113484 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068672147 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071319065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07210065 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068218947 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069535447 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088219311 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068495473 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069945129 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069900404 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069441449 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082624178 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069887148 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068451213 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06869965 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072525993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072934861 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07006314 seconds)
  done (took 4.286355804 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118833657 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126072246 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072939668 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109936034 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119262786 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070339841 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150270654 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092787169 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116742261 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069142901 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08695979 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068918486 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105169871 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071761381 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089056801 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068486014 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071047196 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06896475 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068315123 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069190381 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087576642 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068438353 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06871977 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068786851 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069227922 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083466965 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069689589 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068205041 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068215098 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072697686 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073852211 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069884561 seconds)
  done (took 4.552722865 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067193527 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070174846 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077408491 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080716093 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066020231 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068200206 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069014536 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066273907 seconds)
  done (took 2.442154126 seconds)
done (took 29.479560948 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07728722 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067498717 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070277145 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086967013 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073159234 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069570875 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064521002 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074269119 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071101282 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070994167 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072713976 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066616125 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069940045 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064372528 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071918388 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065959228 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072521319 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069716721 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070120565 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071701605 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068129477 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071101536 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073929227 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070423086 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070371666 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070332406 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074666454 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071488451 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065647938 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068335146 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067961046 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081079905 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072336827 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072525946 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065838008 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067874249 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07019371 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067708718 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072268093 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074767444 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068135814 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074998161 seconds)
  done (took 4.819073136 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085756586 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.092103013 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086035608 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081118854 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108105289 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081126421 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090707399 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078886304 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077104369 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090645518 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073294057 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07915744 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080783451 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075088922 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077692146 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074105975 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079818163 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073318926 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078011826 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077843034 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091556739 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071047102 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078435969 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079509728 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073150271 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078924848 seconds)
  done (took 3.993018084 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07089741 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087372978 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090847898 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139358227 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.10953661 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082608407 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081588859 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093654236 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100821014 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068146256 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071803608 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094992511 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096557944 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074983099 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106185374 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086520666 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080086226 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.06926025 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074736894 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102314542 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090648352 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086648338 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10089288 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087483318 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066539346 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076988549 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074753328 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084604694 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075141966 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080593943 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071928855 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071195094 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06809027 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080378767 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074432904 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065285252 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09000394 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080543496 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082436202 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106175298 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077713123 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069175026 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098278977 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135686577 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067018446 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070288473 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071538514 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081051572 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069207866 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097711285 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086749903 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066974219 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086798687 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068810391 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068798178 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084209998 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068780435 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.109772601 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079608896 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073538097 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088246155 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072600413 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089830852 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067191143 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079214334 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068638196 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068823347 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065735453 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103551726 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074732042 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120558928 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068665228 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065322232 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080027706 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079157324 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073991255 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067135807 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087783868 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080086049 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071072443 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079628757 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070588313 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070891548 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103387449 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066391859 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065758845 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065562842 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069806143 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070455682 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067842124 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080877 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066601605 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07075572 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083237182 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067532167 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067546598 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070133299 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068978001 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06709407 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078771623 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071752595 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069231996 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080488956 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068779767 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070711523 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082923573 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077126633 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066738786 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068535176 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070097337 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069573227 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071810987 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070770171 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069765434 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074783905 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075041148 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073830636 seconds)
  done (took 11.16466356 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.159259825 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.149076355 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066850411 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144891742 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074072098 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07027392 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146740747 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085961037 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.06641164 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067664622 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065783727 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094189307 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089292971 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101318284 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070068651 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066681325 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091289829 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099218572 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.148588944 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143619964 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089676243 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074201189 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068568787 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067228108 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06727371 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.074970735 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083506867 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074175045 seconds)
  done (took 4.522060626 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072432826 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081156715 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.06959648 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089478024 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083842599 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067285807 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070145855 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069469928 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085112542 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074560099 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068020251 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072460511 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071939738 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069351455 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06942688 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07469678 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074767546 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06712153 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07103736 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072247041 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078578925 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094211579 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072180477 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.06794168 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070642467 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067897528 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075092739 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077258513 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067444873 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098459803 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064765315 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07207795 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082044118 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068788864 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06767545 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067907622 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067713014 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067777606 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068180103 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065603612 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065591975 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073069557 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066491508 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073885048 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081984379 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075818656 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068913345 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07284445 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070340174 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064759447 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071494213 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071138301 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070374746 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076312345 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071434539 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070348679 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069134635 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099201043 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074320614 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067327032 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067437552 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066122786 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069588722 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076086805 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08448424 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069798717 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065976557 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06780284 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072792657 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08208782 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067431004 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073127456 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064554876 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068020375 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070465643 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071292587 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069117975 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066263972 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067422279 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068100916 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068345248 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067614598 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067715122 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070037243 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065359575 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066136932 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068718041 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068992448 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074169018 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067037343 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070728031 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069064995 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066637632 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07042165 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073603719 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070757047 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087935199 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076699517 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068367264 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066024044 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082408648 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069762101 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066962331 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073529689 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072386415 seconds)
  done (took 9.482332802 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088268315 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067727555 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085491094 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092022361 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076199767 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072866094 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081767177 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068512843 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084415078 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066767638 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076950646 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065907794 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081397638 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07704327 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069575808 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078403461 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070694232 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088383351 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083030336 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066703927 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076547694 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080390479 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080668467 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086319559 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085856112 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087298622 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080045778 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070567523 seconds)
  done (took 4.118359612 seconds)
done (took 39.966591064 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.945187797 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.122890312 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.949851121 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.221419166 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.019837732 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.167440168 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.062820556 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.935644628 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.969496292 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.002194037 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.248919 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.331324732 seconds)
done (took 67.917464797 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.987537001 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.084902415 seconds)
    (2/2) benchmarking "String"...
    done (took 2.152206971 seconds)
  done (took 6.097621503 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.538372403 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.936654411 seconds)
    (3/3) benchmarking "different"...
    done (took 1.984740337 seconds)
  done (took 8.335964459 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.041866065 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.571646288 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.192372524 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.935913541 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.942067038 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.34061942 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.755772285 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.406733306 seconds)
  done (took 33.019511539 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.263003281 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.199935969 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.660121081 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.699025087 seconds)
  done (took 16.747753196 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.539715216 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.19848718 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.199694642 seconds)
    (4/4) benchmarking "different"...
    done (took 2.196066179 seconds)
  done (took 11.06947049 seconds)
done (took 87.270256906 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.939044062 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.981487701 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.987579464 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.092675259 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.958347038 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.968113508 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.948508245 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.973367364 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.93942589 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.9433314 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.344344607 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.938357351 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.9364648 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.975360354 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.949101897 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.946725136 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.484519542 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.947920353 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.988620907 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.479152137 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.458894211 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.944643845 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.950887634 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.17043731 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.064133649 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.980541066 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.019941305 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.950397511 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.626078769 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.963728147 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.948386316 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.944219456 seconds)
  done (took 209.619509143 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.944412421 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.796633153 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.874334429 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.989956978 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.235084788 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.140064579 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.089504123 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.348379171 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.950081902 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.969602382 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.126098814 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.945346076 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.138254016 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.880442951 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.940607247 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.974021936 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.112919632 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.145838845 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.942593232 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.132950814 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.966406816 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.943947298 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.889902763 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.10338299 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.963018003 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.019564204 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.959457262 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.954155909 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.131308697 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.089844733 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.954096132 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.955601311 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.145067052 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.815422951 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.946947856 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.96617012 seconds)
  done (took 175.362782634 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.128642336 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.956931271 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.008928658 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.082481107 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.709031755 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.68963115 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.949337078 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.946712119 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.947546261 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.953656405 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.945333021 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.948721105 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.01433024 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.827094661 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.960444374 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.946465794 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.94764217 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.65359831 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.949001861 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.947440196 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.946262725 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.010985963 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.321441252 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.083746636 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.949403355 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.95910116 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.085490033 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.958468504 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.950435971 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.085205907 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.951951299 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026373353 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.087876547 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95128919 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.95536344 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.028770156 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.955331454 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.448738919 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.948963665 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.947017856 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.95008392 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.012304533 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.946951078 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.056064053 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037149444 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.948437819 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.961323282 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.024283935 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.619639406 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.948931373 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.947902651 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.948746732 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.948319709 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.949140399 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.948659745 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.666137814 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.952895133 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.975368345 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.589130602 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.953230318 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.950830815 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.950660891 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.949779281 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.94635466 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.958233462 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.986957746 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.756311416 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.325404429 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.338587294 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.766831462 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.952008659 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.218370533 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.010498173 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.952470809 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.029385117 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.949255916 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.950197128 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.948471863 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.948241745 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.041013114 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.030892514 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.950996227 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.086224747 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.952946498 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.948691332 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.359959464 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.85197361 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.95061773 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.961783485 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.00546333 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.949512961 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.949374125 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.958119391 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.038662017 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.95078001 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.949453397 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.950895026 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.050770336 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.950576878 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.497782637 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.172874153 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.022657584 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.194195768 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.188422548 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.956654065 seconds)
    (105/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.949859135 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.95106406 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.967035391 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.952159956 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.950341272 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.96151511 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.951416518 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.949853322 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.954603561 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.952720787 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.952110892 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.952670877 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.96605959 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.952820393 seconds)
  done (took 431.499485516 seconds)
done (took 820.536955016 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.674602414 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.73499612 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.587641688 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.626839606 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.597645583 seconds)
  done (took 15.110017622 seconds)
done (took 16.999199061 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.974538794 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.973582219 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.958200131 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.974701955 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.978019157 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.972153591 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.007179293 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.001985578 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.996571503 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.973059685 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.980819127 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.976079046 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.9770216 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.00348722 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.981321487 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.981858759 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.974274968 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.967596884 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.982040884 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.976639102 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.97653614 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.972577794 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.979484395 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.984029005 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.988291411 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.978949684 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.967877608 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.982913867 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.982097949 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.978159553 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.014403669 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.9861423 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.004437918 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.984615824 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.985019557 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.988228656 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.975190546 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.005084033 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.97985538 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.017325348 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.98715295 seconds)
  done (took 83.221568676 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.960441235 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.099065734 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.180140051 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.995762064 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.961669883 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.175894336 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.018417503 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.092453036 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.098121222 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.184751732 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.185644215 seconds)
  done (took 24.846062994 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.960910749 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.113896586 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.70863304 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.998328751 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.985654778 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.178212063 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.025812607 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.103411813 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.106573164 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.183744534 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.191249194 seconds)
  done (took 25.454626545 seconds)
done (took 135.4119413 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.348397181 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.256891017 seconds)
  done (took 6.49620647 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.960424201 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.975431969 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.111545902 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.963037547 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.96177206 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.960412183 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.960271709 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.963381181 seconds)
  done (took 17.750040101 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.95985268 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.959026339 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.960442937 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.960332385 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.959444256 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.960018562 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.958984212 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.956500986 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.96142053 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.961818405 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.960119384 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.961672952 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.958457108 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.962784965 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.961220251 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.959848951 seconds)
  done (took 33.257967242 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.960972492 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.961203049 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.961335475 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.962225429 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.95997541 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.961495758 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.962954526 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.959950051 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.960182335 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.961996476 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.96136011 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.940526298 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.945365223 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.962082582 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.960046375 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.96164979 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.961384262 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.961222706 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.962886655 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.962917885 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.962408786 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.962879542 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.967477975 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.963075166 seconds)
  done (took 48.944439918 seconds)
done (took 108.349474426 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.189054882 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.600719448 seconds)
  done (took 8.685904071 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.965045948 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.960485036 seconds)
  done (took 5.89286736 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.96140562 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.961824159 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.961283296 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.960339595 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.959390533 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.960884595 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.961952862 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.960579987 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.962053466 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.960846089 seconds)
  done (took 21.508552194 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.961014947 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.963259696 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.961667591 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.961649645 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.963914063 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.963235242 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.962058182 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.964498059 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.963685307 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.965743436 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.960238997 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.962353228 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.963326563 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.96406145 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.964354844 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.964128353 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.961479904 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.960395454 seconds)
  done (took 37.228439532 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.963551897 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.963633488 seconds)
  done (took 5.822532267 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.963168593 seconds)
    (2/7) benchmarking "second"...
    done (took 1.963209048 seconds)
    (3/7) benchmarking "month"...
    done (took 1.963266307 seconds)
    (4/7) benchmarking "year"...
    done (took 1.963078541 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.963441899 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.963684575 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.964248139 seconds)
  done (took 15.639539877 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.966130723 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.115853218 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.167544575 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.559046464 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.966136515 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.967220469 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.843940536 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.966885035 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.968768468 seconds)
  done (took 21.419736782 seconds)
done (took 118.093950284 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.811826392 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.967227077 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.271251973 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.095410752 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.993602328 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.263497919 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.976725248 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.513547329 seconds)
done (took 43.790699555 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.091113086 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.958058726 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.996103716 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.994093989 seconds)
  done (took 22.848338009 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.962604154 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.278969777 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.986300308 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.965719324 seconds)
  done (took 23.104676242 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.339017063 seconds)
    (2/2) benchmarking "read"...
    done (took 2.320624633 seconds)
  done (took 6.562948526 seconds)
done (took 61.508004117 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.966321686 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.964452193 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.965699943 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.966328292 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.965786521 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.967142618 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.966087684 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.967505147 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.965692858 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.966275924 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.964952545 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965168508 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967140965 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.967664807 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965179314 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.965228076 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.966622626 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.967433091 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.965233818 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.966925586 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.966152485 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.96829452 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.966674513 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.967885178 seconds)
  done (took 49.094580843 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.965856054 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.967516635 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.967812914 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.965812128 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.968402829 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.96679021 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.966038812 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.968361091 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.966962553 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.96809161 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.965277383 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.968207065 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.96734091 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.968751645 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.967208058 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.968234803 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.966769478 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.969224912 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.967829977 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.968679843 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.966798087 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966607659 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.967074118 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.968306533 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.968301372 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.969010853 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.969161249 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.969288878 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.968442604 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.968232443 seconds)
  done (took 60.934376307 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.967803836 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.96970025 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.968263212 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.968730511 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.967891711 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.969076529 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.96647281 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.969271365 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.968061042 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.969664724 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.967183559 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.969218375 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.968788161 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.968108361 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.969208314 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.968353003 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.96826758 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.96937292 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.970836153 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.970535937 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.968462373 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.968333455 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.969034128 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.970275435 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.970708169 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.96890707 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.968965039 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.970859008 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.968385803 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.96986196 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.968675527 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.969478595 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.968568698 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.970125129 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.969758662 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.970555722 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.96890845 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.968975951 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.97055174 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.969635779 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.96958615 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.969032205 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.970491549 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.969486405 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.970328446 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.968954108 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.968628691 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.969281877 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.970630181 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.969683631 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.970128074 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.969079812 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.970156832 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.969626949 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.97096687 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.969682092 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.969440316 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.969998019 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.970408518 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.970172005 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.968635844 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.970957723 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.970831462 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.969613569 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.970686841 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.970165268 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.969622107 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.970141381 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.970912046 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.973196805 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.971478509 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.97156513 seconds)
  done (took 143.711858929 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.971726077 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970992305 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.971797156 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.969642894 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971023878 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.971158276 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.970788921 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.970522493 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970808913 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.972374299 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970926552 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.971141619 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972185425 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.97125344 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970431977 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.971168675 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.972371358 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.970354407 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.970720608 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.971424186 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.972868763 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.971157562 seconds)
  done (took 45.272394924 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970347272 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.971784773 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.972437432 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.971602306 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.971265285 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.971857494 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.971962481 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.972851835 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973107545 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972181044 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972596116 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973121574 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.974288315 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972476044 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.971990331 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.973484834 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973317877 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.972031826 seconds)
  done (took 37.409729633 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.972719588 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.972829079 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.972949339 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.973730673 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.97329453 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.97324296 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.972686874 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.972670213 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.972967317 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.973262559 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.973186336 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972474411 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.972927542 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972557975 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973525541 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.973551168 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.974147885 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973788379 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.976737596 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.974201594 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.973708384 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.973198519 seconds)
  done (took 45.322901987 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.973763187 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.974354862 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.973445678 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.974716324 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.974664754 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.974826328 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.974207057 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.973289564 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.972987148 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.97463278 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.973859904 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.97483751 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.974623029 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.973599092 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.973963599 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973692221 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.974240092 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.974768945 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.974452695 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.97478383 seconds)
  done (took 41.391741946 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.974060016 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.975045563 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975696186 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.9759399 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.975218242 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.974967242 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.975607084 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.975374123 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.975005902 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.975664801 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.976373116 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.976480429 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.97485756 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.975199684 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.977701548 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.976193288 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.975558549 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.975413871 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.975896912 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.976124475 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.976136246 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.97671326 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.975651846 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.977675131 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.974459377 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.975666895 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.977372889 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.976423726 seconds)
  done (took 57.232719085 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.975410102 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.976792939 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.976747679 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.976474494 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.975771389 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.975607536 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.97552739 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.975399844 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.976600842 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.975681683 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.976780328 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.977020258 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.976733052 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.976140882 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.975583013 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.974367889 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976011444 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.976547535 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.976983037 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977193473 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.976292171 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976252249 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.978132247 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.978616975 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976919162 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.977699225 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.977643637 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.978803749 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.978059755 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.97715788 seconds)
  done (took 61.210339056 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.995736276 seconds)
    (2/2) benchmarking "in"...
    done (took 1.996362083 seconds)
  done (took 5.903921216 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.978271536 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.977949529 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.97857466 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.977218666 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.97822425 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.976967561 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.977881257 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.978824246 seconds)
  done (took 17.736491839 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.979066687 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.980391331 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.978012216 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.978163575 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.977942534 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.985383623 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.978899168 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.979442788 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.980932884 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.980949082 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.98271429 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.9822683 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.985444735 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.983290201 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.979694086 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.980538054 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.979794138 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.98167809 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.980656707 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.978596201 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.98172929 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.979144409 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.978917432 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.979016196 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.979219476 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.982784063 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.989546602 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.980084791 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.979878038 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.979625641 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.983808165 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.979158304 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.978989034 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.981397589 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.980535823 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.980172049 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.986315428 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.980938299 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.980661372 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.979653617 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.982259671 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982205246 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.983202148 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.98663413 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.979499792 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.981156786 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.980338712 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.981521533 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.980512014 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.983812109 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.988494594 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.981304258 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.979214033 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.980205006 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.983715121 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.980297178 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.980648076 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.98251999 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.98820285 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.987947935 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.983820575 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.00293435 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.990962527 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.980883928 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.982450752 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991017342 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.003965605 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.983340069 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.983483202 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.982783133 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.990140406 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.982093531 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.981656494 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.981576843 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.994202225 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.992186231 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.982647361 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.982153686 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.982213506 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.982763063 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.983383452 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.981672481 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.984170106 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.98238104 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.991926009 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.00590497 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.982741523 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.982807937 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.985496913 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.982874049 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.98687291 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.985655555 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.982386244 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.983924395 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.983349895 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.985151117 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.982463923 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.983280755 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.982292951 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.991235674 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.983557382 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.984827175 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.985966836 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.991261391 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.983103324 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.984711311 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.984224305 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.98338931 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.990856067 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.983309716 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.98307784 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.983649864 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.985717962 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.987170384 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.983423751 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.989248456 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.990189762 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.990411618 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.984289681 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.987058027 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.986940303 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.986446609 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.993981837 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.008247141 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.985310042 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.987794774 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.990360767 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.995202229 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.987040412 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.984636015 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.986798666 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.985117292 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.985267783 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.987841129 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.986905323 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.984736334 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.986199472 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.984558183 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.984620577 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.984924678 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.987464753 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.987137788 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.987698456 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.984194305 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.988195802 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.987603444 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.987228015 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.994079684 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.986513073 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.984857107 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.98770937 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.987134628 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.986017319 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.986432074 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.98696817 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.986379081 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.986825426 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.986992614 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.987972264 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.986667401 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.987508498 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.987171682 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.99174521 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.987290114 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.987698376 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.988578588 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.986385283 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.984689073 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.988831122 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.987484236 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.989936384 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.987985773 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.991387621 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.988455632 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.985491024 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.984073031 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.977174735 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.986368808 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.99095628 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.998165535 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.990732288 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.995722123 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.9869324 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.995284163 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.987536631 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.98947663 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.987606504 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.986712123 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.987279486 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.988603883 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.988349332 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.991261002 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.008164727 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.999068475 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.990446966 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.988732232 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.993484161 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.991264523 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.993669793 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.987906904 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.988934087 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.990463314 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.988317792 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.98788034 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.988202198 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.992411916 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.989525302 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.986713118 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.991774632 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.987502415 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.988127779 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.989808459 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.988823214 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.990378771 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.98926917 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.988068816 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.989616111 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.990923839 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.996515488 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.990846581 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.990593082 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.988904878 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.992698157 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.988492869 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.988916557 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.989776903 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.994040025 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.988156732 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.990642733 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.997098641 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.990900592 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.989564642 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.99027828 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.990021264 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.99142059 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.992224264 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.989714039 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.999640036 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99296844 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.9902428 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.995225901 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.990240841 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.993130396 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.989784554 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.990112449 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.989066136 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.991882747 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.990671361 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.989457082 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.997528554 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.99012172 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.99104901 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.990846087 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.995323102 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.992898399 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.993663326 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.991090632 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.994642488 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.998268686 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.99616453 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.993557566 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.99633302 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.993288244 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.991598991 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.995844817 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.992423604 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003759017 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.999165812 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.991741373 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.990481239 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.990982307 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.995443214 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.990913348 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.991720807 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.998778561 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.992633563 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.996180849 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.997156002 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.991951029 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.992560231 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.998977514 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.993078807 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.995649854 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.994199453 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.993855549 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.993287313 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.992988829 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.990433402 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.9927676 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.996587735 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.995244959 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.992894752 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.993229179 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.99386434 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.000397376 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.992732649 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.994080592 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.001893884 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.995701973 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.993494175 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.994336912 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.993778968 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.993570261 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.997712457 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.99329369 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.993986166 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.994688212 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.997644501 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.003206838 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.996916907 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.999966601 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.995452386 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.004198915 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993326178 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.995319731 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.994904267 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.998176372 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.001242805 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.994976027 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.994621635 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.001903378 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.996451552 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.996537253 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.997862573 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.99459193 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.995063241 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.995082902 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.997864438 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.999442748 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.996581493 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.99700902 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.99480044 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.99483295 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.994751769 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.998101272 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.99599485 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.994433725 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.996701559 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.994684168 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.995799501 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.994804786 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.997302275 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.995422551 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.993556239 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.994483336 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.003348375 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.995073287 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.995701684 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999342586 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.996033769 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.003894531 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.996605284 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.996198587 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.996356047 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.996404338 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.000180756 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.996728494 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.996142346 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.998358928 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.995329187 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.998357507 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.006671962 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.003336525 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.000254559 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.99614673 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.996553365 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.996590344 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.006003696 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.020039211 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.996997408 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.998370699 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.000195176 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003571169 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.997872666 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.002643573 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.000662554 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.00498431 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.998251527 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.996763082 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.000799191 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.008857636 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99760904 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.998069849 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.996922002 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.002433502 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.999167796 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.998604191 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.997813783 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.988261231 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.999392023 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.009520982 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.997927208 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.997907262 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.996505618 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.997384686 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.997349382 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.997750834 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.999478042 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.998695356 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.998344009 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.997458676 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.001739185 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.003966265 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.998180362 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.001107879 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.006561742 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997637159 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.997131002 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.000625798 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.998250125 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.001027579 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.997262446 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.99821003 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.00111232 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.998837264 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.000636056 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.002569511 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.006348971 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.001211805 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.998911328 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.9981416 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.002192225 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.99908668 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.998691923 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.000398959 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.007042083 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.003237203 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.009657999 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.009028201 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.998867808 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.000177014 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.007347623 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.006625816 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.000386614 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.99919955 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.000123106 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.002249439 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000593905 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.000281621 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.000087525 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.000460651 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.005147681 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.001402397 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.000828483 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.000638607 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.999597446 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.00175875 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.001980808 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.004300313 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.000396448 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.00119143 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.999289206 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.000884061 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.002848236 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.002980004 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.00108971 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.001439176 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.00282122 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.001916084 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.004267133 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.000809872 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.002808871 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.001676926 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.000493002 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.000841543 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.001288552 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.002802042 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.999790604 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.005649475 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.009775033 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.001247292 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.003050062 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.00240698 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.00627407 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.00137511 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.002546096 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.001993956 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.002146575 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.009575265 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.001604662 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.001244592 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.000806135 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.001449839 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.006099638 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.004098184 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007963013 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.002882856 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.002635073 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.001566085 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.006018176 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.010606791 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.006126967 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.004954165 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.009733627 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006870152 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.004907956 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.002413562 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.002784628 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.003535133 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.00304195 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.007228902 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.004287865 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.003835684 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.002142975 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004778423 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.00371122 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.004832929 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.004833058 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.004565748 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.005814817 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.011464141 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.011851012 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.003804705 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.004002713 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.004071049 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.007136645 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.016256573 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.002964242 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.003247941 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.003902287 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00459473 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.004498394 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.010827769 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.013479498 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.006924443 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.004015174 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.008981612 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.021227082 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.005745386 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014159116 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.036494676 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.006354958 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.003894577 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.005180564 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.005523015 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.005319767 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.008800687 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.005293728 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.010651008 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.004922878 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.005269294 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.012693412 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.006326697 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.007595347 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.004641832 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.00630618 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.998280525 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.00581219 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.012748671 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.005639437 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.006064707 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.006156214 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.007990185 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.005353909 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.003724356 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.007350884 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.008255711 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.004365851 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.005937957 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.014271884 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.006219033 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.007117047 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.020065413 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.016016819 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.006246919 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.006822826 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.005910359 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.011752335 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.009360187 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.006364233 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.010659591 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.014805421 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.00981294 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.013486752 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.007524036 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.007573489 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007675042 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.006367036 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.006722439 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.018616313 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.017340493 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.007174039 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.00830285 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.012525185 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.006877097 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.013526854 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.01379839 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.009452599 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.00909257 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007646206 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.006617763 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.007046841 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.007575965 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.011732898 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.017139017 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.00733591 seconds)
  done (took 1191.17350359 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.00667182 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.006838314 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.006941014 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.00730793 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.007581484 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.006588593 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007405679 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.008510142 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.008649393 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.006950493 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.008108243 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.008981084 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.00755427 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.00822297 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.008384305 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.008068488 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.008726864 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.009059838 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.008096147 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008813436 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.008254048 seconds)
  done (took 44.106804434 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.00902229 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.008874186 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.008983705 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.009669344 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.008263593 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.008094524 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.009523024 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.008371906 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.008596695 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.009339914 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.008843027 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.009519948 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.009872087 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.010142158 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.008878796 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.009569911 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.009402407 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.010470925 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.009962576 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010229887 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.008455566 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.008425028 seconds)
  done (took 46.144312017 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.008973285 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.010359388 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.009701302 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.010084366 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.009497716 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.009183037 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.009209983 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.011977752 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.009532583 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.009916257 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.016631176 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.018047218 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.010049225 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.014585235 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.009742792 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.010660788 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.156553953 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.010283138 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.010936124 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.012033471 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.011124936 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.017931453 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.010918502 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.010639688 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.010618194 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.012420864 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.011431269 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.011456207 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.011818062 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.012741701 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.016091983 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.01125565 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.012422517 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.015400204 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.01252292 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.014045162 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.016704351 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.012170341 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.01049624 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.012410286 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.024177174 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.035830339 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.012350745 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.012865887 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.019972503 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.010527819 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.012101461 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.016990921 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.019829076 seconds)
  done (took 100.728621266 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.012182745 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.013236405 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.013567884 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.013087256 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.013968906 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.010979884 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.012625279 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.014422564 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.013931291 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.012919606 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.011982671 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.013416896 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.014041346 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.013729532 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.013508972 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.013227457 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.012378597 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.012135765 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.01329388 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.012674562 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.01218416 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.013015626 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.014934879 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.014019768 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.013739687 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.012713413 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.014024678 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.013537219 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.01390537 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.013579454 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.016659491 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.014133964 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.014047218 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.014925912 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.014477415 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.013855401 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.014757083 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.015385349 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.014365539 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.014694963 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.014791796 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.016802306 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.013507348 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.014564128 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.014185346 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.015585575 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.012890715 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.015058678 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.016881567 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.015501312 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.014884997 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.016715429 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.015495047 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.015303468 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.014889092 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.014664155 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.01453112 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.013955553 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.014295083 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.015502692 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.014383302 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.015913814 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.015207353 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.015169484 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.014817758 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.016474905 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.015889764 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.014967588 seconds)
  done (took 138.914226174 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.015984334 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.016365644 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.016991524 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.01607347 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.015214674 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.014567841 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.016214176 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.017055629 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.015863036 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.015892023 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.016194852 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.016634289 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.015645447 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.016568901 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.016849355 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.014127335 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.017054085 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.01715991 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.017442339 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.017060961 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.016422518 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.01739796 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.016141203 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.015620255 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.017113349 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.017233067 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.017806768 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.017306511 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017475279 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.017165617 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016987477 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.017304845 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.018014174 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.017662028 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.018937738 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.01792051 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.017474765 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.016545073 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.018246357 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.017014014 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.019067066 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.018233567 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.017357789 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.017961643 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.019017809 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.017434703 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.01732493 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.018870613 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.017496165 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.017730668 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.01803818 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.017693414 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.018510447 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.018882516 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.018325529 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.019670215 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.018516171 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.017310036 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.019071319 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.017656057 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.019410861 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.019792972 seconds)
  done (took 127.023523407 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.018129926 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.017604355 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.019508506 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.018702111 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.020246084 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.018107611 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.018701029 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.018203988 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.018578828 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.020094622 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.005785355 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.018021428 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.019372771 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.018552517 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.019984372 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.020784071 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.019614046 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.019898236 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.019408932 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.019409124 seconds)
  done (took 42.320670458 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.019803459 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.018398798 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.01916682 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.019369444 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.020087224 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.021327497 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.01825198 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020024886 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.019695401 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020287781 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.017851141 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.01964269 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.019493378 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.020238154 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.020434763 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.021375695 seconds)
  done (took 34.269051445 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.019622775 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.021858088 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.021500683 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.021538729 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.021237243 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.019411661 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.021035948 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.019968557 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.021084553 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.020287702 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.019770787 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.021163758 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.020229466 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.020282509 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.020665491 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.021333269 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.022920025 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.020993631 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.01992661 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.020655145 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.021327358 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.021668903 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.020792808 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.021403424 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.021558789 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.021357157 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.022279553 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.021212608 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.019547886 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.021237572 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.021084577 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.018675572 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.021419813 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.022117634 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.023451355 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.021698771 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.021223833 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.02247304 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.021495328 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.022730564 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.02116146 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.022130715 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.023465163 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.022995306 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.021937805 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.021897722 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.022944288 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.022842848 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.022158771 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.023214932 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.02361698 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.022744597 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.022640811 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.023082603 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.02239079 seconds)
  done (took 113.138366414 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.022384735 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.022742109 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.021874346 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.022213884 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.023567746 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.023128962 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.022997521 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.023001105 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.024008778 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.022711541 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.023708689 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.023919515 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.024176612 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.023393631 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.024520931 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.023499078 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.023118391 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.022515697 seconds)
  done (took 38.373996911 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.023946702 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.023942541 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.020385685 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.024876501 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.023811424 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.024769507 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.025351932 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.025829729 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.023842252 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.024032979 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.023871161 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.024275998 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.024277183 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.024277845 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.025208041 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024846792 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.02363174 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.023541071 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.024880935 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.026004274 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.024581549 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.024527811 seconds)
  done (took 46.491705019 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.02389973 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.02637439 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.039971295 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.047962666 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.04539945 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.061472481 seconds)
  done (took 14.202192635 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024888252 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.025362061 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.02724708 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.025242264 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025278402 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024329477 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025666355 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026608788 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026434095 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025531466 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.026418816 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024736468 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.025659493 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.027064284 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025683747 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.026378296 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026418033 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025279665 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026489286 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0261761 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.025881158 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02645835 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.027669233 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027970846 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.025733025 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.027887794 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026441581 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026851421 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027027366 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025408359 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026618572 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026676404 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026054621 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.027100422 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027246991 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027078047 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026719862 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.027137976 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026525774 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02735774 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.026851536 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028728751 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028224785 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02905223 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027488378 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027236457 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026691627 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026618495 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028443427 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.027633499 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027234542 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027761008 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028148141 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027014945 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028893338 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027197922 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028080422 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029117407 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.027401615 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028653388 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027464031 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027992027 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028689739 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027908334 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027860052 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028159689 seconds)
  done (took 135.736739146 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027692159 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.028032573 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027413502 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028787016 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.029243713 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029242853 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028049259 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028730309 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028629534 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02916831 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02927206 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028110873 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028326302 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028113742 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028814561 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029368141 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.029317407 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029665987 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028990886 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029529704 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.028705345 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.028566192 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028777243 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028434732 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029441084 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029912311 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029613703 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030016818 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028880259 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.028466626 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02967074 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02837486 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029322625 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.026672079 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02933698 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029213111 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03031806 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029241797 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028511888 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029985702 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029825194 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031185711 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029946388 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030445356 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02954354 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030148843 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03051788 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030271476 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031400031 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030108275 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030531001 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030696338 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031331415 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031817418 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030694767 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031315819 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031497219 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030466512 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032687008 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032192505 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031100785 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031416173 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0315477 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031777545 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031094496 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030778068 seconds)
  done (took 135.923653824 seconds)
done (took 2775.674272809 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.097110439 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.130128796 seconds)
  done (took 16.189768489 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.194694822 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.073888161 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.218195892 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.149219115 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.036225072 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.053459417 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.035347503 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.034689196 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.127505368 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.034095587 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.04903222 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.035263313 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.035531226 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.034405128 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.035313233 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.035166407 seconds)
  done (took 55.157826673 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.037065859 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.038670307 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.035335434 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.035265911 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.046674983 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.108947756 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.057715311 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.039693731 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.049486815 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.068388504 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.05462911 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.042532003 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.044356195 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.040696345 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.122343404 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.083953798 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.095352729 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.111443244 seconds)
  done (took 39.078052133 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.117035289 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.049331897 seconds)
  done (took 11.138955065 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.064834563 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.048882852 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.055920229 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.059274506 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.050574946 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.05944574 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.053476905 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.050009108 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.05655993 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.04927159 seconds)
  done (took 72.537349835 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.038301339 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.041455496 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.348355862 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.046651577 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.042553151 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.060085238 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.038521133 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.067880867 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.039000829 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.034722341 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.047813257 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.353918384 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.049248307 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.037404043 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.463962037 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.049140569 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.043698021 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.068429874 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.06967849 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.042497631 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.044342354 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.039790717 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.20023648 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.743577611 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.043456135 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.041237841 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.047380328 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.036072782 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.036471434 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.038648655 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.039538282 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.038307393 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.041130001 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.036623878 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.04352874 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.043248471 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.528242457 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.057603828 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.044806856 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.126747907 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.081701882 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.045139253 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.819384491 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.041956684 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.034735474 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.044039383 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.730465944 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.137395458 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.04201058 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.223274829 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.385333091 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.053365104 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.207864063 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.182263371 seconds)
  done (took 142.252381417 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.035499382 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.271699575 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.19025952 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.038591171 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.293500187 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248336852 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.039253752 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.083217747 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.040667059 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.239501057 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.291313686 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.141782458 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.039389724 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.03635625 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.038840348 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.036102445 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.186479057 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.105211749 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.040498782 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.037324891 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.062293222 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.240104934 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.160956049 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.039897859 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.064917208 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.245183276 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.161230101 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.140791122 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.857169218 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.03712272 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.099528501 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.041193229 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.039370829 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.038059969 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.190464393 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.132043719 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.123338501 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.040339109 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.038791143 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.03729539 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.711599276 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237207465 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.135519416 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.16184286 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.289525243 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.259420772 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.650189117 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.03775365 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.664392117 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.203696458 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.245254436 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.249154662 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.159336161 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.042222392 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.331811663 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.038909742 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.038632018 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.260005143 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258454052 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.139369597 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.042631399 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.039265547 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.03938463 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.277599259 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.043236739 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.130282034 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.040900951 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.039517989 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.132273215 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.141240687 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.269421619 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.26301419 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.071169425 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.361721373 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.527322955 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.243936436 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.105311849 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261145741 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.043192803 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.039245447 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.119391928 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.884092176 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.296644368 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.283711832 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.239293866 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.07174129 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.693488978 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.040458083 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.227073922 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.231578121 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.275128724 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.28223374 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.277568996 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.397519303 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.040263637 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.040218556 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.330761499 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.157693238 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.98482434 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.390501683 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.269005215 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.533785967 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.067130948 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.386471496 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.172691126 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.044412151 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.68882602 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.042945102 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.248632704 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.082427733 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.045874964 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.041935958 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.232593778 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.94875492 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.042174163 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.747111799 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.1032183 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.047123622 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246320903 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.046020902 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.286070761 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.046836616 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.274211503 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.701644989 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.073694389 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.219577579 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.287046038 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.673249798 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.28411987 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.289769138 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.16072086 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.266902903 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.855252254 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.044473695 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.304811006 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.048191307 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.044878481 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.212959122 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.049118165 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.187376872 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.511612328 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.310729536 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.068580342 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.274447521 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.049951918 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.283361629 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.081458437 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.096563343 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.052389884 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.175442016 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048840013 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.880579008 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.200572303 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.049356468 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.044900227 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.629910671 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.044815314 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.192932666 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.270469136 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.070339018 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.114878443 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.614509842 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.038859092 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.133572768 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.071184824 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.662874404 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.044645765 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.295218956 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.008025074 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.51964039 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.045657575 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.279441129 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.233642313 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.050179896 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.041838452 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.888513059 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.045528939 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.043881065 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202202327 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.496525538 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.947226832 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244219477 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.054701171 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.173345966 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.050735484 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.127058503 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.385320242 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046192506 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.046127756 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.046270124 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.048021385 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.046989568 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.229299312 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.07442291 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.479662778 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.183129652 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.301637232 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.357660928 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.55845201 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.944064572 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.902723899 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.113237004 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.907343617 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.963288753 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.908537728 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.921508288 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.130137245 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.909197983 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.09625971 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.138438837 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.930455909 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.949422267 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.907150055 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.904764763 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.792669772 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.044921586 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.988311063 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.907353959 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.90276118 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.014935143 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.022182109 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.082138362 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.581354605 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.94179016 seconds)
  done (took 936.513233852 seconds)
done (took 1274.83162678 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.904176507 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.906283071 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.908047804 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.909045472 seconds)
  done (took 29.466444909 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.904268885 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.902983697 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.905126748 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.906504084 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.903075994 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.905220509 seconds)
  done (took 13.266854732 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.903358186 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.906043508 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.909467873 seconds)
  done (took 22.55844577 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.330311063 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.315670744 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 1.980753453 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.045984311 seconds)
  done (took 10.51235938 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.907661996 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.905823366 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.903853036 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.904497125 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.905954138 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.904940854 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.902783288 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.906365903 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.906366045 seconds)
  done (took 18.996068691 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.973289931 seconds)
done (took 100.612172947 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.021440708 seconds)
    (2/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 1.917234778 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.004617653 seconds)
    (4/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.927224325 seconds)
    (5/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.500433071 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.045168967 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 2.967900985 seconds)
    (8/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.782638271 seconds)
    (9/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.198902088 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.99222255 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.113438206 seconds)
    (12/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.053864641 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.910595358 seconds)
    (14/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.502268506 seconds)
    (15/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.517367418 seconds)
    (16/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.845408433 seconds)
    (17/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.151053698 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 1.926578084 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.669252841 seconds)
    (20/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.047922304 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.303302434 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.924595232 seconds)
    (23/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 1.983863112 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.02765487 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.919199615 seconds)
    (26/341) benchmarking ("map", identity, Float64, false)...
    done (took 1.998261457 seconds)
    (27/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.230316084 seconds)
    (28/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.16924935 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.129194802 seconds)
    (30/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.905136257 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.98424582 seconds)
    (32/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.957926886 seconds)
    (33/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.219599419 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.008759321 seconds)
    (35/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.912635076 seconds)
    (36/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.984648165 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 3.809974736 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.912357136 seconds)
    (39/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.931217099 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.129473695 seconds)
    (41/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.020337325 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.138694959 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.997003354 seconds)
    (44/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.367418194 seconds)
    (45/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.114670621 seconds)
    (46/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.316363005 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 1.996266186 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.034250891 seconds)
    (49/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.907397255 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.329195505 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.769330621 seconds)
    (52/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.111551027 seconds)
    (53/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.245509673 seconds)
    (54/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.279791843 seconds)
    (55/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.03907174 seconds)
    (56/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.149520006 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.907923034 seconds)
    (58/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.426778406 seconds)
    (59/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.363470958 seconds)
    (60/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.10368048 seconds)
    (61/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.526629379 seconds)
    (62/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.915537631 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.998294005 seconds)
    (64/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 1.916984991 seconds)
    (65/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.14301635 seconds)
    (66/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.192807903 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.918936205 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 1.923133371 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.616349092 seconds)
    (70/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.720699891 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.209877752 seconds)
    (72/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.102651239 seconds)
    (73/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.013133562 seconds)
    (74/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.911098409 seconds)
    (75/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.919342966 seconds)
    (76/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.160465785 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.143395889 seconds)
    (78/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.01111086 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.924812655 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.03956296 seconds)
    (81/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 1.98654202 seconds)
    (82/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.909934739 seconds)
    (83/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.310838188 seconds)
    (84/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.013620225 seconds)
    (85/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.936144946 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.256478052 seconds)
    (87/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.098851021 seconds)
    (88/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.913425174 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.176798683 seconds)
    (90/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.19028809 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.271267505 seconds)
    (92/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.085399737 seconds)
    (93/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.916124666 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.801123841 seconds)
    (95/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.918575691 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.317515815 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.048755125 seconds)
    (98/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.261210078 seconds)
    (99/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.909767347 seconds)
    (100/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.986770353 seconds)
    (101/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.261855857 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.718016034 seconds)
    (103/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.288501606 seconds)
    (104/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.124260213 seconds)
    (105/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.28863564 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.921489633 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.148086373 seconds)
    (108/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.213839699 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.195217569 seconds)
    (110/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.095264396 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.241652856 seconds)
    (112/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 1.995732632 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.909253651 seconds)
    (114/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.053050921 seconds)
    (115/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.677042567 seconds)
    (116/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.186370906 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.162427381 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 8.261080895 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.702376412 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.91991945 seconds)
    (121/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.679508592 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.101482912 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.176915319 seconds)
    (124/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.913857637 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.204963176 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.185049558 seconds)
    (127/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.016147235 seconds)
    (128/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.31478143 seconds)
    (129/341) benchmarking ("sort", Int8, false)...
    done (took 4.845094676 seconds)
    (130/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.187398404 seconds)
    (131/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.062736434 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.211005607 seconds)
    (133/341) benchmarking ("map", identity, Bool, false)...
    done (took 1.994263355 seconds)
    (134/341) benchmarking ("perf_sum", Float32, false)...
    done (took 1.994109689 seconds)
    (135/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 1.963553651 seconds)
    (136/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.021757277 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 1.932469915 seconds)
    (138/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.914014033 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.179192953 seconds)
    (140/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.059965448 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.012390482 seconds)
    (142/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.707863672 seconds)
    (143/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.658925357 seconds)
    (144/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.203742083 seconds)
    (145/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.349961982 seconds)
    (146/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 1.997286173 seconds)
    (147/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.136384934 seconds)
    (148/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.918723934 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.06059351 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.155303546 seconds)
    (151/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.306867803 seconds)
    (152/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.927360709 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.161544733 seconds)
    (154/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.987352939 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 2.234500797 seconds)
    (156/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.075167529 seconds)
    (157/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.595385808 seconds)
    (158/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.187146144 seconds)
    (159/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 1.937268142 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 8.188165722 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.99520574 seconds)
    (162/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.616513823 seconds)
    (163/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.914546794 seconds)
    (164/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.916323067 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.246119108 seconds)
    (166/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.585252 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.029167592 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 1.929881868 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.184783726 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.562907882 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.826276076 seconds)
    (172/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.06332672 seconds)
    (173/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.306563714 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.305747663 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.803766029 seconds)
    (176/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.042129624 seconds)
    (177/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.034803883 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.134026423 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.047390617 seconds)
    (180/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.333928204 seconds)
    (181/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.367948861 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.072697042 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.273232695 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.319026663 seconds)
    (185/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.33095239 seconds)
    (186/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.045917533 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 1.93851723 seconds)
    (188/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.608088803 seconds)
    (189/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.92742683 seconds)
    (190/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.044004446 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.064441816 seconds)
    (192/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.242039096 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.315205869 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.692385161 seconds)
    (195/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.052896933 seconds)
    (196/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.003350481 seconds)
    (197/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.136568838 seconds)
    (198/341) benchmarking ("map", identity, Float32, false)...
    done (took 1.998537198 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.920095576 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.920676626 seconds)
    (201/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.995333236 seconds)
    (202/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.128400004 seconds)
    (203/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.926671038 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.017203811 seconds)
    (205/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.33256632 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.253591702 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 1.944771956 seconds)
    (208/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.288601194 seconds)
    (209/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 6.98025265 seconds)
    (210/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.174582982 seconds)
    (211/341) benchmarking ("sort", Float64, false)...
    done (took 5.616248468 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 1.935438024 seconds)
    (213/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.002776864 seconds)
    (214/341) benchmarking ("sort", Float32, false)...
    done (took 5.587481377 seconds)
    (215/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.128813115 seconds)
    (216/341) benchmarking ("collect", "all", Float32, false)...
    done (took 1.999890318 seconds)
    (217/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.124950886 seconds)
    (218/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 1.941835972 seconds)
    (219/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.076664019 seconds)
    (220/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.116512389 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 1.936671771 seconds)
    (222/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.916121116 seconds)
    (223/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 3.701335462 seconds)
    (224/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 1.994415543 seconds)
    (225/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.200701023 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.228556507 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.231988875 seconds)
    (228/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.22041824 seconds)
    (229/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.344319837 seconds)
    (230/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.642022856 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.125458642 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.917222906 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.237112143 seconds)
    (234/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.199895153 seconds)
    (235/341) benchmarking ("sort", BigInt, false)...
    done (took 6.918620206 seconds)
    (236/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.486382418 seconds)
    (237/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.212499622 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.814515822 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.926291141 seconds)
    (240/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.917490292 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.047684349 seconds)
    (242/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.234802555 seconds)
    (243/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.696112035 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 1.956965176 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 1.932835233 seconds)
    (246/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.199167628 seconds)
    (247/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.382414843 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.935300297 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.138390939 seconds)
    (250/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.051789578 seconds)
    (251/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.116822474 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 1.946108257 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 1.995163468 seconds)
    (254/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.109111572 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.79633763 seconds)
    (256/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.409903537 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.00993433 seconds)
    (258/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.931477231 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.630742264 seconds)
    (260/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.212849303 seconds)
    (261/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.890827874 seconds)
    (262/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.028430952 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.919034649 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.837418196 seconds)
    (265/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.644173051 seconds)
    (266/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.066011703 seconds)
    (267/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.221481128 seconds)
    (268/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.929973337 seconds)
    (269/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.604204783 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.370773375 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.818677054 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.194144493 seconds)
    (273/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.030564642 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.019452709 seconds)
    (275/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.909881052 seconds)
    (276/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 1.938251148 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.230151619 seconds)
    (278/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.129154276 seconds)
    (279/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.930557364 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.06786054 seconds)
    (281/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.080348844 seconds)
    (282/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.184780192 seconds)
    (283/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.9203941 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 1.999102762 seconds)
    (285/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.286282495 seconds)
    (286/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.083770515 seconds)
    (287/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.922223812 seconds)
    (288/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 1.936609356 seconds)
    (289/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.167921137 seconds)
    (290/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.320349597 seconds)
    (291/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.341986631 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.739936238 seconds)
    (293/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.138301555 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 6.925725834 seconds)
    (295/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 1.967127409 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.232457527 seconds)
    (297/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.924683635 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.920950166 seconds)
    (299/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.16996382 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.050674065 seconds)
    (301/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.424049318 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.275057989 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.829065167 seconds)
    (304/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.23515652 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.067552291 seconds)
    (306/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.69633277 seconds)
    (307/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.921982816 seconds)
    (308/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 8.784118556 seconds)
    (309/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.025861507 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.216989727 seconds)
    (311/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.924982953 seconds)
    (312/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.976052366 seconds)
    (313/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 5.372017033 seconds)
    (314/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.12662026 seconds)
    (315/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.137622219 seconds)
    (316/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.046405614 seconds)
    (317/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.232035614 seconds)
    (318/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.927494673 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.349815902 seconds)
    (320/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.412066278 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.773798233 seconds)
    (322/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.92110415 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.92400437 seconds)
    (324/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.995079063 seconds)
    (325/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.055174395 seconds)
    (326/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.344058562 seconds)
    (327/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.008500676 seconds)
    (328/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.027206862 seconds)
    (329/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.937661229 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.540825166 seconds)
    (331/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.011300524 seconds)
    (332/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.035981367 seconds)
    (333/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.1404339 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.921321553 seconds)
    (335/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.994541512 seconds)
    (336/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.922204307 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.976999306 seconds)
    (338/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.925120739 seconds)
    (339/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.395651377 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 1.94388476 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.921819535 seconds)
  done (took 1101.367477015 seconds)
done (took 1103.285721416 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.94413785 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.931663823 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.431665371 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.947571975 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.932668488 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.938360721 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.444537566 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.964110692 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.95015734 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.443376214 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.946387517 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.932841666 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.949137434 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.966091006 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.944846785 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.94852313 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 1.939850927 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.95861025 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.967202473 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.940750899 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.98005012 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.939997863 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.93168612 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.986832006 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.934852302 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.948554634 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.944762802 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.978573374 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.980713196 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.938773232 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 1.938269962 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.286992416 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.991906048 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.940108239 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.945444843 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.949465307 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.940712133 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.951358865 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.945473858 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.950182855 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.934465299 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.947621748 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.939983596 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.93982457 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.933991573 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.933973354 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.937515308 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.059597829 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.950960731 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.270469412 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.995476682 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.94719344 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.981750701 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 1.939096818 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.93823341 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.939264226 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.981543179 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.942691223 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.941180357 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.268745775 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.028664839 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.949289762 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.270036835 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.003909519 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.946525883 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.945540563 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.937596601 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.952160545 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.28660963 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.48824929 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.969115044 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.958529795 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 1.937151505 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 1.939209007 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.949868902 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.443464143 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.95407055 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.508624851 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.967079046 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.949921449 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.943891791 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.940592208 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.939026691 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.953009158 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.945617284 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.937988134 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.942396064 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.941274018 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.949245632 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.289606984 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.985319326 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.43516529 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.94563158 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.947824758 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.947636803 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.511116838 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.970580324 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.946601029 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.94004538 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.289845721 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.981815365 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.949163221 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.939388507 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.948622336 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.054078531 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.949247256 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.950026396 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.937722275 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.959526916 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 1.944627154 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 1.939514616 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.953411214 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.958235829 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.974591829 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.954331097 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.939010731 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.946557688 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.944664414 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.948134795 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.94839114 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 1.945204812 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.950024469 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.938877703 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.989704603 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.950167488 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.955949712 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.053142344 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.943134109 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.063448299 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.954451781 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 1.945461163 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.938510233 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.274126271 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.988228438 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.959589848 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.945921147 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.964262083 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.959252814 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.958552273 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.942245102 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.954955819 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.942791002 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.993235655 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.940651516 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.964082134 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.991645067 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.953111593 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 1.946038604 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.948530588 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.977174697 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.961153067 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.944877364 seconds)
done (took 305.76489635 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.978349894 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.931532868 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.006653036 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.931730037 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.998504019 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.983547942 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.929945177 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.931865567 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.930790688 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.320253417 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.932127411 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.936966983 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.931613949 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.932273762 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.982470166 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.93240976 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.931238391 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.165985472 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.931895537 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.989789404 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.933001405 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.933653541 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.931789728 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.362109509 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.931791464 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.933316404 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.991876476 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.93228428 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.182489832 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.93150126 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.932954108 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.185037437 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.992946201 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.947298091 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.94286309 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.940604825 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.998193329 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.942372476 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.980789299 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.981575143 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.011312319 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.966677788 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.932409156 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.932743873 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.939213878 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.933181625 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.935583733 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.965675026 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.932540847 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.939139344 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.169476579 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.940083862 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.937978356 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.934709419 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.935922224 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.951498437 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.93456792 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.935615927 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.994136973 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.934200502 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.983105563 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.363418234 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.322615565 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.934210135 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.933410901 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.933833624 seconds)
  done (took 188.013972597 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.000489005 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.019693046 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.007212355 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.940743056 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.989217182 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.00274944 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.939744586 seconds)
  done (took 15.768528879 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.941233801 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.935262132 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.959178487 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.959036108 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.935039402 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.072191832 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.947343238 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.94007441 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.960873742 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.940388039 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.269286784 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.961291251 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.94185724 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.935740194 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.946820053 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.963778536 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.939799285 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.937872905 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.036034185 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.014395449 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.942559852 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.945298773 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.964557129 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.948686009 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.939156143 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.940569226 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.933833915 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.943438048 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.936442438 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.936146028 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.938075507 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.952821041 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.93732179 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.934844693 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.935693606 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.937109595 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.936131568 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.935921172 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.935847498 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.937810569 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.93652428 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.937944761 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.937275298 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.938659465 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.937089502 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.959020064 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.93666029 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.937244083 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.937293391 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.939070805 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.9662163 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.938839339 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.938523644 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.944381539 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.978102796 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.944499177 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.938371633 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.937761271 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.93698514 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.937660098 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.937842139 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.016848711 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.960312111 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.937932434 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.960384047 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.976567549 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.940523502 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.938055178 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.939036349 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.96588436 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.939908951 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.960343027 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.938987829 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.037241222 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.937922126 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.080720968 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.961755127 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.942153409 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.941339464 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.938062797 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.946583553 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.940453621 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.942389574 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.9458643 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.930670456 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.93764283 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.938429177 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.939805272 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.947672976 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.936796213 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.982325622 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.937653144 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.940084992 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.037325251 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.938098207 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.036047873 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.966645037 seconds)
  done (took 211.578011071 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.943634266 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.939822997 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.95412184 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.94143331 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.940041534 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.94428067 seconds)
  done (took 13.537368756 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.941873164 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.943574012 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.939086707 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.940754489 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.93908627 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.939648909 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.941315291 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.942749685 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.94559021 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.941588621 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.940597203 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.94002845 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.941498106 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.940535793 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.941271747 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.939174495 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.940895183 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.940865018 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.941268784 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.942493535 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.187972241 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.939546583 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.942524067 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.947740195 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.946026688 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.940031278 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.949953077 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.940558582 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.941608853 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.9484852 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.944435396 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.94445655 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.951487843 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.948603051 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.945124782 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.950251037 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.946047405 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.944722128 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.941943855 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.943430361 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.943400432 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.940060352 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.943145526 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.945299243 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.943412682 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.953024233 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.949002081 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.951351408 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.943936788 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.942288307 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.943462865 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.940933708 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.943929839 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.943986417 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.94972601 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.952393005 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.946343589 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.941764303 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.940572278 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.949773496 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.947275784 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.945412533 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.945335465 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.946690276 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.94994288 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.944651615 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.949781221 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.945841961 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.942954966 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.943060315 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.944759783 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.943366824 seconds)
  done (took 143.102616079 seconds)
done (took 573.866436254 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.968647351 seconds)
  done (took 8.845456439 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.012620248 seconds)
  done (took 8.9727857 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.168721438 seconds)
  done (took 12.052099714 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.988946396 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.966815304 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.944750964 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.950303611 seconds)
  done (took 29.743151206 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.265140004 seconds)
  done (took 9.142193678 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.959311861 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.943480864 seconds)
  done (took 15.842896485 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.09659575 seconds)
  done (took 8.974514278 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.112887293 seconds)
  done (took 9.023287738 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.962762247 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.961373157 seconds)
  done (took 15.82268667 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.948730626 seconds)
  done (took 8.827556504 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.619048467 seconds)
  done (took 9.571478429 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.955446972 seconds)
  done (took 8.854333163 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.946267242 seconds)
  done (took 8.825430353 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.79961289 seconds)
  done (took 9.677599382 seconds)
done (took 166.051716902 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.95301229 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.944716204 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.951105287 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.95141429 seconds)
  done (took 29.678924784 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.980416594 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.981508686 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.982437102 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.979230418 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.971931613 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.972871215 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.981894687 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.982126844 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.971823727 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.97989077 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.981413662 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.980341629 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.979654726 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.983470092 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.984372302 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.977951999 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.979952995 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.984060117 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.972291212 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.985012831 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.980264306 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.981344117 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.946419934 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.948387118 seconds)
  done (took 49.329246603 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.127047065 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.015818038 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.10276725 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.993333044 seconds)
  done (took 10.118686223 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.946603778 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.002024505 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.998088326 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.993402231 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.999595055 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.051827681 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.000634042 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.075984353 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.07605996 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.067970942 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.957616829 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.96633899 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.967879007 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.993728497 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.051715571 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.949567243 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.951624379 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.056467332 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.002723409 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.205854779 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.948771781 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.999594759 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.998643173 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.002651452 seconds)
  done (took 50.14651716 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.949515542 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.956262009 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 1.95878146 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.94865507 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.950230482 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.952857527 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 1.955690145 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.952590284 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.971099355 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 1.950238087 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.949404003 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.950332425 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.95899573 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.94919037 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.950399096 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.965639588 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.96606149 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.952414331 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.954154668 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 1.960120336 seconds)
  done (took 40.98544639 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.949285129 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.796905525 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.298464973 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.20163702 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.95057858 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.955586179 seconds)
  done (took 32.035723856 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.963700931 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.966277137 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.955250494 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.975953179 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.000806199 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.963917451 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.011074476 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.118980223 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.967682771 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.008562708 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.974481233 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.961909053 seconds)
  done (took 25.75224337 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.951470401 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.954963693 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.954371238 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.963698491 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.963219364 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.959624284 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.960836743 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.951981172 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.969021404 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.971513101 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.961232936 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.963229548 seconds)
  done (took 45.413172908 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.164665272 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.176544559 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162410416 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.435021681 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.272044453 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.929096882 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.228162294 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.165016275 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.684282548 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.691302721 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.243962799 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.928333151 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.905083143 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.875501688 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.849455456 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.190103353 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.954953179 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.755384244 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207747016 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.996637149 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.958096894 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.952981619 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.960570151 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.236153331 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.275465458 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.961702851 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.161539913 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.969653641 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.953832927 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176543037 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.483594806 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.012430465 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.157928143 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.212143611 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294053548 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.012850779 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.962029216 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.039909545 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.005502642 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.987146795 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.965346061 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.962808836 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.495867204 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.964419391 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.225220618 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.954622836 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.959353394 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.926603944 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877729168 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.193473664 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059293916 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.868004792 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.99005062 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.321950855 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.074725725 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193336284 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.958725996 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.043819525 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.020339914 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.125247256 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.059363362 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.957861167 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166857208 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.879518136 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.268141666 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069954678 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.95821641 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.960072096 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.656364154 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.194507875 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.035020544 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.194523364 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.663110261 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.955990517 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.957369356 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.843348605 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.044801814 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.957028652 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.166995524 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.951302934 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.881914138 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.053043917 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.253037559 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.965721271 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.955715007 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.965700824 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.762104874 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.880014305 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.051676721 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.124465139 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.268559313 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.958507315 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.958708155 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.981101897 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.958261555 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.884241202 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.404559842 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.030762891 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.883142502 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.524510267 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.503583028 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.93012537 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.389949324 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.00609785 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227784118 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.866997251 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.364914294 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.083104478 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201095804 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.487449382 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.961141763 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.401904796 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.036954414 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.034999399 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.958953176 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.441101762 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.053048873 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178997036 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063021341 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.955448543 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.883820444 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.968000798 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159118853 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.502373037 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.019271704 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.955045503 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 1.963867958 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.957274946 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.960243457 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.991567777 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.975657897 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.253823502 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.024540783 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.958902996 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.875989256 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 1.964740079 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25712075 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.327837178 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.023029732 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215663284 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.220133297 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.540039789 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.529352528 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.915540505 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.227235022 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.030148164 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.034757852 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.524885382 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.088645339 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.056056011 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.885056078 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.108459073 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.969030647 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.964858431 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.165764212 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.273225989 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.353368598 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.005139718 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.958174505 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.892016673 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.046131214 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.20375987 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959200736 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.983441219 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.966703959 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.04125009 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.188843179 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.959832955 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.887905955 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203396227 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.19914624 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.250687542 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.267016332 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956986854 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.034119587 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.969951012 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.171836236 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.042360376 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.634147309 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.451480862 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178139327 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.40972195 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.929888537 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.525400952 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146334017 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332112373 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.973327592 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.413672507 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.052881872 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.571695778 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.995520216 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.313728538 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.88774284 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.965571577 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295232752 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.916959815 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.274018018 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.020152949 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.988819725 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.96540072 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.963148029 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.972149045 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.837379135 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.068599855 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.032181577 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.034716379 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.889578637 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.528037346 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.006516175 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.964058742 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.960778796 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.256642919 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.769857375 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.913308767 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.964205553 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.040995443 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.663772047 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.512614546 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.968923592 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.965108668 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.564397796 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.971544917 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.858402309 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.970977389 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.680948878 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.992201572 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.134680209 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.632200285 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.251710272 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.038084367 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.040549411 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.963776456 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.966634471 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.663497594 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.972621959 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.663283264 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260722355 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.237901777 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.39096957 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.020497714 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.092926337 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.977952958 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.966471162 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.403237976 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.987159063 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.964548526 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165920675 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.482297554 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.208872541 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.595938569 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.045976296 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.965026966 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.237248297 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.966825125 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.54307979 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.651320842 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.956937048 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.962683007 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.196031255 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.683491005 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.968452622 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.849725607 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.973428704 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.17708496 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.167250474 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232879603 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259687372 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.407412452 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.893363174 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.971661268 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.987118412 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.205317011 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.965543457 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.004140841 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.265584235 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.976446424 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.393298697 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.247237721 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.269676293 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.417014451 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.232566247 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.026351215 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.976431053 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.612696048 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.084660604 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.89987019 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.084706131 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.894805893 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.674968585 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.259534554 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.983370505 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.236855096 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.943985735 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314105947 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.256187815 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149255262 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.987821242 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.995657218 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.918239817 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.032258357 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.967487452 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.473264394 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.093645497 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.973463116 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.505414978 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.012151787 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.016229604 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.974008198 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.434951606 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.991028401 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.971997255 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.542918951 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.991801295 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.086909434 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.040630377 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.684566344 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.552214774 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.065917056 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.804557637 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.577228797 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.23485776 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.023338065 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421489984 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.00517389 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.372577558 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.969231919 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.179390155 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.97265374 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.433679866 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.018877113 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231233106 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.926214362 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.179583206 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167870423 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.996904697 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.974214899 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.895084773 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.999464513 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.845920927 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.936429243 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.973446603 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.603431255 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.326717546 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.087883334 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.379607642 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.793749994 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 1.972264016 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.219029772 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363335514 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.47596162 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.006551252 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.97095511 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.216967576 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.098844893 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.189790952 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.13433411 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.98040909 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.998402746 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.181165998 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095397959 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.890304221 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.448510803 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.517973015 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.67213631 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.981922804 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.171887322 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.212957007 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.161479442 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.008904987 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.043471664 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.372997427 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.239312078 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.034448895 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.897896175 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.971989266 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.366863543 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.204014497 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.067166387 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207452619 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.271446775 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.320555641 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.525655879 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.409266809 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.33999762 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.224843921 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.315011898 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18351116 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338127568 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.219381418 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.539127452 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.380305812 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.185199885 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.060524268 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245497165 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.849744535 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.682264975 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.210802004 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 1.977065615 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.898500598 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.179207669 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.04971658 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.182426891 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.405567208 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.215644372 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.150979563 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.33105516 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.452961638 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.069259484 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.00303215 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.908740063 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.996053319 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.99098059 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.975223118 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.449080514 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.25543224 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.986750445 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.897970857 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.643770338 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.900959066 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.182766543 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.059026713 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.013169157 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.495181068 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159025855 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.072192415 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259835008 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.129240943 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.013704677 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.898275867 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.682841816 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.921221175 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978023345 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.400193405 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990542078 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 1.977510663 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175562255 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.902714692 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.021017075 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.979076945 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171731488 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.495618359 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.244402026 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097890041 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213918354 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274965018 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.755368006 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997070578 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.245785379 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.901624551 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.553555461 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.651196287 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.017305399 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.045647429 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.974573648 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.978401729 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.248409156 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227398186 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.117416601 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.534788698 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.012319025 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.996766699 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.228250796 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.063880286 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.976446776 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.981522808 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.482298977 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.211408083 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.045013341 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.902466523 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.186015861 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.048186579 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.171617911 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.05368089 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.489736714 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.979943093 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.762142108 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.075492382 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.929323051 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.921243237 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.653997215 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.038640073 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.977492938 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.246112872 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.580587054 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.180254641 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.370352009 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.845423224 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.085017957 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.020699609 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 1.980819839 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.035453924 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.266732356 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.273306948 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.976508009 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.247744722 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.005210977 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.981802533 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.566853682 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.940236674 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.977986523 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.68977219 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.872531418 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.708354828 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.368938634 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.985246008 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.985545896 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.980573106 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.891739451 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.97860027 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.979015962 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.951981421 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.027889043 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.248592458 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.207261506 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066602669 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.982498733 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.978126499 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.982582917 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.190036239 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.494125321 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.994687675 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.678113548 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183182869 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.985852427 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.456788629 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.408665346 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.141808805 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.018383159 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.080457972 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219437483 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.4490005 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.089927289 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.961348079 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.205991496 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.980707145 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.251821728 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.253901129 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.979233811 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.191725913 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.526811168 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.268879103 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.236101122 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.290935912 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.040537551 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.071479335 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.891545483 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.984838964 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.90021919 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.245154739 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.03007936 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.979817659 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.986609703 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.458444887 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.694979564 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.45458925 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13570004 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.222539502 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.710907868 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.736932309 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.982305638 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.905159334 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.982252164 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.006552912 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 1.983375321 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.907473827 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.623185574 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.699509878 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191731346 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.288721961 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.907024882 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.18404476 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.524911332 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.906724454 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.945763289 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.947566336 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250821579 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.906589553 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.985772043 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.908897492 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.172454086 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.651342237 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.24793903 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.98233962 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.908548834 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.986766935 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.981820255 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.979120241 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.068089736 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.982874891 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.099168143 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.243534647 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.272362917 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.080742401 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.584718043 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.693032588 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.920865152 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.026900006 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.421465433 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55078041 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.175045506 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.103573758 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.703524022 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.92869204 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.900904528 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.998159137 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.177237999 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.989683987 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.983398813 seconds)
  done (took 2126.862500808 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.000703493 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.081982827 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.043411985 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.072936854 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.073112075 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.041145832 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.029257499 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.050734389 seconds)
  done (took 58.308993914 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.980933027 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.954877399 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 1.99121925 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.985091911 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.982333009 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.985498511 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.16806108 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.014299473 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.982362036 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 1.983609638 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.981438072 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.988431813 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.983887612 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.982540028 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.988081668 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.265697088 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.005568451 seconds)
  done (took 78.170418737 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.01344576 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.287352732 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.990074082 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.430462491 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.020829356 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.095742044 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.985951617 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.987229538 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.111319962 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.281683747 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.989105942 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.989958797 seconds)
  done (took 92.106587001 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.986796427 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.9864595 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.985620067 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.984069751 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.987064032 seconds)
  done (took 11.848590026 seconds)
done (took 2652.6988237 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.229877024 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.078210972 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.059594049 seconds)
  done (took 6.056124056 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.128104738 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.176800634 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.290470263 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.363010737 seconds)
  done (took 10.881388506 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.269290999 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.375237608 seconds)
  done (took 6.562992682 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.361050246 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.000309742 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.379483077 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.986108721 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.986832234 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.98981752 seconds)
  done (took 22.887077449 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.98764666 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.984898036 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.98484888 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.98443833 seconds)
  done (took 9.861726103 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.984357336 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.772561086 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.986707969 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.993268434 seconds)
  done (took 21.658133924 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.128626435 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.964193799 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.751230641 seconds)
  done (took 9.763875505 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.613689001 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.437852394 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.598166288 seconds)
  done (took 9.565750223 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.125842545 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.82169536 seconds)
  done (took 7.866749147 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.127362264 seconds)
  done (took 4.046259703 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.825002687 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.297864646 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.45613568 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.821083138 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.608084199 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.373090106 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.457020028 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.269067337 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.387181206 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.403358362 seconds)
  done (took 26.816133861 seconds)
done (took 151.855005812 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.551660649 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.340389336 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.055946702 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.326766954 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.061990662 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.059196805 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.252864089 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.28460253 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.030880478 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.025380141 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.308485853 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.063538463 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.197151261 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.335997755 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.198751288 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.341786464 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.051828923 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.409481105 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.82005066 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.96902973 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.257563269 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.004520667 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.145458386 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.015694791 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.056564492 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.013356258 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.484802688 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.33570227 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.965019697 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.516739151 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.01314499 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.096553506 seconds)
  done (took 171.511545458 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.954849568 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.990756923 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.988251807 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.988401044 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.210837595 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.989585391 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.992263174 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.989519886 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.276001965 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.271483171 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.991973521 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.207439384 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.992766752 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.997317277 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.989736519 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.989660373 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.390858956 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.986972205 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.992237045 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.989785129 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.990709928 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.083372203 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.989110111 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.101853392 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.382074539 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.992589149 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.990192598 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.991149779 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.987558176 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.991180628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.995001053 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.988404152 seconds)
  done (took 211.587874556 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.971079937 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.994560604 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.991768709 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.993542965 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.993183977 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.990646394 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.991497185 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.992806747 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.647731246 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.643121999 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.993179465 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.993230109 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.998921944 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.993538128 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.000162386 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.991044548 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.999986611 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.98365673 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.993046902 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.995183075 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.999313655 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.714749599 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.994884416 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.712173449 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.993516818 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.999242833 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.991963726 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.992495757 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.992254247 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.004672515 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.994439799 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.992962241 seconds)
  done (took 224.462047665 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.221529187 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.992731682 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.990899275 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.906168117 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.99368536 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.991390439 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.8979856 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.221829486 seconds)
  done (took 20.154136661 seconds)
done (took 629.644852968 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.382886253 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.734086608 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.123003015 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.014934257 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.27283161 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.057627869 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.009357705 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.076557406 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.63992289 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.08601465 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.418752073 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.01806759 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.739720757 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.040931804 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.120403645 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.070910073 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.374640531 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.650366035 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.146173218 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.679392077 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.213081391 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.948847106 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.088965013 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.678567743 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.434316393 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.974622153 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.009078718 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.378523519 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.014291673 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.244157931 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.643645669 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.260592756 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.0259187 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.013173408 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.064081339 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.060178777 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.196197411 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.023359157 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.120480636 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.756023084 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.67018521 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.529739976 seconds)
  done (took 104.927761313 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.008195269 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.001095876 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.99831394 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.997368057 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.003570711 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.998493668 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.001145391 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.996692131 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.997329471 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.998461297 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.997796178 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.177126951 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.149749761 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.156233691 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.148627392 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.154919713 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.14797085 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.157207327 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.148178601 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.14868335 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.151793015 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.148242281 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.144702835 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.14833995 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.157422071 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.15162376 seconds)
  done (took 56.224970515 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.146576469 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.323914582 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.446197492 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.182249986 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.148297677 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.150402431 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.178247403 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.162223032 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.151293136 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.150759351 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.242604983 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.16541421 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.161691721 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.433891838 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.176848263 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.147578202 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.157449663 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.148833954 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.334036954 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.163024248 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.181010177 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.154513589 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.176028445 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.162492426 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.149328859 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.154347628 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.150359937 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.608708715 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.16138416 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.242766702 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.213675319 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.186794643 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.496688808 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.447091858 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.21721076 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.157997197 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.147845691 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.288536813 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.162243869 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.150315095 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.176908299 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.156157178 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.437916381 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.677943688 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.165129121 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.148977954 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.60881933 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.300428286 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.198484527 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.162871019 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.444660342 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.180461812 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.149493975 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.150256867 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.186939338 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.16244169 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.154187375 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.431762489 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.165057314 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.17773673 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.163879423 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.15157044 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.340764576 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.160988088 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.328419082 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.167067968 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.155896734 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.150502482 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.439040467 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.188360665 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.680474282 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.166292566 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.149394412 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.246145044 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.34273913 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.633808984 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.16520839 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.343470636 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.525374358 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.187618049 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.161101993 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.597935813 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.201434406 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.162539503 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.150268571 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.152224067 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.150948407 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.200085294 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.179595456 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.59204137 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.681135662 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.45957538 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.193591223 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.167543866 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.154440417 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.43796384 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.16460637 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.151490211 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.437708769 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.705762706 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.177079417 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.161286802 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.658554745 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.17254714 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.187802148 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.165553184 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.453752775 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.187013451 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.204981189 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.15520801 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.161709537 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.159024333 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.185370134 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.170842948 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.154867269 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.652326724 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.308723752 seconds)
  done (took 266.200669365 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.159049933 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.15779341 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.157789026 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.156605788 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.162021454 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.155792982 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.165014817 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.153352283 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.159903767 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.155874378 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.15906279 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.165819869 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.157665515 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.158630301 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.203634138 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.158517869 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.646117878 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.155718388 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.156655679 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.157475225 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.726788687 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.164354928 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.15716701 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.159994602 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.157927545 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.157245299 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.164918499 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.204587207 seconds)
  done (took 175.691005795 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.159649058 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.207026881 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.17611516 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.204713502 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.171227117 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.158450778 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.187110952 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.173297258 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.163063626 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.157328984 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.159219819 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.194352812 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.166158378 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.234441926 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.187978152 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.193051473 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.23766556 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.166445648 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.156786129 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.159506248 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.21476346 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.172552445 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.1873741 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.213169246 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.177000975 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.207313676 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.173128021 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.157940231 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.157396876 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.249228032 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.178065501 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.186271686 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.194407564 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.176967623 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.254039436 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.254122321 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.243020587 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.186355435 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.162040221 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.15950315 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.159341858 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.160005394 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.206324911 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.172878966 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.161563975 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.251157512 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.180282956 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.159719898 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.181578338 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.158907364 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.17051542 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.176963591 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.192688055 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.261753158 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.208017935 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.186555135 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.187407082 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.177300037 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.160811794 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.233643815 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.167730661 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.253013993 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.183032911 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.163620274 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.161921237 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.164066211 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.213933282 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.195868205 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.238674815 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.168636469 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.240573005 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.216594491 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.174745135 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.160405673 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.161546006 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.218533573 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.249668915 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.216490248 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.223775771 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.202244004 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.170860577 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.16069057 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.163427061 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.188067472 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.176161251 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.250131292 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.257222004 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.170267314 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.168350423 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.162243814 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.16202323 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.185252117 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.218581361 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.203182023 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.245510307 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.199466691 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.198944283 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.168985441 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.175062418 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.165723387 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.192195341 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.170364211 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.174088048 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.50126985 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.200190234 seconds)
  done (took 232.358347866 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.51460981 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.21630947 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.232528718 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.441807992 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.524061296 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.28102225 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.202241865 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.216867515 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.221727415 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.325487006 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.268804969 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.255602121 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.199280729 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.184983849 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.211057558 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.219860055 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.237381502 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.505227392 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.313131129 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.892126011 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.2125548 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.46182543 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.511633058 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.546006424 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.252359922 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.59387469 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.811268718 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.298496922 seconds)
  done (took 70.24376794 seconds)
done (took 907.588003925 seconds)
SAVING RESULT...
DONE!
