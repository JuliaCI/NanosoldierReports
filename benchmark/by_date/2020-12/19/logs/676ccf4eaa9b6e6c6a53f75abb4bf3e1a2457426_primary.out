cset: moving following pidspec: 30441
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.830720742 seconds)
loading group "shootout"... done (took 1.21999467 seconds)
loading group "string"... done (took 0.675052588 seconds)
loading group "linalg"... done (took 8.709220623 seconds)
loading group "parallel"... done (took 0.168900449 seconds)
loading group "find"... done (took 2.923556585 seconds)
loading group "tuple"... done (took 2.144046713 seconds)
loading group "union"... done (took 15.04457412 seconds)
loading group "dates"... done (took 1.486586089 seconds)
loading group "micro"... done (took 0.220898815 seconds)
loading group "simd"... done (took 4.810788602 seconds)
loading group "io"... done (took 1.097103543 seconds)
loading group "random"... done (took 9.642875829 seconds)
loading group "problem"... done (took 1.526647514 seconds)
loading group "array"... done (took 25.468021468 seconds)
loading group "misc"... done (took 1.805969949 seconds)
loading group "scalar"... done (took 44.136973802 seconds)
loading group "sort"... done (took 3.348568082 seconds)
loading group "sparse"... done (took 12.881033428 seconds)
loading group "collection"... done (took 18.967669001 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424972346 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.116156514 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128565214 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114556399 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187846988 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120022842 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126057035 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082569149 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.917433777 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134711695 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113386233 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.424057182 seconds)
done (took 5.352277522 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169423613 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09119738 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082862059 seconds)
  done (took 1.409368623 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072058467 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06330674 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06728275 seconds)
  done (took 1.437427536 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064866908 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136885593 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066317795 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066842049 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066541803 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065906633 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066081522 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066060302 seconds)
  done (took 1.774439535 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072018212 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066581251 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064565799 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06599272 seconds)
  done (took 1.507626801 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065623069 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122436437 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064230424 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064322922 seconds)
  done (took 1.551921423 seconds)
done (took 9.169772177 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140849645 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.816909629 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.7715648 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124332209 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248637241 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.368068707 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124171258 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182975697 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087268117 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073514026 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119848698 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076025291 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386392146 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.506482109 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.07050062 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175132826 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.644434346 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087730715 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134247904 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.455483312 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072138033 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087458517 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084613408 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069491578 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.326606162 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154012519 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.662561264 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091651924 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06667355 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094539439 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071340789 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076842963 seconds)
  done (took 10.723362933 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093241285 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088614173 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067298475 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122320173 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092011505 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068242461 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073970504 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066111591 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087413672 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122284781 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088276711 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097865766 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066871103 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069075148 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073835688 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195883856 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078809592 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079886891 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065809548 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.07971875 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104230391 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076908426 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07677722 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076612057 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130793311 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16819107 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094951193 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096723582 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064619761 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077318932 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113744315 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123521666 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065880575 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064275321 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118284318 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093906085 seconds)
  done (took 4.613090305 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.884268797 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096564989 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083068678 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072423717 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.093177675 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104002994 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112032625 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.118836801 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120694047 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063194985 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103261291 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067394768 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.150930453 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666152463 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.171499625 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070258949 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119400208 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35459108 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.0648179 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068771705 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066577221 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069665639 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069954437 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110564439 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067142008 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173843916 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.578197294 seconds)
    (27/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083837636 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068512687 seconds)
    (29/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069690251 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097238045 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064621237 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141273571 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093071437 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0690048 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549143771 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064325521 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.175519739 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088843541 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094503158 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066932224 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068053772 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079379953 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066680342 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109010436 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0807815 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.523151038 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070074534 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.594384232 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229395667 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073708012 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072670746 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101885799 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064847455 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068307011 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.952376079 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.141076323 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066097432 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.275602926 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069064916 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068682741 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069281757 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103320632 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067213273 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068591488 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073241183 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096701889 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.889240004 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065392362 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087815718 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096566196 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067361943 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.410920815 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074593987 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069489303 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069757173 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.06936747 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107363466 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066648917 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066155934 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109037877 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093168429 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087566613 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068285088 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065825428 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064337792 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.679848049 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.177465279 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064513264 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065946678 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.47748235 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063649837 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065925605 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067757821 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.212561187 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066896589 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064451032 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065547664 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100208687 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072203284 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.3343082 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.06811086 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.49333825 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069768129 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104298321 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120040797 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068088644 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103133415 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068289723 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065518685 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07384495 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066187586 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065087681 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069358961 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066041751 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066455028 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06945436 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068612911 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067766703 seconds)
  done (took 23.294346964 seconds)
done (took 40.756185176 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.31830357 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079756674 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079440571 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079850471 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.0796916 seconds)
  done (took 1.915052935 seconds)
done (took 3.29280111 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.259078054 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076056688 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064445644 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.207365473 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089803653 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175901243 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217334041 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.165552418 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088592403 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086591757 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086567975 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.218016299 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.224997453 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.08723008 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.157517371 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224391413 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086571917 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062760765 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089371178 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089797555 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089634158 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064376116 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089518433 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089430267 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.159844714 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088970082 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063621759 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.159048896 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.088538963 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.160336759 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.088157849 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087803602 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.088124726 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.15754335 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088048094 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157622341 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063513425 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087780686 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.08752835 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.086160076 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084237075 seconds)
  done (took 6.211116194 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076799991 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203840983 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085054666 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062361732 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071627194 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082835367 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061827931 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082123957 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092015554 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083002194 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082685137 seconds)
  done (took 2.353456068 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071231382 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08342141 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084817438 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061701918 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073247073 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083946101 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061557351 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08322563 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086336345 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083735984 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083871776 seconds)
  done (took 2.171826107 seconds)
done (took 12.037366339 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098620489 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066079205 seconds)
  done (took 1.460225366 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.227718794 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.500636998 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.972596725 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091030569 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070317815 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.0831769 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.193960889 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065131289 seconds)
  done (took 7.6951775 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.10427739 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068403136 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067623293 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068100641 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069489156 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067908653 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068901662 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067756726 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067716552 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067987096 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067953497 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069848598 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070063641 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069650389 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067550537 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069126613 seconds)
  done (took 2.547570862 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104460848 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06924064 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10016445 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061906049 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072073501 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062185503 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071250984 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073035275 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070805031 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071600233 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072700782 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07166432 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071908229 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071874502 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073303435 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073421012 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073972844 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071400862 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074043709 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074240906 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073013573 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072611475 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073836052 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071909192 seconds)
  done (took 3.210456426 seconds)
done (took 16.228976392 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17820858 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074544066 seconds)
  done (took 1.55876134 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.06875143 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068670847 seconds)
  done (took 1.461857003 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073744379 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060660485 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078543787 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070830045 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061574612 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061111258 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077665837 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06153055 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060669198 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061861198 seconds)
  done (took 1.993101746 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063720944 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069068411 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066488311 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064515218 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066985474 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062824966 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065358453 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062825561 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069651474 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061795948 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066225591 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084045142 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065697406 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08464839 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06559803 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06647647 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068036523 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065632505 seconds)
  done (took 2.547395839 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06152533 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061885417 seconds)
  done (took 1.462488096 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065145069 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061518843 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064190653 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064326704 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061858982 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061153379 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062000824 seconds)
  done (took 1.770720651 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.432076377 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125676594 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.351018402 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06922567 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077439926 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.261192745 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064218441 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069235931 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069249941 seconds)
  done (took 2.895578099 seconds)
done (took 15.03070314 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083402691 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183116617 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088059918 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.387811227 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092463789 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067611641 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11356411 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.180846376 seconds)
done (took 2.553489217 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.2800554 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.243918517 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.402208474 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126978024 seconds)
  done (took 3.11118908 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338871267 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078992206 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077989517 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067098523 seconds)
  done (took 1.915670339 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065508397 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071358086 seconds)
  done (took 1.480784126 seconds)
done (took 8.142518876 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072154419 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.097492042 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061065797 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061530871 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.063574092 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064211521 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063504906 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062991389 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061887565 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063822368 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061543537 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.063742879 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.063578785 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064190776 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063850913 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063810186 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064109921 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06371069 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063670032 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063364198 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063771412 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064154248 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06353912 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.0636294 seconds)
  done (took 2.924348052 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080569088 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065275918 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066776004 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066710554 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067128591 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066571265 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067132258 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065786538 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067144715 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065456306 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067560417 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067575672 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065058478 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067416546 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065275638 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067298012 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067037033 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06580284 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065609696 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067669875 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067054688 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06629038 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068014358 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06719852 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067704001 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067441913 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065756705 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065831779 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066934566 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067430286 seconds)
  done (took 3.376404862 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067036766 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059536495 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060276857 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069998344 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060037797 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06048492 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060571649 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.05951326 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059937688 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061538785 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060817473 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06016807 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061279017 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060505782 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060273294 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06081587 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065311942 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080100454 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060594458 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.0602486 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064346253 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060309116 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060237054 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060288728 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06119344 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060376996 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059992646 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060281256 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06055019 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061074724 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060556743 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064593248 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065730261 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060374407 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071003981 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065361518 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060265229 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064601601 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061131863 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060089769 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060278115 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060004913 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060462079 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060535866 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070833872 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060625393 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061388743 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060930232 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060578962 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060030663 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060191563 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062355395 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069317272 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061716362 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060257941 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061627409 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060491161 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060839318 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060518418 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060487596 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060441789 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064113783 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062181579 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061052532 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080545001 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061973389 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07096259 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060798031 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06134482 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064235598 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060809451 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078772895 seconds)
  done (took 5.866636863 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072818068 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07258284 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079472447 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07060795 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064350041 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061555737 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065034113 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061579796 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071291231 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065384917 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061425652 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064668175 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0709802 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065303721 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062227541 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071170408 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065362611 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06435182 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061373606 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065561746 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062565576 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065027904 seconds)
  done (took 2.838121345 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.14168401 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066242398 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106720095 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071147342 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06947106 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070836969 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06677796 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066551771 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06752692 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067597165 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067468886 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067253534 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069288269 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067029631 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067152518 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066820826 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066510808 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067107731 seconds)
  done (took 2.697047424 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078311528 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065750035 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090067541 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065931049 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065868058 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065835209 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070089924 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070364622 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065776069 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06641155 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070395211 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065874786 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066136258 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066391429 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066212585 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066491943 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066185876 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066568831 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070391579 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069811481 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070014086 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071707498 seconds)
  done (took 2.885752215 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079781608 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064889749 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081183325 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066904939 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060731442 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06007357 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066184162 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06588637 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06680665 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065401516 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066100834 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060564496 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06756122 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066048371 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067860387 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065833557 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065263756 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065839999 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065324181 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060578166 seconds)
  done (took 2.692100426 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072720008 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063125509 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063275315 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068729637 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06351694 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063491903 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068900566 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063661997 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06384121 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085952392 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063870847 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07484031 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069187123 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067304748 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063996118 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069131457 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069307957 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069091977 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063457417 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06386635 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085720825 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063926087 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069144532 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063742788 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063313705 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061869846 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062077358 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065234222 seconds)
  done (took 3.25150161 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064670535 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06302212 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063395764 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063285553 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063227994 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063650478 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063446319 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063450187 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063202625 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063704412 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06307671 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063415719 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066638 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063730541 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063735644 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063184888 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063578018 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064179027 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063933307 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063710667 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063525161 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063673734 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063459334 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06395082 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063857945 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063521774 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063802725 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063660027 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063692736 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063873469 seconds)
  done (took 3.281286612 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073816465 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071569573 seconds)
  done (took 1.514491985 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062240163 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077769573 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060093466 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072404889 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068872347 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.0640289 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069302109 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068828508 seconds)
  done (took 1.906077735 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068505241 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091247136 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062382624 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06220358 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065342703 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.129563161 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075441056 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074304495 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076556345 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064788338 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062774796 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074896896 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061931802 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075607282 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063693247 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071222409 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069348374 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080565235 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075740579 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060013839 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0745964 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062995563 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060193571 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062495037 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060272026 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067487046 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076105451 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073405426 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070629961 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06021472 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081295821 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060588885 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06195083 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070819111 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065346193 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060799196 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099592904 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062123855 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067089678 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061231694 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074162485 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082994864 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076265296 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080334248 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063093384 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06338726 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06067283 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062944059 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065008315 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070615794 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060347202 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068472263 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060417648 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06278993 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072825573 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062010605 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067301951 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071718666 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076210188 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072880379 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070995021 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077938887 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071189074 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069780147 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062817427 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081815877 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063261909 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074972554 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076278926 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062237719 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074857829 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060413663 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059549844 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060510544 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095110459 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062384794 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062128189 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060932224 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060567936 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061955771 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070747171 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066298759 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068244432 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064659286 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077531574 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070642572 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060913557 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067850753 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079354104 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064645376 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06053989 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077693887 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064252436 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059593009 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.0786477 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070812409 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062400126 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061382165 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064148739 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074703583 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061775577 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059538291 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069607026 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06200116 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062881252 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064795442 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068759851 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060145284 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070864314 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064790614 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06177855 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059214098 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064601778 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060701408 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059045212 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069800588 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060048164 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074594974 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066733679 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074810815 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074924668 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071133938 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076107233 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059899197 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.05847752 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078023757 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069912852 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061473121 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078063588 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05944535 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073139685 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059365935 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.061079722 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.209383975 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061632253 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064836479 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062428845 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067613017 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063545388 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064083881 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067325043 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070596723 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074116068 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062457374 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070451404 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061189946 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077236469 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071597129 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065371624 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064301454 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061998965 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073203441 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067872995 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.07039606 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060080737 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061386241 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060692762 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071760421 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070778271 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063027557 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068139522 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065333635 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060964953 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061010085 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062135777 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064478609 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064541697 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061875718 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069159968 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069878717 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074679661 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067824582 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070062565 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059793044 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060300548 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062327909 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060564125 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06522163 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070377472 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076439315 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072680953 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081956919 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060376967 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07081722 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062027211 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078152929 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074451774 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061675259 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065530135 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059450877 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062206279 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070408051 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072504603 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075212134 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076369896 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065452781 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065524002 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060634828 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076457201 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061309427 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069553011 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070498524 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065308154 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060739397 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062444866 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070000714 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064854969 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060603244 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076751703 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067010557 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060473905 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075394858 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061107742 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071645884 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060136982 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064359112 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066098112 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062497917 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070425006 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076700706 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059625017 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06145689 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076764286 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062847526 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062956515 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069327517 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076437354 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065473173 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069040746 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072039744 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071118864 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065457457 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070682274 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061601316 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070421615 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063720979 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072568155 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060544148 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079061669 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.05925771 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076292133 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060514711 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071588901 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061034613 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069950549 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061327211 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077877478 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062136374 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061431995 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072505158 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05903145 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069815958 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059390716 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065327853 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066500726 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069447783 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061624061 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069521317 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061837644 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06901314 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064582686 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068226884 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069334182 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064666359 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059023916 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068471113 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070979892 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068233124 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061076215 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061087197 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060258054 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.213968229 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063887811 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063928814 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070997483 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066730604 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067839916 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063120644 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.0632563 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062909911 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070004683 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070891954 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079572337 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06996375 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06884653 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07064405 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060836326 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076689534 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060893076 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071619613 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.05951093 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066514278 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070030288 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060445088 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080375536 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06238786 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06903838 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073613904 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069739784 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06428397 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07911725 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064143007 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069608244 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069084332 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065401481 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067094586 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062703796 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069681875 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070483465 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071538618 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061564065 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068812656 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0704688 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062485446 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068605965 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062212635 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069271811 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062170058 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059668369 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06535082 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073154177 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065181984 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065633955 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060944367 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059300042 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061258394 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06757232 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065147653 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.06948245 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076145265 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059565205 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061647141 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060187028 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064480367 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079407003 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070436584 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068965024 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06537199 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059749097 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062403198 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062561438 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061459595 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06467229 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060361509 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060354759 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071547084 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06271004 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06513306 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060922267 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061831877 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070545241 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065538329 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061607685 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067548305 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060495894 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065965654 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059539225 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062374124 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065539328 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060218372 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064308218 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071345738 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077954276 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067754878 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069982682 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061818088 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069071895 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076783719 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068289687 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06237471 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07081152 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059925701 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079665247 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070769962 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069994746 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070959053 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062176514 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078178621 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065576455 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070943813 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076685447 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062294399 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067440266 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060538659 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076665452 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065409413 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05999351 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068927814 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068656644 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066698982 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072817614 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061558068 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069109505 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065223332 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063857592 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061577263 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061591053 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069304513 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076256791 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060885371 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064251207 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068448845 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068745625 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064854887 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072276328 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.06867156 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061021575 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061722117 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063779268 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.209467867 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073265399 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062883216 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066988917 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066491834 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061402463 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068359186 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078570028 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070745225 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071211896 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060634376 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060325899 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079337227 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064927883 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064640328 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069244991 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070700995 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07381082 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070810903 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078528684 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061330125 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066707323 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072966895 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061610193 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060672245 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064431285 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062119017 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070073646 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071005465 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068511715 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062924598 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067856502 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075078839 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062426528 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065962069 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065583693 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061546467 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071577169 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070015574 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072959538 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062041391 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06035519 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063989655 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069909084 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068211954 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069768896 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061304667 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067702681 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074615929 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068304464 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063784399 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059976098 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063792674 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07005715 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065472811 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060364593 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065577464 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064609868 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067887875 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070668538 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06548582 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060207918 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078310029 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069060198 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070149033 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062500043 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062856382 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061236702 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060241953 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072466051 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060359204 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062521989 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065512734 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062570193 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078828094 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069724484 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07701565 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061778565 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065316132 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060268213 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070703907 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065542441 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060880914 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072017788 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059888115 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076537696 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073272384 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066596802 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060116552 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065785063 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068857329 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076245278 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070366572 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069793741 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064249001 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070524161 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062668317 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072069219 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06047216 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059730353 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071359609 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069621444 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073622451 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06088709 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071821455 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062811765 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069836497 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06908891 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062275665 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062612639 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062644937 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070682411 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065585303 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070249915 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065567319 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077791425 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061697733 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072085097 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069744478 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071741458 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074582953 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073077824 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068596352 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061067061 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067691531 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067868783 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061130355 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06489727 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063066443 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081689278 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061483884 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061391712 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073927856 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065450866 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059691298 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065535841 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.207200766 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071541947 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063088904 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072544013 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065853699 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06204672 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065972909 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065990613 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060092047 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060463981 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061099166 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070815737 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065306771 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060957847 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08030206 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062122333 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069584099 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072481132 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067326835 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062343946 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059464214 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061458711 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074098987 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076270445 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064049877 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069514439 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062162513 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070298227 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059697119 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070356493 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070000452 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06978632 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060363029 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06100454 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075344719 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074871385 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.0642139 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070804899 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070331533 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062693721 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083955626 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069302803 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060676358 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070630393 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061744596 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058841574 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058496355 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060952708 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070980287 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058716857 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061511316 seconds)
  done (took 42.024752077 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099374378 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061457221 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060459211 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060221067 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068802789 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061217564 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060436007 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062003596 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061528153 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062844195 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060476635 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063380738 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067515328 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074183618 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069307085 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.0642395 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060515543 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06128748 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060479226 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06127004 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067291029 seconds)
  done (took 2.84552722 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064907763 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064761594 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064781279 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064249322 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062862732 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060507511 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064847595 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060614166 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065244982 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061009504 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064554563 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059821179 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059630293 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059671581 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059315321 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060841626 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064856875 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064370164 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060737121 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06449758 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062382645 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06503281 seconds)
  done (took 2.840817415 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062844702 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061080357 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06965943 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059720576 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059672816 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063765712 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059792488 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064960038 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064753101 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.0648467 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069990851 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060873358 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059475787 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066025122 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059598744 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060984832 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104255326 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061283237 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06155212 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059849847 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063118414 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069953029 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060085132 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060213882 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064888845 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063601889 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060281964 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062889335 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060824173 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064833524 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06056091 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058341477 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068025456 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067267332 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063579533 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064793624 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06183496 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06148502 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060023829 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.05989791 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068971699 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061854197 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06020765 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061495464 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069610635 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059961249 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059846029 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069604053 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059580744 seconds)
  done (took 4.586561589 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071851366 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113103125 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06642266 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093897802 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073407105 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066434435 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066096005 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095511412 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061323454 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062058533 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.07445964 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074496448 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062971995 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064545688 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067591546 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063167641 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064276096 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062586402 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066121801 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062861533 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06593461 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067228432 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073295875 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073935149 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064201851 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062128398 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062914223 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064358195 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073235287 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066768404 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064766204 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065361258 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073600516 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065987335 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062787824 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062830884 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074285769 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063464796 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062981367 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061516682 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062783044 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064426926 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067696204 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074567803 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063437847 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068261214 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063352384 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060903886 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073957041 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063400204 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067313623 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075294408 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065010691 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063384948 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064721448 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073947093 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063307173 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062278019 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063513547 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073870417 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061477121 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064168141 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077516376 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063116038 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066577538 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074811084 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067198113 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062651576 seconds)
  done (took 6.246917448 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071195989 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095918035 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075484106 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07398808 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06916428 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069632903 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069305759 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068832878 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.06916299 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072249244 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069076635 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103548624 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065759191 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070787632 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069176806 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070084472 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069800323 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069434765 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069170904 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069298464 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069107571 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07412954 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069077504 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074290431 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071756962 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065566261 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069000292 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069551526 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074707612 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069598467 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07179888 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069181532 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069607096 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074492651 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071485269 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069039387 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060013839 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068766691 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069247516 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069069545 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065707015 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074369704 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069045239 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065331989 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069215018 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069434213 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07442768 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071950937 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072676967 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07374559 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069923583 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076066192 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070660008 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070438371 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075821407 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079385194 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07691196 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076886549 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071972089 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076397876 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076729697 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079428095 seconds)
  done (took 5.966209488 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074982212 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067082595 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079757752 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06010894 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060126794 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070071663 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060277619 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060174031 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067541149 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067319134 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068896552 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069844162 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0722901 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069037384 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070224553 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072089881 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069869411 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069819638 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067141151 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069861956 seconds)
  done (took 2.860770025 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076199887 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079382221 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065894534 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069764507 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065652141 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069953052 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065193492 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066177157 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067271519 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066083563 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07083462 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.0709116 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066305114 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069745829 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.0707472 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069651409 seconds)
  done (took 2.574809176 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064528089 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068399309 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066923776 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.06105801 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063071484 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060447614 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061639612 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059943834 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063022978 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075021052 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061194416 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064207002 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06149641 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060341147 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060796467 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063951747 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063375065 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060892436 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061611593 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065637279 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069737653 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062434596 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063944761 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061547549 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06330235 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069206731 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061432012 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063731237 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061111831 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064325607 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063894934 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068265424 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063669402 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06189398 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06032588 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061289502 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061685897 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064120153 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064163614 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061276916 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060192608 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066650781 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061407442 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062270547 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063530366 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064494525 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063201676 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067376276 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061761103 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064003545 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061971493 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063739763 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062239002 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068643375 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063972809 seconds)
  done (took 4.982743467 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078952296 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065772113 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060315934 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060004512 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063938022 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064356714 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064886332 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065721993 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066596603 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059882524 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066117305 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065285457 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066039001 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065906659 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065196354 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064029761 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058465908 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064057785 seconds)
  done (took 2.67074567 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067775907 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06511026 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063319857 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06072992 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061051944 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065307635 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058749234 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060372272 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060476322 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060540386 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060759394 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060391443 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060284724 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060627623 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064818068 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062392313 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061883053 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060845587 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062167316 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060261907 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066967178 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060669848 seconds)
  done (took 2.858369102 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088974731 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084061692 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128720369 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080241119 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088702802 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072064675 seconds)
  done (took 2.03852245 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094281601 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098506419 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065401623 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06519858 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070226772 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068558463 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068477731 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068699147 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07205434 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072549532 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0686484 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072153841 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072048135 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074112503 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070143536 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070602164 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069069723 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068771962 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06575158 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076353882 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069044302 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071542358 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068524503 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068612032 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068400401 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074313844 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072161773 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072747942 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068517176 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072306919 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071138147 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068480836 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072705549 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072236428 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065705571 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071388044 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068015195 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076517783 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070479792 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074401203 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065121354 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07034121 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072433068 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071910928 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072264438 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068739879 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072542031 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069045367 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069098079 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078240567 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070958152 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074239219 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070874632 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073066612 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07247175 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07844302 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073091552 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074334171 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070815764 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072850381 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074491333 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070980992 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074601197 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072861785 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070654025 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074274251 seconds)
  done (took 6.24310651 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105199926 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064458195 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067176512 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070721934 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072052178 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067146201 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067394735 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067139214 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067218611 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064422538 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102178627 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067566959 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072408831 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075310957 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067280523 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067281672 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06713461 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072268487 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064349938 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075474307 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066758733 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072058824 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072062759 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072168134 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071031944 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068910777 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066976311 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066998074 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067305398 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067213242 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072280733 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068932215 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074261511 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065706054 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073990319 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068464281 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068535735 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072252798 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068886291 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070470157 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074408193 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076344603 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068763802 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068739327 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072637353 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06887554 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068637733 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065771046 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069030359 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066183961 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072678065 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072913015 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073301504 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074464476 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069366376 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069209018 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069323523 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069409251 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069147134 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071071581 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074538449 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069001133 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078635708 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069338439 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068943713 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073783694 seconds)
  done (took 6.20211164 seconds)
done (took 129.520251162 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219423663 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187980605 seconds)
  done (took 1.884745801 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074508261 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166384542 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072886512 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07270384 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107092952 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105390659 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073561984 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069800537 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073120815 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070343097 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138400014 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074197336 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069980995 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070164724 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070268167 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070186628 seconds)
  done (took 2.874180914 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108249584 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185851483 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102701872 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069266986 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151949847 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076490522 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071627435 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076252306 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076530532 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069779312 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107338607 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083307372 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075716627 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076505371 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071840255 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074956539 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076091554 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07615192 seconds)
  done (took 3.134723383 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10428405 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092494887 seconds)
  done (took 1.708378178 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160190136 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103877685 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142345889 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.34247103 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.138032672 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138926282 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.14326094 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136206669 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.109598123 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131556929 seconds)
  done (took 3.045941451 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106963334 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105530873 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310062578 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102389392 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08180811 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076887153 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074336282 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079623327 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074640537 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075712817 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122590592 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074732698 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071507539 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124492913 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098558462 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105669609 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.06986555 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077445338 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078939809 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069837653 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075589539 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079455133 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178784751 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077796178 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.09952506 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074946906 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07709767 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073608837 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074007163 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07788305 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079012243 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09968629 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077664931 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082244443 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076581446 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095659518 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070148023 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098815354 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074300876 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071566104 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074524708 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07855299 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071673621 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078138717 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074485828 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076991655 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079346247 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070189308 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074600328 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073941134 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071686353 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075850755 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075747378 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076885393 seconds)
  done (took 6.26788076 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108342215 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105783054 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067684874 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.109920916 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103374907 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067852804 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102173569 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097995581 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105707164 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067763623 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066718889 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067080816 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074371665 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076807014 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113706619 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105609697 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069012258 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067450326 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104750283 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104651546 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066775047 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099149642 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097509787 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104290863 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066651388 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069258321 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067941051 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068377949 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074350873 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075055781 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067804905 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07512653 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078929027 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072680019 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065794946 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066418488 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066450821 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073317917 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074080385 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074311923 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072115688 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066229561 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066489092 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068163963 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068488883 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06703837 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074236437 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075543036 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074792128 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068102451 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068280741 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067675243 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06859229 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07529997 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074320882 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076838611 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076333077 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068051129 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068076627 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06965874 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076018054 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076910105 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074236448 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06733031 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074640512 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066526896 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075040519 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078534681 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066618318 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067334006 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066678327 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066829801 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067248008 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072178663 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072763925 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067385339 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067794478 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067476239 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076875674 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074502987 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068134242 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07420577 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067643497 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068424152 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068746521 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068558836 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073797135 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075698319 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067677412 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067650711 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067570523 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067359575 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065900591 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07213662 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072739428 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073107674 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072734157 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066967338 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073188939 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072603181 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066992024 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072158975 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066076931 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066701563 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066154842 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07123993 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07052853 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072925449 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065530418 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065151951 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071285183 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073995315 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065730627 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070756071 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073031256 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.20996107 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067540277 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07672252 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06766047 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075085784 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067446561 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075787519 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067453244 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074371319 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067037945 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067712968 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067943885 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074357979 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068889058 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068085481 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068643398 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067226124 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073864573 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076114755 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06732014 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073327333 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072455232 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067302686 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072411028 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066718958 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073698791 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067086347 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067287002 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065801242 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075503078 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066831104 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06667484 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06658634 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074543916 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066497915 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075142916 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072255101 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066067479 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076493424 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074853395 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072293517 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075240078 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06779324 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066987972 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066483798 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069634326 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071525371 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072766462 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06695906 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067410047 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074061824 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076916099 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06678662 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073867799 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075090089 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073987583 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.0669017 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067031352 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075867265 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075028875 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072485826 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072799959 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07318295 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067141229 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072524359 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072426989 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067150292 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078403807 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066960546 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077245298 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075381786 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074237529 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074433471 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074337807 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074615271 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074976851 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077551408 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06642701 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066354954 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072923047 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066798254 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066575054 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072437982 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067437468 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06710334 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077423951 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066646218 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075148137 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065781974 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07365902 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066147452 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067009733 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07707113 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066529158 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06690569 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072685935 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066592713 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072165348 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074660971 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071970052 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066261171 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067272549 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074230673 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073356577 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0664746 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066023223 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06729816 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073474339 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073027958 seconds)
  done (took 17.974970074 seconds)
done (took 38.41231167 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171500028 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114509101 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.2131695 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199154681 seconds)
  done (took 2.306661002 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101031707 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063495205 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078670658 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087572797 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063630914 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073619402 seconds)
  done (took 2.019642786 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202590999 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175980863 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244655054 seconds)
  done (took 2.165485399 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373698525 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150960568 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219838879 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504943368 seconds)
  done (took 2.898412803 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110267657 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101222499 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077980082 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112138392 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086196797 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062081544 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134397249 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068985377 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100757785 seconds)
  done (took 2.465307138 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139300688 seconds)
done (took 13.568026156 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.238732785 seconds)
    (2/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.104407818 seconds)
    (3/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.188147251 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.469020724 seconds)
    (5/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077170399 seconds)
    (6/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.179068894 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.159217291 seconds)
    (8/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.270635887 seconds)
    (9/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.212458647 seconds)
    (10/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.221863428 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134784044 seconds)
    (12/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073967332 seconds)
    (13/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.158325791 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.217844204 seconds)
    (15/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066015434 seconds)
    (16/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065177635 seconds)
    (17/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.189520272 seconds)
    (18/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.222274598 seconds)
    (19/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.142988711 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.120001354 seconds)
    (21/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065528611 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075914069 seconds)
    (23/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.177096138 seconds)
    (24/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.247212335 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.092888585 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077615143 seconds)
    (27/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145169857 seconds)
    (28/341) benchmarking ("sort", Int8, false)...
    done (took 0.155335411 seconds)
    (29/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073458276 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078055543 seconds)
    (31/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076501243 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.091759625 seconds)
    (33/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.143549833 seconds)
    (34/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.112649077 seconds)
    (35/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174417367 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074058188 seconds)
    (37/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073813523 seconds)
    (38/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.17697448 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142816613 seconds)
    (40/341) benchmarking ("sort", Float64, false)...
    done (took 0.137713055 seconds)
    (41/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156886808 seconds)
    (42/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.228759524 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.072870582 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073991054 seconds)
    (45/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.248358592 seconds)
    (46/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084835187 seconds)
    (47/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.180372974 seconds)
    (48/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083018392 seconds)
    (49/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.149596939 seconds)
    (50/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154722911 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074095044 seconds)
    (52/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072690667 seconds)
    (53/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.079720795 seconds)
    (54/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082921485 seconds)
    (55/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069249845 seconds)
    (56/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.200345675 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08604858 seconds)
    (58/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.190304167 seconds)
    (59/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070164419 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087809921 seconds)
    (61/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06660142 seconds)
    (62/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.18885719 seconds)
    (63/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.1200352 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.123906274 seconds)
    (65/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073635732 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076108541 seconds)
    (67/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076590367 seconds)
    (68/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.217971587 seconds)
    (69/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074160189 seconds)
    (70/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08330808 seconds)
    (71/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.196876914 seconds)
    (72/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070921429 seconds)
    (73/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.079520853 seconds)
    (74/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.190381993 seconds)
    (75/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.063347848 seconds)
    (76/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.230224865 seconds)
    (77/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.298750505 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092089008 seconds)
    (79/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.222134941 seconds)
    (80/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067753302 seconds)
    (81/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165984864 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067554884 seconds)
    (83/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065626406 seconds)
    (84/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065227917 seconds)
    (85/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093402291 seconds)
    (86/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.083901083 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.073858916 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.179964458 seconds)
    (89/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073504183 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092375828 seconds)
    (91/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065281899 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095478195 seconds)
    (93/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066931834 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066113672 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073239664 seconds)
    (96/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.222526488 seconds)
    (97/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065136701 seconds)
    (98/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144255004 seconds)
    (99/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.165576683 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065703032 seconds)
    (101/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178696426 seconds)
    (102/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075794761 seconds)
    (103/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.199240862 seconds)
    (104/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07419006 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.235379476 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.14492617 seconds)
    (107/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.08190729 seconds)
    (108/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065372069 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.088166353 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087042618 seconds)
    (111/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072599589 seconds)
    (112/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064445865 seconds)
    (113/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06530009 seconds)
    (114/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077239169 seconds)
    (115/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155375608 seconds)
    (116/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.164613506 seconds)
    (117/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071888838 seconds)
    (118/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074668171 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144376418 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065083575 seconds)
    (121/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065556312 seconds)
    (122/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.207990452 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091007353 seconds)
    (124/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077005288 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072999933 seconds)
    (126/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069487277 seconds)
    (127/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065463942 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088330028 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068648366 seconds)
    (130/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.073836539 seconds)
    (131/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165472078 seconds)
    (132/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07225045 seconds)
    (133/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083494811 seconds)
    (134/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138325712 seconds)
    (135/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065106147 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066312865 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072793978 seconds)
    (138/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075394094 seconds)
    (139/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069045262 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.229973477 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.088778935 seconds)
    (142/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.139432593 seconds)
    (143/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065425094 seconds)
    (144/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069217857 seconds)
    (145/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077441778 seconds)
    (146/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067853589 seconds)
    (147/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.16553664 seconds)
    (148/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063731433 seconds)
    (149/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.173341687 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.083903899 seconds)
    (151/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074328665 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065550034 seconds)
    (153/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149837142 seconds)
    (154/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073009393 seconds)
    (155/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077257369 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089287228 seconds)
    (157/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.202210353 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.07362256 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07548705 seconds)
    (160/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065546366 seconds)
    (161/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067951561 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173421559 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074935487 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.09046152 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 0.144120981 seconds)
    (166/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.172879158 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064707922 seconds)
    (168/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148612463 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144420575 seconds)
    (170/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06445497 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065260798 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089643208 seconds)
    (173/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063276508 seconds)
    (174/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079509675 seconds)
    (175/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152591888 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191374886 seconds)
    (177/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075122495 seconds)
    (178/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065275893 seconds)
    (179/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071517611 seconds)
    (180/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073892992 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 0.066101802 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065773637 seconds)
    (183/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072585135 seconds)
    (184/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066481395 seconds)
    (185/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065338896 seconds)
    (186/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064514168 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154056019 seconds)
    (188/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.2366514 seconds)
    (189/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064671359 seconds)
    (190/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078499066 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067336639 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085370708 seconds)
    (193/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067133672 seconds)
    (194/341) benchmarking ("sort", BigInt, false)...
    done (took 0.270492724 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095958671 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076096427 seconds)
    (197/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183571673 seconds)
    (198/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066905928 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064238185 seconds)
    (200/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066298219 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065789187 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07759281 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.065541479 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085455234 seconds)
    (205/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06829502 seconds)
    (206/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067214255 seconds)
    (207/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.159877998 seconds)
    (208/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074986903 seconds)
    (209/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065835147 seconds)
    (210/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066102803 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147367854 seconds)
    (212/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.0641036 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155766958 seconds)
    (214/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066886865 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142147375 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12653687 seconds)
    (217/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069104506 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069294771 seconds)
    (219/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068131264 seconds)
    (220/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065650399 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.082519489 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11103657 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.164068846 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063783801 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064991071 seconds)
    (226/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065751697 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132818826 seconds)
    (228/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066282788 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065113079 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.065315763 seconds)
    (231/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09287229 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065742048 seconds)
    (233/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065564906 seconds)
    (234/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088095022 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065505189 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072281235 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.14594625 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072277856 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065979253 seconds)
    (240/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069412256 seconds)
    (241/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066810886 seconds)
    (242/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065651383 seconds)
    (243/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072111152 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065350705 seconds)
    (245/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067592678 seconds)
    (246/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073790318 seconds)
    (247/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081053705 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.116476839 seconds)
    (249/341) benchmarking ("sort", Float32, false)...
    done (took 0.138309214 seconds)
    (250/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067260961 seconds)
    (251/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065950917 seconds)
    (252/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072633524 seconds)
    (253/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065339099 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077082101 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07555663 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064660411 seconds)
    (257/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069555813 seconds)
    (258/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091463283 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089363743 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072301288 seconds)
    (261/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165470576 seconds)
    (262/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069228533 seconds)
    (263/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064899791 seconds)
    (264/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065316735 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073046294 seconds)
    (266/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066061894 seconds)
    (267/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072104712 seconds)
    (268/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068959333 seconds)
    (269/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064876581 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065673191 seconds)
    (271/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065724456 seconds)
    (272/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.076098515 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063812689 seconds)
    (274/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065315226 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066467215 seconds)
    (276/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065595543 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132473322 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149424277 seconds)
    (279/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06785664 seconds)
    (280/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066252009 seconds)
    (281/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072824921 seconds)
    (282/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.063561816 seconds)
    (283/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072467655 seconds)
    (284/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067963065 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069143271 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06478874 seconds)
    (287/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067820901 seconds)
    (288/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06696061 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127783433 seconds)
    (290/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09324727 seconds)
    (291/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063701786 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.0654453 seconds)
    (293/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066136652 seconds)
    (294/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.065767354 seconds)
    (295/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067332475 seconds)
    (296/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.166180096 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08342785 seconds)
    (298/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.072476172 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150300182 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065315385 seconds)
    (301/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065585633 seconds)
    (302/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065114778 seconds)
    (303/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069535082 seconds)
    (304/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.063469034 seconds)
    (305/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071804312 seconds)
    (306/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065227687 seconds)
    (307/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06773877 seconds)
    (308/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065286009 seconds)
    (309/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066393985 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168834896 seconds)
    (311/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.0713408 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083733193 seconds)
    (313/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065097787 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065433367 seconds)
    (315/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06903934 seconds)
    (316/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064658135 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077332388 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076333057 seconds)
    (319/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.06420024 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07629128 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064386682 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.247405582 seconds)
    (323/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069828111 seconds)
    (324/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066181008 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13532699 seconds)
    (326/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065585389 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084807876 seconds)
    (328/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065572165 seconds)
    (329/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192114525 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067042403 seconds)
    (331/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134609119 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.086550992 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091567375 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124358859 seconds)
    (335/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.06829879 seconds)
    (336/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069607841 seconds)
    (337/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.063709071 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071749032 seconds)
    (339/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064440911 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064238606 seconds)
    (341/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067256768 seconds)
  done (took 36.991602658 seconds)
done (took 38.557398399 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09116039 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07864053 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077040723 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07413348 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077312105 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07586583 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077280289 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075497625 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076757729 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076527329 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076300964 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064462359 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072863325 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080060969 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07406682 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080625685 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077442237 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080797936 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065328172 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079397375 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093346324 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077212587 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073843687 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079822962 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065246753 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074434926 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089419622 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08665232 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071832232 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074893855 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.0725823 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083651701 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072670257 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071522337 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075105494 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070750854 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074400859 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072260343 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089056704 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070994409 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065294626 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077323789 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072692843 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07371306 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074319694 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077767796 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070773358 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07913872 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064824894 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076341469 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089182701 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070448047 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072384334 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073841515 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07053233 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075129174 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071763027 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076933574 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070463609 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076929244 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076727753 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07346909 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064957533 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073976465 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072483563 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072140348 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063891214 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070175339 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064526532 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06454776 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063530117 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073776663 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071902777 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070063025 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.06522363 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064525983 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063457414 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076957346 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071092782 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074070375 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064880114 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069956049 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069595901 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064958054 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070268658 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076701012 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063926159 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065226952 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064342288 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079257066 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071390214 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064659822 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076252408 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070050553 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070113787 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064594456 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063906572 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069762283 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072819256 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064753507 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063655491 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070750104 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069596907 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074014831 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06551625 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070097779 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070056279 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063397422 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073975801 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072084461 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073565386 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078014404 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073924506 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076658236 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.0649938 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063573349 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074279342 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064978985 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070066182 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072493655 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069414514 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073298167 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065274647 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063455557 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070142932 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070943597 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064686403 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065545322 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064883271 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073704252 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071898743 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063515785 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064428954 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073374352 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073259671 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063708035 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064077886 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074023266 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065087239 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069998218 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069755192 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072753283 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063498051 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064230808 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063126503 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063400202 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062847717 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073332198 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069083366 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064671809 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072991716 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.220729444 seconds)
done (took 12.725803948 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067751632 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109102151 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.080429598 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082497065 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078623338 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066968414 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07013476 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084966922 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.06925944 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.09093163 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091627997 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087922733 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096539893 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064425875 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065498225 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066091409 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063805527 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077723063 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082761939 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089701658 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102276166 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065539161 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081501258 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085177319 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079818882 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083940593 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066861844 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066317879 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06835913 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084778334 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.09189527 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065533493 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067111695 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084025094 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081407727 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073740837 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066426925 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071950178 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069758971 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065464682 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067696308 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083897804 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072509923 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072991248 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066940055 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06708549 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065842531 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073176334 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083624497 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071549257 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078189987 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085332575 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067665413 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066064805 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064034687 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073278135 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065844156 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066470923 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06614543 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065443217 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065888714 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068396132 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07107139 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072261299 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069622075 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072450871 seconds)
  done (took 6.570753222 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082762552 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092228364 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.080597255 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081141958 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065258541 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065949723 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065934562 seconds)
  done (took 2.220430646 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066835185 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074018961 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078809999 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078420815 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087767628 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076119778 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06633393 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098156807 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065442483 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074709447 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081910577 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079937639 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069563771 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078592263 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066497996 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078116509 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066312135 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07335969 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074084497 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079843723 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069988811 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096229033 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079810767 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066702324 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.079732974 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073575951 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068140352 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066389113 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066382493 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065459379 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065781592 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088274611 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072405078 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080587873 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066321837 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064776463 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070539343 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066526501 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.070299442 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072944183 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069420002 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065365184 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065745386 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065577942 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066661297 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070473615 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066695965 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065302859 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06517158 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07344261 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065288732 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072431066 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067994298 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071071045 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070686713 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070759912 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073255886 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066126606 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073654516 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072096941 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065408833 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078483512 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07751315 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.06923906 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077955509 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074784326 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072481536 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.06973361 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065265969 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06498758 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066189989 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078080544 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.068973173 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068002102 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066572106 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070828164 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069790937 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081971662 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.080656772 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078119807 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067418231 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065932177 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069735927 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081583391 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069774404 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064164015 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066346595 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064099985 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069675564 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065890014 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07068353 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065605835 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072836697 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068684796 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068041966 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07384739 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06585975 seconds)
  done (took 8.609335181 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069096242 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068300561 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066789076 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066893631 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067145452 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066791736 seconds)
  done (took 2.120834344 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090178736 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066269575 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078517436 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065857312 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086265779 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071059914 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07115335 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066761445 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080789055 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077117119 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072346339 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.075907392 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076102908 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068290757 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072480181 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067407149 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072758207 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069651019 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.075938649 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068585546 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082872125 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067544257 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066799583 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076536038 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067638752 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066532432 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06755072 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076776783 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076500438 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068102717 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067578671 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069133048 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074821888 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067792923 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072905086 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074845313 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066050993 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071698357 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06887777 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069255342 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075163974 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068225792 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068548644 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071460688 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067561282 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074573453 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07184678 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070134316 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072434646 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071893697 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072043893 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066894727 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069480543 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071907398 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074800122 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068223992 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071984122 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072663258 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06781988 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075180941 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066216945 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069256972 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068072634 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069151862 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071668768 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072099077 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.0750978 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068255063 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073780709 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.0659878 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072354351 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066181351 seconds)
  done (took 6.828373727 seconds)
done (took 28.001041013 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542605301 seconds)
  done (took 2.194583784 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.89148038 seconds)
  done (took 2.585198867 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.266502765 seconds)
  done (took 9.965294695 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.348818027 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.410996893 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.739852758 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13044555 seconds)
  done (took 3.367587421 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756809014 seconds)
  done (took 2.467553682 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232486141 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223539155 seconds)
  done (took 2.171255961 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338183023 seconds)
  done (took 2.035604766 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.154351307 seconds)
  done (took 2.841826961 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235944776 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.170962733 seconds)
  done (took 2.112799564 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.544967692 seconds)
  done (took 2.245648716 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.270104196 seconds)
  done (took 5.976788254 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232846528 seconds)
  done (took 1.974441689 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231947879 seconds)
  done (took 1.937929556 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.01671866 seconds)
  done (took 3.715935849 seconds)
done (took 47.299311468 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084572136 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086555466 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084789284 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079365775 seconds)
  done (took 2.01298353 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074603129 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070337241 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073380533 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073840396 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071447791 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072164449 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072809725 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069615663 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071267362 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070287338 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.06839987 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.06965383 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072433257 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07000587 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072515548 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073723031 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.0703454 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.06992404 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072247958 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069696399 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072945724 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069798308 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06808857 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069424455 seconds)
  done (took 3.415295336 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078884624 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071955523 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075110456 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070799645 seconds)
  done (took 2.011137112 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07695513 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076225222 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085916438 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090533601 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075646559 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076722471 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084017063 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084634417 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065359431 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087183371 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067976744 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066546356 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066947452 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085768781 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083129401 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062223932 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063741418 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077003486 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076220901 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07892428 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068375427 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065378644 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07571102 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077135012 seconds)
  done (took 3.531335206 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083048647 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065469785 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082042261 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091932554 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092669397 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06532763 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079685112 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09289598 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128872757 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065357466 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071302002 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064886599 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105238543 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065577429 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080954702 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108955376 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112304331 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069365603 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099065374 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065414143 seconds)
  done (took 3.413737388 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07639377 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06898808 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070006189 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065534657 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076899123 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073299542 seconds)
  done (took 2.154566802 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068997101 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067896304 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070014934 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072238001 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067449403 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.06747199 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066996963 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065790189 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065733908 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066328338 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066647885 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066714986 seconds)
  done (took 2.526893901 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.14989644 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069557771 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068883346 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066185966 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.067280293 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06621497 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.0812362 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067991367 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08540807 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066484649 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066779289 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069242652 seconds)
  done (took 2.640196523 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105527305 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112233379 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14635787 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117715101 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118196012 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097252533 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125389935 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09495147 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161519736 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138308401 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117796869 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094094792 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087200676 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069619199 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10009716 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117042287 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138873781 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07241519 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113856346 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166386566 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133279949 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136194998 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149338622 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1179957 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09057304 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149387507 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098080753 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103041213 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125712493 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126413358 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12057623 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098412419 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07122691 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070375152 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150096852 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103589946 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121448852 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093507954 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10547215 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088512062 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107971201 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069245739 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085498012 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.11403148 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085083335 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130903077 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088086292 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116057897 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081354071 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138472368 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123040574 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098220288 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0845811 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103625796 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.295164534 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113756637 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135909573 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10831352 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083417637 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.12007191 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103593504 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101996262 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108414592 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080313493 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178200794 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089112475 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112356047 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112293571 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.09444946 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094872169 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107474786 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136487038 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125507851 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126257279 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138953526 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0955151 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123428937 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100607012 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130344026 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105378439 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073162308 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121929093 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130029067 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099575078 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101481058 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13110196 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09208281 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077972554 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099593897 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119181149 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080131364 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112747849 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080811515 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109458358 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134976691 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097870865 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112616895 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117769542 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078128998 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156572745 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108568135 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072502778 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118103457 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113261619 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156545706 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094273646 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075376151 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099234286 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.265917623 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147591148 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105841554 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078490689 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10854339 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137776903 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093188106 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.167597164 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096779265 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141321819 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113064604 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088047478 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075256969 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090063285 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112572111 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107732515 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112959896 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090403832 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084446516 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087275043 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112630869 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092438058 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081003215 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112433556 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098608373 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072504023 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086098711 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077229882 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1395234 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076472837 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13758424 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12599668 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078551722 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106631485 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098404253 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108826172 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.09830107 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117734661 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141404818 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117097143 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090473741 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094477499 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108932929 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145145831 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127748176 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092861684 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076747943 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101291888 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112972046 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098615932 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125617261 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101082078 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10869848 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101023585 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138689667 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14424708 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099814574 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100577133 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105404401 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.287497738 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075266351 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153768819 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104808496 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117462438 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083664864 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140549734 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111852877 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087321049 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085304493 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098669814 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.103867654 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106911474 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14404369 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096462401 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07255345 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093418531 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145255676 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076378868 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110568263 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090075282 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093565554 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118873786 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.092395675 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079799125 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066540654 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12494465 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156170482 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068064201 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113170027 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110955152 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104254373 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122487344 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070009797 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120023301 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140202605 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118657258 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141926629 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146727865 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117670816 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120078463 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114931753 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106987204 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079934118 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126947172 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135523777 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097184579 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093194059 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136495528 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118565293 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134647743 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.11503895 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113473946 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103026038 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.270342418 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102098838 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103292323 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146209847 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121966364 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125128286 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085916147 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10651819 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118523361 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135861369 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082011874 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142672436 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084871865 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118646492 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07754602 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122726348 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078814616 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111301232 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079543084 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100532985 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069445018 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073933752 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1418352 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112749666 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106570219 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100985135 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139353408 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138073949 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081451911 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108979745 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116651018 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101970253 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117174777 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109985762 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089648603 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095756907 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109850626 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085828119 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082122533 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.115663655 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09461616 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127674337 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084991509 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074682726 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141581393 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105404973 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096115108 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078363757 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108995101 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12192255 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093338443 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087751972 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115374911 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105420303 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142453654 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090251816 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098875521 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123771852 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079622988 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091407418 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068345386 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084460535 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075200495 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.291308025 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077213269 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117989066 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069031712 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130997692 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086925305 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093541996 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102903006 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112455089 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12822334 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094706535 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141282245 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0895113 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118797601 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107379469 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094560933 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089111058 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103593902 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101475161 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122928236 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096400007 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123083571 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143966765 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105643691 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143210546 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091991653 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123534506 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108379585 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124661526 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113182493 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148672974 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139524662 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113443343 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112365726 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075012839 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095105388 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106106206 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112583644 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17593464 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127081153 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071943968 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107396422 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094916213 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109570946 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10417559 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082300957 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145637181 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100847464 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08861365 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112818037 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090545152 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103179018 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075232871 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095078529 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098457623 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.254881124 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099537725 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116487977 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128734105 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113889815 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143873758 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099613402 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093282212 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118766214 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111047762 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110693912 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086288117 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086342876 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138593014 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119488733 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129406551 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.099791486 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110229997 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112608574 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100820887 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125186376 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108289901 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.12692601 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080266641 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075966762 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068804719 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071915884 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124293875 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109272565 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112681348 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099703998 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072047719 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104081798 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106787631 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071667682 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089264509 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09509517 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100312642 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092207999 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107461104 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114614089 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09115867 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104952764 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09994456 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148005312 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100734301 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089019387 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14527567 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151420362 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088463221 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093501856 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071407564 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079324831 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113408485 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148732894 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151580382 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076965103 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086228396 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084736356 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085055676 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070659841 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.248815485 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091793727 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106538421 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100606169 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113439422 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105679833 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075902037 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103751391 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100032965 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092461932 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104552988 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119533249 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125720636 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141487459 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110663771 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108120144 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076769812 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08054658 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075259723 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079932692 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102633582 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079111385 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076530591 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143626044 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09229896 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105646861 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109166591 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088984464 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075303661 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135663455 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069154585 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135838428 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071314255 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082841856 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082931626 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079306063 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094426478 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14082286 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110856127 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114117978 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107936849 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105214901 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141989509 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157049323 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080482455 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143488756 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075652408 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075701194 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075935584 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114588698 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090360365 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115664436 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140744168 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091263092 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104926699 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077571733 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144446088 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099038557 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10398 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086567885 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078526782 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.306478764 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080619468 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080954504 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091232147 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112586912 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073046832 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10478199 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084944508 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079874736 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141856126 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630544124 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090612518 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075527129 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096401692 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142949855 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128488451 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095389184 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107222073 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.1183285 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100521948 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096269219 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108175074 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184201006 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074055288 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094817303 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103713199 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098581994 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102642945 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099232416 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085631746 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093671696 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08708352 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079978521 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108830313 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090131705 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09748049 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108327027 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083745748 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087803837 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131688798 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104908094 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082450911 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089435482 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106024971 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08998384 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101783624 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068808899 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114298552 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09144429 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116683583 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092768567 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10841472 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128070623 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090540203 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139657792 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108370941 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123872425 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087176646 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078506121 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126429832 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08785164 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077300206 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.310834259 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.093332051 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091448545 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102101816 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094869577 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111289852 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114885006 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109377466 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095514388 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077127808 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098022849 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100090856 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08267139 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076269067 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072506814 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074131935 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105111122 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082907453 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081644734 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112347861 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086676232 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100638213 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097042878 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119604482 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080889001 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098515134 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107105668 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090119166 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107476192 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098394375 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125791371 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171829897 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122918455 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126330831 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132560361 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077069217 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075868612 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068642156 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116773404 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079554671 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089784533 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081608616 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135199681 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082206579 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112511946 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232212165 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080641867 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094806991 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097328369 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069745456 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08317654 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108682246 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087536342 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080462603 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120253625 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083988322 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128526945 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111429411 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100670401 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095643781 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081395776 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114539216 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104569757 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12792107 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093572251 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073628403 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.279304548 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103024836 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139346089 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073182039 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081075843 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130400649 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10428899 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131855998 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079944715 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150175545 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143164537 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100506006 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134784434 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071203482 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084063174 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089657306 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126460113 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08460502 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111630874 seconds)
  done (took 68.107269806 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150037587 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141375184 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080599743 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10146174 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185154657 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.1951039 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117704956 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094495616 seconds)
  done (took 2.938671258 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068541363 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083103148 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081302133 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208977503 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097286606 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067577275 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073155488 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082088373 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067280057 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06759825 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101786117 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067872887 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067497726 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374288137 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066506887 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071979456 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067114615 seconds)
  done (took 3.560383193 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.339967886 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.955275675 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.251869767 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.210953219 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.144881784 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.554110897 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074667819 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081432985 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.694826511 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370035551 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.137942781 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08619499 seconds)
  done (took 19.76296629 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077196566 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.07950065 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.0790146 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07515153 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074679893 seconds)
  done (took 2.238582254 seconds)
done (took 120.04353446 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084619903 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17418994 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068094289 seconds)
  done (took 2.132475093 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082626816 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081533226 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081240341 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078655042 seconds)
  done (took 2.186653278 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075168679 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076561993 seconds)
  done (took 2.00447135 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224344481 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178361436 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091478025 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082243048 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079958588 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080416577 seconds)
  done (took 2.11149862 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071851225 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071267883 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072043555 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072025858 seconds)
  done (took 2.13829488 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.06838169 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066679136 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068532558 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071330483 seconds)
  done (took 2.127986898 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085872581 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08708612 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117734609 seconds)
  done (took 2.144411846 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083509886 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.0826231 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077469362 seconds)
  done (took 2.099076447 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110809861 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097775354 seconds)
  done (took 2.058696168 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080589754 seconds)
  done (took 1.93636537 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091042709 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098256647 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140539152 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.106733983 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.139632334 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.125914379 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075299059 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076535014 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073442396 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07275868 seconds)
  done (took 2.836683698 seconds)
done (took 26.21014575 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080147148 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370614522 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359914365 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088138997 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672132039 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356551777 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002263622 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092079706 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102140695 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068845248 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086008148 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649058861 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994247628 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330972109 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979952912 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325148431 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653488033 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068865107 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067985846 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068657579 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.984397221 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068073653 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068665403 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069008574 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650383398 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375355683 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069508216 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325221765 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06828698 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072508872 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35742784 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069427956 seconds)
  done (took 16.421563796 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071221809 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12459512 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072550852 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084853924 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070644635 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069899893 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071240843 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069092484 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112828999 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06827562 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085436976 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068241972 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072326506 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069377884 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090062822 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068383699 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070982206 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072204082 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068584606 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069447917 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087724172 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068079527 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069060997 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069004977 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069268722 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08198521 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069944252 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068513039 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068493159 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072502054 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073009945 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070146629 seconds)
  done (took 4.292259398 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122611746 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12735089 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073459281 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109557112 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118777356 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070216689 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152250277 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092750508 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11704533 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068998753 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086723688 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068403118 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10531656 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070195107 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089210565 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068100964 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071265805 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068996169 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068589909 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06968296 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088446025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068438269 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069190487 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069475124 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069340124 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083726888 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069646087 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068754797 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068517879 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072435956 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073942406 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070397695 seconds)
  done (took 4.567917824 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069735667 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07126123 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077586511 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08061924 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066100135 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068709455 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06961005 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06620058 seconds)
  done (took 2.451783306 seconds)
done (took 29.608043314 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079632918 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067790983 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071113663 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087571171 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073692978 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070015391 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064278693 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074238487 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071046576 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071542655 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073113498 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066855249 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07012497 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064524628 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071953214 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065496737 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072569313 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069984928 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070296145 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071499409 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067767795 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071347861 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074219301 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070462099 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.07041967 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070348249 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074697002 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071954846 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065875141 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068715555 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068113204 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08113295 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07214089 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072357323 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065809493 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065940014 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070158633 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067976675 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072454321 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075563521 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068194177 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075150344 seconds)
  done (took 4.826728636 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089491056 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094864989 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086906684 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082236748 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107802398 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081380991 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091397355 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079340658 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077397088 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090939222 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073613702 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079013507 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080732789 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075536468 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078138721 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07397775 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079597379 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073194624 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078153394 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078068328 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091263363 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071279727 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078525413 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079468647 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07324214 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079544762 seconds)
  done (took 4.014170574 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073109186 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088859608 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092856992 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142413833 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110404981 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082965028 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081744795 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093846504 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101260017 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068101336 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072109732 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094987801 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097223594 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075096758 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106732347 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086207478 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080478855 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069406315 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074435249 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102930234 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090803691 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086785743 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101048115 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088446742 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066915991 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077081651 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075130451 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084432352 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075298853 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080425571 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071945926 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071248861 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067944505 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078842304 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074200979 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063902467 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088383261 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081154121 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081434764 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106912803 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077951845 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069307306 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098682671 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13376671 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067030275 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070530403 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071698529 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081118257 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069622044 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097865208 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086797517 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067472433 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08685695 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069133937 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069047008 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084785161 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06911121 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.112345809 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080077275 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073542142 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088441439 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07309852 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089805063 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067420948 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07958252 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068732831 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.06897161 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06605198 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103886947 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074796645 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12117007 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068673088 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065611906 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080136699 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.07920666 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07423662 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066838484 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087658702 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079773431 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071573992 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079270342 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070371704 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070494503 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103651939 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066264999 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065061633 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065163105 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069850864 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070352784 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067799255 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081080535 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066660103 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070711185 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083872934 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067226679 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067895367 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069889364 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068941662 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066717856 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079114881 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071540677 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069269106 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080042059 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068693692 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070929717 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082636252 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077177793 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06682996 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068701169 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069975761 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069717767 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071743323 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070776361 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069545626 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074263242 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074869937 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074165835 seconds)
  done (took 11.191008478 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164820101 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.15400656 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068709506 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148589419 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07641663 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071349598 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146915069 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086163477 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066462347 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067550266 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06598587 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09567298 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090992436 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103866758 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07033391 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066839061 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092513021 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102106972 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152158744 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147162418 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091827913 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076302995 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070789134 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069783261 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069260256 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077447893 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086272733 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075910729 seconds)
  done (took 4.583980371 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075749843 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083873629 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072437503 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093216224 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086397947 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068889409 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070067568 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069663366 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085213577 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075302362 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068178244 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072531553 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071333026 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068898138 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068872188 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074808307 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074708599 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067053001 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071727235 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072586113 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078675381 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094149802 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072315597 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068194447 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07111363 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068744931 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075718863 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078053789 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067777122 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099211974 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065265863 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072440221 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082850172 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.06907325 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06799987 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068558957 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067838921 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067918632 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068632337 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065612472 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06553569 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073123097 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066360525 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073739574 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082453532 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075822672 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069239223 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073535662 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070642244 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064789662 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07133014 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071291119 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070411662 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076394305 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071473417 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070544429 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069433121 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099173164 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073619525 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067466202 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067575661 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066011976 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069543458 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07667265 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084709796 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069922254 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066248838 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068238418 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073137559 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08210559 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067914762 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073667526 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065308652 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068221814 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070195598 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071057906 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069582652 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066431759 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067883717 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068758826 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068351543 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067337957 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067762183 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070451632 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065464017 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066192838 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068703583 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069425662 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074413379 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066756324 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070493654 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069453977 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066784273 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070589272 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073389107 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070966086 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088523969 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07681544 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068828372 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065744301 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082984663 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070021214 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067215355 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073977208 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072605765 seconds)
  done (took 9.527972143 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091585687 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069571172 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088542758 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09521409 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078512096 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073201281 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081779641 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069071386 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08432104 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067044564 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076316248 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064156868 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079497756 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07548136 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067983128 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076685907 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068737302 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086964452 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080766348 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064666785 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075034784 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078655809 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080700088 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086615426 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085871203 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086872086 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080370595 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070896902 seconds)
  done (took 4.120712966 seconds)
done (took 40.119796331 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.951869276 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.12512729 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.943315981 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.186945676 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.222899448 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.073308052 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.03525232 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.946235753 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.118775526 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.00204963 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.256633673 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.329305195 seconds)
done (took 68.133184504 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.993664618 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.084636546 seconds)
    (2/2) benchmarking "String"...
    done (took 2.184822314 seconds)
  done (took 6.150223487 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.540420964 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.943757584 seconds)
    (3/3) benchmarking "different"...
    done (took 1.991167722 seconds)
  done (took 8.346126717 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.027368568 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.580244827 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.197798463 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.943245069 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.946061347 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.357699935 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.757649738 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.412101063 seconds)
  done (took 33.07291878 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.263512862 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.206961083 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.684628562 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.720699416 seconds)
  done (took 16.80110124 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.550250447 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.203787484 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.209793984 seconds)
    (4/4) benchmarking "different"...
    done (took 2.193265817 seconds)
  done (took 11.094177975 seconds)
done (took 87.463286446 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.948235822 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.988479294 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.969105965 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.103644738 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.025239602 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.974988476 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.9502404 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.995538853 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.947338557 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.948304047 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.386054812 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.944323047 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.964703075 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.981158841 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.948209369 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.958717098 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.374887945 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.956396856 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.958338702 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.583237853 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.469565988 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.952560832 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.949780135 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.997956175 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.042502877 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.003400112 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.001208793 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.945360674 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.562814829 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.948884671 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.102837132 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.952080344 seconds)
  done (took 209.710515327 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.94159339 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.830249178 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.898196789 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.958655943 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.534943399 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.133634814 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.08034357 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.56800086 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.946004022 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.9495422 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.159729546 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.942844112 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.192341211 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.88131261 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.940080718 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.964900432 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.098454997 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.183019074 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.943353057 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.131373934 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.967264529 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.157816378 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.118538012 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.1275361 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.980228749 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.942802968 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.9446729 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.954856627 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.128554819 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.08119746 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.950396417 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.983207397 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.147184382 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.813532045 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.955506688 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.970094843 seconds)
  done (took 176.381855599 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.120484324 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.952812021 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.009260382 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.079008425 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.943025725 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.704852571 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.669322777 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.943772555 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.943698537 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.942952102 seconds)
    (10/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.944344341 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.950424769 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.949144863 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.013420071 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.703642204 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.956902743 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.948748147 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.946341541 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.875194638 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.949172616 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.94461129 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.943418026 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.011220901 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.319243428 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.079868521 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.946042119 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.955363703 seconds)
    (27/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.94520066 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949934791 seconds)
    (29/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.078669903 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.943769631 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.07962099 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.944759523 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.022860258 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.082148151 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.953316501 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.025044218 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.953723828 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.429398215 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.945165295 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.944320407 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.947169649 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.007007658 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.946377805 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.058194818 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.036895305 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.945832734 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.959464745 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.142803772 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.624630633 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.945988321 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.946888236 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.946714446 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.946667988 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.948750199 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.928019745 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.947739307 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.975077518 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.564259357 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.947936232 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.945024924 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.948727079 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.946781821 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.946853129 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.954958777 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.987037246 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.756811649 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.003623677 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.941380538 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.333099376 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.753757849 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.950575176 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.287152408 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.006147827 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.950656071 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.027060972 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.944626386 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.94692638 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.947468297 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.918798758 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.035545165 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.033573747 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.948067329 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.083778301 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.938607559 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.946643629 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.223810523 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.811878336 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.947219691 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.962830087 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.004525765 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.946362449 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.947464089 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.955755174 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.03508223 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.947861941 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.950823354 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.949634639 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.05165162 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.950364694 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.077364027 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.166633816 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.017851934 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.194095566 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.172646976 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.951719552 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.952103663 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.965593062 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.950653015 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.948640518 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.959529598 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.950907772 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.948599434 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.951043764 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.954652086 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.948910086 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.955118314 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.962895843 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.950925499 seconds)
  done (took 430.740068046 seconds)
done (took 820.878105112 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.625983595 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.804478401 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.582963678 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.623021457 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.588864474 seconds)
  done (took 15.105350662 seconds)
done (took 16.985933628 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.972659614 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.970738576 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.943569422 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.973037827 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.973450296 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.972221229 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.000741247 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.00165193 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.99473751 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.969720926 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.975407096 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.971055946 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.976789947 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.997032332 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.980278809 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.97693619 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.97410854 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.952866128 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.979442149 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.976664789 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.97411227 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.971639922 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.976003186 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.979361145 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.983630386 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.974860751 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.96760739 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.972866147 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.97521565 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.981452631 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.006551943 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.980626796 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.008219018 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.982551982 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.979823475 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.984807494 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.97052152 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.999544958 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.969851123 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.010173948 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.980851661 seconds)
  done (took 83.044261064 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.961020709 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.099055439 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.170036088 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.989834571 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.962224316 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.178081125 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.018751901 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.097438435 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.102426431 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.176692504 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.180676081 seconds)
  done (took 24.827480608 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.960894058 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.099236343 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.172012454 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.994173602 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.982509254 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.177730953 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.023253729 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.10211345 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.098502752 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.192940775 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.192597776 seconds)
  done (took 24.891476254 seconds)
done (took 134.646218167 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.348536946 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.988903525 seconds)
  done (took 6.223177714 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.958911984 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.974652097 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.113240624 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.963091964 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.963046837 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.959509875 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.955896546 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.96183355 seconds)
  done (took 17.735113444 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.958286792 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.957259738 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.955300077 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.956233068 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.955168093 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.956311217 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.955622041 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.956553741 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.95633325 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.95917748 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.958990907 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.955870896 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.956238426 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.957197484 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.958085965 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.946754199 seconds)
  done (took 33.186400549 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.958626365 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.959420262 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.95821586 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.958442749 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.957092054 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.955452864 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.960057314 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.958016862 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.957497423 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.958289461 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.957924011 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.956773141 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.958603687 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.957210223 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.956423598 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.957014343 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.960120065 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.957130209 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.958881893 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.957064673 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.957733446 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.958395266 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.96216038 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.957384827 seconds)
  done (took 48.879003111 seconds)
done (took 107.919035338 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.142290211 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.763490811 seconds)
  done (took 8.792055879 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.964191174 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.956412849 seconds)
  done (took 5.880196227 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.956682795 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.958173346 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.956761238 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.958392276 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.958753283 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.959159592 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.958358076 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.957333501 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.96095777 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.95997126 seconds)
  done (took 21.469878596 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.95925657 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.959714958 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.959153687 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.95850587 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.958348447 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.95809126 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.958291833 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.960280405 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.962123172 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.95923267 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.959075896 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.95957049 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.962350364 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.959809165 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.960023785 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.957889594 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.960332872 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.960184968 seconds)
  done (took 37.160077946 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.958569573 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.959202004 seconds)
  done (took 5.806318356 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.961881548 seconds)
    (2/7) benchmarking "second"...
    done (took 1.960169766 seconds)
    (3/7) benchmarking "month"...
    done (took 1.959688595 seconds)
    (4/7) benchmarking "year"...
    done (took 1.959514289 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.960929564 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.959864854 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.962509636 seconds)
  done (took 15.613027019 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.961416634 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.144342153 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.196823249 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.549473159 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.960309602 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.96267445 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.819661917 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.962808926 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.962496342 seconds)
  done (took 21.408954436 seconds)
done (took 118.017156763 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.795016347 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.959779506 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.278819993 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.032373869 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.029484055 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.253665945 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.987746731 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.506053868 seconds)
done (took 43.732768015 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.093594207 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.956541618 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.987183596 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.988210764 seconds)
  done (took 22.822482796 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.960985424 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.259544958 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.982063711 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.920112006 seconds)
  done (took 23.028014812 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.33807775 seconds)
    (2/2) benchmarking "read"...
    done (took 2.311858071 seconds)
  done (took 6.546933143 seconds)
done (took 61.385072523 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960333594 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.961685229 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.961546934 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.962004739 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.9616154 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.963565528 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.96260827 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.962874038 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.963074252 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.962141099 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.962957117 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.960573091 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.960809415 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960716201 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.962282596 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.960909621 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961749413 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.961103269 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965714259 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.961059422 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963332874 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.961657131 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.962060369 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.961092675 seconds)
  done (took 48.977038185 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.962234319 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.962330552 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.963169316 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.962976263 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.962912151 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.963572084 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.962901867 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.964086606 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.964290177 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.9635965 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962009914 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.964075575 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.964984378 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.963357036 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963546317 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.964052005 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.963824946 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963211373 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.964509907 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.96452587 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.963968345 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.963334088 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.965104317 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.965053523 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.963524071 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.965412527 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.963550012 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.963581405 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.963515811 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.963394292 seconds)
  done (took 60.801746619 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.966079439 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.964238335 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.963643256 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.963457995 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.964957798 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.965362527 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.966228652 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.965567592 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.963735077 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.96363743 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.966612454 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.967100562 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.965758217 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.965424448 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.963662375 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.966890739 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.965065455 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.965121315 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.966313277 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.964072002 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.964507977 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.966898486 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.964796092 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.965074357 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.965215622 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.967206247 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.965310016 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.968230662 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.966626374 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.96579275 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.964755908 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.965713153 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.96537117 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.966034624 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.966151683 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.964477291 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.965297678 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.9645164 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.966965471 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.966825577 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.9653447 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.966593895 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.966285553 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.967292881 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.96626075 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.970571865 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.965864269 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.968219153 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.966133875 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.967796768 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.967267137 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.966934387 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.966786769 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.967252155 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.967779818 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.967928681 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.968505437 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.966068324 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.966790193 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.967729436 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.967917958 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.969848669 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.967137863 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.967467387 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.968267198 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.967007754 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.966464325 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.967589796 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.968927971 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.969889953 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.968241865 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.967463674 seconds)
  done (took 143.472800132 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.968429024 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.966461974 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.970974274 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.967383931 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.968913308 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.966716201 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.967369602 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966973742 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.967946493 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.967471658 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966363963 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.967008621 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968595521 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.967679201 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.967348868 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.969493528 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.969017667 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.969009022 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.968259736 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.967907445 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.968216265 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.969982815 seconds)
  done (took 45.195928643 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.968771831 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.969778999 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.967481128 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.969056868 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.967187665 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.969453906 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.969781025 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.968574321 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.97039735 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967097293 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970475949 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969858715 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.968762866 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968528994 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967750709 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.968816522 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.968270131 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.96462092 seconds)
  done (took 37.33121901 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.969308862 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.969017851 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.969307387 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.968141408 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.970851783 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.969677881 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.969780808 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.96829413 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.971452113 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.970687735 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.970219213 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.969629762 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.969920317 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970380848 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970134336 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.968994657 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.970475142 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.970275444 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.971272576 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.968698343 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.972472821 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.970712979 seconds)
  done (took 45.236929007 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.96969927 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.970072578 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.970389429 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.971444387 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.971423406 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.972159435 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.970859092 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.969292219 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.970848707 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.969901989 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.970628544 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.970285125 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.971992209 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.971403363 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.971659023 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.972618752 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.971251595 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.970894767 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.971170789 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.972351164 seconds)
  done (took 41.318943306 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.975113331 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.974987278 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975089418 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.975893921 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.973620174 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.953062682 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.956792329 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.956606544 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.965267366 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.976040304 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.961032002 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.975396354 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.974680264 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.976710795 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.975566516 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.973906671 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.976186003 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.974741922 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.974853735 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.962607315 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.959710051 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.975330922 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.976389782 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.975652219 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.975272335 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.974314085 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.967100189 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.969588187 seconds)
  done (took 57.081136439 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97181171 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.9715953 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.972354541 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.972782402 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.971794135 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.969673895 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.972695622 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.974086761 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.972758489 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.973112605 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.973990815 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.972934286 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.972052901 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.971934331 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.972545019 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.973989402 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973088204 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.9734094 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.97490308 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973226509 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.973465122 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973164163 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.973515688 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.972828104 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974522207 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.972756332 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975937914 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.973767341 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.974385366 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.973035579 seconds)
  done (took 61.09304751 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.99228992 seconds)
    (2/2) benchmarking "in"...
    done (took 1.99186534 seconds)
  done (took 5.888562364 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.973661521 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.973914199 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.974324838 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.973704537 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.975690263 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.973993082 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.976007773 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.976368782 seconds)
  done (took 17.699414009 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.974299505 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.980236316 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.975353406 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.975542242 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.977137643 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.985742023 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.975799923 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.977701266 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.979669079 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.977639674 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.983368002 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.982710692 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.986947021 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.982947639 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.975434232 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.976524063 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.980527245 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.98332042 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.979189421 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.975185813 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.981033782 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.978104444 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.975838428 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.979819178 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.975589075 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.981240202 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.990284011 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.981006197 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.980699201 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.978675545 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.986942322 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.976963932 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.979111294 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.980323774 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.97479237 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.950592095 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.986390627 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.981113945 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.982114813 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.976949476 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.983524887 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982329873 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.984216674 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.987145857 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.979941069 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.977540041 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.976310819 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.982040028 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.979364731 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.984065737 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.985957548 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.982624972 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.977272828 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.977819213 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.981225774 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.979975221 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.980190931 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.983445061 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.988863571 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.9877807 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.986537726 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.004091031 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.990504724 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.982171161 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.981148258 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.992079955 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.994564998 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.955394528 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.982388441 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.98027266 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.988238895 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.977553632 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.965331552 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.977654605 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.996968242 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.991353758 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.980252078 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.979855265 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.978528835 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.981592408 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.982981033 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.982810169 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.981829637 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.983445303 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.992204522 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.010446526 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.983491976 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.982151682 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.983782272 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.980512249 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.985544498 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.984579156 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.979858694 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.981221746 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.983954363 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.981008762 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.98495226 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.984307388 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.979160093 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.991249402 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.97790232 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.97705675 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.986825903 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.991881449 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.973598646 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.983690517 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.984677563 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.982590926 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.991652007 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.982478658 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.984154996 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.982298392 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.981620708 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.98977672 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.980399666 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.987945145 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.994042032 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.991368466 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.983877445 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.985961313 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.988416232 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.969548208 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.981530228 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.010572529 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.967729759 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.970553034 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.974095919 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.997539307 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.987242897 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.982249297 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.986828447 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.980730499 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.980049056 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.986647982 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.982086605 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.985943673 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.981334919 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.984428372 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.982449712 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.985605576 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.984741475 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.985854831 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.987537881 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.984010974 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.988569701 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.983490953 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.986186362 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.992331657 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.981583847 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.984219764 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.98018632 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.987554867 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.983626745 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.985059425 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.976300047 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.973666128 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.956939811 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.975061436 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.987975318 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.984044473 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.956118884 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.984926071 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.988932018 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.985358264 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.986390908 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.985154519 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.986658916 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.986332534 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.983681308 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.986651846 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.986745259 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.986290284 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.992471256 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.983209132 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.982049678 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.986277417 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.982270775 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.981730172 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.991418461 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.998148351 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.991676058 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.996791384 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.984465427 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.99599056 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.983203108 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.988004798 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.987527387 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.986403024 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.986221672 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.98504213 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.983558175 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.991149211 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.010230334 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.999221948 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.989453831 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.985047208 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.993216633 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.988593891 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.994104469 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.983842264 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.987221893 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.988051112 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.988075749 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.986417052 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.984494776 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.991167041 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.986365063 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.984583876 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.991060861 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.989669134 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.985633424 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.989806663 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.984216166 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.98953132 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.985158133 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.984928873 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.984988194 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.987007735 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.998094214 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.990207527 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.98435916 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.989525055 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99155711 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.988176671 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.984632561 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.989877147 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.992082291 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.98647763 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.991349601 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.997876328 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.98760277 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.986848849 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.986300267 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.985849767 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.990329565 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.987395469 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.993381097 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.995844279 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99008667 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.987284807 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.990557405 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.986083713 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.990775963 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.990496713 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.99084677 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.990866417 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.990573226 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.989780899 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.988531153 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.996601165 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.986706794 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.990172991 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.98782585 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.991406767 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.989780034 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.992781846 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.990741338 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.995071892 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.000025356 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.996725488 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.988807816 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.992183474 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.994576565 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.989528519 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.991963198 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.991360833 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.005055233 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.002891382 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.987352633 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.989179206 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.990703687 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.994267275 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.989650347 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.994608338 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.99775922 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.990649076 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.991303057 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.994470068 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.993042202 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.991988808 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997775042 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.996362334 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.994728567 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.993979771 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.993058934 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.993208513 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.990186278 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.995048073 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.993413634 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.993315952 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.993321222 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.989957083 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.992515153 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.990008299 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.001120882 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.990185835 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.993816529 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.999587079 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99325951 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.98965773 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.992977495 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.990192719 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.994761921 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.993100892 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.990025562 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.991048877 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.99320281 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.99582635 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.003740923 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.995491113 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.001526124 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.994763553 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.004412947 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994828493 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.990317549 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.992220534 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.996736673 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.002179209 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.98983256 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.99144094 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.001305473 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.991241694 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.992677628 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.997306903 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.989032812 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.992635861 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.993036596 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.991622921 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.998433744 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.996351342 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.991136628 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.993712552 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.991169704 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.990885464 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.996455779 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.996590424 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.99483843 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.991619388 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.990267664 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.993987534 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.992034711 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.993507365 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.995395789 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.989637045 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.99172895 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.000480231 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.99599387 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.992964431 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999548501 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.992165115 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.002369647 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.997197365 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.993811296 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.994298289 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.992101391 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.99484242 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.993262089 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.994699544 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.992390315 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.99242418 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.994159332 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.008770118 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.003479171 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.996413353 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.998386183 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.996933253 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.997410568 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.006787554 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021638107 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.996325346 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.997564726 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.996939486 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.001727083 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.000105665 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.001641673 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.999770057 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.004598241 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.99723713 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.99242843 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.001075952 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.009956979 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.997192256 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.99273808 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.992809496 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.002847949 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.991183167 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.995255266 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.996257073 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.000229673 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.995907699 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.011987952 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.996347535 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.996746194 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.998232821 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.993448611 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.997812504 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.994454787 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.999249851 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.998966681 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.997756765 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.998226026 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.001392242 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.003847157 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.994048886 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.00320991 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.0090542 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.999248549 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.998227975 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.997454215 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.997307906 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.000709395 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999404348 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.995878891 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.997286511 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.995668412 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.997144333 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.001570111 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.00838729 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.001156191 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.996786734 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.996393759 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.001172442 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.995155815 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.000104856 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.000540596 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.0074829 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.004361886 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.011162222 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.009011662 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.999015214 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.997875199 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.008753906 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.008041897 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.99910656 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.997603447 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.000704793 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.003484589 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.001978299 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.001106235 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.001218635 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.998584049 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.006152851 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.997907014 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.997877444 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.000655067 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.99712891 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.002358142 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.002345738 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.005179111 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.995987641 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.996526333 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.995865817 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.001084609 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.000949775 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.001706932 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.000071643 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.997364444 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.002265643 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.003106142 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.001986264 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.998479354 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.997725556 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.002771555 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.999979354 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.999002948 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.998034703 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.999172351 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.998427967 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.004685625 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.00762632 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.998411504 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.001277476 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.999180721 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.004323966 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.002112365 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.002069334 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.003565988 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.000296341 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010041911 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.999870186 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.001817245 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.000371647 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.999888447 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.009200569 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.004280399 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007851643 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99265863 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.994243131 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.997946691 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.005559751 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.010398218 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.007402562 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.004796608 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.006647775 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.00642469 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.003564023 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.998406866 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.000277268 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.999862655 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.999660468 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.005317111 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.00436385 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.004133983 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.002454951 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.006405274 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.002352877 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.004095648 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.000555078 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.000535567 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.006447668 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.013649795 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.011320772 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.999585828 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.004107464 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.00258449 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.006491 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.012572465 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.002120916 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001921753 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.002475959 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.005586845 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.001362618 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.011565465 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.009536256 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.008090743 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.005207077 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.009482462 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.022770261 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.005405258 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014471586 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.038436733 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.001889287 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.004561983 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.004843063 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.001812019 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.0050301 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.005707845 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.004715374 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.011844836 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.006420434 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.003412667 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.0127388 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.002480528 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.001934189 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.004849602 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.002363565 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.01040057 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.0046505 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.012444798 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.005112516 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.002436206 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.00337481 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.005616033 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.001288512 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.001001338 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.001611009 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.008087948 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.001523891 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.005284227 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.013675676 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.006666941 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.008246354 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.020006248 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.015799543 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.006868424 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.003174009 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.00626179 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.012483756 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.00872194 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.002582504 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.010695406 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.012147312 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.010514953 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.999946689 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.007600762 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.006577794 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007556576 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.003409183 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00588146 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.018326446 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.995714142 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.997936929 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.004142206 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.012889093 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.003725015 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.012197179 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.01347467 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.009761678 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.008664627 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007086829 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.003417953 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.004102526 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.017543068 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.011514278 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.014971171 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.007216398 seconds)
  done (took 1190.147283108 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022931189 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.004845422 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.004153296 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.004639213 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.003067949 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.005327157 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.004804109 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.003816788 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.004586117 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.003007911 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.004939902 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002915552 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.004630337 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.004077207 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.004778181 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.004960942 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.004151563 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.006084298 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.00396958 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001901171 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.004101105 seconds)
  done (took 44.039025157 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.000492183 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.997758975 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.00475965 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.005247171 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.003204246 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.005841616 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.990183518 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.006111375 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.004917255 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.004688034 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.004853751 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980022073 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.999182016 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.004941978 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001001665 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.006210581 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.003690613 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.005139103 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.006148071 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.000744625 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.002129815 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.002086222 seconds)
  done (took 45.944340765 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.005779488 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.003663957 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.005468453 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.002329738 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.000648199 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.005859841 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.999265964 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.002033746 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.000999973 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.00060095 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.013681656 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.009149021 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.999119716 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.004018292 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.999959005 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.005027136 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.139567443 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.998509614 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.99904216 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.996266616 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.99921502 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.991770146 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.996274963 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.994898009 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.994475147 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.984972915 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.994466301 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.996091835 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.994934411 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.99771432 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.005584938 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.995148314 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.999039516 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.987343548 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.995832077 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.996919879 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.001923884 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.998968481 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.994659669 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.982176151 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.983076194 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.017785076 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.99517913 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.998507158 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.005474156 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.996857416 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.994789844 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.001982445 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.005065692 seconds)
  done (took 100.021668267 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.995367345 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.994637991 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.99393251 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.994186743 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.994725011 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.997363644 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.990135568 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.991823651 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.990817977 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.991036542 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.971785359 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.983826279 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.988702876 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.988459065 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.989252262 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.993385949 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.989101088 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.989222375 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.989362438 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.988561834 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.993416724 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.987820583 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.988025255 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.98830871 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.99010409 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.981413775 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.988986222 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.989105985 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.971038782 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.977176056 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.988184084 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.988466256 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.989196898 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.988868434 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.988880674 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.989451805 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.989468016 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.987973816 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.988000325 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.988881507 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.986036591 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.988164883 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.988904703 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.98925851 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.989044932 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.989072595 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.989675666 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.98980495 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.99003542 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.989673762 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.989969373 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.990583453 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.989346614 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.988740762 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.989565115 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.990394665 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.995730795 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.98829222 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.989750119 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.989355154 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.989801309 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.996739392 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.990568083 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.989424884 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.989565006 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.989893697 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.994062018 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.989509809 seconds)
  done (took 137.194422896 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.993075675 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.992864665 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.996308824 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992654785 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.993946074 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.994546171 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.994109294 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.996137905 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.993515324 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.9929651 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.993889589 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.989923758 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.994091842 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.990608984 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.992823797 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.993674598 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.990393007 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985874019 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.994252672 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992555276 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.991994828 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.992398118 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.99351877 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.990952612 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.992643925 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.992370494 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.991715439 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.991101223 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.988196391 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.988079384 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.988490874 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.988589153 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.991128563 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.987599062 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.98807376 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.988168313 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.988726175 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.993308612 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.986454598 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.988288738 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.987675121 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.988136931 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.98952297 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.984990518 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98548926 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.985402646 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.985684499 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.990217002 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.982831253 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.985575735 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.985544875 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.985069051 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.98500645 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.984549391 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.983696407 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.981459467 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.98366713 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.984464468 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.984661254 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.984346963 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.983842131 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.981381765 seconds)
  done (took 125.250496664 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980974886 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.980781439 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.98201382 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.981747239 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.98295126 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981658297 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.979049011 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.981557976 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982189382 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.981302016 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981441476 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.982166313 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983152423 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982481174 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.982245977 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983177008 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.98140135 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.981568442 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980960122 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.98158844 seconds)
  done (took 41.542244228 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.981701237 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.982666086 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.982771038 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.982602305 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.982099216 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.982081887 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.983070828 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982950268 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982596136 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982535634 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.983451703 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.981763109 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982289069 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.982467572 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.98367959 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.98267335 seconds)
  done (took 33.629902487 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.982977892 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.982987329 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.984967349 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.985159596 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.982827682 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.984209101 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.983605968 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.983451356 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.983589529 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.983188183 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.98348699 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.98458636 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.982677479 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.985704779 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.984012912 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.984335589 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.98294197 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.983814652 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.985119648 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.98715755 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.983218385 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.984248106 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.983314636 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.984518076 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.984433806 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.985032773 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.983779297 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.98628935 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.983728438 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.98451464 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.985255158 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.98440349 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.985821656 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.985333415 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.986537366 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.985467173 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.984740114 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.986022215 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.985814001 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.985359793 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.984766694 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.986996348 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.984339262 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.984831251 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.985373784 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.985222941 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.984718936 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.984682817 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.985670748 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.984305179 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.98594026 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.986556585 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.985094243 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.985209765 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.985261929 seconds)
  done (took 111.069089837 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.986511597 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.985984488 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.985225356 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.986777161 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.986214586 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.985722726 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.98585974 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.986311383 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.985011723 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.986577026 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.985814463 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.986320932 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986698541 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.986579792 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.98692889 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986372466 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.987290525 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.98675005 seconds)
  done (took 37.664737829 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.986135207 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.985480022 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.987051132 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.986992966 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.98793434 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.985966065 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.987040395 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.98584106 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987446602 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.987952393 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986117378 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.987157779 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987747994 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.987857958 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.987313558 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.985901366 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.988301682 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.987796427 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.986728464 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.987507901 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.987821602 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.98739311 seconds)
  done (took 45.628913622 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.987066294 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.98880135 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.003032606 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.01199306 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.009675576 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.031778588 seconds)
  done (took 13.947485894 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988252067 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989467877 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.990536432 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.988430331 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.988359119 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.989062762 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988986019 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988774448 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.988299983 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988632252 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988318332 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.988889517 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.988674018 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.988712021 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.988418983 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.989662944 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990519434 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98868945 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.989418703 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98903983 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990148718 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98984463 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988949634 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.989746796 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990110326 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.990528627 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.990089989 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.989846516 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990805501 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.988850505 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985829749 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990102849 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.990261663 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.989569993 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990168524 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990486737 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.989515291 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.991622145 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.989834508 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.991291761 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.990865236 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.991023549 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.990558762 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98890781 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.990311469 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990865181 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990537704 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990342204 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.989665328 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989758758 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.990920038 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992049055 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990525547 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.990323478 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991031712 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991993938 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.990956672 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.991065449 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.991439668 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992236313 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.991711073 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.991516316 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.991851093 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.990992985 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991752789 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992404469 seconds)
  done (took 133.258079713 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.991135536 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.991497125 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.992047918 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992324576 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99205977 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.992379889 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.991833907 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990824903 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.991026346 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.990820833 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.992465809 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990809572 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992113419 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.992077436 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992102067 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.993776161 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992970104 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992335183 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.989451564 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966813819 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99172163 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.98999587 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.980688197 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.991345455 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981070202 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.992386561 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978909155 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.992948018 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.992248624 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.992925305 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.980172958 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993363554 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993290269 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.992358945 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.994355221 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992636919 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.993027566 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99334386 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992089634 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.994208314 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.9931819 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993609474 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993578827 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.993167152 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992378598 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992640314 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.993225815 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.993360936 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993906848 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99408346 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.994025295 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.994010077 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.993980049 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.994046361 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.994589958 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99374606 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99449323 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99380476 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.993379455 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.994222095 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994424732 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.994873349 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995418905 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995408733 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.993533004 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995634405 seconds)
  done (took 133.376878775 seconds)
done (took 2758.709400652 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.032834963 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.004337651 seconds)
  done (took 15.9572319 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.157574717 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.006127188 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.177286081 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.11257827 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.002171139 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.001872634 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.993495515 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.997775431 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.087827581 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.99698973 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.019312132 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.994740717 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.997875805 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.994992205 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.985106549 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.996972799 seconds)
  done (took 54.456382868 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.999614515 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.004566384 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.99962217 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.001006793 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.009479999 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.07118558 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.019447337 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.002462708 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.012393489 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.034581161 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.017060884 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.004086016 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.005602728 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.003249005 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.086441049 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.043060887 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.05799103 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.072754377 seconds)
  done (took 38.365777414 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.079665429 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.004596278 seconds)
  done (took 11.017355574 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.004116847 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.006702322 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.023294917 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.010450506 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.023962418 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.025911167 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.023590685 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.016961898 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.998973272 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.029178972 seconds)
  done (took 72.110913124 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.00462814 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.003996656 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.260035566 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.008179601 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.007630249 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.025448842 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.999729621 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.02917468 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.999547805 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.999549435 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.010052369 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.264179776 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.008508458 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.001941567 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.424528449 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.011755106 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.007926067 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.030792127 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.034416481 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.007459296 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.009199296 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.003262195 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.164292208 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.707775787 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.998515063 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.003273774 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.009264853 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.997067177 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.984566047 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.001237851 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.004679272 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.003002423 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.004295547 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.004572227 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.006730899 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.008462601 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.485047007 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.01738505 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.010718373 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.090616393 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.050308713 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.009069145 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.788050999 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.002964614 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.999657059 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.008766096 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.689695747 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.090756839 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.002993517 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.216009269 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.338778576 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.016014469 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.153449933 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.163336701 seconds)
  done (took 140.112381705 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.998796985 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.233161889 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.153114829 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.001387779 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256005291 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.209345045 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.987372991 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.046840406 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.00054168 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.189139995 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.259300281 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.102467624 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.00010528 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.998896725 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.99852286 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.997015238 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.146214671 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.066898658 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.002693293 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.999129037 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.025808783 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.203218485 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.122469347 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.999983588 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.026877477 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.209527409 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.120971219 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.101956151 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.814235084 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.999815252 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.063930298 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.001199471 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.00170599 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.997293088 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.155584375 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.092674105 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.082840889 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.001217748 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.993824239 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.001158492 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.674585842 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.204832625 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.096454003 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.12581076 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25048113 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.213551298 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.612517462 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.002262624 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.635754673 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.166269571 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.209899319 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.213648055 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.120991527 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.002262941 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.285731406 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.001930208 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.002019295 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.224701395 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.224007457 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.099404428 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.001938884 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.003389469 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.001543589 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.243792787 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.002508876 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.092860821 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.001660514 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.00047177 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.095818488 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.100873956 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.227565963 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.221343048 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.031059759 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.323941844 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.49390152 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.207081604 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.066214128 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.221713756 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.005808526 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.000592887 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.086655097 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.828926807 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.257799956 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.243951488 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.201752276 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.032298386 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.657672639 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.003119595 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.190610265 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.192899011 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.236224634 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.219952346 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.234272471 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.36142756 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.00451846 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.002640369 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.325275757 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.119597084 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.003663288 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.354818064 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.233449983 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.490353905 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.029730206 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.350740696 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.132204751 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.00611184 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.64996868 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.004442027 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.209672987 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.044729041 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.006774245 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.006319434 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.192460833 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.910469629 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.003862421 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.707258504 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.064939652 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.004546189 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211184343 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.004089226 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.250303943 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.005922028 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237957564 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.640539848 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.036717177 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.180568293 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.252731256 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.633034208 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.247230829 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.246833299 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.118032439 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.229554855 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.806527448 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.006674313 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.269504437 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.005654987 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.005079498 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.174084841 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.009955262 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.616812724 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.005968405 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.275060998 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.024836415 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237502281 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.006362282 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.244254021 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.035685878 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.055596088 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.006342272 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136028161 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.009746637 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.849028756 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.162983353 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.00900679 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.004737884 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.592410107 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.00366315 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.154671568 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.232354887 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.024560554 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.07648943 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.569495306 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.006093319 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.094703288 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.02539721 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.636815022 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.007101297 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.260899872 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.963501361 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.480965888 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.005812142 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.240875518 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.189543903 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.010689767 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.006843368 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.845324333 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.006005866 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.007623351 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.163108939 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.058255377 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.915679563 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.207905642 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.010473125 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.136608192 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.00736729 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.083055002 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.348729917 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.005221635 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.006293438 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.008206818 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.007534025 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.00701044 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.220690518 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.0337876 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.439531184 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.144141952 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266556001 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.311572902 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.207969992 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.044340783 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.01190355 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.229474519 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.010311297 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.067015489 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.007385731 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.025463316 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.23779894 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.013359677 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.216521381 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.249435101 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.054198963 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.055199631 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.012004152 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.010059523 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.919025551 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.157911965 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.092824527 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.011241192 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.980500026 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.123279245 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.127402823 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.185767645 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.841459925 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.178670325 seconds)
  done (took 932.061703147 seconds)
done (took 1266.003772661 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.007835263 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.007008529 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.007942563 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.006237961 seconds)
  done (took 29.950768432 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.011372982 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.009417733 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.009146923 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.011698163 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.010003574 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.011907234 seconds)
  done (took 14.000646895 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.009117937 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.009013077 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.008504807 seconds)
  done (took 22.961295638 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.447434869 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.421183069 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.085722121 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.152137498 seconds)
  done (took 11.044081177 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.016341176 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.008478253 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.012719381 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.010447371 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.997610798 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.012361118 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.000653679 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.011482395 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.012525933 seconds)
  done (took 20.001337196 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.132970423 seconds)
done (took 103.997070736 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.18198907 seconds)
    (2/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.109742264 seconds)
    (3/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.979793843 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.107625246 seconds)
    (5/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.151499553 seconds)
    (6/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.937104903 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.01563471 seconds)
    (8/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.468409257 seconds)
    (9/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.173389883 seconds)
    (10/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.272403995 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.144399936 seconds)
    (12/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.114572784 seconds)
    (13/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.450895733 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.408836443 seconds)
    (15/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.203232929 seconds)
    (16/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.324038899 seconds)
    (17/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.101605729 seconds)
    (18/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.433340504 seconds)
    (19/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.278066906 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.005485322 seconds)
    (21/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.175063161 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.024890314 seconds)
    (23/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.23137446 seconds)
    (24/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.011156036 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.064417282 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.026957198 seconds)
    (27/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.364572857 seconds)
    (28/341) benchmarking ("sort", Int8, false)...
    done (took 5.053807985 seconds)
    (29/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.014784669 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.02635037 seconds)
    (31/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.404934363 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.343128488 seconds)
    (33/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.126826127 seconds)
    (34/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.822745202 seconds)
    (35/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.015872341 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.02269669 seconds)
    (37/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.101834157 seconds)
    (38/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.090811095 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.112031985 seconds)
    (40/341) benchmarking ("sort", Float64, false)...
    done (took 5.70776411 seconds)
    (41/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.011799344 seconds)
    (42/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.789764879 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.094920837 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.242826194 seconds)
    (45/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.306012581 seconds)
    (46/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.378420712 seconds)
    (47/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.096804436 seconds)
    (48/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.11213141 seconds)
    (49/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.272493559 seconds)
    (50/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.904483989 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.033022417 seconds)
    (52/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.23733895 seconds)
    (53/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.015667636 seconds)
    (54/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.143023268 seconds)
    (55/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.984010737 seconds)
    (56/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.42487474 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.431055541 seconds)
    (58/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.01226441 seconds)
    (59/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.095415775 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.905166233 seconds)
    (61/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.257099455 seconds)
    (62/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.015579917 seconds)
    (63/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 3.69056827 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.140657394 seconds)
    (65/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.024657959 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.01214329 seconds)
    (67/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.078848212 seconds)
    (68/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.266904182 seconds)
    (69/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.032735582 seconds)
    (70/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.995249147 seconds)
    (71/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.322416947 seconds)
    (72/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.097913626 seconds)
    (73/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.250584741 seconds)
    (74/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.947263264 seconds)
    (75/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.3254677 seconds)
    (76/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.015612617 seconds)
    (77/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.372154404 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.432265736 seconds)
    (79/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.41971696 seconds)
    (80/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.978340309 seconds)
    (81/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.236968651 seconds)
    (82/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.730776804 seconds)
    (83/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.407559302 seconds)
    (84/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.293545712 seconds)
    (85/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.025437475 seconds)
    (86/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.644064739 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.090873431 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.473379868 seconds)
    (89/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.025523034 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.792603376 seconds)
    (91/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.238036041 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.733797278 seconds)
    (93/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.998689531 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.446181778 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.03289519 seconds)
    (96/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.32870883 seconds)
    (97/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.337704864 seconds)
    (98/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.280848523 seconds)
    (99/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.296409491 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.411634403 seconds)
    (101/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.016209659 seconds)
    (102/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.832715546 seconds)
    (103/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.414570091 seconds)
    (104/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.820286995 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.099975531 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.181033577 seconds)
    (107/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.100220894 seconds)
    (108/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.121664524 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.279195436 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.213418245 seconds)
    (111/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.097491747 seconds)
    (112/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.412457258 seconds)
    (113/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.712317855 seconds)
    (114/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.812814581 seconds)
    (115/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.020316399 seconds)
    (116/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.119414509 seconds)
    (117/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.332149706 seconds)
    (118/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.863879503 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.24738431 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.342194899 seconds)
    (121/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.44205057 seconds)
    (122/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.75403549 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.892185678 seconds)
    (124/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.02105783 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.084404287 seconds)
    (126/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.16725409 seconds)
    (127/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.197885507 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.376455536 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.081399333 seconds)
    (130/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.119485615 seconds)
    (131/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.16510909 seconds)
    (132/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.203105947 seconds)
    (133/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.124475182 seconds)
    (134/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.096739391 seconds)
    (135/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.26729657 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.780483311 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.320722058 seconds)
    (138/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.314124293 seconds)
    (139/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.297163376 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.421145576 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.408004116 seconds)
    (142/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.118759356 seconds)
    (143/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.099290291 seconds)
    (144/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.153421544 seconds)
    (145/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.795536505 seconds)
    (146/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.121736343 seconds)
    (147/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.158920825 seconds)
    (148/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.102177407 seconds)
    (149/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.558264313 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.334661181 seconds)
    (151/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.035634241 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.433302361 seconds)
    (153/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.016020399 seconds)
    (154/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.172803376 seconds)
    (155/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.621873661 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.940815249 seconds)
    (157/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.225050975 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.116516445 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.240022097 seconds)
    (160/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.349041246 seconds)
    (161/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.379810825 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.948664735 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.263058411 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.017386166 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 3.885479732 seconds)
    (166/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.463303573 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.282419877 seconds)
    (168/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.020158343 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.017614972 seconds)
    (170/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.420252869 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.016458568 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.931533983 seconds)
    (173/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.026284809 seconds)
    (174/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.912651191 seconds)
    (175/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.138736298 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.027539488 seconds)
    (177/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.151003124 seconds)
    (178/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.320486651 seconds)
    (179/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.03492536 seconds)
    (180/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.034737907 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 5.681934119 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.020331467 seconds)
    (183/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 3.881100838 seconds)
    (184/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.027580018 seconds)
    (185/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.088519482 seconds)
    (186/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.410150893 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.911741622 seconds)
    (188/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.023408119 seconds)
    (189/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.106156021 seconds)
    (190/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.621393183 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.239100454 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.152806454 seconds)
    (193/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.222445934 seconds)
    (194/341) benchmarking ("sort", BigInt, false)...
    done (took 7.02064972 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.1224121 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.040969857 seconds)
    (197/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.020039972 seconds)
    (198/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.300918838 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.169356116 seconds)
    (200/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.173800233 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.361953257 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.024962542 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.335777937 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.021685537 seconds)
    (205/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.469024818 seconds)
    (206/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.019261959 seconds)
    (207/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.213581342 seconds)
    (208/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.043842551 seconds)
    (209/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.238332824 seconds)
    (210/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.391604462 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.019991552 seconds)
    (212/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.16369116 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.046117707 seconds)
    (214/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.023705486 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.144748732 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.94626207 seconds)
    (217/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.393379003 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.224102919 seconds)
    (219/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.098402368 seconds)
    (220/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.329775147 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.423273489 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.142944752 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.1353273 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.037838716 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.359816542 seconds)
    (226/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.022358811 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.198998102 seconds)
    (228/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.316350138 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.34708754 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.141935826 seconds)
    (231/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.05063173 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.399017453 seconds)
    (233/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.21441596 seconds)
    (234/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.042563304 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.139706558 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.173345229 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.017360602 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.02513075 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.22568835 seconds)
    (240/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.156640293 seconds)
    (241/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.000515107 seconds)
    (242/341) benchmarking ("map", abs, Int64, false)...
    done (took 3.813223154 seconds)
    (243/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.028142453 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.310434535 seconds)
    (245/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.353495056 seconds)
    (246/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.044393752 seconds)
    (247/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.489304202 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.151233009 seconds)
    (249/341) benchmarking ("sort", Float32, false)...
    done (took 5.710906693 seconds)
    (250/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.022993701 seconds)
    (251/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 4.275430107 seconds)
    (252/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.035875159 seconds)
    (253/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.024510171 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.711596536 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.317197974 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.159564868 seconds)
    (257/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.157376651 seconds)
    (258/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.951480167 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.005151251 seconds)
    (260/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.057460956 seconds)
    (261/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.221906409 seconds)
    (262/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.100065138 seconds)
    (263/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.276997079 seconds)
    (264/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.22848227 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.047508414 seconds)
    (266/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.251114003 seconds)
    (267/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.043198892 seconds)
    (268/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.102762084 seconds)
    (269/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.721382401 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.021539474 seconds)
    (271/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.958859735 seconds)
    (272/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.061812829 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.249857672 seconds)
    (274/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.932281516 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.107207805 seconds)
    (276/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 8.478688229 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.194127056 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.047681194 seconds)
    (279/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.920347253 seconds)
    (280/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.162931049 seconds)
    (281/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 3.693086195 seconds)
    (282/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.099783779 seconds)
    (283/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.043912971 seconds)
    (284/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.740570282 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.432484831 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.13859571 seconds)
    (287/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.802966526 seconds)
    (288/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.106772487 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.030334166 seconds)
    (290/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.082798698 seconds)
    (291/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.108096865 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.228999504 seconds)
    (293/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.434781728 seconds)
    (294/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.494106614 seconds)
    (295/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.035982528 seconds)
    (296/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.160876266 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.962366449 seconds)
    (298/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.050541399 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.026509732 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.431888493 seconds)
    (301/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.192360534 seconds)
    (302/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.141330784 seconds)
    (303/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.279035014 seconds)
    (304/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.126054738 seconds)
    (305/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.028366878 seconds)
    (306/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.113318999 seconds)
    (307/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.088716128 seconds)
    (308/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.135292718 seconds)
    (309/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.232526799 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.098036738 seconds)
    (311/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.040689548 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.188767693 seconds)
    (313/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.806996278 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.425312101 seconds)
    (315/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.038611205 seconds)
    (316/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.313614829 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.026883605 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.928122998 seconds)
    (319/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.150751456 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.709115907 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.447359805 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.37763934 seconds)
    (323/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.357277606 seconds)
    (324/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.015136189 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.201085451 seconds)
    (326/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.159613919 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.25388978 seconds)
    (328/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.290814708 seconds)
    (329/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.028882964 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.329294862 seconds)
    (331/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.029070161 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.231670194 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.73990455 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.138584483 seconds)
    (335/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.358921781 seconds)
    (336/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.486852821 seconds)
    (337/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.239568178 seconds)
    (338/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.040268232 seconds)
    (339/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.25110744 seconds)
    (340/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.045555047 seconds)
    (341/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.220211463 seconds)
  done (took 1146.62248041 seconds)
done (took 1148.652190544 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.047581918 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.030977712 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.53696989 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.038956546 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.028361352 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.033332175 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.547731521 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.058738767 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.045409351 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.547702796 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.039084324 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.02941787 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.04529292 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.065747452 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.029818733 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.04217379 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.033139837 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.054674195 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.064214952 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.035405226 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.081529575 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.035770301 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.028856249 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.08072524 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.029354536 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.044930578 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.036041846 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.0816998 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.080460847 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.014975655 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.036106596 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.386643913 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.084526908 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.005148315 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.041395191 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.047743799 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.03835461 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.045646579 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.050396935 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.046515622 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.031549812 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.041136648 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.036408682 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.033146119 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.028729767 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.030369538 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.032596499 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.157224919 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.04732178 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.370385527 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.095273171 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.051282049 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.083913071 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.034942454 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.03368142 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.035981135 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.083425569 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.039369272 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.036138419 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.3706654 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.130722227 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.047074623 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.369957993 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.098050154 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.042597407 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.040693275 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.030677899 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.050246351 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.387606238 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.591202784 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.063072233 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.053016921 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.032112343 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.033569357 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.046565449 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.548478653 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.047038488 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.618839387 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.06134217 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.049112849 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.038688494 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.034805725 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.032717597 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.046982268 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05128205 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.029496624 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.03966496 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.03948206 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.044807766 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.390029351 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.083229071 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.53879624 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.040114921 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.052407662 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.051903082 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.620420959 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.063195505 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.049443988 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.035467077 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.388484969 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.079031281 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.052269095 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.03692775 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.044965141 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.149264127 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.053188555 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.054069205 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.033853592 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.055373745 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.041282078 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.034250109 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.048471981 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.053895032 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.070551886 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.051735492 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.03279486 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.044280956 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.040599124 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.05171414 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.043311659 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.041335514 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.046107417 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.034607127 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.087557343 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.053540932 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.050285776 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.150054437 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.042196572 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.159977708 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.049081538 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.042211854 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.033792874 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.37384747 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.084635526 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.057280665 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.043294933 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.058407089 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.056695337 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.052710336 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.039354701 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.051075227 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.037097678 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.086388691 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.035663753 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.060708051 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.087668364 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.049257968 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.0422893 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.052443338 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.069815234 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.05640818 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.041121211 seconds)
done (took 320.598349651 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.084333777 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.036456107 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.111602683 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.037143285 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.104545775 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.091727666 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.035838502 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.037178819 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.037146345 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.423531943 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.037244325 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.042621029 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.035517174 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.037639575 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.087376281 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.037307487 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.036850246 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.270691927 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.040751964 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.110616161 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.039281625 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.038865645 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.037796246 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.426904917 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.038357947 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.036338549 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.097182122 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.037272725 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.29029261 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.039187044 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.036825009 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.27884452 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.097295563 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.051571403 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.04640502 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.046153804 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.106829117 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.047821584 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.084075934 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.084918166 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.113432473 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.075039022 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.03965822 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.039372693 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.041785392 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.042315859 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.040094144 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.07126303 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.040206504 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.042917985 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.274215775 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.047195092 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.045102935 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.040443516 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.040788914 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.056580768 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.040157279 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.042029468 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.111655074 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.04335584 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.087985951 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.437619789 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.42308045 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.039488416 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.040688112 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.040978494 seconds)
  done (took 195.017922879 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.107542778 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.12806582 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.107738294 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.046818037 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.092600878 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.106296825 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.047108983 seconds)
  done (took 16.600396801 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.047113735 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.040765214 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.062955669 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.064579755 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.041960861 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.185213985 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.052055342 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.04562946 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.066322744 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.048678641 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.375627305 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.063520227 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.048887724 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.040899303 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.052369119 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.070411065 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.043522154 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.042802397 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.137767738 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.119301152 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.045754912 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.048023278 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.069966785 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.051572575 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.041397795 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.048872342 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.043584253 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.047121562 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.040587291 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.04046588 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.041547545 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.055178589 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.042959314 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.041420697 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.040598121 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.042574034 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.043553798 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.040888912 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.042915293 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.042530627 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.041168217 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.041697706 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.041939255 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.041146548 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.041450787 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.065795643 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.042520056 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.040805355 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.041657693 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.04278146 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.071549383 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.042425118 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.041479124 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.04706986 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.083503654 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.047864454 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.045759989 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.043853616 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.042206726 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.041507103 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.043205121 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.12234119 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.066053161 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.042231773 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.066531435 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.081401921 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.044101162 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.043238758 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.042616659 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.067248801 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.043759658 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.067927858 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.042688521 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.144503494 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.043679168 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.184321987 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.03820252 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.040321901 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.039881598 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.042606143 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.050041753 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.042860182 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.047200902 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.050601556 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.047592336 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.042554292 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.044438871 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.046019189 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.050378128 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.042807991 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.096614067 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.043063865 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.045486703 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.114088502 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.044583008 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.136867579 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.064520757 seconds)
  done (took 221.794588509 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.046209081 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.048026701 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.060231218 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.046427079 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.046228488 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.050394654 seconds)
  done (took 14.258257154 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.046146601 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.049331648 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.045529985 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.045128281 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.0468296 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.047564646 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.04730554 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.046325279 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.051788095 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.04464407 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.034691234 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.048991557 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.04818376 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.046201674 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.046230394 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.045230074 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.046409963 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.045390499 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.046768757 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.047186599 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.291212282 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.046887867 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.046903108 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.051385018 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.052549375 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.046029362 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.05428627 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.04593115 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.045190481 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.051868714 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.052664349 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.048213157 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.050184962 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.053642664 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.051763735 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.052859722 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.049616138 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.048098136 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.045665131 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.048308166 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.048290736 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.050278831 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.046116085 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.050185124 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.050209126 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.057777174 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.055448424 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.056770494 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.042027384 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.041134512 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.051205263 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.046869915 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.049176681 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.050351548 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.054779212 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.055851864 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.05565162 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.046831827 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.049405145 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.053890652 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.052310329 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.051046004 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.049657285 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.053667285 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.055495056 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.051374161 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.052266853 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.054936323 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.051784325 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.048858183 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.051859781 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.049333504 seconds)
  done (took 150.765453604 seconds)
done (took 600.397572272 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.098927247 seconds)
  done (took 9.070390467 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.078627722 seconds)
  done (took 9.143473444 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.402150359 seconds)
  done (took 12.383059455 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.070326388 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.093796001 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.06337091 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.043681168 seconds)
  done (took 30.26329238 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.357642419 seconds)
  done (took 9.330480581 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.062968611 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.043014733 seconds)
  done (took 16.150035107 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.212236427 seconds)
  done (took 9.188126482 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.098675724 seconds)
  done (took 9.101531204 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.059194175 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.036894322 seconds)
  done (took 16.091826889 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.048194477 seconds)
  done (took 9.021358468 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.837478723 seconds)
  done (took 9.888376935 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.067003218 seconds)
  done (took 9.063832389 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.077664167 seconds)
  done (took 9.052960361 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.00721805 seconds)
  done (took 9.982940038 seconds)
done (took 169.697483345 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.056691612 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.049405962 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.05060752 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.047327925 seconds)
  done (took 30.17582224 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.084817826 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.086612284 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.093795825 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.083908691 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.076145961 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.07351707 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.085742826 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.08499213 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.075175644 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.082258405 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.085594552 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.081211244 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.083559177 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.094616822 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.093222163 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.083453639 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.070399041 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.068837837 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.075476844 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.093163616 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.082917228 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.072092746 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.048894549 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.051139881 seconds)
  done (took 51.887060779 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.241878416 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.116125798 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.205425168 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.095872652 seconds)
  done (took 10.633179797 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.051090197 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.114127116 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.101742905 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.096404212 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.101776915 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.152975387 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.104291944 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.187317167 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.179685372 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.178420605 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.059915223 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.073878625 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.076311962 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.098001906 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.15487259 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.052209208 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.053411027 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.181409044 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.114712576 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.307884357 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.051506343 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.105000113 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.102855539 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.10411882 seconds)
  done (took 52.778620502 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.053216993 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.05976908 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.0603802 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.052127125 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.054511283 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.051875042 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.060056987 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.055841526 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.075011746 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.054113762 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.052149236 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.053531726 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.059002336 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.054189426 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.052411868 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.067261925 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.068048542 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.053808895 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.055972891 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.060102831 seconds)
  done (took 43.12999078 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.052004298 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.905480123 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.401204274 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.307349357 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.053521397 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.055494364 seconds)
  done (took 32.751756819 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.068903952 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.072257294 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.063664027 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.07954491 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.107362971 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.063687918 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.115176207 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.2199785 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.063752617 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.115883265 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.077364033 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.061439051 seconds)
  done (took 27.088855354 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.067548936 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.052537147 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.056105161 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.067253157 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.067308235 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.064307048 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.064197811 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.053328692 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.068458369 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.077517457 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.063837807 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.069016235 seconds)
  done (took 46.75189945 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.271164105 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.282620276 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.274991244 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.708442659 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.376858317 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.040115029 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.342815032 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.271450061 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.719871257 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.743011056 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.353432346 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.037450466 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.007593364 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.97981135 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.954929567 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.299388109 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.060015551 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.915546329 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.31004621 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.103131014 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058393712 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.059609282 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.059578697 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346563188 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.385010664 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060275605 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271173927 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073387715 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.057722171 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.3217556 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.683296275 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.116345926 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.259124655 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.320165223 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402891282 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.12518881 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.05900596 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.413573397 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.106424692 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.093711718 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.067287424 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.070280852 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.601514786 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.070026346 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.331640305 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059865975 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.084696791 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.049768529 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.982378406 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.34588696 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167355868 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.058381636 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095733326 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.494408306 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180389465 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301198268 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065462639 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.285574911 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120557035 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.27011208 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.177996049 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.060102621 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273126436 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986367631 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.417937337 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179663507 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.062119964 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064034149 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.76045193 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.303826228 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.141275415 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.333107067 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.81933811 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.061907987 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.062826749 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.103611499 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.157808127 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.056596384 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.354086814 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.070496736 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.984746289 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.160750598 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.4646771 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066267876 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.05955746 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.067617115 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.906283126 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.986463221 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.158103064 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.272785657 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.380213722 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.06177818 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.062654003 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.083067078 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064607269 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.011567103 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.672266226 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.127915504 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.98553076 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.621625719 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.69467655 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03009463 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.570615142 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107353215 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347348029 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.209627139 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.465109952 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.271868784 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.30901905 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.593255313 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064766156 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.676771709 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144003999 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137597767 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062664344 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.625962498 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.420740908 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.314939952 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.172747163 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.063762594 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.988437066 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.07362201 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264964125 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.6969463 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120583536 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.059251696 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.066902295 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.063720447 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.065958281 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.224433169 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07916477 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.352066303 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.135188002 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.063482254 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.000259736 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.065820285 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343925162 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.777913807 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126402681 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322787126 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.330552674 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.766977212 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.659696804 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.010075283 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.331328368 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137932783 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13781345 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.639959458 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.200260553 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.161353898 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063129069 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.188164043 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.07020167 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.047796301 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.613517071 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.4802145 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.491591702 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.108110787 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.064506415 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.013856482 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.29918868 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30813172 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084170973 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.093065408 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.068034842 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.148760731 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292214839 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.066671376 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.990206692 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316053124 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.312220186 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.355786796 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.477420445 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.118833913 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.139273837 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.074900938 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.278415099 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.149925843 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.72571215 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.609580244 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283047135 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.680689687 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.031776599 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.731000211 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.282308022 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.446900532 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082487021 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.516596982 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.291875643 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.775971952 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.097874799 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.591790695 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.992913338 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071371991 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.412315404 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.027852038 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.378974556 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.152051258 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079364948 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.066553139 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.067405037 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073383987 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.965009075 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17487082 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136309003 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138993774 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994722204 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.739196431 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.108019172 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.069662976 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.066421664 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.406409078 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.897267095 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021221829 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.067130707 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143660324 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.811308151 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.619975789 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.070073238 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070852294 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.675516429 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.07074403 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.975924705 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.092248706 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.804680565 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.096203818 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.27884056 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765168181 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.35844345 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.142070181 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142799738 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.067849867 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069594722 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.769939409 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077836354 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.769367285 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.35195296 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.341497555 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.517161773 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.126368546 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.281124625 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.084309194 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.068683267 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.550529408 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.095681236 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070605021 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27230461 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.589702846 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.352426525 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.707535949 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155424496 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.068967767 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.335355824 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072171772 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.698905458 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.757883219 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.068439045 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.069798572 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.324257005 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.755162218 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.071055984 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.048693897 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074653773 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281557834 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.274311978 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355070693 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37242015 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.520737264 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.997236447 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.07536808 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.092492411 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.314688853 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.070598556 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.109515931 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.526854192 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.130345011 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.499382363 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.352607345 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.41355243 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.705229285 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.338085458 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.136962902 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.082274908 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.722571931 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.192986946 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.001830818 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18809985 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.997256047 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.804794388 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.364986531 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.088048349 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.342340276 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052825527 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405302757 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.36938063 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.287799586 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.114128987 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.097595012 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.071820191 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107503312 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.072840046 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.313769957 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.19117637 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.07586352 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.661686021 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113260479 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.118035641 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.077143034 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56801676 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092467344 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.075525749 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.771126885 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.094748617 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190501658 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143586264 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.820483967 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.730168612 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.099767777 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.027660808 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.72654615 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.338252423 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.129789507 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.529204077 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114651361 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.477245689 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.074203395 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285890748 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.077484639 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.838494518 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121226507 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342857418 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032073796 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.283696017 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279959787 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.105271635 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.077676555 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000666797 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.178083671 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.953984255 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.052108824 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.06755001 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.75580304 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.465619056 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.464424433 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.503389235 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.893315205 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.074011696 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.377339228 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462056751 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.902864586 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110263126 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075986768 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.352427263 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.203895043 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.331736992 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.344755607 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.082522241 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.100189967 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.28694128 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201201102 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994540009 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.552942848 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65927244 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.776283017 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.086725201 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.278180162 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.35942476 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.547882256 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112865796 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.147931933 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.480972908 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.341354969 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.14531525 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.980444073 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.075527348 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.471548658 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.483672602 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.171730623 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31692022 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.398167074 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.75696543 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.727494736 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.541329257 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.638356369 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.484319617 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.490831024 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288904627 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452449696 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.404321859 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.668702078 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.489262408 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291418811 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174055833 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.360663582 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.951976439 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.78538945 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.320172774 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.083110989 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.005576419 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.283816529 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.195586585 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.536513719 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.620317149 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.328038508 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.296194554 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.54655005 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.61609355 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.322053536 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103157935 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.044143943 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102164019 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.097593749 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.077999096 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.560373775 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.364119573 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091511889 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021521707 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.746684077 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.005066609 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.291632697 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.44486922 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.116496585 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.634356966 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.298397993 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.181283022 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.365952556 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.509230522 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.111000874 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006985406 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.807525472 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.029589441 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.112393958 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.50605228 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094186993 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.082513991 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28440466 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.013217963 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125876391 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.084792362 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284289215 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.66381952 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.34645435 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20794961 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328006917 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384653201 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.92926919 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108999028 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.341480253 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.007860305 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.73983018 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.761183411 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.119548286 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151687498 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.079812334 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.08372045 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352280934 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.370161567 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.279737883 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.732381842 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.115575746 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.103704687 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.366426091 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.172501119 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.082104511 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.084873923 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.648095986 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.31557992 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.080319197 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.054091882 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.295777775 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153790758 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.276234656 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.156211354 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.594036679 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.086692016 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.926138082 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.186431226 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.034756214 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077079747 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.758479099 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.142649667 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.08217115 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351202262 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.703549327 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.28399948 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.478867851 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.955790967 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.452808193 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126092307 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.084377785 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.187932103 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.368446422 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.384066494 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.082145897 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356877636 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128413342 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.089907023 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.743801888 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.049712839 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.081513942 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.815305969 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.979159084 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.811258763 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.479181135 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.189798007 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085756325 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.084925462 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.00924642 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.083474048 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.252644623 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061729617 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.189390915 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.354380838 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.356597261 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174111689 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084483526 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.084645071 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.087045456 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.281731144 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.598305918 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099478111 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.784531686 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.286997642 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.086064876 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.566595511 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.527099131 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.401502174 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.125000836 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.332958592 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330904358 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628582586 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.339623969 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.063324722 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308986601 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.086155506 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.356151432 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.356277781 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.0849912 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.296418767 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.719370966 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.370356481 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.434973843 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.406540134 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.135361159 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.3408904 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.996703828 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.084789392 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.086156105 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.339067801 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140527808 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.082468422 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.092607285 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.638334465 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.762101143 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544406949 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.244197472 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.363726542 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.908847103 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.840109934 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.088035769 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.012917641 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.086747026 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.11109246 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.088331471 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.010846432 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.815851773 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.808594414 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298330761 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.395719112 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.011115215 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.288387673 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.685112138 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.012496442 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.054463093 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.096827482 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.328528441 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014379013 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088883948 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.041252621 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.316680139 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.846562503 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357035702 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.086726572 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031301126 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.089025979 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.087770857 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.085124558 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.173242012 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.087604902 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201830999 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.356038779 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.412210792 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.186412439 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.726445617 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.752777025 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.02544497 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128105976 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.703673051 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652575402 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.320883068 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.212429251 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.760277951 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.032798768 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.091998385 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104265842 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.327542546 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.08931167 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090184314 seconds)
  done (took 2204.821218871 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.110430631 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.145651706 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.212377742 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.159478025 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.174698192 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.201277562 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.205466493 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.112798658 seconds)
  done (took 59.332670563 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.087752518 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.079641952 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.094623571 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.088172892 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.086995602 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.090076588 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.281345742 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.117167979 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.087125714 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.09092054 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.088825573 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.113005894 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.088637034 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.08623322 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.090706574 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.376200043 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.111775708 seconds)
  done (took 80.11401531 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.14321662 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.607603623 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.100193092 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.914368799 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.138667727 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.434912681 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.09438109 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.102025409 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.454365784 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.389781934 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.12797352 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.099834267 seconds)
  done (took 96.054527874 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.093681545 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.093781748 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.092777447 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.093181626 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.093748746 seconds)
  done (took 12.482944821 seconds)
done (took 2750.045074255 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.508256237 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.189600314 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.168280344 seconds)
  done (took 6.37398363 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.238380227 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.285858483 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.399095189 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.420405333 seconds)
  done (took 11.366823801 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.383204099 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.494515138 seconds)
  done (took 6.893690739 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.502319779 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.093419902 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.482372311 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.094538578 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.094267917 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.095315284 seconds)
  done (took 23.307717283 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.094708422 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.094417724 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.095047057 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.095512682 seconds)
  done (took 10.397264521 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.092640987 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.880155952 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.094526325 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.104579218 seconds)
  done (took 22.187910237 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.296949404 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.10501842 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.866645531 seconds)
  done (took 10.286644702 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.754358551 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.537078284 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.709831484 seconds)
  done (took 10.018619696 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.235974758 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.932690782 seconds)
  done (took 8.185815156 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.230940368 seconds)
  done (took 4.247035953 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.934005714 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.4074495 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.569422924 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.62198069 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.680103127 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.314763588 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.432666781 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.378369311 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.514243526 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.505531242 seconds)
  done (took 27.384338469 seconds)
done (took 157.252066167 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.55387218 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.123455369 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.307044915 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.478115685 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.33728247 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.316709879 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.385840314 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.462799395 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.150247402 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.138547995 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.471351574 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.345810729 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.335080978 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.119721277 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.351800888 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.100455402 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.335613888 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.580543542 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.15651262 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.401283397 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.390866973 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.120688723 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.311269799 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.135553068 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.336175232 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.254033692 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.739977321 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.1217158 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.301628818 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.762997311 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.252108757 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.553617458 seconds)
  done (took 176.749077324 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.091139942 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.091605821 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.092784029 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.091756552 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.448571347 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.1000607 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.092002211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.092726652 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.407618512 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.387065584 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.09172464 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.446785073 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.09215223 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.093334322 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.094107602 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.092556694 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.526173854 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.090427763 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.077959346 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.092162719 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.096900809 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.305712811 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.093245638 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.326715641 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.500018595 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.09252268 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.092763914 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.091690835 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.093482982 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.074921248 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.095527299 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.092959175 seconds)
  done (took 215.568231716 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.094138157 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.094383312 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.084646498 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.092809066 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.095848041 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.094769592 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.096015381 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.093090992 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.850007306 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.833166893 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.094562595 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.094826834 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.096921616 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.093029979 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.081270211 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.08102068 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.064243148 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.094438488 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.094340779 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.093819742 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.094501714 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.949392215 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.0951745 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.973767112 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.095617327 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.09360406 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.095305791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.094033509 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.093047443 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.067426541 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.094964935 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.097659068 seconds)
  done (took 228.179387101 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.336437233 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.09580906 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.097576789 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.112305313 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.098220522 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.096282829 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.100929576 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.344276361 seconds)
  done (took 21.303294513 seconds)
done (took 643.830149628 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.463022601 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.837914534 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.226321753 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.120832486 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.362383978 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.161023744 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.113705202 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.180333018 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.754729199 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.194962911 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.532429555 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.121745409 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.852279389 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.142044843 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.2359075 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.176673918 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.469580701 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.729595596 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.252737319 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.773062635 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.31570133 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.06427506 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.193978232 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.80064809 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.548696444 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.091132554 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.127164538 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.465636707 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.120828287 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.355132024 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.802624841 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.372480874 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.121764811 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.118905889 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.170033577 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.159022376 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.314332469 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.127113998 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.229216721 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.863792023 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.773251911 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.641603726 seconds)
  done (took 109.498463271 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.10382407 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.103371522 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.101757342 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.103209191 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.111384391 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.103381494 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.102825846 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.103020512 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.103164177 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.102907551 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.103068374 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.110921528 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.105010699 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.110132941 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.103319399 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.104140272 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.102828371 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.111349411 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.103348731 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.104223275 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.103246298 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.102913561 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.104035851 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.105207706 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.104396157 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.104542936 seconds)
  done (took 56.752454612 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.100018028 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.251836096 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.389437499 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.133434406 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.101183609 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.10354977 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.129430614 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.109137094 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.102891879 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.103183716 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.192857414 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.10350156 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.114245899 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.387074854 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.128633598 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.102594615 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.100949251 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.102297613 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.259379647 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.115120051 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.133048119 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.108824702 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.131510525 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.116804528 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.10450993 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.102852673 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.106539869 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.51226862 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.11431648 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.196926372 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.149756861 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.134798559 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.458008426 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.403641586 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.167445148 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.108556112 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.10393158 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.243470576 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.112845118 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.104937307 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.1313746 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.111699511 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.393699358 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.606486946 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.116331877 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.102543961 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.507813299 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.254782806 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.150146245 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.113789728 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.400391125 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.131540199 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.104455789 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.105266703 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.139728522 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.113697407 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.103330669 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.347019917 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.121019892 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.132611771 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.111095819 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.105388229 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.266723569 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.110596851 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.254937105 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.112191941 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.110921037 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.107305571 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.397132401 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.132042583 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.604526873 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.118327982 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.104930049 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.200905291 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.259014146 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.533815358 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.121384967 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.266719001 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.472636522 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.143330192 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.117093193 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.497126867 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.146057709 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.116536977 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.106260299 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.104798122 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.104998382 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.150157139 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.131637357 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.529739591 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.611017973 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.362392188 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.146047399 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.118965769 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.107131443 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.350256824 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.117003376 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.09927041 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.388800533 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.629885165 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.119643817 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.113114767 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.589797174 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.120133111 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.13621298 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.118459998 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.404190187 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.136150838 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.151149503 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.106227667 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.112653356 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.108925551 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.134713996 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.118315876 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.107277415 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.583133164 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.257587021 seconds)
  done (took 259.846809696 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.109383532 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.103149953 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.105527697 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.104010443 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.105853534 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.109691355 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.105881482 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.105162411 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.1072231 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.105472396 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.104364889 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.107531534 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.107454419 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.111761836 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.141101566 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.109286023 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.597742708 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.10578551 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.10525969 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.107389305 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.680015238 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.115251398 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.106613353 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.106886716 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.107521453 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.109110637 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.117791382 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.139272493 seconds)
  done (took 174.176152262 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.108637914 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.154635853 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.123047682 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.154144759 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.12229017 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.107257765 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.127619916 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.122965402 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.113382415 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.108495021 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.10997922 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.134971186 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.114921214 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.182017361 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.13918707 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.135513074 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.186640473 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.116407919 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.109193622 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.108520242 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.155824021 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.122480101 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.135101167 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.164403431 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.123169646 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.156660887 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.125416345 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.110175387 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.110146702 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.197236769 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.125731752 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.124197934 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.144009857 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.126327249 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.201390338 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.199258249 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.191908516 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.138198066 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.113615643 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.109400177 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.107783116 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.110998717 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.156588348 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.124462747 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.111331459 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.200232155 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.128227829 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.110087052 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.130536884 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.109911255 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.109635907 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.124758354 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.141895969 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.180483921 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.15829416 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.139184319 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.132338778 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.128591302 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.113786634 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.183623746 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.118144189 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.199656796 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.129145617 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.112234896 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.084218965 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.112358566 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.157258232 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.146388021 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.188209774 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.104747216 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.184383488 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.165107012 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.12536792 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.099133948 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.093866624 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.159476294 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.199464585 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.16544212 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.170356865 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.141061594 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.117896709 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.110548654 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.112795422 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.138219741 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.120060141 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.198702748 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.206064106 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.11830749 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.112779484 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.113210932 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.111915029 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.134373767 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.166411134 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.151855152 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.194869669 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.146771803 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.146897462 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.120791673 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.124716049 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.118359215 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.144075866 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.120345385 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.124885725 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.453692975 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.149158411 seconds)
  done (took 226.805246319 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.490625357 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.160303313 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.167703229 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.384380926 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.508693532 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.227777226 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.152780113 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.162607705 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.171194162 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.289176626 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.221139956 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.207940108 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.13556295 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.100734763 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.15767788 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.17230273 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.182785805 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.432311426 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.256641789 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.829498105 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.152141916 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.438531213 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.450075218 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.494937833 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.200650606 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.537654157 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.801083727 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.24949048 seconds)
  done (took 68.775622263 seconds)
done (took 897.876080707 seconds)
SAVING RESULT...
DONE!
