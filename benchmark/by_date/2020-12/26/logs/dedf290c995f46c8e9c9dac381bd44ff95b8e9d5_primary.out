cset: moving following pidspec: 31214
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.813977862 seconds)
loading group "shootout"... done (took 1.173515558 seconds)
loading group "string"... done (took 0.66526183 seconds)
loading group "linalg"... done (took 8.506919854 seconds)
loading group "parallel"... done (took 0.16435582 seconds)
loading group "find"... done (took 2.816391848 seconds)
loading group "tuple"... done (took 2.200007636 seconds)
loading group "union"... done (took 14.881284876 seconds)
loading group "dates"... done (took 1.463810476 seconds)
loading group "micro"... done (took 0.218031199 seconds)
loading group "simd"... done (took 4.739835322 seconds)
loading group "io"... done (took 1.077266743 seconds)
loading group "random"... done (took 9.444576266 seconds)
loading group "problem"... done (took 1.513111455 seconds)
loading group "array"... done (took 25.043635537 seconds)
loading group "misc"... done (took 1.878893608 seconds)
loading group "scalar"... done (took 43.156951216 seconds)
loading group "sort"... done (took 3.297543438 seconds)
loading group "sparse"... done (took 12.601565013 seconds)
loading group "collection"... done (took 18.261204845 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.434785953 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.116238504 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129165931 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.115088286 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184582162 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121688344 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.13017936 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084448062 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.900626157 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.135851689 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114856853 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426663368 seconds)
done (took 5.426893993 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.165372304 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089899592 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082233452 seconds)
  done (took 1.478232329 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070276823 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062045415 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065973535 seconds)
  done (took 1.503304272 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063928916 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133997455 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065263354 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065838149 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065855135 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06522364 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065200359 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065583 seconds)
  done (took 1.835630272 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070883637 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066380611 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064140017 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065949649 seconds)
  done (took 1.57587647 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.064153767 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120781228 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06318125 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063466491 seconds)
  done (took 1.61714669 seconds)
done (took 9.563926969 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138194382 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.810110404 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.770991985 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122147557 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249915247 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.368392988 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122614238 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182344219 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087609045 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074063143 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.12061788 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076195029 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.384861415 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.499503964 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069604497 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.167383618 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.633822151 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085676301 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133435274 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.437889448 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07197968 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085630842 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082857634 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069424665 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.330558899 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152972306 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.66102274 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.093674439 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066764475 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093204013 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068866916 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07671999 seconds)
  done (took 10.730080923 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091378988 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088712231 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067240338 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122436067 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092443436 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068973106 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073586346 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066200448 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087392442 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122688257 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088594679 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097375514 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064803661 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067718577 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072162171 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195676519 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078842336 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080169545 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065919301 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079522199 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104441755 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076442783 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076738506 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076322977 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130673081 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16690627 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094598684 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096616227 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064468992 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077825664 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113514513 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124533558 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065065865 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063568114 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119255205 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093827181 seconds)
  done (took 4.676450206 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.879544717 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094605235 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081397961 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072825221 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104477359 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.111870715 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122317989 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12084015 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098084797 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067402957 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.099365522 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.150356486 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.663628444 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.151733729 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070141575 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118527797 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354130755 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06203191 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06857094 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066261392 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06903752 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.082752072 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068299266 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110880595 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066792859 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.1732755 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58178059 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068712877 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067854024 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09497513 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064060255 seconds)
    (31/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062873486 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138249719 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091544204 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069171793 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.553229691 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064630127 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.17449847 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088125046 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092979449 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065387955 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066602656 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077369556 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064789973 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107286347 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078149983 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.510477926 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068521047 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.578452737 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224740217 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070828854 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070503251 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100053662 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062796949 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066037356 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.876979226 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.143373746 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065419901 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270395322 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066349047 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066936929 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067557196 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100572772 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065725751 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067377119 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071150356 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094634305 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.795034758 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087492104 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094650342 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065400217 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403382468 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074417516 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067695029 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067846894 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.066858314 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104504583 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064855433 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064589246 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109114558 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093520706 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087212489 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068294706 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065731333 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064955769 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.330083311 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.167057812 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065299919 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066169856 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.475815091 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062420937 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064381223 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066609023 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.205450913 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067367898 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062969159 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063926103 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09814111 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066831436 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.357188061 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065579084 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.47436754 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067312572 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101372419 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.11836231 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066482217 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09983554 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066749629 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063845057 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072107368 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064088092 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063394706 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067741485 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064322085 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064869914 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063261742 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067472071 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066461505 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065903987 seconds)
  done (took 22.639261022 seconds)
done (took 40.235196993 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312202033 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076805195 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077037224 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077478886 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077295482 seconds)
  done (took 1.98071257 seconds)
done (took 3.4334738 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249403663 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073774739 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062765907 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.20009754 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086221738 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173796473 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.212846891 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.15772703 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.087327157 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086507454 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086412382 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.217737195 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.222784582 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086906867 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.15699314 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224323775 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086480774 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062322489 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086074108 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086162217 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086272032 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062385145 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086111874 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.085962058 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155558731 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086468779 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06237642 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.156561563 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.08648251 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.157367601 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.086800604 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085978249 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.086417924 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.157154416 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086418055 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.155270392 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.062362629 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.086499982 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085345264 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.085906735 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.085313642 seconds)
  done (took 6.199930274 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072679408 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.200141756 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082055552 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060418288 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069891323 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080538406 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06036347 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080600474 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089478551 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080801223 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080842918 seconds)
  done (took 2.392421737 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068933694 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081730527 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082704548 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060535469 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071382882 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08136277 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060676743 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081417792 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084241951 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082067618 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082423406 seconds)
  done (took 2.227186909 seconds)
done (took 12.198812036 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096132775 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06388413 seconds)
  done (took 1.534338153 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.221791124 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.495949791 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.924939084 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091581497 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071187086 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084153858 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197857122 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065971124 seconds)
  done (took 7.7169445 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.100827622 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068186797 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067713324 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.06693627 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066077656 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067594308 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066482417 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067599166 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066533643 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068060188 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066450218 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066571988 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068226924 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066809732 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066260756 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066273734 seconds)
  done (took 2.591542711 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102053709 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067807334 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097909746 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061087864 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070526788 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061112444 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069053166 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071005137 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068105873 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069125543 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070413017 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.0697454 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069927981 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070116157 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071255312 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071700389 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071874253 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069324925 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072047876 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071885992 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070654427 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071344069 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071658716 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070046749 seconds)
  done (took 3.235148167 seconds)
done (took 16.468791724 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.1733423 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074221692 seconds)
  done (took 1.630851761 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066573147 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06700848 seconds)
  done (took 1.534614767 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071560442 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059147125 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076904203 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068856131 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059953021 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059626143 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075199093 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060332768 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060200887 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060152089 seconds)
  done (took 2.050767385 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061838019 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067504137 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065049255 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063258852 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065303998 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060998821 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063483264 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061297264 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067446648 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060314121 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064608107 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08171943 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064279605 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081931239 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063791785 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064389332 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065823749 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063257357 seconds)
  done (took 2.588274143 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059549911 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060176464 seconds)
  done (took 1.527317869 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062820135 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060346258 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062378911 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062349044 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06028647 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059939364 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.06055895 seconds)
  done (took 1.830413811 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.420103422 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122352743 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341670052 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067602262 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074946745 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255111384 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062618463 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067217956 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067208572 seconds)
  done (took 2.925004256 seconds)
done (took 15.500561448 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080616024 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179494295 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.086449711 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.379563381 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.08989266 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065651581 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112230156 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175227755 seconds)
done (took 2.597331934 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27729402 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.236592434 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.399904158 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124486326 seconds)
  done (took 3.173050404 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.331094463 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077359679 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075692665 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065151716 seconds)
  done (took 1.971488156 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06355977 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069547684 seconds)
  done (took 1.550441887 seconds)
done (took 8.396707526 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070151082 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060022083 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.095181777 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.062088968 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062582075 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.060423945 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.062388553 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061798073 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062630403 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.060293425 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.066393388 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.062749335 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.0626217 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062745408 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06218086 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06236832 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062615515 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062257827 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062386846 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062022861 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061500227 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06254441 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061396401 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062432245 seconds)
  done (took 2.978697243 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077822736 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064379015 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06531425 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064919849 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065586011 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.065323306 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065793523 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064493666 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065334516 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063811963 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06614628 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065625455 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063724684 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065743037 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063738442 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065758868 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065571133 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064411685 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063892628 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066126458 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065485118 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064023594 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.066070055 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065148501 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065836202 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065933771 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063825396 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064415092 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065455128 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06586197 seconds)
  done (took 3.398529756 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06483423 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058430114 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059311478 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068590189 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058367443 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05893967 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059484424 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058616514 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058819032 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060164104 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059509788 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.0587106 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059482063 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058639679 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058966217 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059424319 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063447837 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078225805 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059354645 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058694925 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063119279 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058843964 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058656888 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058722617 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059568307 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059175244 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058645894 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059158714 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058743802 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059502805 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058745713 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062966388 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064167497 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.05874028 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068907581 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064152544 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058706208 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065314503 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059760394 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058751871 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058915943 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058843253 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059110235 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059034451 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.06928906 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059499418 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060056466 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059507075 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059237134 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.05877435 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.059129377 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060780976 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067756085 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060384858 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058640495 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060075108 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058675392 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059553018 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059144096 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058754493 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058848043 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062694356 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060797314 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05970747 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078625058 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060238248 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069110245 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058782775 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.05939 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06262675 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059584087 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077198917 seconds)
  done (took 5.836583885 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069838776 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070556714 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077665172 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069064866 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063162947 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060176908 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063863224 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059834929 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068934517 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064011692 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060027417 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063335112 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06909199 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063919717 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061165032 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069055486 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063968565 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063023852 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059665133 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063806394 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061228316 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063220282 seconds)
  done (took 2.873040099 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138082476 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064930728 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104173084 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068754386 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067450301 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06920742 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064957239 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065133658 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0649157 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065823874 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065873029 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065369839 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06744825 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065856002 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065714513 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065390409 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064908085 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065381559 seconds)
  done (took 2.732532534 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075199799 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064426525 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088435389 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064660911 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064867575 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064849464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068246057 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068674112 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064182014 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06449237 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068831855 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064458856 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064168403 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06454504 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064084697 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064752617 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064423779 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064895848 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068778005 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067845072 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06881839 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069446249 seconds)
  done (took 2.919650114 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075694616 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06306155 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078792299 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064989371 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059477137 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058989129 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065173578 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063687098 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064881249 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063500222 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063952763 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059417524 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065772728 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064153767 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0664442 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064576809 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063773183 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064151642 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064064024 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05965446 seconds)
  done (took 2.733770122 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070658635 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062040775 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061694734 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066956688 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062022206 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061871486 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067342531 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06195224 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062421796 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084517715 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061976169 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072844434 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067525455 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065511876 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06196773 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067167266 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067393172 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067054357 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062037111 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062060927 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083536241 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062102402 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.067227884 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062205749 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062408995 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062247673 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062093547 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065256415 seconds)
  done (took 3.283505161 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063515283 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062016247 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062268711 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062417812 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062379573 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062019867 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062614857 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062487014 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061738729 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062457224 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062136275 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062035492 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064740088 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062005159 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061880617 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061869021 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061965965 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062607935 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062416774 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062656802 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062077208 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061862264 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062089522 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062362427 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062351674 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062049737 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062313855 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062400603 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062143967 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062455861 seconds)
  done (took 3.315755675 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071730978 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069827176 seconds)
  done (took 1.586538393 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060507178 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075923644 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05840705 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073274003 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066976743 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062346513 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067889312 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067389315 seconds)
  done (took 1.971530203 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.065053703 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089199309 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060726186 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061336186 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063944175 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126306206 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073557489 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072411981 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074877104 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06339595 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061154331 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072629177 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060463266 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074118798 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062185344 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069691584 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068194867 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078742647 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073457007 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058886362 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073004709 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061178206 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059123033 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061132234 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060663722 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067646851 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076467418 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072830479 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069158491 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058439505 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07903298 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058910653 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060544183 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069274304 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063952863 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059466971 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096862948 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059950228 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064631886 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058994662 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071963805 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081309578 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074450643 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077938245 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061538522 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061775671 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059584284 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061875566 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063433495 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.0690344 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059445447 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067063987 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.05869741 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060801665 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070043839 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059445597 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064572675 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069672034 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074423631 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071224101 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069037769 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07637385 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.06929009 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067684683 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061533495 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07993903 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061620324 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073731044 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075197535 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.0607776 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073220201 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059038911 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058622009 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059131058 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092698942 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060817417 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060539751 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059217052 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058991239 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060806823 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069002145 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064631274 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066732242 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063072655 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075169351 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068987982 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059532965 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065762191 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077468149 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06324585 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059661825 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075914094 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062774121 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058702935 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077050639 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068927126 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061168187 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060158219 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06297084 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072859975 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060349641 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058192723 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067850306 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06110806 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061802159 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063556365 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067364751 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059195674 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.06999651 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064314954 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061021298 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058257919 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06372427 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060071712 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058378252 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06908158 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059206049 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074025625 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065775158 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073916047 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074017843 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069920129 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074985881 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058953145 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057805192 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077191377 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068834794 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060405231 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076769534 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058346729 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072067674 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058253557 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060333866 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.205421506 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059103855 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061971561 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.05946705 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064760889 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060764702 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061379453 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065193859 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.06844026 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071575503 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060228813 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068147227 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059866556 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075573218 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069282861 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064125596 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062452302 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060215703 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071446898 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065667697 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06864459 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058966586 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060620716 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059443144 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070663675 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069018567 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061220398 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066760407 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063991952 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060243396 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059529695 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060559878 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062979503 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063160068 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059920846 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067282304 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068328547 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07319776 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066191591 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06865457 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058710644 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059216655 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061133229 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058845311 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063680667 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068498532 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074436343 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070842778 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.07986363 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059141275 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.068615189 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060382842 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075840007 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072593578 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060458473 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063588749 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.0577863 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060769289 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068677644 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070996233 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07304304 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074153136 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064010328 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063625522 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058989925 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074101604 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059409864 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068064967 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068378387 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063865364 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059108994 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060956132 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068460728 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063630338 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.05945451 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075013156 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065172325 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058627127 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07324347 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059497824 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070097075 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058999077 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062830747 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064790401 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061089547 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068762911 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074492547 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05852726 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060090131 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075560164 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061195964 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060829906 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067328636 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074741848 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063676324 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067427743 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070014686 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069511763 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063770504 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069031644 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060431015 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068981822 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062534396 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070993401 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.0591082 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077234933 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058124476 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074572475 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.05959721 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070504221 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060148474 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068937378 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060204786 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076289195 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061160705 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06002781 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071199104 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057843136 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068715745 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059086694 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064345013 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06578716 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068813044 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061221668 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068799768 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061399778 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06813037 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063567463 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067408719 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068479877 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063480114 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058461126 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.06750887 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070085727 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067165409 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060283605 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060464723 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059412663 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.209469285 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061886442 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061325428 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068287403 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064765972 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065825997 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06132237 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061490947 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061310305 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0679453 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069132159 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077222069 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068330067 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067242836 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06867208 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058854068 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07494115 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059482931 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.06984589 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058157831 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064769502 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068569393 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.05933852 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078302643 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061382558 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067915006 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071724146 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068053575 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063019654 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077152874 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062373099 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068208219 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067645197 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064088466 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06631523 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06122776 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067488626 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069231046 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070188178 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06037204 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067378369 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068377817 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061173184 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066516602 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060651531 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067963895 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060903779 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058208139 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063458439 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070528417 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063756548 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064012287 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059472199 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058121688 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059510732 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.0661179 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063851539 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068648967 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074712389 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058313867 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.059968248 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058746745 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063062652 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07733748 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06904808 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067483997 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063963657 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058299965 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060812974 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061136957 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059802262 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062756646 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058679956 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059180854 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070412485 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061130957 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063943277 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.05934269 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060342415 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068942233 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064027774 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059639604 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066118098 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059034003 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064359079 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058410543 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060608583 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063707929 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058296771 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062734175 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069992132 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07569556 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066526713 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06835625 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060599473 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067441637 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074510836 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066128235 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060557052 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06880941 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058527438 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077500432 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.06876466 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067851901 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069317561 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060542415 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076404459 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064143033 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069481562 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074602488 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060417017 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066129356 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058607606 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074617099 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063885359 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058659833 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067350207 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067276693 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065136547 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071140046 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059983476 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06732919 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064534258 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062778758 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061108117 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060741651 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068142569 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074905506 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059790261 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063561249 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067077817 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067719488 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063500107 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071785914 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067140119 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060030712 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06045246 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062858369 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.205059729 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072095752 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060577127 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064047277 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063941892 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059244739 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065937025 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075923806 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068764025 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069186797 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058824827 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.05846975 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076698577 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.0634257 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062798185 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067725601 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.069050901 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071968303 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068711784 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076114504 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060148958 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065339628 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071795894 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060002877 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059140959 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062995775 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06088808 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068808805 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069722222 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06722683 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06130836 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066609654 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073266579 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060921433 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06398903 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064399824 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060427274 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070326291 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067775131 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070964276 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060417649 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058784302 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062690031 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068204187 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067042095 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068043365 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060185715 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06552939 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072975672 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066490413 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061901747 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058659697 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06219449 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068667443 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063566236 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058754656 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064132356 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063091433 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065894265 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068816412 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063445426 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058733523 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075791167 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066938559 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.0683463 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060822846 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061165879 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059496789 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058763417 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070192719 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058744021 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060715851 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063777106 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06085522 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076698188 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067360565 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074839541 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060045908 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063672292 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058747374 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06907401 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063896579 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059267738 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069598454 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.0583697 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074524447 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070723946 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064564788 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058949549 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064405747 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067230447 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074361876 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06868337 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068474101 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062953 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06887445 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061055209 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070352426 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.05871825 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058125583 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069267125 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067960925 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071749854 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.0588327 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069325712 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061101407 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067379306 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067219739 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060907141 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061002456 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060787584 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068755158 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063811386 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068863798 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063693161 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075972719 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060016454 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070256575 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068549763 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070121623 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073011043 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071609303 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067378127 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060112999 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066725041 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067435466 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060521273 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064575473 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062503025 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080500523 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.060962182 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060409961 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073200803 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065017865 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.058808065 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065186121 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.063691974 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.069078878 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.059542142 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069519092 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063127906 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.059532063 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06352749 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.063557072 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058131714 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058372262 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.058588047 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068754131 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063168858 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059140173 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077884838 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060434123 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.0677155 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.06996815 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065374988 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060269897 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057616014 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059603064 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.071491965 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073781889 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.061668248 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067098429 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059659648 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.067708587 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057618946 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067413765 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066699396 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067348127 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057769821 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058337395 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073431374 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073927148 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.062763545 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.06770869 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067084261 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059333392 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079041323 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067442759 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059136306 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.06896809 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060532582 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057620515 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057287507 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059841582 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069662369 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057512107 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060232575 seconds)
  done (took 40.992469722 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.105754081 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061580814 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061050791 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060750207 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068812088 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061172046 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060401226 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061099151 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061233871 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062911779 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060343171 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062611397 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065983009 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072623673 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06810867 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063218548 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059436211 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060252864 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059031563 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060027043 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065538139 seconds)
  done (took 2.971705974 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063621482 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063230764 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063113978 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063785828 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062790684 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059077063 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063312346 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059171264 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063726433 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059814608 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063939368 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059213491 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059684603 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059785666 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059773821 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060800892 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063612758 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062699388 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059381389 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063609596 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061174185 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063402683 seconds)
  done (took 2.889018224 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061758512 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059637475 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067915505 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058545606 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058608695 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062382714 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058639549 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063751522 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063657892 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063400363 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068468569 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059964477 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058554863 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.06494205 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.0589012 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059542276 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102153862 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060212496 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060389582 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058792263 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061784826 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068981255 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058711531 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058969288 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063236923 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062227767 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058702901 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061347228 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.05960539 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063606219 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060283842 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058859081 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068596377 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068009247 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06345494 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063988006 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060504099 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059850649 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05879691 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058812365 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067284654 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060485547 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058783413 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060310046 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067937082 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058696677 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058472343 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068637692 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058684535 seconds)
  done (took 4.603309641 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07018 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110960959 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064874691 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092330305 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071483078 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.06484353 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064519005 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093351267 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060353177 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060618691 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072490154 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07249581 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061873027 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063717298 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065601871 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061636258 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06235526 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060892606 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064224549 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061472815 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064426718 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065866319 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071672214 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072339847 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062368273 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060558855 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061321072 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062771648 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071354727 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064810784 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063140815 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063352458 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071989059 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066083688 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061001746 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061246069 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07280262 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061854165 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061279606 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059723257 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061148105 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06258697 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065666117 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073797688 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061652866 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067002056 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061236791 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059732129 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071614483 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062727697 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065313197 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072572176 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062414246 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061975033 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062778249 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07146521 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061532281 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060137393 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062150625 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071291294 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059810247 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062409062 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075153197 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061022644 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064599271 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072581113 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066144262 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062376688 seconds)
  done (took 6.199368147 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069040928 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093838217 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074158078 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074316529 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06949282 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069174706 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069307553 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068974163 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069612134 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072467211 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069043536 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103634422 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065519371 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07060728 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069563328 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069578323 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069239651 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068984253 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069215328 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068776169 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069156441 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074091561 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069028624 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074291759 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071399729 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06572765 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069054486 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068813961 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074426365 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068894181 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071215773 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068674201 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.068853609 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074274442 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071619937 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.068618508 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059830395 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06878083 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069109 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068737016 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065692787 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074370425 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069068145 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065794269 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06943759 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.068930424 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074243731 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071504866 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070896784 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072656561 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.06944309 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074544212 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069687929 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069509889 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075082721 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077067167 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074324651 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074607464 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069303232 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074666126 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074336494 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076699234 seconds)
  done (took 6.000601484 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07359256 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065263692 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077295006 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058900019 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058699769 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067805712 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.05877111 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.05897627 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065598336 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065782751 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06710586 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068101966 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070115815 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067437299 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068185944 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070321952 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067792055 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06817764 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066716389 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067816439 seconds)
  done (took 2.897652945 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075681085 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077561057 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06470495 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068033016 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064385251 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067916235 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063651052 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064480413 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064953101 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064645842 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069003345 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069272191 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064776348 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068238626 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068594824 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068126556 seconds)
  done (took 2.632018494 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064427167 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066923033 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065414357 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060216318 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061731649 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059247184 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.05999962 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058645886 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061279885 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073162702 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059846993 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062380172 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060534396 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.0592783 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059365088 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062387833 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06178879 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060070707 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060020355 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064205886 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068188733 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060721696 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062711213 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060040449 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062036278 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.06822319 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061363944 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062246893 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059750123 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062448396 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062288568 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066658196 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062437875 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060506454 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059211871 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059737055 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060168733 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062291788 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062612371 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060128869 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058615238 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064952231 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06011287 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06064663 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061372717 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062726864 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061621376 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065659196 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059985636 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062317665 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060272343 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061896849 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060131757 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066811811 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061979683 seconds)
  done (took 4.961298057 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078222904 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063992737 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058452613 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058721334 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064461391 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064606044 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064307182 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064207266 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06487639 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058541103 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064545132 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064911216 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064885405 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063793444 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064859292 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064138108 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058384893 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064396813 seconds)
  done (took 2.711701637 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.066205984 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064771103 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063345134 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06077517 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060649185 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065474847 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059181105 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060377241 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06047508 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061102981 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061381386 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060482863 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060312665 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060533195 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065109032 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0610353 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060242555 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059153227 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061167777 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.05888728 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065074851 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059499783 seconds)
  done (took 2.903172872 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086268611 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082296786 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125960653 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078115361 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086747175 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069903404 seconds)
  done (took 2.077307525 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094311285 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096234587 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063627733 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063651961 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068552786 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066555264 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066691049 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067094825 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070408421 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070956127 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067145075 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07086971 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07031115 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07237348 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068344799 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068655308 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066861454 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066846235 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063975751 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074546022 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066812353 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070659132 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066749276 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066584491 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066500096 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071931278 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069867611 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07050917 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066442638 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070230002 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068469763 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066691136 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070532634 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070556478 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064223534 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069937562 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066802749 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074156956 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068491678 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0717514 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0635858 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068849137 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070487678 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070049999 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071625965 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066913273 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070261943 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066837333 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066869984 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075386764 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068730723 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072149423 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068713924 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070807874 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070343299 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075440376 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070783672 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072472944 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068724922 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070674657 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072141226 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068759473 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072258254 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071244405 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068627201 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072467576 seconds)
  done (took 6.175386071 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103894055 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063973444 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067195958 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070881144 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071976399 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067158433 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066974747 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067155043 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066949527 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064400863 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102332014 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067425258 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072323112 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075190059 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067691728 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067270625 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06703565 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072113857 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064626833 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075532005 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06693412 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071994476 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072040048 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071697098 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070640398 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068345324 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067182726 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06666477 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066610928 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066676402 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070245207 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066684814 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071885765 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063818784 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071835358 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066936204 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066641068 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069743026 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066835446 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068521567 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072001405 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074460976 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066773105 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066966129 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070516443 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066540254 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066915424 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.063990876 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067122928 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064186923 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070700578 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070664173 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070942208 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072529845 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067373237 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067423308 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067232425 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066783541 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067031812 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06859717 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072088612 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066879268 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076184792 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067342589 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067345099 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072532523 seconds)
  done (took 6.176843791 seconds)
done (took 129.241697848 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216815138 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187583442 seconds)
  done (took 1.938916917 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073066986 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163312395 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072623032 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072691561 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.105991278 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105115734 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073360043 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069924452 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072454676 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070017593 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136960539 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073782158 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069765451 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069727721 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069794504 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069952095 seconds)
  done (took 2.926464712 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.106601838 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.180957127 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100513303 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067696597 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148966492 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07458802 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069687096 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074109419 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074179274 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.067733062 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104258688 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08068319 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07284946 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074362655 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069515142 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073042949 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073773267 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074257795 seconds)
  done (took 3.148326968 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101389079 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089522888 seconds)
  done (took 1.755721486 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.153999765 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102619862 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141812911 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.340727165 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133150152 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.135526971 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.139116567 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134299658 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107506054 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131467333 seconds)
  done (took 3.079270526 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103992167 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102650224 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.303586816 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099364684 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.07954144 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074917702 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072564933 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077225452 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072692764 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073717306 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.118837343 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072763115 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070021848 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121045153 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096321925 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10365243 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.06871786 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075439585 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077099096 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068026649 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073584207 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077355165 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.174326981 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07556908 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096933346 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073110328 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07476713 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071929017 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071758546 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075851067 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076366393 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09638969 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075621899 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080005412 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.073970565 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.093861592 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069279676 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095750468 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07199631 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070129039 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072535746 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076289851 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069726657 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.07595517 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072912616 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.074648408 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077442089 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068371983 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073083375 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07158513 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071182141 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075262754 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073613026 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074772812 seconds)
  done (took 6.20314176 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1051556 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105940498 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067963437 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110382805 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102843354 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067877637 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101812944 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097535288 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.1058814 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067779635 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066926584 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066902745 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073601167 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07674305 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.112655942 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105484731 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069470716 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06753322 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104639565 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104360629 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066699148 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.09947319 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097312246 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103890637 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066154154 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067531478 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066243858 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067115965 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071661284 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072974834 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066452544 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073460178 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078193504 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072846766 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065662152 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065710504 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066035943 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073067737 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073942527 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073858942 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072453599 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066035803 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066033318 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066769955 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067511508 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065668281 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072177399 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073203627 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072073445 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066384878 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066860696 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066107851 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066596536 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073123455 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071592552 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073908825 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073401235 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066436953 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066490991 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068250501 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074261594 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074004381 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073671101 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067290203 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074618828 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066240472 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075104612 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07907116 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066940129 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066957375 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066262293 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066537947 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067016137 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071860894 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072143772 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067270621 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066512857 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066468769 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074451882 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072110105 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066184777 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071714321 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066068614 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066427426 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066548769 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066815734 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071795834 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07342422 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067082648 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066108917 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066452766 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066373357 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065685785 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071801215 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072991914 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073457767 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072458059 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066982972 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07266799 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07194255 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067268915 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072453239 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066622904 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066915779 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06674526 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07263447 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072057527 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074560764 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066618438 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066137634 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072441325 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074782099 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066175021 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071806139 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074395575 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208367933 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066499411 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075269642 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066940614 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074478651 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067053765 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074725953 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067025559 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072743788 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066536843 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065892825 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066126943 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072415587 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066840323 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066246492 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066666417 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066290947 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073094185 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075867488 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06756415 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072658664 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072598764 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066773614 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072681407 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066550557 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07349988 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066765148 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067159624 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066132414 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075204469 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06664852 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066148709 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066171701 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074283453 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066147347 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074429425 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071608072 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065955268 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075811688 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074420203 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072015268 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074645123 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067126779 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066357989 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066239143 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069238469 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071817396 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072656429 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06706859 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066667541 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.0718029 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074730512 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06631864 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072258692 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07206056 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072458553 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06677062 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066440056 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07502888 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074605389 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072566265 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072313582 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072715544 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066614447 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071830044 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07226581 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066183517 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078957639 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066856328 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076286032 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072876416 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071639694 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07299002 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.073985661 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074556893 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07488174 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076549029 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066292465 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066259924 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072147546 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066417543 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066215462 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072028066 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066754666 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066461153 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076766686 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066804259 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074637176 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065905638 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073346948 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066086606 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066813597 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07754918 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06670472 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066712529 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072216465 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066574674 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072213064 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074677775 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07204871 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066450882 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066775844 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073132137 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073533624 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066307838 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065819979 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067259508 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072244563 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071734813 seconds)
  done (took 17.86398492 seconds)
done (took 38.491692911 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166218935 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111394363 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.20656762 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.195337164 seconds)
  done (took 2.341256026 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097859373 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062850521 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.07802457 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087304681 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063031661 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073374755 seconds)
  done (took 2.068262192 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.19903429 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172561499 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240423277 seconds)
  done (took 2.209779689 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.3636127 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.145748876 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212251165 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.494694662 seconds)
  done (took 2.916582194 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.106764892 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.096916116 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07553539 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108339466 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082314509 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060189224 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.129957432 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067077126 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096995837 seconds)
  done (took 2.49149336 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135706523 seconds)
done (took 13.781260127 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.217425843 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.119532216 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234968041 seconds)
    (4/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.507166104 seconds)
    (5/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.253115056 seconds)
    (6/341) benchmarking ("sort", Float32, false)...
    done (took 0.164885877 seconds)
    (7/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073472457 seconds)
    (8/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.175099543 seconds)
    (9/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.212089653 seconds)
    (10/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075135469 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065314599 seconds)
    (12/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.230698132 seconds)
    (13/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077652376 seconds)
    (14/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.110273842 seconds)
    (15/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07728386 seconds)
    (16/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.178987936 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073487197 seconds)
    (18/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.063478123 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075268532 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075499493 seconds)
    (21/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.178700109 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089164003 seconds)
    (23/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064171113 seconds)
    (24/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071894541 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.152556446 seconds)
    (26/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.192674635 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.183941488 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.071361475 seconds)
    (29/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083714157 seconds)
    (30/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.176180268 seconds)
    (31/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.185584477 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.087174737 seconds)
    (33/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.121400427 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.176735614 seconds)
    (35/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.091471269 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123366039 seconds)
    (37/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066619601 seconds)
    (38/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.073869304 seconds)
    (39/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.203810372 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.070981792 seconds)
    (41/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.194582205 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07391211 seconds)
    (43/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072316419 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.237874092 seconds)
    (45/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077503677 seconds)
    (46/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073875443 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076288649 seconds)
    (48/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063968893 seconds)
    (49/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.150315324 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08750556 seconds)
    (51/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.178642724 seconds)
    (52/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.174489579 seconds)
    (53/341) benchmarking ("sort", Int8, false)...
    done (took 0.147475901 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080721092 seconds)
    (55/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.176249341 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265326276 seconds)
    (57/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068586581 seconds)
    (58/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.064542373 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087026061 seconds)
    (60/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.166089274 seconds)
    (61/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074800243 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06460487 seconds)
    (63/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074762293 seconds)
    (64/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065443013 seconds)
    (65/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.140088323 seconds)
    (66/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.167904914 seconds)
    (67/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.145817191 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083611399 seconds)
    (69/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071392371 seconds)
    (70/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.139863049 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.15230415 seconds)
    (72/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071001813 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.195118284 seconds)
    (74/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090377022 seconds)
    (75/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.15038479 seconds)
    (76/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091729858 seconds)
    (77/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068468731 seconds)
    (78/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.180023881 seconds)
    (79/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.23915956 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.246442804 seconds)
    (81/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076201926 seconds)
    (82/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.15943337 seconds)
    (83/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.086310564 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.086328585 seconds)
    (85/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.201273217 seconds)
    (86/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086208233 seconds)
    (87/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075611016 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.082206694 seconds)
    (89/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.177539855 seconds)
    (90/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071813626 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063550189 seconds)
    (92/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066355481 seconds)
    (93/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.21715901 seconds)
    (94/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.193813039 seconds)
    (95/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063495728 seconds)
    (96/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068246032 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08848649 seconds)
    (98/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.08018299 seconds)
    (99/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.140090267 seconds)
    (100/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071687123 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12048647 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071439796 seconds)
    (103/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064516351 seconds)
    (104/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.0642553 seconds)
    (105/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.065955629 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071816633 seconds)
    (107/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.19586519 seconds)
    (108/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.063990167 seconds)
    (109/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.0634821 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087057832 seconds)
    (111/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069948521 seconds)
    (112/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.080239638 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.06638492 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.077953308 seconds)
    (115/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.135649194 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063367329 seconds)
    (117/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065581906 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064443877 seconds)
    (119/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063406995 seconds)
    (120/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.067783045 seconds)
    (121/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.1602674 seconds)
    (122/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.196279636 seconds)
    (123/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065735753 seconds)
    (124/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.063376502 seconds)
    (125/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.223292095 seconds)
    (126/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.063584925 seconds)
    (127/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.064955588 seconds)
    (128/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.080838964 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085789136 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.063602397 seconds)
    (131/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.133761262 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072182767 seconds)
    (133/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071663783 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086823493 seconds)
    (135/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.089335556 seconds)
    (136/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071780358 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.066923567 seconds)
    (138/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.18944191 seconds)
    (139/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071228389 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071059672 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.0728752 seconds)
    (142/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.063859499 seconds)
    (143/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.162766117 seconds)
    (144/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.186575197 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.196290807 seconds)
    (146/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063212221 seconds)
    (147/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.063774712 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07275431 seconds)
    (149/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066826491 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 0.144566529 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.122168839 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063661092 seconds)
    (153/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.066779179 seconds)
    (154/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070541744 seconds)
    (155/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.232491675 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168102682 seconds)
    (157/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072406488 seconds)
    (158/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070503521 seconds)
    (159/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072796035 seconds)
    (160/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.063911792 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128890358 seconds)
    (162/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064637036 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 0.064594905 seconds)
    (164/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.062996904 seconds)
    (165/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07295704 seconds)
    (166/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.065251007 seconds)
    (167/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.063441148 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.152285287 seconds)
    (169/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063489002 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062852135 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148279095 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080128431 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12043076 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.0697037 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.194280268 seconds)
    (176/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071726786 seconds)
    (177/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.129204121 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073147497 seconds)
    (179/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.161031525 seconds)
    (180/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067020149 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.085390649 seconds)
    (182/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.0705323 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.063175078 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061710256 seconds)
    (185/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064217897 seconds)
    (186/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.141678194 seconds)
    (187/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073205342 seconds)
    (188/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.234491956 seconds)
    (189/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069106008 seconds)
    (190/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138268072 seconds)
    (191/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.15123506 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064411221 seconds)
    (193/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076339912 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144932189 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144442951 seconds)
    (196/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071061353 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074295794 seconds)
    (198/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062452237 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063613785 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138413772 seconds)
    (201/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071531332 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.070751347 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.06314605 seconds)
    (204/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066011017 seconds)
    (205/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064119772 seconds)
    (206/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064103746 seconds)
    (207/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064169695 seconds)
    (208/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061478346 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064357162 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.167801786 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.170621984 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.161092391 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130179512 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06589647 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070928093 seconds)
    (216/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064039854 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070571848 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.078816291 seconds)
    (219/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.149948029 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063843655 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063662114 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063841614 seconds)
    (223/341) benchmarking ("sort", Float64, false)...
    done (took 0.135377916 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130661709 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063202933 seconds)
    (226/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063054637 seconds)
    (227/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063498473 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065475594 seconds)
    (229/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063366077 seconds)
    (230/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.079630411 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.144978451 seconds)
    (232/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.063903084 seconds)
    (233/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.065770957 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.074913147 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073427762 seconds)
    (236/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.080242498 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063531153 seconds)
    (238/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065103306 seconds)
    (239/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.070971355 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.063918037 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064936119 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095813753 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.13907504 seconds)
    (244/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137555543 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070451071 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070841767 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070706745 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128162383 seconds)
    (249/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.149116643 seconds)
    (250/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.063483574 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089022687 seconds)
    (252/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.070402931 seconds)
    (253/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079326914 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.07037142 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07034831 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066314097 seconds)
    (257/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.139699128 seconds)
    (258/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06238611 seconds)
    (259/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064046649 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061849308 seconds)
    (261/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.063425272 seconds)
    (262/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.190293995 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063518088 seconds)
    (264/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.062966626 seconds)
    (265/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.063894666 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.080741471 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.063578439 seconds)
    (268/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.063297113 seconds)
    (269/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072331747 seconds)
    (270/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.06266536 seconds)
    (271/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.063590886 seconds)
    (272/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.075660372 seconds)
    (273/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.080373915 seconds)
    (274/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167204906 seconds)
    (275/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.065435926 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.088263634 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062885983 seconds)
    (278/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063927983 seconds)
    (279/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091044073 seconds)
    (280/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.063658226 seconds)
    (281/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.063401447 seconds)
    (282/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.0639143 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.112687328 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061778256 seconds)
    (285/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070397194 seconds)
    (286/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.086953197 seconds)
    (287/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.083709829 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.14913146 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.06367721 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147030657 seconds)
    (291/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076452293 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.066995437 seconds)
    (293/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.06372409 seconds)
    (294/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.074733402 seconds)
    (295/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064080471 seconds)
    (296/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.066707445 seconds)
    (297/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077607187 seconds)
    (298/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063627033 seconds)
    (299/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.066874428 seconds)
    (300/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064105693 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064162144 seconds)
    (302/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06434645 seconds)
    (303/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.070955933 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088285252 seconds)
    (305/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065592663 seconds)
    (306/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070380575 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063074919 seconds)
    (308/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.063713945 seconds)
    (309/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.065628143 seconds)
    (310/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063815817 seconds)
    (311/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.063664836 seconds)
    (312/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.063393289 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.062834748 seconds)
    (314/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063516206 seconds)
    (315/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.06171802 seconds)
    (316/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063493948 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062994016 seconds)
    (318/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.067902334 seconds)
    (319/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063290566 seconds)
    (320/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.063308145 seconds)
    (321/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066378693 seconds)
    (322/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.229982812 seconds)
    (323/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064160108 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063528925 seconds)
    (325/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062166573 seconds)
    (326/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.071122536 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.174639707 seconds)
    (328/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062349033 seconds)
    (329/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.153580541 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075494063 seconds)
    (331/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071205891 seconds)
    (332/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064890464 seconds)
    (333/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066085556 seconds)
    (334/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064039295 seconds)
    (335/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187701633 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.088666093 seconds)
    (337/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065661883 seconds)
    (338/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.065540529 seconds)
    (339/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063130842 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108467406 seconds)
    (341/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064905464 seconds)
  done (took 36.161366192 seconds)
done (took 37.783185071 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091168393 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077806091 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075777798 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072441389 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075337359 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073912033 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07637027 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07346853 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.074612606 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.0743577 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074426585 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06246241 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070604863 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.077917765 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.071935897 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078524436 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07547118 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078156919 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063495391 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.076966948 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090145167 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07483839 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.071670158 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07715564 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063171452 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072518153 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086031103 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083765287 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069652799 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072722716 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070630261 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082269671 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.070554639 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069637099 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.072909473 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069068396 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072324037 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070404647 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086199853 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.068823554 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063607835 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.074805493 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070305609 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071358484 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071856408 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075072524 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068402777 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07680846 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063042441 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074588381 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086301225 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068337069 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.06957617 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071517944 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068349454 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.072598352 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069186529 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074711702 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068217118 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074626472 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074627349 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071498421 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.062575772 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.071872766 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070467342 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070435334 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.061797363 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067946091 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063206236 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063061414 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062155634 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071446117 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069379376 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.067967982 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062513494 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.062990776 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.0620158 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075113622 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.068992774 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072245476 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063153285 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068246924 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067679153 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063005796 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067947524 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074471294 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062099051 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06346241 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06211854 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077086745 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069190248 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.062802432 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074214547 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067620317 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067771454 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06283541 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062133276 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067487435 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.070953406 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.063033436 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.061913522 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067804058 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.067353784 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071649472 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063423308 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068537236 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067971536 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.061747157 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072006289 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070061815 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071642295 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076089049 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.071786837 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07476938 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063005909 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06186669 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072381494 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063209721 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067864445 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071040862 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068099149 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070961785 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063208019 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061860583 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067846662 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069465129 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063166759 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063330787 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.062938759 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072276843 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070008006 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061665185 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062725555 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071725004 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071328587 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061879569 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.061966671 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072172788 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063476803 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068554227 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068624838 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071381849 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062306897 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063102727 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061717538 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062632055 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062544729 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071535051 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067619353 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063295886 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071783507 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.21340117 seconds)
done (took 12.468080178 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066536538 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105279179 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077387444 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079333857 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076033855 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06454466 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067610398 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082070169 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066681162 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087522455 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088299469 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.084720434 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093752988 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062009611 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063491493 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064760177 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062088683 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075267589 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080046289 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087053882 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099361338 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063475212 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079559417 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083292371 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077418323 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081052019 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.064831285 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064632183 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066352803 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082083475 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089061632 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063115369 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064491464 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08089822 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078914346 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071363555 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064665152 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070022164 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067183593 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063308138 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065461425 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080934272 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070532651 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070416655 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.064853407 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.064898692 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06420588 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070397009 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08110329 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.06901917 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.0756212 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082441758 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065486991 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064145461 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06237006 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071079747 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.063699637 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064374454 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064211065 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063832903 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064148071 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06609674 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068654303 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069602769 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067728034 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069578716 seconds)
  done (took 6.462682266 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082387046 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.08930395 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078335752 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078902788 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063346087 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06443225 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064391208 seconds)
  done (took 2.242729796 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066523389 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071909457 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076360385 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076082858 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085442067 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073406116 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064147478 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095091957 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063167029 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072171784 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079587367 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077278527 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067361798 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076509441 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064459419 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.0759542 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064422626 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071310502 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071484686 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077194168 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067973416 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093187035 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077425176 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.064888061 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.07756106 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071357203 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066165033 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064607962 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064383253 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063686454 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063648736 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08565247 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07020011 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076505306 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064545301 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063161788 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.068539957 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064691246 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068036708 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072972784 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067520886 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.063727328 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064312079 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.06396426 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06479209 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068461849 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065294558 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063670675 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063134702 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.070757052 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063197266 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.069937167 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065886291 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068441247 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068556273 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067999176 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070951044 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064275692 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071253225 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070049586 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063487781 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076256913 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075384175 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067156066 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075412978 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072223289 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070062946 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067350018 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063471699 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063354208 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.063849425 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075258887 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067171094 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066020811 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.064963369 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068799073 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067850437 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079091683 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.078993924 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.076900741 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066082512 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064437719 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.067666572 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.07889973 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068956439 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063986207 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064870626 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063559082 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068794206 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064031128 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068541957 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063698279 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070757756 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066545245 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.065990537 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072190433 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064064013 seconds)
  done (took 8.462776616 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068424361 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066215062 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065025439 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.064746673 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065169413 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065070625 seconds)
  done (took 2.14494583 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089800307 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064388067 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.075995265 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064530344 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086275686 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070591603 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.070752977 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066480544 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080858371 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.074878464 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070775398 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073028928 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073612538 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066202957 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070746459 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06528414 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070283811 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067290263 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074046378 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066460029 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080420928 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.065941873 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066367638 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076099825 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067281189 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065121062 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065340958 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074614645 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074169095 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066166915 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.065677902 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.066921159 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072623519 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.065727337 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070692092 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073125376 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064266103 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069612058 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066441193 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067034084 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073145722 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066224231 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066200593 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069765205 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.065595179 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.072488994 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069634747 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067666202 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070415217 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069221253 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.06959544 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.064449748 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067039623 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069727384 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072758415 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065797147 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.069689478 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070240448 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066009779 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072471842 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064132604 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06738753 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066249877 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.066905603 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.068766457 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069658799 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.072817337 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066194122 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070741841 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.064318675 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069787569 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064189435 seconds)
  done (took 6.728888401 seconds)
done (took 27.742580479 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539914984 seconds)
  done (took 2.235053592 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.88638938 seconds)
  done (took 2.623125991 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.063027603 seconds)
  done (took 9.803783006 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.334956906 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395648605 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.723777245 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.128794972 seconds)
  done (took 3.358437459 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749626399 seconds)
  done (took 2.500612591 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230843762 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.216191108 seconds)
  done (took 2.200009528 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.333922373 seconds)
  done (took 2.07085208 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.132094802 seconds)
  done (took 2.866856265 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232519148 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159244523 seconds)
  done (took 2.141780856 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.529964237 seconds)
  done (took 2.273963019 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.228463935 seconds)
  done (took 5.978898259 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230518716 seconds)
  done (took 2.015159006 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.228123876 seconds)
  done (took 1.976958293 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.011122489 seconds)
  done (took 3.753430777 seconds)
done (took 47.54493609 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084338801 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084368466 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084266761 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078650253 seconds)
  done (took 2.048428378 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073999288 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068310489 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071546217 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071473883 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069175787 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069909026 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070410573 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067612033 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069219129 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067810506 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066301861 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.06782607 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070845136 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067668854 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070558372 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071449909 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068118741 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067816223 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070138245 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06770731 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070671273 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067984094 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066111334 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068052553 seconds)
  done (took 3.40466916 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07832535 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070489343 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07333048 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068795576 seconds)
  done (took 2.046361327 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076726398 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074118164 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083177703 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08799371 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073886392 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074688426 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081455426 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081895449 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063875235 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084792321 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066198887 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064959219 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064998536 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083501745 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081335378 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060477485 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062050107 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075065126 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074402053 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077251196 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06653275 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06372441 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074253481 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075390857 seconds)
  done (took 3.523178063 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082658946 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06382885 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079201452 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08889217 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089924941 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063515487 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076947314 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090837623 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125495933 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063613277 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069798569 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063781763 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102486173 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063569776 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078197137 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106712577 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109483795 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.0673786 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097890016 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063657693 seconds)
  done (took 3.408159967 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07676173 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067766979 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068335748 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063635087 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075172267 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070977899 seconds)
  done (took 2.189005192 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068432037 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067279168 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068540829 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07045035 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066184033 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066124128 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065432046 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064341433 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064387978 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065240221 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064938898 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065135163 seconds)
  done (took 2.553320055 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.151533501 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067189096 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070940428 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064653532 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065900781 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064911514 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079266711 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066602013 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.083244992 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064856194 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065514965 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068045477 seconds)
  done (took 2.670229588 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105488877 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10879845 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14337327 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114799779 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114354064 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094528306 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123430042 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092811103 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157245254 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13484716 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114714232 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090848483 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084881116 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.0673392 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097189251 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115638741 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135053543 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071027554 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111056444 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161716726 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13007837 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132630802 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145680862 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114405168 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087806812 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145553198 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095290386 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100059714 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122641993 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124105834 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11790717 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095778404 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069804346 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069165005 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146884423 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101053867 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117575382 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090913373 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102140915 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085772825 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105018838 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06717623 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083218428 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110624593 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082352987 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128537376 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085964174 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112552414 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078855614 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135439754 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121073539 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096395302 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08322064 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102346219 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.289502081 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110240801 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132388076 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104985114 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0805921 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11676858 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100964869 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098040146 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105438647 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077943607 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174536004 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086690407 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109581365 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109239348 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091812131 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092233764 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105069373 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133282871 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122139044 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122680459 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135727749 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092908705 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119788615 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097536532 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126213987 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102422661 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070786466 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.11882887 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126820408 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097121752 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098669543 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127837351 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090707214 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075657336 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097017428 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.117299827 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078818927 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.110199142 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079088901 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106445998 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130910118 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095114235 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109294399 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11445464 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076057087 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152884879 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106696278 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070953645 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114827196 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112356614 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156011564 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093781836 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07433946 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097699082 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.258523743 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147302316 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106162104 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078203787 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109014646 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137757254 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093129079 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.167922204 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093730919 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138674262 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109712738 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086249224 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073067865 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087903309 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109751409 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10518573 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110606822 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088161196 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.082205113 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085668239 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110029023 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090295012 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078851536 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111728358 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099648344 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073028755 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086704381 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077471265 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139870426 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076777515 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136363257 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123597056 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077198548 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104539684 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096197164 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106599794 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095703723 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114640636 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138655499 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114011078 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088189296 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09180934 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106502234 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141808637 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125532852 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091005818 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075338873 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098321681 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110253099 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096126885 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124224214 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097698736 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10658693 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100853426 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139145364 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143147608 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099501164 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09932007 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105576153 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280974695 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075289222 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15403078 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102613167 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116048145 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083020371 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138465147 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111625368 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087693864 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085181332 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098564916 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101863221 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104279755 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1404759 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093626554 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070545106 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090416263 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141599891 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074860872 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107913742 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088455956 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090916105 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116394263 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091028527 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079501883 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066747886 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125722147 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156782952 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068477777 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112909776 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109758357 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101108505 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119825494 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.06804682 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117793378 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136733226 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116348082 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13884228 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145507342 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114628403 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116763953 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.112043182 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103895308 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077761893 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123552759 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132898737 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094527651 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091218922 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134328988 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116575783 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134595351 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114600747 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111856601 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102609514 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.263826859 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10186069 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100805608 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142125531 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118793787 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122092005 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084052717 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103774372 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1153273 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133077081 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080067655 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139427608 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081560908 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115270859 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075507606 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120980469 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077418798 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109539691 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078113524 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097839704 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067857136 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072436613 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138305982 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110122266 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103464462 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097910309 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135287386 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134988231 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079471952 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106333472 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113601801 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099933286 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114460762 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107775161 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087472573 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093317361 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107590029 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083451134 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079952325 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113107646 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092471024 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124672296 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082590984 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073336045 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138845223 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102612418 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093556925 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07608833 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106003369 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119617446 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090966815 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085627217 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112811402 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102768691 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139682175 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.08867839 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096150711 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123060866 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078550812 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09058007 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06792425 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083705986 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073869672 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284801411 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075009676 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116211403 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067677795 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128831957 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085267051 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091373346 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100710468 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108939949 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126069408 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09253979 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137817653 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087390026 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115714337 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105463778 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09260752 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086796583 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101774754 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099679351 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120248877 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094411632 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120958901 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141310842 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102649204 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140515818 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090484575 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120105197 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105141897 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122628848 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110618132 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146251282 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136788174 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111191154 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110610768 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073953975 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092956033 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104030025 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110048855 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17271031 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123799802 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070746776 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10464449 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092325706 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106387805 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103293266 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080823491 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144031594 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100136415 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086175578 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111451241 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089341606 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102529661 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074698767 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093920029 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098429007 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.248238979 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097147519 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113810985 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126010481 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111604373 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141195294 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09778464 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091226462 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116388701 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10908142 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10869353 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084265318 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084835104 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135739871 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115997083 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126588923 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098289644 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10741249 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109380864 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098343096 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123440279 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10599827 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124573138 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079052206 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074740783 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067242567 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070792514 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121929795 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10709666 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110059759 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097267266 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070924981 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101845811 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104901135 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070314832 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087555019 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092820739 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097824052 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089552515 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105272838 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112323692 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089666636 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102862658 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098022375 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14521493 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098830022 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08715529 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141898506 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14851585 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086533925 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091128329 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069946898 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077560699 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11184156 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147605761 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14970391 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07602323 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084994724 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084055998 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084719681 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069508766 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.242304624 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088931793 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103532783 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097903993 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112195311 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103141811 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074519462 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10118282 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097523397 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090527646 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102197524 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116425449 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122740464 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138881872 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108043697 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105453689 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074570874 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.07869766 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07414064 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077639913 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100112442 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077487305 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074535748 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140592271 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089651055 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102847731 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107089649 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086795384 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073951042 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132502032 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067789642 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133555223 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.06969021 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080947986 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081176672 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077874364 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092200717 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137326117 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108190294 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111669644 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104876028 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102782336 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139197808 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154504728 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078552752 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141833204 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074121063 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073719294 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074662061 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111968644 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088338776 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113152901 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13881196 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08961133 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102116202 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075699688 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14119924 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096926896 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102470518 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085214843 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077045088 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300784906 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079227053 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.079249962 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089075554 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109912965 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071364203 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102882225 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083264273 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078577031 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140622115 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628383659 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088716221 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074146059 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094235591 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139929251 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125829076 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093264435 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106433087 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11655013 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098622383 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093560037 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106112 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180433227 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072335198 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09310056 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101465784 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096518744 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10014414 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096353478 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083960499 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090739682 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085139597 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078280152 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10653886 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087628563 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095124466 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105501445 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081818931 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085815431 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128814803 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102261212 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080600265 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086893457 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104327022 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087499954 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099851794 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067531201 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112296723 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089449033 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115520208 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093211843 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105655398 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125158989 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088299908 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13596445 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104955677 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120713276 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086051119 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076761085 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124174701 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086117402 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075909688 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.30311654 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.093807627 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09218091 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102605273 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.09557686 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112455627 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116285577 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110447295 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095795239 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077938558 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0983663 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100768706 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083443723 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077023318 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073090816 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074513772 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105262172 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083734948 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082425486 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113278573 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087568226 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102104337 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098742744 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121000947 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081894213 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099337511 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108273155 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090834003 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108035698 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099528495 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126398545 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172962398 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123808455 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127429492 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132800032 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07527022 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074342346 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067083935 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113343382 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077652622 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087416294 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07944099 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132019268 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08039644 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109852887 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229382051 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078825652 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092162592 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094956166 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068335971 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081545074 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10587482 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08588725 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078800922 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117365055 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081922409 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125867437 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109556248 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097805054 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09327464 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079444538 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112418227 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103013812 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127276741 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092944003 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073568846 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.273212304 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102842414 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136357959 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071483198 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07907414 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127793931 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102250144 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130397781 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078608277 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147607799 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140274998 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098371553 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132017436 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069668169 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082021425 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087319174 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123631589 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083153687 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109198208 seconds)
  done (took 66.900984492 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.170530644 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140456 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080234611 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102533209 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185614881 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195708473 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118014683 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094847561 seconds)
  done (took 2.990683649 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068843535 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081626891 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079191814 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.205609848 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094588044 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065758269 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071519958 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079966241 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065858518 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065060817 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100319128 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065692665 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066443978 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366844679 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064752671 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070659136 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065581819 seconds)
  done (took 3.559265233 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.336756618 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.980026129 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.251330955 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.34495066 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.148782029 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.555500934 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075922312 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082319307 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.693014661 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368342629 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.139089567 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086878752 seconds)
  done (took 19.952702801 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078324858 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077874987 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077367097 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073841344 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073800251 seconds)
  done (took 2.267010935 seconds)
done (took 119.308715932 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084940048 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174067512 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066545461 seconds)
  done (took 2.163708672 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084036557 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080610997 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079250241 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077607851 seconds)
  done (took 2.213830379 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076098267 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075520722 seconds)
  done (took 2.037023436 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.220910145 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175991981 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088558566 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083156458 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078390037 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079046919 seconds)
  done (took 2.145280634 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072640773 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069826977 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.07015701 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070431267 seconds)
  done (took 2.168429907 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068843557 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065031116 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067488977 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070252693 seconds)
  done (took 2.161579724 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086181926 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084784959 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114931196 seconds)
  done (took 2.175534587 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084088361 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081356709 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076418863 seconds)
  done (took 2.137585974 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111198461 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095186182 seconds)
  done (took 2.095232666 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080639298 seconds)
  done (took 1.975497257 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091288889 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096364348 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137259781 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10531653 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137871534 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124119947 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074964787 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076426682 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071758595 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070884225 seconds)
  done (took 2.873566024 seconds)
done (took 26.604374306 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080299424 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.367061884 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.391622115 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085210732 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669751688 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.38820244 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.004549977 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089489312 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099601326 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066507211 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08339618 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.64801905 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.996362815 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.323802986 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.981011431 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322412612 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.64976605 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066777828 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065664435 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066602762 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.988051196 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066506319 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066411865 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067042233 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649112302 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372975902 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067547534 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.322575485 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066124373 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070545204 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355747213 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067421939 seconds)
  done (took 16.475428597 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070950679 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121311427 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070406606 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082307954 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068641374 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068321995 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069518082 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067275659 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110272975 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066845939 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083917963 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066166778 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07035676 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068077038 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086111156 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066604131 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068996811 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070464471 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066466222 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067195849 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084862482 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066486757 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067282485 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067039625 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066699692 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079522289 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067407187 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066555239 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06711021 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070564347 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071576308 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06788703 seconds)
  done (took 4.261526233 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123985524 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125212651 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071805078 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107822925 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116153861 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06826201 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149509468 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089930574 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11411042 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066861959 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084055075 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066402204 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102670131 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067787944 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087109614 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066960568 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069152171 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067207399 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066381106 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067243344 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085433842 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066322368 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067150593 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067350109 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067700985 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082064469 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067692312 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067217744 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066604199 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070568634 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071970444 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068228798 seconds)
  done (took 4.537076476 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070439986 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069890808 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076595505 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07932097 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065092379 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067114813 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068190337 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065465906 seconds)
  done (took 2.476545643 seconds)
done (took 29.667173455 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080095122 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067576483 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069480908 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085797104 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072489662 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068353534 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063140166 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072991151 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069548051 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069917918 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071617355 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065503878 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068699079 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06335239 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070583096 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06450382 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071141819 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068545647 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069071795 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.070511785 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066849274 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069749335 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072351565 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068742774 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068874707 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068535158 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073190897 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070415035 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064514962 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067252241 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066259534 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078736602 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071127033 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070697875 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064147365 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064531369 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068605937 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066971901 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070617234 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073564906 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066335123 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073056575 seconds)
  done (took 4.802208459 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089980809 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.092291874 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084929257 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080049404 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105920943 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08017237 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089216872 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07759091 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07597118 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088841207 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072110547 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077933555 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079132151 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074044475 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076430334 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073061848 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078402784 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071831718 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076314013 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076189453 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089193097 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070035976 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.077114614 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077939085 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071843369 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078057804 seconds)
  done (took 4.005499674 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073495165 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087658156 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090684834 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139970197 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108037597 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081431378 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080564576 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092123354 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099113766 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066700908 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070697379 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092050251 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095213588 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073594269 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105202843 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084551841 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078676139 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068221596 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073685047 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.1014341 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089174899 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085158605 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098916082 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086810743 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065934304 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075693582 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073912208 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083052923 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073941012 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078703502 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070324114 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07014319 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067138528 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078663918 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073506144 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064251211 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088496068 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079395365 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080873877 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104761452 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076314773 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068064519 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.09696108 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133322927 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065769293 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068572922 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07039858 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079016105 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068132252 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09622757 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084666131 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066037603 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085154823 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067701923 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067767782 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082961079 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068081495 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.110548289 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.0785389 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072444907 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086968951 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071661765 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087273284 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065776468 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077664343 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067305538 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067701068 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064697361 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102060038 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073432691 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117842235 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067000431 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063637749 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078413454 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077890014 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.0731292 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065874925 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085941868 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078063597 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069789661 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078153968 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069250013 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069467129 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101420976 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064812218 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063996031 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063837541 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068154055 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069450424 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066417081 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079239395 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065451087 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.06929139 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081082366 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06606123 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067049648 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068646176 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067276015 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06536738 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076746878 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.06999767 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067897482 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078780773 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067103616 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069016603 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080817054 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075620474 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065396596 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066874824 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068090606 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.0682125 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07056541 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069288753 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06791933 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073378311 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07316492 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07199622 seconds)
  done (took 11.048722934 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165653433 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.152494043 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067861561 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146451352 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074376583 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07046534 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148391284 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086390433 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066894628 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067899761 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066182246 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095012381 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090013083 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.1009708 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07092321 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067000717 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092370699 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.09963369 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150072347 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144788773 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090389345 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074902383 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069237221 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068097911 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067891168 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075485915 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082799026 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075088108 seconds)
  done (took 4.586157365 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076273599 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082075449 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070899263 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.09076897 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085000469 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066919722 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069009261 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.06779303 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083593234 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073238316 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066720843 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071171228 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070555878 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067369686 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067724721 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073248958 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073547376 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065732268 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070017887 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071404938 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07705669 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092481243 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070896681 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067123903 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069445095 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06704826 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073657949 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076209724 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066264383 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09719383 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063639031 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071192005 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081237997 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067800621 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066454396 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067155047 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066454099 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066835522 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066744361 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064737598 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06447201 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072116179 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065102683 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072835797 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08083629 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074660779 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067713208 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072244619 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069000587 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063301259 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069717785 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069559632 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069172623 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075129459 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069922286 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069542853 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.06825016 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096875817 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072238373 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066334875 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065927024 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064580701 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067906829 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074445616 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082922111 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068132967 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064405251 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06651 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071615905 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080538215 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065917592 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071466528 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063254384 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066601716 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068708684 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069539841 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.06788111 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064728566 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066536706 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066538065 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066906217 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066318548 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066337891 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069128031 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064142156 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064600332 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066963501 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067624775 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072747424 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065150686 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069205488 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068038142 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065748294 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069220439 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072230726 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069737984 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086408398 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074947983 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067055522 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064539485 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081020801 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068792492 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065865628 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071685798 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071111589 seconds)
  done (took 9.398425259 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092139541 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06810756 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086377166 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09292012 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076749632 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07179541 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080447142 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066924152 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08261439 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06550881 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075172028 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064920192 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079847641 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075695809 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068134501 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07670648 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.06894173 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087255715 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081138125 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064544716 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075127537 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079256749 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079082647 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084627174 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084267997 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08506942 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078525618 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068833724 seconds)
  done (took 4.12914628 seconds)
done (took 39.87430062 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.991281187 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.159577199 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.002562383 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.249160019 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.052427705 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.217333881 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.219683161 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.994118271 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.265883557 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.030138248 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.326586237 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.336155607 seconds)
done (took 69.827983017 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.067513957 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.14307326 seconds)
    (2/2) benchmarking "String"...
    done (took 2.217364199 seconds)
  done (took 6.286268416 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.59380085 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.994190106 seconds)
    (3/3) benchmarking "different"...
    done (took 2.041554889 seconds)
  done (took 8.548072585 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.113711842 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.630659853 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.239599184 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.991883297 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.995919822 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.349401806 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.783917952 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.454816221 seconds)
  done (took 33.372714092 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.311870112 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.247857067 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.738122106 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.775298693 seconds)
  done (took 17.048641796 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.595900675 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.256380318 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.25521556 seconds)
    (4/4) benchmarking "different"...
    done (took 2.247882685 seconds)
  done (took 11.340252765 seconds)
done (took 88.802009269 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.995030508 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.041485379 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.002339035 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.149404272 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.073100914 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.027378222 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.005588221 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.039692577 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.996660394 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.998125413 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.424943685 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.994314025 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.990354944 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.03092595 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.995738649 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.022926065 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.997396697 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.006606213 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.000269238 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.522548245 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.519340293 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.01234087 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.011063106 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.068850148 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.099564669 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.008597538 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.995906469 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.001944596 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.606992384 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.008617381 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.995316864 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.000514401 seconds)
  done (took 210.567222634 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.996009466 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.131870762 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.1825018 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.995662754 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.622313946 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.185275591 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.140828733 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.653129269 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.99704836 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.021752062 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.307364209 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.993642231 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.328631781 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.944790041 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.992694138 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.999855551 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.244282386 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.324675589 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.993190964 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.186812317 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.009887252 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.139025022 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.104735279 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.279795443 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.037095444 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.038813634 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.00532914 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.008672858 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.179685576 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.235208856 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.02090205 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.016598732 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.123716872 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.86433446 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.004415026 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.001540323 seconds)
  done (took 179.240863412 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.171562088 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.018800979 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.059595013 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.264515769 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.782468595 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.779633486 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.997445385 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.996543682 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.998992876 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.005999672 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.994815883 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.002485402 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.069506757 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.763793361 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.006681638 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.990124791 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.993803458 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.691627856 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.994135177 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992895969 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.995783622 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.994686963 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.061777135 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.364209262 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.124971752 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994538954 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.006361499 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.130395898 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.000815777 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991776703 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.131237488 seconds)
    (31/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.993023218 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.995104559 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.074234083 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.129262493 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.003673122 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.077016013 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.998054618 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.495121387 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.991404758 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994848889 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.994935418 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.056277793 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.992586807 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.101223767 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.08115345 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.992239852 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.008239335 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.063349701 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.685984772 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.998230449 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993829581 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.996198566 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.996637703 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.998835814 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.227279217 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.997731355 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.02322449 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.652023862 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.990395912 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.996322951 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.996192456 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.99727547 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.997414714 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00471402 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.033443171 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.805856203 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.157694957 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.377916619 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.803693441 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.997846154 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.281788279 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.053661371 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.99600709 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.078373244 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.996168447 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.997400925 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.001428769 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.999899705 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.13152289 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.11339285 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.993996489 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.134974178 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.998612977 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.996673918 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.355765653 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.954405476 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.993405164 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.010244642 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.05233864 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.998251474 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.996318704 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.004917567 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.115327858 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.995241621 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.993541449 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.998583446 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.107019029 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.993892288 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.116438211 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.222640297 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.06909617 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.247280771 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.250532545 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.999725993 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.993887783 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.010704147 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.999798055 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.998043741 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.009363365 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.995382848 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.998024932 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.996376381 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.99690825 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.9985649 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.997634439 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.002831977 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.009988997 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992938039 seconds)
  done (took 436.393791356 seconds)
done (took 830.351008303 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.697128911 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.772062822 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.612393408 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.644476725 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.613084538 seconds)
  done (took 15.266850331 seconds)
done (took 17.194558832 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.01842499 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.012505821 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.00514927 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.020414366 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.01919486 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.016991969 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.050305304 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.041921624 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.037140817 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.014493052 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.02631384 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.009375812 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.024480871 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.040193124 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.031506386 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.025322209 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.017388962 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.009074006 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.027395508 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.022091773 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.01874075 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.015163549 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.018865288 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.024715048 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.034951828 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.021746037 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.017277731 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.020367611 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.023590365 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.026412656 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.058627319 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.026580983 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.054732406 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.030174768 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.0282495 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.033787618 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.021228184 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.043916339 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.02306037 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.061079301 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.031080954 seconds)
  done (took 85.032476629 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.008234804 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.146027179 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.217442882 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.038210986 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.007082472 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.215364383 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.063437112 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.148991567 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.137792286 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.229299436 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.229824807 seconds)
  done (took 25.380200229 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.005977581 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.15586268 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.220690061 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.041862464 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.031875575 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.22685115 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.068954253 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.135917665 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.14566918 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.218766057 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.2329843 seconds)
  done (took 25.426363523 seconds)
done (took 137.77083066 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.38425523 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.031426235 seconds)
  done (took 6.350050084 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.004571506 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.020216845 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.157020349 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.000573916 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.003459205 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.005884552 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.007369223 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.001386734 seconds)
  done (took 18.130652896 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.004608675 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.005804828 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.003337235 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.006313721 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.006129423 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.00433255 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.004038067 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.003942372 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.00571389 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.006268442 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.004613024 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.003834351 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.003020001 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.004421923 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.002958184 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.004957896 seconds)
  done (took 34.005349674 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.004464637 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.006568591 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.00523335 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.005333395 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.005874381 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.004958395 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.008742392 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.006656395 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.006603917 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.005191406 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.005364949 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.003825826 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.008231286 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.002793012 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.005493892 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.007456309 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.006018328 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.007529546 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.006053191 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.005299661 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.007481845 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.004354268 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.011353996 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.003922523 seconds)
  done (took 50.077394644 seconds)
done (took 110.505679482 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.191986584 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.532760447 seconds)
  done (took 8.656432086 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.009953812 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.006222649 seconds)
  done (took 6.009121367 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.007549495 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.004629651 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.007468286 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.007486604 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.005255949 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.008082274 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.005997355 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.007997633 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.004833298 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.009273429 seconds)
  done (took 22.001674976 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.006664636 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.005656412 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.005574245 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.007006287 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.006008787 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.003217791 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.005938003 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.007339945 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.006833931 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.005805176 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.007454768 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.007276595 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.006694154 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.006668313 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.005526432 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.004934219 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.005203433 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.006753472 seconds)
  done (took 38.047309542 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.006855313 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.004489702 seconds)
  done (took 5.947642869 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.006200299 seconds)
    (2/7) benchmarking "second"...
    done (took 2.007459691 seconds)
    (3/7) benchmarking "month"...
    done (took 2.009260869 seconds)
    (4/7) benchmarking "year"...
    done (took 2.006763482 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.007353286 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.008406186 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.009370993 seconds)
  done (took 15.987687381 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.008119952 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.170317871 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.225336664 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.629229852 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.009088469 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.010567876 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.871937508 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.010376975 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.011876054 seconds)
  done (took 21.88066029 seconds)
done (took 120.464604765 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.854889266 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.007930444 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.37870819 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.087109563 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.03486128 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.312339682 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.047296002 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.559391588 seconds)
done (took 44.215196285 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.126397049 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.004461146 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.032308834 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.031906989 seconds)
  done (took 23.00594065 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.005291507 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.312638675 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.027121641 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.986376285 seconds)
  done (took 23.278940667 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.382717776 seconds)
    (2/2) benchmarking "read"...
    done (took 2.350686729 seconds)
  done (took 6.675955579 seconds)
done (took 62.028320296 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.011157077 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.012041358 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.011743983 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.009506371 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.010196217 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.013771927 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.007884722 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.007999875 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.010257477 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.012432806 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.009540711 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.009598445 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.007982457 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010658469 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.010353771 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.006292919 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0083174 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.00948183 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010183375 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.010479714 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.012945287 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.010675802 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.010174741 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.012463139 seconds)
  done (took 50.185065686 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.012849391 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.011568387 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.010750253 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.010878737 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.01351484 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.009582119 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.011855023 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.008187878 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.010307189 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.008638448 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.012498096 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.012187237 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.00893995 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.012095782 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.0119283 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.012050121 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.0092539 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.009201624 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.011919945 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.013360066 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.012580424 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.009747069 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.012677163 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.013318631 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.010369227 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.012848634 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.013181005 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.01040664 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.01161259 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.012728962 seconds)
  done (took 62.282151391 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.011332017 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.012756482 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.015265035 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.013186272 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.013514224 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.010819078 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.011406073 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.012181353 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.012610188 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.012456611 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.009663162 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.011671415 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.012728687 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.010993174 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.012884779 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.013095869 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.014444173 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.014561742 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.014355568 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.012006796 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.011319688 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.012444914 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.01260963 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.01261277 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.013046953 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.013630424 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.014209626 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.012852944 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.01252287 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.014980206 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.0028248 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.013466546 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.014708901 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.01454747 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.015969014 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.013859512 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.014973789 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.019545464 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.024251016 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.013562585 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.016846972 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.012909202 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.017075312 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.01453421 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.013836197 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.01413424 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.015391046 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.016161362 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.016594412 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.013266408 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.015915153 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.015341037 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.0144888 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.014921381 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.015126933 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.014516737 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.016774043 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.013103691 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.0150609 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.012594358 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.0172711 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.016077394 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.016824262 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.015888336 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.015905679 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.01617491 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.016921804 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.013518363 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.015339086 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.019090904 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.014829515 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.013515498 seconds)
  done (took 146.962479298 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.01534886 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.015783942 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.016528871 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.001846982 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.015489475 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.01725055 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.017586439 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016849663 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.01539602 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.015606734 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016451655 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016816419 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.015584246 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.018029901 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.017398681 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.017984889 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.01696129 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.017682174 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.016653011 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017082079 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017486229 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.019201911 seconds)
  done (took 46.299347375 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.017584998 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.017735549 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.017502249 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.018255871 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.020777838 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.017701136 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.019316113 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.017297091 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016987598 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.017780844 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018992645 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01843177 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.018938609 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.016069817 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.018352473 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.019232137 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.019556864 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.017409648 seconds)
  done (took 38.27322478 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.019774262 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.019023693 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.018860303 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.016586722 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.019176488 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.01944341 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.019557138 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.018084894 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.017035051 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.019002135 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.018225437 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.017515422 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.020566895 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018520486 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020575353 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.015404982 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.01768822 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018136423 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.019633229 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.018025815 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.018405075 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.018085308 seconds)
  done (took 46.352791273 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.017000405 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.019194544 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.015214255 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.018719813 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.020984802 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.018984279 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.020706329 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.020274944 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.016565412 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.020779324 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.018568306 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.020814633 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.019517541 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.019561773 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.020790819 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.019425114 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.021238209 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.019989436 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.995867805 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.012469174 seconds)
  done (took 42.304466287 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.020535179 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.020187074 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.02192645 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.020311629 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.019242298 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.022906582 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.021657827 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.021320612 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.022830759 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.020369885 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.02139058 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.019926459 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.020713808 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.020620046 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.021820509 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.018848842 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.0200851 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.019666947 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023193921 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.021507363 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022637345 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.023284202 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.021223227 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.024668037 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022671782 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.01940614 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022376841 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.024017612 seconds)
  done (took 58.54940384 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02216967 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.020242238 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.020996556 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.019635585 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.023640833 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.020453589 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.023038388 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.021041162 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.021849431 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.019850346 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.021476993 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.021835684 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.021642711 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.020897192 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.021680891 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.022103493 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.021584925 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.022629456 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.021241904 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.020298879 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.021753865 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.021769557 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.022743881 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.022198057 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022473779 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.022502183 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.020880598 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.021458412 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.024061024 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.021577118 seconds)
  done (took 62.600792063 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.040927204 seconds)
    (2/2) benchmarking "in"...
    done (took 2.042611371 seconds)
  done (took 6.033015445 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.024675585 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.023278164 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.024599165 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.024241673 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.023904032 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.022451523 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.022825262 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.022625391 seconds)
  done (took 18.139318847 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.025075507 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.026827021 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.024254306 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.024109602 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.023623731 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.031697271 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.024892488 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.024560145 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.025406623 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.024303516 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.028608133 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.028402508 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.031043382 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.027238849 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.024610046 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.023803552 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.025682412 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.026594573 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.027181731 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.02440035 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.028890226 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.025692758 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.025624037 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.025546222 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.024852533 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.026496461 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.03676591 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.025239236 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.026536323 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.023647351 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.031379218 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.024477118 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.025102478 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.024223223 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.023831207 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.024938263 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.031129 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.023992119 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.024571149 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.026546471 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.028523899 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.026649553 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.027600798 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.03257106 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.025049088 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.026592237 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.026684791 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.025718342 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.024705151 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.03160503 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.033646893 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.028636409 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.026829768 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.025412918 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.029183758 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.027673918 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.026543816 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.02778897 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.034046982 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.033098533 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.029873095 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.047535624 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.036285966 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.02486392 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.02544851 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.037489564 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.052933572 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.027469238 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.027756603 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.026189862 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.035132835 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.026043426 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.027915334 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.028803415 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.040626615 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.035456275 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.028016895 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.028473817 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.025305695 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.025144446 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.029450938 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.026501619 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.028608252 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.026961093 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037292734 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.05670627 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.026490802 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.026473061 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.02923232 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.023826901 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.033273802 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.03083832 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.028826497 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.029006933 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.030504115 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.032196112 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.029217808 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.030652479 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.0284385 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.038233232 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.026680726 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.028359109 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.033401925 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.037835 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.029529937 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.031227984 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.028152251 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.028619463 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.038016532 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.028784992 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.027484211 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.02674414 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.031378408 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.036416202 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.02675417 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.03342645 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.037132801 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.038274765 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.031041875 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.034804158 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.032913688 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.03115557 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.040196464 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.057391689 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.027974227 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.033582792 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.035240689 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.042529941 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.032395848 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.029818686 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.032501766 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.030028924 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.031465915 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.031380642 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.02754735 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.032268722 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.030548205 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.029927304 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.03516843 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.017529619 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.031061866 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.031095403 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.032910278 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.030523562 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.035581289 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.029543304 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.033011205 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.038966117 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.031723174 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.031041548 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.030709079 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.032455422 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.031965518 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.031071269 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.031203045 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.031815315 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.032996656 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.033853956 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.034793115 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.03234454 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.032762703 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.033408493 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.035694507 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.033779167 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.032331034 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.030667345 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.032643155 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.032397438 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.034789854 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.030833087 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.037096971 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.032984767 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.038708322 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.032082465 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.031968588 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.03276729 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.031044728 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.032778426 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.036836971 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.046225076 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.035187937 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.045021628 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.033447462 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.040008273 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.033334958 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.033590591 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.030902805 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.032989006 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.032945412 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.033498258 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033387483 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.036586226 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.053516745 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.043444477 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.033507207 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.036482653 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.040868171 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.035767796 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.039110823 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.032237794 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.034689684 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.035989425 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.031670859 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.03385535 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.034414659 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.039656255 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.033328809 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.033548293 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.036013022 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.031861977 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.034448479 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.034301561 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.033364705 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.036149677 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.033629356 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.035593368 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.033752536 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.037876928 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.042890052 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.037662304 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.032793245 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.03220827 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.036157892 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.034304391 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.036245701 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.036661469 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.038425325 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.034815227 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.039141914 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.041772537 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.036230531 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.034558731 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.035563289 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.03432677 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.038414029 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.033070461 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.039231694 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.046516053 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.038834895 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.035396691 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.042526046 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.035608149 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.037663879 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.037142763 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.038379831 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.036677488 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.037538198 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.03823153 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.034955755 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.04553805 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.035631307 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.037487436 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.035138237 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.038940181 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.038032348 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.037464152 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.035561356 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.038684524 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.046336206 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.043522758 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.037487662 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.0405894 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.039832336 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.038582713 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.041468169 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.039416392 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.050636788 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.049334628 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.036861737 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.035777625 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.038514557 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.040207821 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.036186736 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.039409222 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.0439695 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.038278584 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.040133047 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.041574132 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.037187312 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.037807371 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.045515533 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.039590447 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.041045804 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.039656529 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.038150858 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.037216077 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.036705169 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042835587 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.039347934 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.041687483 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.042844866 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.038780493 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.039300533 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.039394732 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.047345408 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.039325866 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.035438254 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.045492184 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.040993447 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.038357972 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.040587818 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.038632526 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.040048134 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.040829419 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.039045052 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.040152865 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.038820632 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.043175208 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.051247092 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.044131121 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.04937395 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.042554566 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.051537018 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.040045188 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.040108168 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.040094537 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.043893983 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.050794411 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.041137812 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.040648341 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.04722986 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.040558177 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.040227276 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.043467412 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.040628869 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.039623818 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.041866943 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.041496146 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.04680144 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.041819279 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.041198906 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.041766759 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.04130319 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.040465157 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.042733692 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.041374248 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.041872126 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.040432724 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.039570553 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.044100416 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.042493233 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.039826588 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.040574405 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.041420928 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.04139513 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.046685572 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.041151534 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.040044673 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.045710604 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.041467336 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.051268781 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.043536119 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.042614542 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.043207333 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.042830212 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.045235066 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.043690356 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.045008865 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.041632539 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.042234666 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.043180819 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.055391288 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.050864004 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.044646099 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.044058765 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.042901257 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.043186804 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.053144454 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.06995464 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.04448186 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.045749648 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.047723468 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.048591008 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.043514615 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.049521403 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.047170153 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.051963249 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.04551458 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.042301458 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.046509113 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.058466503 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.045296994 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.04373111 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.041651883 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.049964379 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.045202016 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.04305383 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.045916426 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.046967771 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.045546186 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.057297845 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.045033481 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.045983588 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.045045885 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.043429493 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.043862194 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.043553859 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.046851082 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.046158161 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.044331497 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.04528749 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.046543358 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.049599333 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.044499543 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.04846859 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.056536384 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.045034522 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.045162075 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.047814247 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.046760442 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.04574871 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.046972713 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.045782993 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.047944298 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.043620724 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.047149295 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.04825712 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.058002698 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.046881934 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.045874425 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.045610536 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.049981377 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.045749135 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.047055139 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.047043622 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.054181622 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.050988711 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.059263345 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.05752404 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.046188299 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.047341631 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.053530228 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.057574186 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.046764631 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.046427376 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.046767097 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.049697491 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.049340222 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.045986153 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.04648895 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.047885282 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.054128929 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.04815189 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.048583365 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.047838218 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.047539939 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.04986171 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.047041477 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.052787371 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.047100539 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.047241004 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.047966444 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.048399046 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.049020648 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.049999867 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.047287357 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.049096408 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.050023431 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.050395613 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.052341582 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.045957859 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.047879516 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.048356794 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.048427745 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.048847167 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.048614957 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.049084003 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.048693771 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.052816949 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.059389153 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.04927865 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.050577245 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.04849789 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.052588481 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.04715875 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.049779942 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.048121208 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.046646865 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.056204414 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.048498725 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.048094682 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.04784837 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.048055643 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.053299776 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.050163487 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.053515974 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.048407988 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.048298858 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.048703477 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.053768 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.060631529 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.05373298 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.053148452 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.059014337 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.052942747 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.051457133 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.049562407 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.049383558 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.04908354 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.050953874 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.053457199 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.050286845 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.051961321 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.049892438 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.050318698 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.050014137 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.051246671 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.050122796 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.050095391 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.054332483 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.062986225 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.05758877 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.050069046 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.05237728 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.049699159 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.054137904 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.061820539 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.04960476 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.050817257 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.05229419 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.051708098 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.050758013 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.058881095 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.061152245 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.056124496 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.051614522 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.056362063 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.073835966 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.054087415 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.061722637 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.086871798 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.053688801 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.051577479 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.052260084 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.052347775 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.050420338 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.054323054 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.052288784 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.051376698 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.050717391 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.052164293 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.060666852 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.052731391 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.05203881 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.051449683 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.053832308 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.05714485 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.050209599 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.06027862 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.053711258 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.05215117 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.053290249 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.055575364 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.052768364 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.05228314 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.053010187 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.054069221 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.052161743 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.053453418 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.0611141 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.053177008 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.054370771 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.06591632 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.066423019 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.053030973 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.053031682 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.054606118 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.059423801 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.056367154 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.051398771 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.056978862 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.063130758 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.057236233 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.062523272 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.0550309 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.052784564 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.053291327 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.053072841 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.054711406 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.066748917 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.065808181 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.054252445 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.054984282 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.061577604 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.053053567 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.059867179 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.060925464 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.055959447 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.055394183 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.053953695 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.056064948 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.054014332 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.051943682 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.057697567 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.064018809 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.055479822 seconds)
  done (took 1218.762891519 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.053936725 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.054460561 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.054474192 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.053397069 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.053633651 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.054133547 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.054683967 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.053502056 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.05380218 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.053676217 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.053402516 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.053566689 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.056391998 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.055923283 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056779428 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.055067779 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.054595064 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.055207097 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.056111826 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.056210603 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.054516264 seconds)
  done (took 45.127856242 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.054931337 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.055272615 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.054369297 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.05435148 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.05555878 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.055867969 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.055761826 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05677056 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.054410511 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.055772311 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.055399183 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.057680642 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.058918865 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.056549367 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055394468 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.056327281 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.054661903 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.056355702 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.056669509 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.05673792 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.056614169 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.058597304 seconds)
  done (took 47.213644787 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.058094588 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.057488352 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.046804461 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.055869605 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.057027485 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.058197617 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.055936408 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.059317058 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.057108855 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.057826506 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.065872457 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.067012037 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.05631801 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.060336787 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.057165542 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.058286738 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.203023257 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.05630662 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.056486696 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.058156164 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.059348711 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.063951271 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.05844708 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.058856937 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.057061402 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.060192463 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.058621316 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.058728423 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.057846769 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.058621235 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.065216138 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.058848896 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.06025721 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.059061916 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.058281725 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.060558005 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.064779052 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.060885446 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.059222349 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.05954196 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.06943975 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.08702886 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.057690639 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.059650935 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.069499964 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.060265589 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.060164289 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.063700392 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.068516566 seconds)
  done (took 103.081512635 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.058493068 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.059178046 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.060168362 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.059355793 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.057695726 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.05787708 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.058402027 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.059240037 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.060544521 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.05979737 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.060479875 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.058419143 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.058981123 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.058565955 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.059810961 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.057818485 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.058551979 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.060558033 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.060709981 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.062133269 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.061108207 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.058543103 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.060774022 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.05891975 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.060510768 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.060537433 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.05948494 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.061252022 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.060182247 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.060594845 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.060051976 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.059777035 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.058914365 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.060413935 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.060907435 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.059957725 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.061104314 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.060611737 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.059168974 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.06093381 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.061035719 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.060537148 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.062921271 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.060306716 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.062453086 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.061006286 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.060219889 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.061487057 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.06110121 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.060480226 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.062148145 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.06233881 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.062340924 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.060324182 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.061217692 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.062568765 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.061618605 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.061882442 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.062915435 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.060983851 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.061357813 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.061973643 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.062896042 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.062708286 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.0630511 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.062681525 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.06172026 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.062350138 seconds)
  done (took 142.107014571 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.063772901 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.062604864 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.06397118 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.06307856 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.063500083 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.063436423 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.063663006 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.063421581 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.063806418 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.063262449 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.064594968 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.062756569 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.06311026 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.063006221 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.065047776 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.064560077 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.064167631 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.063236139 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.064152902 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.065400457 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.064572625 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.064913246 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.06421803 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.064404546 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.065052466 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.065614007 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.064238504 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.065311448 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.063692788 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.065030389 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.063631113 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.063610066 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.064563637 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.065580758 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.062951311 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.065350187 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.064816092 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.066392073 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.066004025 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.063624384 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.065346627 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.064451437 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.065698854 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.066346604 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06391737 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.06529535 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.065617133 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.065683038 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.0657306 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.065447064 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.06524146 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.064976483 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.065603358 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.064610653 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.064252347 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.062924128 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.063471884 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.066116836 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.066959508 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.06476922 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.064845155 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.064250087 seconds)
  done (took 129.989703402 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064872258 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.066251639 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.065444672 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.065350834 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.066822362 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.066732583 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.065478102 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.065942647 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.066504049 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.066933948 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067329502 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.06677045 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067378083 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066094123 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.057387538 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066661312 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.065740234 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.067123571 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.064633721 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.067029865 seconds)
  done (took 43.307127286 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.067203589 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.066500424 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.066293383 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.065771342 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.066685194 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.066732055 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.067676813 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.066617663 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066479312 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067097534 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.066120659 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.066956262 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06711031 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.066617959 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.069974252 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.065835146 seconds)
  done (took 35.06078695 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.0673279 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.067559993 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.068270749 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.069056723 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.069452104 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.068141526 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.070597788 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.0678806 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.067130876 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.066072519 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.068957989 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.068427312 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.068142494 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.068964984 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.066208169 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.068062352 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.067684547 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.067969246 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.067537228 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.068704185 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.067912043 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.067782765 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.067918234 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.068074024 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.068036763 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.068285416 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.070823215 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.067418738 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.068372075 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.069693824 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.068914004 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.068090912 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.069252869 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.06885228 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.069442084 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.068793248 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.069227357 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.069076487 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.068548943 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.070546248 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.070758372 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.068296901 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.069433427 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.069680676 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.068527989 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.069787456 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.07128798 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.070456399 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.069579264 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.070652944 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.070724848 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.068978789 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.069419856 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.071159887 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.071014291 seconds)
  done (took 115.779787426 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.070378975 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.06992517 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.069854275 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.070091288 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.07177602 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.070019227 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.070362199 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.071180916 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.069557972 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.070257467 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.070648823 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.070764904 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.070278743 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.071820448 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.072281881 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.071063963 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.069230179 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.069008567 seconds)
  done (took 39.263095207 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.071722866 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.070961166 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.07122259 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.071211235 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.070814309 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.070387687 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.072156606 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.072581436 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.070901008 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.070271307 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.070700106 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.073074094 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.073826806 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.072347339 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.071560609 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.071715428 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.072035819 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.071977339 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.073361913 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.070823852 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.071134965 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.072312521 seconds)
  done (took 47.573864067 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.072925534 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.072276232 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.087448836 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.098302863 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.09250132 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.112136507 seconds)
  done (took 14.530746747 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074008492 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.072830542 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.074924694 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071565378 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073504403 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073123744 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073832114 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073290145 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072724827 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073411308 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072147086 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.072778504 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.072438659 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072485377 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072022661 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.071936081 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.071365422 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.071006907 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073236847 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072519895 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.072302471 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.071595738 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072069621 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073170774 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072430118 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.072405974 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073170146 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07505562 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073189133 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075085636 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.073091029 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.073380743 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073355479 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.073042688 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073723454 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073295208 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.073152208 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073832989 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.073633737 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074038528 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.074115662 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074742611 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076145548 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074555728 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074518808 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.075190125 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.073438967 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075122646 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074604792 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074066275 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074664112 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074773166 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.075159913 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075480263 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0741435 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076007738 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.075235487 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075850179 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074767302 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07502576 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075302956 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074474102 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.071452174 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075663912 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.077228924 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.075242879 seconds)
  done (took 138.865282241 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074444781 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.074214996 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076347135 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075484305 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076379661 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076500515 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076497865 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0755509 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.077689909 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075101783 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077337097 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.07627677 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076088549 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076293403 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.074626771 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.078773583 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075179968 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075673495 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077228926 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078878203 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076608054 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076666356 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.077165943 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.075704733 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076312419 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07609348 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.074538502 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.07598522 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078106523 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078217991 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077183735 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076204141 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077684049 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.075847635 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.078207741 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.078076209 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077665054 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077730666 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.076544577 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.079284468 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.078601982 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.079042957 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.077731873 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077370738 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079733301 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.078232108 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076400082 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.077163502 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.070113392 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078107189 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07956071 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07774915 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07881269 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.078852225 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077353096 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077797102 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.077459886 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.076818587 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066613599 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078528197 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.077229849 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078677348 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078738359 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.078387463 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.079080613 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.078554793 seconds)
  done (took 139.079628953 seconds)
done (took 2839.672800667 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.123276174 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.203671959 seconds)
  done (took 16.327362555 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.246480038 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.090130629 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.26857912 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.197291645 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.10470654 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.100780251 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.083286624 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.082832172 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.174650583 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.086390531 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.146212124 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.082708574 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.084736731 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.085336672 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.085622392 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.086967796 seconds)
  done (took 56.020764458 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.086859505 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.090793748 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.08637666 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.087483723 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.098144232 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.162306469 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.107310415 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.089665755 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.100365788 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.122631372 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.104095972 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.093549147 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.092644389 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.093333826 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.175280417 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.130280185 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.144481485 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.163188723 seconds)
  done (took 40.035423813 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.169729534 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.091471354 seconds)
  done (took 11.275965611 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.096689062 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.107051203 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.086869665 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.096457548 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.098792529 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.084997051 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.110885035 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.11361781 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.093800179 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.101558519 seconds)
  done (took 73.017075885 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.092350331 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.090043347 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.394415046 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.099267187 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.09338397 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.112523336 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.086258564 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.119178767 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.08923468 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.088048577 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.100052632 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.395204508 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.097393837 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.089455299 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.452336722 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.099109555 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.095530374 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.118905998 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.121903371 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.095147737 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.095707114 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.089879485 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.250095334 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.787470417 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.086616707 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.090976827 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.095388997 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.082095716 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.082873484 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.088084399 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.091290331 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.088647294 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.089626549 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.093298016 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.09248321 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.092956106 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.586140751 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.104935516 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.093997586 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.165143749 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.136790782 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.094656895 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.92723839 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.091525139 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.082277019 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.095020378 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.787047035 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.172525954 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.088962311 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.278159617 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.451560992 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.104205751 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.273575426 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.262200116 seconds)
  done (took 145.034164698 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.084363325 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.319893838 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.238337624 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.088496349 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.343278382 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.295941472 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.084926404 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.130449542 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.084700971 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.28664741 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.332750166 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.187218536 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.085844083 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.083084184 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.081832346 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.082620505 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.232246534 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.15147303 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.087211672 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.083904338 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.110189424 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.2892637 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.205446558 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.086835509 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.109274525 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.29239987 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.205491427 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.184445215 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.057180301 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.084595225 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.14844871 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.086391673 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.083793835 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.083777893 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237100647 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.178145306 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.16821103 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.085231369 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.083238312 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.084705318 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.767284098 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287096975 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.180788287 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.20831724 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.332089849 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.300150507 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.782112387 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.083491335 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.724587473 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.253914679 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.293061114 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.2948537 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.20476705 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.085280517 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.699005452 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.085076044 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.085750252 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.306112962 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.304584511 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.185474607 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087186774 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.085259499 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.08693241 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.326578958 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.087727644 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.176558043 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.087737724 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.086848225 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.17890484 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.1882669 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.311632031 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.307745926 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.117206703 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.42051702 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.607907669 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.292324772 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.152233652 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.309791715 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.088305052 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.085209797 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.171703236 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.921749468 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.340655072 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.33035835 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.285585253 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.117421853 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.741759645 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.087519582 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.272807732 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.277117882 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.321466559 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.334587695 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.32123648 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.612589149 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.086806279 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.086940115 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.52498163 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.202753786 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.083155363 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.446072354 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.315554209 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.591655673 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.115145419 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.373674616 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217473572 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.0905794 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.73663373 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.088993117 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.292276569 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.129440091 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.091067624 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.08783771 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.278208131 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.000985014 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087642526 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.129404683 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.149527525 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.091322762 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295326297 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.091234109 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.333327834 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.093784312 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.323041637 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.713742782 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.117897979 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.307513902 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.334286026 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.73888964 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.380813696 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.330983074 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.204108973 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.364582949 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.091444902 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.090711275 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.351331847 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.091065174 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.090359958 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.261050424 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.097686385 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.725379271 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.092809418 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.355554569 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.111206593 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318054595 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.092497444 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.331633585 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.122532322 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.142129377 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.092188542 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.215681888 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.094952828 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.938038837 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.248676826 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.094406702 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.090650514 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.884588442 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.095052669 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.240327513 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.316508755 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.108020947 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.155529611 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.661709111 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.086717201 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.171011327 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.107339199 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.717725892 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.088101909 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.333825566 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.088164029 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.576161685 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.090142629 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.324083394 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.324021292 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.094566956 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.090374623 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.934244418 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.090319212 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.088053779 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.24756671 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.092369015 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.014578535 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291182105 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.092722729 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216099662 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.092601429 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.417885132 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.4379534 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.088272102 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.086185738 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.089558453 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.087843076 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.08936097 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.352382972 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.116468558 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.524126316 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.225942599 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.346734998 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.395566714 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.288106792 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.128655667 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.093224453 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.315401195 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.092450108 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.153366077 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.09114821 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.109452321 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.318267359 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.091447246 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.297052176 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.326119204 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.977909808 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.138197744 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.09385641 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.090169218 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.017509056 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.237552381 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.178365335 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.094089528 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.091332907 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.205384538 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.21042952 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.275717922 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.924367534 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.315770771 seconds)
  done (took 953.128748619 seconds)
done (took 1296.844379167 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.092774268 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.095307083 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.089561674 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.09222638 seconds)
  done (took 30.384458896 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.091919359 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.095463834 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.101694066 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.093186825 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.094399687 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.096693009 seconds)
  done (took 14.592331069 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.091134975 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.092698952 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.094539895 seconds)
  done (took 23.293397773 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.535517748 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.506883866 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.170430318 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.237976201 seconds)
  done (took 11.4695204 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.094272574 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.094171303 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.096657535 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.104103017 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.102460855 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.094172801 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.095628698 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.103814306 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.093141137 seconds)
  done (took 20.908447077 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.260191497 seconds)
done (took 106.926204897 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.272872883 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.42608487 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.234059756 seconds)
    (4/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.097030461 seconds)
    (5/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.97643238 seconds)
    (6/341) benchmarking ("sort", Float32, false)...
    done (took 5.737034494 seconds)
    (7/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.974337642 seconds)
    (8/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.25029684 seconds)
    (9/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.078399227 seconds)
    (10/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.629986488 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.221846127 seconds)
    (12/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.104703258 seconds)
    (13/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.1135678 seconds)
    (14/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.735952849 seconds)
    (15/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.775314672 seconds)
    (16/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.30329311 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.110073011 seconds)
    (18/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.52238695 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.101856885 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.105051346 seconds)
    (21/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.55346819 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.327519267 seconds)
    (23/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.215691727 seconds)
    (24/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.223463322 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.213226834 seconds)
    (26/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.269129658 seconds)
    (27/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.084509907 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.098524122 seconds)
    (29/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.891214891 seconds)
    (30/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.093917134 seconds)
    (31/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.360222556 seconds)
    (32/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.085026701 seconds)
    (33/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.721987453 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.177522365 seconds)
    (35/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.796153149 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.064558054 seconds)
    (37/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.240963921 seconds)
    (38/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.090201129 seconds)
    (39/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.884138265 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.316746203 seconds)
    (41/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.426609837 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.177778307 seconds)
    (43/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.098781083 seconds)
    (44/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.34351481 seconds)
    (45/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.091664502 seconds)
    (46/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.104338023 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.5009908 seconds)
    (48/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.395176307 seconds)
    (49/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.05670959 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.996128851 seconds)
    (51/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.250763759 seconds)
    (52/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.293597308 seconds)
    (53/341) benchmarking ("sort", Int8, false)...
    done (took 5.035785194 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.31837932 seconds)
    (55/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.187379659 seconds)
    (56/341) benchmarking ("sort", BigInt, false)...
    done (took 7.091419171 seconds)
    (57/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.104052237 seconds)
    (58/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.086313661 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.139986903 seconds)
    (60/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.468486225 seconds)
    (61/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.08684297 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.150307856 seconds)
    (63/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.111943203 seconds)
    (64/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.797944093 seconds)
    (65/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.345983788 seconds)
    (66/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.320827117 seconds)
    (67/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.084032816 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.134820353 seconds)
    (69/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.10964969 seconds)
    (70/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.181644249 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.11452584 seconds)
    (72/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.097126775 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.497190363 seconds)
    (74/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.099608885 seconds)
    (75/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.795566322 seconds)
    (76/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.093380772 seconds)
    (77/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.234851357 seconds)
    (78/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.197014137 seconds)
    (79/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.321778357 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.384902301 seconds)
    (81/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.218900904 seconds)
    (82/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.197225445 seconds)
    (83/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.417170412 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.407987856 seconds)
    (85/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.388318769 seconds)
    (86/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.108371483 seconds)
    (87/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.851631349 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.323418245 seconds)
    (89/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.299307765 seconds)
    (90/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.175986485 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.729968989 seconds)
    (92/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.91038532 seconds)
    (93/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.540409131 seconds)
    (94/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.517482016 seconds)
    (95/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.415290259 seconds)
    (96/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.189811458 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.231211462 seconds)
    (98/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.189639731 seconds)
    (99/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.352789348 seconds)
    (100/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.097343362 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.954810358 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.213777189 seconds)
    (103/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.086412203 seconds)
    (104/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.389946615 seconds)
    (105/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.003668909 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.178236883 seconds)
    (107/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.282939228 seconds)
    (108/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.330352537 seconds)
    (109/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.911438722 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.101040892 seconds)
    (111/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.177017075 seconds)
    (112/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.391565311 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.363527364 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.327275879 seconds)
    (115/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.220136411 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.41318365 seconds)
    (117/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.170831478 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.298186342 seconds)
    (119/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.091216152 seconds)
    (120/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.294416462 seconds)
    (121/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.225276476 seconds)
    (122/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.303997172 seconds)
    (123/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.086268373 seconds)
    (124/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.412955645 seconds)
    (125/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.405613354 seconds)
    (126/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.38721247 seconds)
    (127/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.086482273 seconds)
    (128/341) benchmarking ("collect", "all", Float32, true)...
    done (took 4.153458314 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.996775129 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.30646773 seconds)
    (131/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.228946898 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.111837215 seconds)
    (133/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.099479345 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.54049807 seconds)
    (135/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.086796972 seconds)
    (136/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.102723133 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.315470342 seconds)
    (138/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.093700725 seconds)
    (139/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.214026952 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.180753523 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.335550246 seconds)
    (142/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.087599988 seconds)
    (143/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.622109586 seconds)
    (144/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.120637158 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.43405311 seconds)
    (146/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.488874706 seconds)
    (147/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.535927736 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.331880318 seconds)
    (149/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.150181837 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 2.30782908 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.093802361 seconds)
    (152/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.345529345 seconds)
    (153/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.477577792 seconds)
    (154/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.168698396 seconds)
    (155/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.087926564 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 7.612026018 seconds)
    (157/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.095188365 seconds)
    (158/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.10802079 seconds)
    (159/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.10548326 seconds)
    (160/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.34353203 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.213979115 seconds)
    (162/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.09099864 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 7.470813403 seconds)
    (164/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.651063058 seconds)
    (165/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.102128137 seconds)
    (166/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.323078332 seconds)
    (167/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.198770413 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.036629107 seconds)
    (169/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.494273108 seconds)
    (170/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.300832843 seconds)
    (171/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.091595735 seconds)
    (172/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.22209233 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.097896571 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.143854124 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.507596779 seconds)
    (176/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.104081503 seconds)
    (177/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.091700877 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.108302394 seconds)
    (179/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.204294996 seconds)
    (180/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.17481466 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.433297977 seconds)
    (182/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.501884128 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.484313018 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.245120142 seconds)
    (185/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.852245019 seconds)
    (186/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.510570607 seconds)
    (187/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.252253148 seconds)
    (188/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.608274933 seconds)
    (189/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.154120021 seconds)
    (190/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.240761803 seconds)
    (191/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.099922973 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.48865795 seconds)
    (193/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.898259095 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.098343077 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.097727911 seconds)
    (196/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.109325349 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.223914277 seconds)
    (198/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.199813608 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.401268931 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.219594232 seconds)
    (201/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.104792023 seconds)
    (202/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.279483986 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.502734217 seconds)
    (204/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.186753935 seconds)
    (205/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.405835527 seconds)
    (206/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.511525292 seconds)
    (207/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.499828741 seconds)
    (208/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.111394494 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.493318511 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.092333104 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.09466937 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.204065777 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.19671017 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.25120469 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.265379545 seconds)
    (216/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.431394872 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.120224962 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.382898698 seconds)
    (219/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.00500066 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.347160644 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.435533953 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.497326258 seconds)
    (223/341) benchmarking ("sort", Float64, false)...
    done (took 5.807175943 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.227958738 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.434976908 seconds)
    (226/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.296431552 seconds)
    (227/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.893917818 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.423209012 seconds)
    (229/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.234242271 seconds)
    (230/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.374130433 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.114942855 seconds)
    (232/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.024590022 seconds)
    (233/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.323718146 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.855364546 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.388056337 seconds)
    (236/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.226062649 seconds)
    (237/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.285911964 seconds)
    (238/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.093238253 seconds)
    (239/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 4.175580516 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.432686887 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.100985176 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 4.714274108 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.239065398 seconds)
    (244/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.579424609 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.110739736 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.108651754 seconds)
    (247/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.39518982 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.221520213 seconds)
    (249/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.097556138 seconds)
    (250/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.413384682 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.986259143 seconds)
    (252/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.195595486 seconds)
    (253/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.582458568 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.407194391 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.114848591 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.173455259 seconds)
    (257/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.273823062 seconds)
    (258/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.191824178 seconds)
    (259/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.195972516 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.188730871 seconds)
    (261/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.173949118 seconds)
    (262/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.526890314 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.829176767 seconds)
    (264/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.349657122 seconds)
    (265/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.511963685 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.998778159 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.266804253 seconds)
    (268/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.44042846 seconds)
    (269/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.207626221 seconds)
    (270/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.309361186 seconds)
    (271/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.178243317 seconds)
    (272/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.097687662 seconds)
    (273/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.436473094 seconds)
    (274/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.580785509 seconds)
    (275/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.249320133 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.828461368 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.222116278 seconds)
    (278/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.30641359 seconds)
    (279/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.311465184 seconds)
    (280/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.297575729 seconds)
    (281/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.186929642 seconds)
    (282/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.102439709 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.306965385 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.113397304 seconds)
    (285/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.118008398 seconds)
    (286/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.997972167 seconds)
    (287/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.122239906 seconds)
    (288/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.12163482 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.580042882 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.095725476 seconds)
    (291/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.118347586 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.343638889 seconds)
    (293/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.550706822 seconds)
    (294/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.702684327 seconds)
    (295/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.186409339 seconds)
    (296/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.385375151 seconds)
    (297/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.94296487 seconds)
    (298/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.526435334 seconds)
    (299/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.175436473 seconds)
    (300/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.387220204 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.095870867 seconds)
    (302/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.11829754 seconds)
    (303/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.110789193 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.877308276 seconds)
    (305/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.120259144 seconds)
    (306/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.112558046 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.368333289 seconds)
    (308/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.477918486 seconds)
    (309/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.00656205 seconds)
    (310/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.105182279 seconds)
    (311/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.282722775 seconds)
    (312/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.391635394 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.331075228 seconds)
    (314/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.312284863 seconds)
    (315/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.179281261 seconds)
    (316/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.260592062 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.508513379 seconds)
    (318/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.226641544 seconds)
    (319/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.22246826 seconds)
    (320/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.39386725 seconds)
    (321/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.159456109 seconds)
    (322/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.067397061 seconds)
    (323/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.337129245 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.407392222 seconds)
    (325/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.236303719 seconds)
    (326/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.19531732 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.099361489 seconds)
    (328/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.102323418 seconds)
    (329/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.318379398 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.043778407 seconds)
    (331/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.109134679 seconds)
    (332/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.176877917 seconds)
    (333/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.097105896 seconds)
    (334/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 3.940584351 seconds)
    (335/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.097677392 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.815446157 seconds)
    (337/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.103327656 seconds)
    (338/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 4.641058728 seconds)
    (339/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.26087828 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.228573891 seconds)
    (341/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.275350335 seconds)
  done (took 1173.379640156 seconds)
done (took 1175.776908196 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12879431 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.113682588 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.619184338 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.120043936 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.11129236 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.115339304 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.633350533 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.140954752 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.128782079 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.632880951 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.119981903 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.111375341 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.127456915 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.147353513 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.120523308 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.123615398 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.11677244 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.137805302 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.147036999 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.119298611 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.159734618 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.118464429 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.100363386 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.164004528 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.112024679 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.126561958 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123019426 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.160194307 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.158684249 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.115893247 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.117166638 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.470257048 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.16962362 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.11774385 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.124011531 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.128642312 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.118645215 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.12869017 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.120348812 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.131270377 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.11347383 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.123825227 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.119150148 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.115139177 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.113377761 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.112817785 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.112611875 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.239297604 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.128179262 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.453771445 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170911303 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123329057 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.15974584 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.116513222 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.116915698 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.116329077 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.15743273 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.119857664 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.11845646 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.453115937 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.206597079 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.129466878 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.453414155 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.182921882 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.125998528 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.121295642 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.113495279 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.125174935 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.471941528 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.679455316 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.144517884 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.135446433 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.115713632 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.116029436 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.127546461 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.629767495 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.129500313 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.704057703 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.141451502 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.129943446 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.122290143 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.118396393 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.11551768 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.130246638 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.126900582 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.113334366 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.122127004 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.120584037 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.129921056 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.472729481 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.164220719 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.623055982 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.123372774 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.126818475 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.124524061 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.703462134 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.150841912 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.123437464 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.117837055 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.469911376 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.162500567 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.125654635 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.117909853 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.12647595 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.233787341 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12678464 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.126715322 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.116542809 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.138766092 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.122531606 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.116438716 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.130146391 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.137700234 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.151251852 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.133084747 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.115866398 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.124687057 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.122720154 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.125414853 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.125523491 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.123780511 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.128673041 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.119143585 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.168964604 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.126982902 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.132957531 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.231401366 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.12046439 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.240890132 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.134928804 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.122807819 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.118083259 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.455362284 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.167549287 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.141777473 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.124101152 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.141773288 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.139523209 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.134385925 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.119419997 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.136515041 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.119819633 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.170748553 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.119129963 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.143865703 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.17111275 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.132825045 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.125889473 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.126300556 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.153776587 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.13898917 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.123714274 seconds)
done (took 333.219514371 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.159673536 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.10915955 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.186949979 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.109843985 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.180707117 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.163883922 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.110008581 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.109337138 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.110235802 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.506130616 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.112252574 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.11547043 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.10752187 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.11015558 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.160543042 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.109235163 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.110228145 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.347468486 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.11262415 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.169714889 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.109961382 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.107731464 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.109452288 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.50952201 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.111363713 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.110574639 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.171000521 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.109464026 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.352651374 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.110548316 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.110439499 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.353918862 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.170277426 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.124265315 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.120544875 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.115765572 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.177409216 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.118917673 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.158706359 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.15970773 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.186564546 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.143859973 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.11033004 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.111256394 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.112050543 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.11438724 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.11179342 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.145956068 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.113615953 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.117327677 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.347071324 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.11800041 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.118963815 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.112907487 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.111844734 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.126354857 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.112433462 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.112673308 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.172361016 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.114367383 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.159363804 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.510660844 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.507669524 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.114175331 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.113438968 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.111994835 seconds)
  done (took 199.877786692 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.179702174 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.198474435 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.180619331 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.121829481 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.165154122 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.179044162 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.120697621 seconds)
  done (took 17.179143193 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.123430951 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.115185224 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.137095648 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.135308743 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.114408315 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.262992017 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.124885331 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.11823913 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.13957227 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.11364127 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.463770166 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.137437782 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.120492571 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.109956575 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.125813592 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.143589763 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.118451233 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.114355637 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.211799739 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.191642313 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.120879075 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.122007454 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.1433672 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.124438437 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.101819842 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.114050935 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.115848828 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.121749822 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.115067736 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.114747663 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.115678874 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.128643485 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.11442401 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.115009495 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.114788659 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.115800482 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.116151294 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.115314279 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.115536171 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.114844376 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.115550123 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.115677435 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.116796692 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.116147395 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.11637843 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.137954636 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.115441834 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.115169172 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.115359307 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.1167417 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.143693712 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.116715223 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.116055761 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.120246533 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.140651878 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.123549254 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.118522611 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.116161587 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.117648866 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.102373078 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.115320333 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.1953656 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.13976892 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.115457513 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.139927619 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.154665258 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.116445704 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.11721999 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.115567994 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.141042306 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.116148069 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.141659186 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.117182066 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.222418444 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.117423329 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.264842558 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.140128095 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.120988267 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.122009234 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.117952652 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.124980905 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.117176666 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.12133823 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.122782723 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.121690382 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.117307541 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.116662663 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.119125997 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.124912151 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.117718091 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.165685649 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.117202675 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.119078505 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.221312472 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.11619766 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.213509772 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.144255091 seconds)
  done (took 229.050656524 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.122213959 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.120815894 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.131468665 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.119778242 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.11884187 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.122924734 seconds)
  done (took 14.77491567 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.121730327 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.123518418 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.119690078 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.119065523 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.119662346 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.118989215 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.119262092 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.122693181 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.124161504 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.118317559 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.11993642 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.12479948 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.120625016 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.118618382 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.121014502 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.11981251 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.120743589 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.119432739 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.118981193 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119735334 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.364551798 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.121968838 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.121420787 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.121757611 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.126574513 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.120750609 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.127586835 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.120742874 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.120672411 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.127122991 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.124261092 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.123286673 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.123284267 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.127824288 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.126845669 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.122998392 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.12405162 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.126134378 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.120479602 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.122040059 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.125174704 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.116733496 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.120229969 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.12469021 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.122490058 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.128469784 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.130237178 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.131091939 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.122122796 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.125367756 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.125217228 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.121634019 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.119505022 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.125396765 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.121520725 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.128393696 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.129819605 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.119867437 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.120891955 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.122526739 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.124643361 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.122266934 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.123338473 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.124667759 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.129339943 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.127129181 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.125007336 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.125518775 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.121756102 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.122827683 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.124933791 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.121088333 seconds)
  done (took 156.142817282 seconds)
done (took 619.056615731 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.12808653 seconds)
  done (took 9.170764882 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.285360674 seconds)
  done (took 9.409582395 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.611561399 seconds)
  done (took 12.659985489 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.130361494 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.137269375 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.138995975 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.119846104 seconds)
  done (took 30.591380649 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.49074572 seconds)
  done (took 9.537503408 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.136239023 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.114219059 seconds)
  done (took 16.356313219 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.277707277 seconds)
  done (took 9.322756749 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.623490298 seconds)
  done (took 9.694124914 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.127599566 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.150047437 seconds)
  done (took 16.34350975 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.122446941 seconds)
  done (took 9.168663107 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.906473016 seconds)
  done (took 10.021305644 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.128352429 seconds)
  done (took 9.192176872 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.18296184 seconds)
  done (took 9.228532904 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.13004311 seconds)
  done (took 10.175754697 seconds)
done (took 172.913383007 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.131435852 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.122817519 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.120600884 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.122114775 seconds)
  done (took 30.539590903 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.156217745 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.160459871 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.167521019 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.160005512 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.150549998 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.148793134 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.160502628 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.159804612 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.14923527 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.156395374 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.158515566 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.157801887 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.158891713 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.17514576 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.171485049 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.159750604 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.162165571 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.161631647 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.152513969 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.170697996 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.16232879 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.161446854 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.127466548 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.126552817 seconds)
  done (took 53.822827342 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.317128372 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.193264228 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.281089806 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.173605792 seconds)
  done (took 11.012652559 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.12757627 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.191973895 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.177588004 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.173813275 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.177831463 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.229658965 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.180931797 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.264380907 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.256250281 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.255677853 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.13610061 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.148775474 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.152452721 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.17440587 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.230383419 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.130576329 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.1293203 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.243471139 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.191967386 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.321853085 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.129484101 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.184880624 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.178847276 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.182561398 seconds)
  done (took 54.618111982 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.130015993 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.135890558 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.136613944 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.12932634 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.13027186 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.129589664 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.138005304 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.13226576 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.151754359 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.131124967 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.129339487 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.129418407 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.137396779 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.131220424 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.130934187 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.142109574 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.144298459 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.127336937 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.134758427 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.136880332 seconds)
  done (took 44.738987813 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.128151633 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.975380175 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.473718592 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.380566105 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.129471059 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.129326847 seconds)
  done (took 33.266235581 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.142393333 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.146509307 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.137102775 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.155191149 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.17692992 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.139524207 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.189532096 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.294529987 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.141076913 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.188316025 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.153428546 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.136654944 seconds)
  done (took 28.052834692 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.127772077 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.129987653 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.127354912 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.139295157 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.140772781 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.137040208 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.138107171 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.128554463 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.139076614 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.149685748 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.13746092 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.14169116 seconds)
  done (took 47.686171305 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34410412 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.354827685 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.345479009 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.80705785 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.457580632 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.108751881 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.41575057 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.340684927 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.783207073 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.811969571 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420549704 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.104809424 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.07673642 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.055756572 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029328648 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.374443535 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133011138 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.989726806 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.380438945 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.169987491 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132148896 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.132266375 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133103816 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420891571 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.45546489 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135651665 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.344277717 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147641801 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.132038255 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391797637 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.778647734 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.194078605 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.335340935 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.387764946 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469450375 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.206986037 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.130309088 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.38377592 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.184958369 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.166953945 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142834836 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.14476861 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.672368331 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.141784862 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40428915 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134439899 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.169591147 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.102483948 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05825619 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.443232327 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239778416 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133210722 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.170633054 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.569044743 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251391016 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.376528692 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.135946901 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.386086641 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198466464 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.381310663 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.296160783 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.133323494 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346777017 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058907111 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.468242946 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251411186 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.134656619 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139148991 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.835916866 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.3770231 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.214579651 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.44007195 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.890440099 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.134300147 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137093692 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.177603494 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232671331 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.129667345 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.43343133 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.137052749 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.057959684 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.235014452 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.538696558 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139501972 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.134786772 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144656905 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.982295396 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.060440956 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.231731402 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.386865214 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.452613081 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.136782141 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.135340888 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.157812814 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138074979 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.085486472 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.775760595 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.20597102 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.062124977 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.697500724 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.79870481 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.108600365 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.661434143 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183337253 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40871093 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275251505 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.539173973 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.34480329 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.382676189 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.666077508 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142725902 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.752295641 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219440817 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215481928 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137023918 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.695436644 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.391956079 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.426414795 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248875668 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.1370684 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.0631932 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.147374695 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340248925 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.789492535 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.199192852 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135006054 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.140256679 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.135049005 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.139544312 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.300642055 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151849848 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.435069297 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.202670049 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.136321638 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.076662696 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.141371634 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419034992 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.916637551 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199373015 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.391412738 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.397614375 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.837916149 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.734036074 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.080679431 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.406700229 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.202663841 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210900957 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.705622403 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.261758896 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.234596084 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137346164 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.261778028 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.146202742 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.139384224 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.66227892 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.55370838 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.565222843 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.177658444 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137660478 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.090979485 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.383719994 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.386296963 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196987859 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.165614889 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144277291 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.22141259 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36568082 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.138842395 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064869165 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378641481 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375795232 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.431434749 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.543393749 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167398718 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.207796811 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149675643 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.355499581 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.221405803 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.810915422 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.683820841 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.349287208 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.771892829 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.108346029 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.783967617 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.388547153 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514385168 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.158393654 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.591518901 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.397364461 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.894322629 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.175016593 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.667918523 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.067096723 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14797986 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475116691 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.091455671 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.452033208 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.195254942 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153326794 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.143053342 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.141720259 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149779571 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.022387535 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.246071653 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211947514 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213541175 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069033845 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.854398171 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.18571337 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.143109465 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.14320708 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.472189288 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.962012066 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.093646998 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142318372 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221714213 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.895524815 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.698915672 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.145930757 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146191913 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.759968744 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145715125 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.056044944 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.144342394 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.871406245 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164111764 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.388542502 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.836101041 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.430255463 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.213311624 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221015728 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143238567 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144188713 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.844065364 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151447613 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.844997771 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4277164 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.410562372 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.580751706 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.198222591 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.355444608 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.158141705 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.14468803 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.607192954 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.167441951 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145253321 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.345974226 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.666993874 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.458672938 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.779635213 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.229807924 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.144109023 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.411873238 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.144819858 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.785792762 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.844537986 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.132051991 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.142688679 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.390050768 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.828905898 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.148888267 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.122131832 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150478659 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.357611855 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347250719 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.417090757 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432287424 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.590189321 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.071379919 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.150426498 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.167416743 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.387629326 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.142845055 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.179669975 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.590476978 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.179776702 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.572384091 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.430074733 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.526636525 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.778776271 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.409954409 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.205962005 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.156472386 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.804350856 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.261159926 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.078593599 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263966639 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.070597677 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.810459139 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437886193 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.161293698 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.413610274 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11955407 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477177425 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.439499518 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.388031427 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185457474 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.173175812 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.147602407 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178564409 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.146368927 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.413292787 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.268967052 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.150179092 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.75798713 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189875269 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193555316 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151937232 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.609125621 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165375074 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.149361429 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.841880608 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.168869671 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265853637 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218955736 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.877452958 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.847973151 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.181004528 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.101315486 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.799304689 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.415796399 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.197730564 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.601244394 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180109968 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.550042018 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.146801438 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.362086439 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.152411294 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.80596089 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199073656 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410946867 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09615226 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.357964544 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348793905 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.173631542 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.151027401 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075534415 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.308933067 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.039930049 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.125304835 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.150243919 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.831089972 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.555838008 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.439084353 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.597812589 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.964345956 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.150268431 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.454553139 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.541211972 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.853269574 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187467476 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151695493 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.474264667 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.275231162 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.44730949 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.498550685 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158296855 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.174989533 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361905274 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275279259 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.068176215 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.646010471 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.733869005 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.849763419 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.162353943 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.352298188 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.466850747 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.521162523 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189713252 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.22660451 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.554630758 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.417143539 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.213347766 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.074958465 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148735759 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.547013404 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.550075543 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.247236308 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.390988679 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.453693422 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.890078746 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.822368944 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.661983151 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.535749413 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.558631218 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.546879586 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361502848 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.515523902 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.472274562 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.034162463 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.565956551 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.363671165 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248867082 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.425971637 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.018376852 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.861649147 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.396099925 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.157166935 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.080590673 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.360321026 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.155260864 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.75938648 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.679482639 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.399805483 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.40390087 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621529687 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.69160309 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.434576497 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.181206293 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.118308595 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.176418037 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.172885644 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.154023539 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.651973763 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.443906332 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166509901 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.093328821 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.822039369 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.080102089 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.368366172 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.418989904 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.194238476 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.711535763 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.411590312 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.253620868 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.447298877 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.484577352 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.195157417 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080646891 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.815700091 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.10082621 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.204926644 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.568691099 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172090374 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.154137662 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.354473089 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.077268391 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202484322 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.158938736 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347126123 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900725848 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.423433826 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277803274 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.397543715 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453103916 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.983657215 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180772965 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.429580124 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.085122222 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.849397068 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.865765037 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.193825604 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22797273 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153829593 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158275761 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426486454 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.477131851 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.243799045 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.922001504 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.194451326 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.180671234 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.475986404 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.247537217 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.158889463 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.15909845 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.700127675 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.395026764 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.155222972 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.123827244 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.371050167 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232060544 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.352334248 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229858645 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.670766042 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.162331229 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.981297805 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255904955 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.111421602 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158802518 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.873958322 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.216337103 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.157196617 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.427950728 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.807759259 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.360329107 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.551520341 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.062958674 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.422074173 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203360503 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.160536149 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.203400634 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.440484803 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.454846967 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.158244162 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.426559857 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195490045 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.16380481 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.820077481 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.124811229 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.156772165 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.819322928 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.084430872 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.885587764 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.553710167 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.16504101 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158150928 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.159318837 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.084292793 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.15655379 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.320827408 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131146913 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.159620567 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.518540107 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.461124951 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249230079 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.159266165 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.159205522 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.160196292 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.371540951 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.672673278 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173055539 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.861493132 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.361094568 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.150044518 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.656881127 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.599820423 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.496999323 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.201849081 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.434683024 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396552649 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.695542148 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.434828661 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.135586547 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384017932 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.158388862 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.43203377 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4331446 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.159931149 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.371119836 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.832027462 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.450565124 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.512241982 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.472555952 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.219347826 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.441260635 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.082129838 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.161434726 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.162352307 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.426003052 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212225172 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.158136554 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167072548 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.719243486 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.826769505 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.633788763 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309993583 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.468440036 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.984019751 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.913263441 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.163382556 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.086573542 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158949323 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.184723624 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.164744273 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.086683602 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.883991368 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.88135776 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.372116821 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.467869492 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.086184079 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.36357595 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.76496734 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.085725221 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.128901771 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.199628721 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.403628963 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087638425 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163257705 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.115801191 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.42615396 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.940900766 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.434854592 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.160956581 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104034091 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164690934 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.161443372 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.159824937 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.24772397 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.163201303 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280056377 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.426756104 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.528424758 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.258679496 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.773082983 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.820330671 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.099977764 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201823218 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.77797849 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728886194 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.435473501 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.285768554 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829720681 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.107582933 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.166448587 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17995261 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.424102066 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.165721066 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.162701742 seconds)
  done (took 2250.54112028 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.200415706 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.200695453 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.209890913 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.184794904 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.223301463 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.244502369 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.214765884 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.166115821 seconds)
  done (took 59.726551569 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.169209461 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.111396766 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.170686075 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.162062638 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.159889282 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.164819679 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.351219657 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.194100679 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.160083695 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.165958946 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.164777091 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.165388709 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.162989166 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.158448961 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.165315542 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.4518785 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.190005349 seconds)
  done (took 81.394696356 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.214001562 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.132206167 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.163373664 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.001513831 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.164438738 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.467846339 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.162926818 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.165474277 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.517955037 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.457721604 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.19310008 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.169161914 seconds)
  done (took 95.920344385 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.167410621 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.166975432 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.166008049 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.165241463 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.165782565 seconds)
  done (took 12.91445102 seconds)
done (took 2806.343069684 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.411243829 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.257988914 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.232716177 seconds)
  done (took 6.575136989 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.308768546 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.357588015 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.470688692 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.478288395 seconds)
  done (took 11.707465824 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.445272912 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.546261989 seconds)
  done (took 7.076024491 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.551348857 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.174929623 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.561307673 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.165440287 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.168080936 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.165666093 seconds)
  done (took 23.589880407 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.167108266 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.166404253 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.166748122 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.166516914 seconds)
  done (took 10.753260703 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.16279472 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.946099157 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.161268452 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.169658753 seconds)
  done (took 22.52397389 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.357974449 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.181564612 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.93545092 seconds)
  done (took 10.558324191 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.79220257 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.617622057 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.779077205 seconds)
  done (took 10.273281144 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.30553097 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.00235836 seconds)
  done (took 8.393561613 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.313955705 seconds)
  done (took 4.398244406 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.005772518 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.479400325 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.64722281 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.67776131 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.757775421 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.386741688 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.496880906 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.443892443 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.556646667 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.573549706 seconds)
  done (took 28.115342944 seconds)
done (took 160.747565842 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.601241847 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.195335061 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.32663427 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.547196612 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.434107728 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.325304822 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.465791502 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.537889621 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.220642641 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.205643951 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.546525314 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.410972768 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.412943001 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.188768947 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.421838312 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.188625757 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.410293682 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.621584368 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.237314721 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.473935362 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.477744486 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.193183547 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.388295138 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.207456064 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.412868916 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.325936834 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.786326491 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.188618964 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.381411507 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.803294993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.326649747 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.622739212 seconds)
  done (took 178.974757976 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.166916119 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.16815109 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.167749798 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.164766974 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.494090705 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.168624375 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.166526095 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.166984316 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.477464068 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.46603168 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.16716096 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.479618631 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.166757923 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.16657151 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.168923913 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.165911084 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.589522556 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.166478531 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.17061876 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.167200084 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.168917226 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.354337809 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.168380394 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.363261556 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.574238371 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.166525118 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.166833009 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.167003452 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.17108686 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.168459846 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.16899057 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.166444082 seconds)
  done (took 217.910890622 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.167665319 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.169393583 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.167264958 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.169816942 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.169106482 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.169012867 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.168182061 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.167978272 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.045805688 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.035783523 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.170176027 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.169067629 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.171662291 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.168463527 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.171722515 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.169036558 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.171567887 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.170223269 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.172544065 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.174139543 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.173707658 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.835958672 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.167767035 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.853080024 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.171501056 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.17315954 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.167566194 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.175771736 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.174754928 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.175676629 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.173213594 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.171496729 seconds)
  done (took 230.644488275 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.411834297 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.171047112 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.171727847 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.172244125 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.172581448 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.172710613 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.18026508 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.420246828 seconds)
  done (took 21.966483415 seconds)
done (took 651.596270184 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.526730135 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.902443743 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.303656578 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.193850572 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.462275248 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.238705678 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.191483431 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.254188776 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.843962942 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.266291768 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.585088758 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.200034296 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.8818034 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.219541765 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.306134686 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.25125226 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.567908637 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.849388804 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.331204255 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.871033739 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.394638508 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.142830537 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.270093739 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.886862023 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.602184005 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.160005135 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.223814563 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.566304984 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.194344029 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.426104586 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.850361559 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.445116218 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.206706647 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.19331632 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.24698513 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.235632535 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.406885074 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.202099432 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.311902373 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.940423021 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.853432433 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.724749943 seconds)
  done (took 112.82312421 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.179649111 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.177591128 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.176608172 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.177332705 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.187128777 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.178589061 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.176686124 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.17695827 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.177452591 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.177532037 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.178400311 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.185315403 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.178342067 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.186397956 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.179176329 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.179410951 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.178173411 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.187663329 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.178945426 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.178327259 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.178284713 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.178718277 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.176305458 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.17875789 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.178821176 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.163564104 seconds)
  done (took 58.756987767 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.176414581 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.351224613 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.46672231 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.209705952 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.178078636 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.179247176 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.206044209 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.182169216 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.179223387 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.181248521 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.292138014 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.182396008 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.19056518 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.462721583 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.207615447 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.178512957 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.177710325 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.177627466 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.360196831 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.191658196 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.207611551 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.184414634 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.209134217 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.192370706 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.180207666 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.178970198 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.182361591 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.612965148 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.190023521 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.292197103 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.222214068 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.213758855 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.518437435 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.475593195 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.245894876 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.184260375 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.175999193 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.340794516 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.190162189 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.179404556 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.207835975 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.185032414 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.470846472 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.69304665 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.191612983 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.178865616 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.607598228 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.35061206 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.225311245 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.192634897 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.479410781 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.209939653 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.178613846 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.180300023 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.216411927 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.19176756 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.180199898 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.445471408 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.195866119 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.208112709 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.187295961 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.181220545 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.367016464 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.188856865 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.355832364 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.188984226 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.187247467 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.180113419 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.472776994 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.209623456 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.689534345 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.195506314 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.181231797 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.297021636 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.360849888 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.636471587 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.193199144 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.367083029 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.536110011 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.217818725 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.19551401 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.596409293 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.221484523 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.192715886 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.180406043 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.180721698 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.18146117 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.221061172 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.205148481 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.60112527 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.689377177 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.451606759 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.221855974 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.197099975 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.182984283 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.433262505 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.191649926 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.180626596 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.464791034 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.716709804 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.19732065 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.187664403 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.673327095 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.196529019 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.212535217 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.193539984 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.481715648 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.213317198 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.221305782 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.180748108 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.186807073 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.182531965 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.212471079 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.189553664 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.181690788 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.664510754 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.359303508 seconds)
  done (took 269.232086536 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.184982446 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.178414033 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.182044898 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.1792512 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.182758823 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.182253639 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.178698117 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.180358641 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.182909363 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.181614473 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.180866105 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.180586568 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.182989168 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.18452302 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.216350409 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.184902067 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.665393043 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.182909947 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.181824588 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.182918544 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.765795012 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.189682117 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.181200152 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.183156709 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.183973366 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.180265294 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.188399785 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.213781903 seconds)
  done (took 176.352434211 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.181393108 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.231493259 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.199989622 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.23199424 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.199226374 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.183701874 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.204372249 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.200337374 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.190352896 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.185124564 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.182181592 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.210177703 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.192388802 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.260331133 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.212644204 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.212377458 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.262786428 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.190432979 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.185040338 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.184053545 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.235280397 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.199821891 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.212797341 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.240029204 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.199687211 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.233621275 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.19910916 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.186280628 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.186571441 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.277198657 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.203188346 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.214012443 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.222323051 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.203822898 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.27604012 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.278268309 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.266662475 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.211975074 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.188858198 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.185580731 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.185936643 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.184829931 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.23628908 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.201510187 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.186664068 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.277767612 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.201274693 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.185243268 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.208349532 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.184641429 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.199184323 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.202704445 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.219827601 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.289064861 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.233200077 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.212895816 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.209767739 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.202309673 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.187988006 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.26058901 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.189921936 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.278115651 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.206686153 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.186650017 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.188134715 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.19128076 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.234698777 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.22652492 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.264874177 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.193968303 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.260058171 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.240135284 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.201542849 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.189083208 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.188360788 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.236720951 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.275628811 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.240230672 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.248540506 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.22358822 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.197886787 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.186856796 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.185436225 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.215886867 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.194814263 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.278175257 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.278784423 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.1920831 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.188695257 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.186799444 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.188298448 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.21195497 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.246025286 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.230233385 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.273732092 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.221060378 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.223395314 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.196964473 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.198822197 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.195153764 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.220201706 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.198545457 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.201064321 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.52614304 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.225849705 seconds)
  done (took 235.026439475 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.569289377 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.234512763 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.259231881 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.452898922 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.582498977 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.311570399 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.231143588 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.247469934 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.247933864 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.35595083 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.291076575 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.280123204 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.22631447 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.214571492 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.238169389 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.250014723 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.268080408 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.546980457 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.340314444 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.922221793 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.226176469 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.526050086 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.52324121 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.595014801 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.257723637 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.647152869 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.877204311 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.325990483 seconds)
  done (took 71.16458497 seconds)
done (took 925.446755449 seconds)
SAVING RESULT...
DONE!
