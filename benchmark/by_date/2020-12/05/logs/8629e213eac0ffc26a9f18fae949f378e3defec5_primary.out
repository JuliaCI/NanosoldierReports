cset: moving following pidspec: 24246
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.835919739 seconds)
loading group "shootout"... done (took 1.124282313 seconds)
loading group "string"... done (took 0.66842057 seconds)
loading group "linalg"... done (took 8.651545621 seconds)
loading group "parallel"... done (took 0.167992329 seconds)
loading group "find"... done (took 3.047730852 seconds)
loading group "tuple"... done (took 2.144916793 seconds)
loading group "union"... done (took 15.002628309 seconds)
loading group "dates"... done (took 1.474037025 seconds)
loading group "micro"... done (took 0.218822543 seconds)
loading group "simd"... done (took 4.759746456 seconds)
loading group "io"... done (took 1.098530862 seconds)
loading group "random"... done (took 9.585907933 seconds)
loading group "problem"... done (took 1.526133334 seconds)
loading group "array"... done (took 25.338641804 seconds)
loading group "misc"... done (took 1.886401316 seconds)
loading group "scalar"... done (took 43.460982514 seconds)
loading group "sort"... done (took 3.343682455 seconds)
loading group "sparse"... done (took 12.779679436 seconds)
loading group "collection"... done (took 18.478030246 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.426229998 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124022592 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129467736 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114537741 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187253525 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122169233 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130612951 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085644117 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.864432701 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138372149 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115559254 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426119698 seconds)
done (took 5.315749701 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.168788289 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09371807 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083369351 seconds)
  done (took 1.40565795 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07186233 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063401545 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06779143 seconds)
  done (took 1.432672398 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065675397 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135763155 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.0668445 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067973554 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068225807 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066937273 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066780267 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066724636 seconds)
  done (took 1.771662653 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072611574 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068436195 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065956353 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067779387 seconds)
  done (took 1.507142073 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066405178 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122247363 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065545017 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065424191 seconds)
  done (took 1.548569501 seconds)
done (took 9.149433824 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139267493 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.828928799 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.757957954 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123152664 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249790028 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450982549 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124798755 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183696426 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089561999 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075855597 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121497985 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078864494 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.401218835 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.407368664 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071498706 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173779437 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653115785 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087120585 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136113532 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45823709 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073851567 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088214565 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.0849028 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071422601 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.346348393 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15499458 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.670761709 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097221841 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069313301 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095011744 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070838264 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078284435 seconds)
  done (took 10.777967855 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093172053 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090420819 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069341508 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124411333 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093958475 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070269119 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076058055 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067763674 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089594872 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124060212 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090102405 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098396809 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066685378 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.074480455 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074378261 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196948126 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080418562 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081745842 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068446757 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081450425 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105707143 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078625771 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078627392 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078450068 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132767336 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169729405 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097033021 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09832124 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066282554 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079417564 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115696371 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125639282 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067190248 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065719593 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120039928 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095968006 seconds)
  done (took 4.674685008 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.886378652 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096530102 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085040425 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076955316 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109065493 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114334914 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124256235 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125442873 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103038191 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071162668 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153958849 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.651633626 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.138489227 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071893666 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120552324 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.363935854 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.088063809 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070381477 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068613568 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071550462 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070201454 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112997157 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066477519 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175678019 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584884581 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071082238 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069925031 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097211275 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06635932 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141840947 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.094351908 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092868519 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070069781 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.543761557 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065688735 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064080877 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.082568735 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088548948 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093256696 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.175280947 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06759616 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068912758 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079548561 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066530307 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108786844 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079770744 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.487387211 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069996639 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.560731142 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224001366 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072878131 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072003245 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101856173 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064530514 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067491479 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.996019182 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.121022674 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067021285 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272559475 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068113029 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068676796 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06968597 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102802718 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067768852 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068929676 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073646873 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096977689 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.880112007 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086571356 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096603737 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068664495 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.407191382 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075126326 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069357576 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06965007 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084038176 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111498415 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067331811 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066824019 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.10763139 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089470978 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08953373 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070171332 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067544899 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066975957 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321390666 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.154262234 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067163628 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068107713 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478807893 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06461941 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064338044 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066557459 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068234408 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089683529 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066611653 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063799878 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064709579 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098608063 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069854686 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.815885468 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067518938 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.459711008 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069531518 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103025322 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119989777 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068117633 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.094827364 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068225508 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065397171 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073621251 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066114907 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065168213 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069717354 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066024937 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066571557 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069279845 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068560028 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067638902 seconds)
  done (took 23.20199496 seconds)
done (took 40.77639774 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.331957705 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078292607 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079434909 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079092972 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078748336 seconds)
  done (took 1.930028306 seconds)
done (took 3.304463527 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133409841 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075587848 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064575482 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100565646 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069001669 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101933649 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108191456 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104542312 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069077781 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068933267 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068893095 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105272547 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105426882 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069203777 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098513838 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.10380012 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069020557 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064590338 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068929868 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069118669 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068978471 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064730549 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068794761 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069103837 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.09972376 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069105091 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064903905 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098837374 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070091706 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100306136 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071089827 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070695642 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070581003 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.222368719 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070792352 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101679253 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065323916 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.0691494 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.06889844 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069310927 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069292803 seconds)
  done (took 4.771920767 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071449135 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082153613 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083695051 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062115349 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07183696 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082337743 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062301194 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082131176 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09167918 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082754063 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082268243 seconds)
  done (took 2.186650924 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070117486 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083278761 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084241392 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062135068 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07343627 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083620213 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062274184 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082981829 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086945406 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084561205 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085366584 seconds)
  done (took 2.170648904 seconds)
done (took 10.434188644 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096406226 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065949564 seconds)
  done (took 1.456134689 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223663726 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.505684611 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.305601315 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09384882 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072740058 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086231713 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203990221 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067580422 seconds)
  done (took 8.041565413 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.102927957 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069018703 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070075956 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068032919 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069954625 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069148881 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071473949 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069939469 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069843081 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070345575 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.07105115 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070192468 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.07035872 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07187314 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069354904 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070815484 seconds)
  done (took 2.566337901 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104068825 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069983094 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101429776 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063837748 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073741869 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064684449 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072608789 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074899415 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072321985 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073224012 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074282491 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073072513 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072781161 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073697975 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075005074 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075202289 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075284687 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072423235 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074731749 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075630363 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074856314 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075265707 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075648383 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.0734941 seconds)
  done (took 3.243328057 seconds)
done (took 16.620574336 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17368864 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074478911 seconds)
  done (took 1.555878579 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068271514 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068943358 seconds)
  done (took 1.455684679 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073250392 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061127205 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078212718 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070651375 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061752179 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062005265 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077812368 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062040392 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061549675 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061956015 seconds)
  done (took 1.988668916 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063405957 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068467376 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06688 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064961014 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067222456 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062877619 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065970675 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063453751 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069728456 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062841088 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067029522 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08368323 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066541233 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084296531 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065829332 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066418777 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068412604 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065619963 seconds)
  done (took 2.545558277 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061791465 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061849392 seconds)
  done (took 1.452307834 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065448665 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062117321 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064643541 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06422885 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062119023 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061484904 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062268767 seconds)
  done (took 1.766526416 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422968981 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122311364 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341379124 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068875491 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076361517 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254995689 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064237337 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068547054 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069176512 seconds)
  done (took 2.854892888 seconds)
done (took 14.959272852 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082370325 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180066612 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08772707 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405884926 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093608217 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067244264 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11297136 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177240424 seconds)
done (took 2.55000884 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.2777163 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.249178501 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.398233136 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125250005 seconds)
  done (took 3.107643936 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336953829 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078257419 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077103514 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067045265 seconds)
  done (took 1.901622626 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06486895 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071282362 seconds)
  done (took 1.468360308 seconds)
done (took 8.104634658 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072165868 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061816385 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.097066271 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064017615 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06496426 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064296425 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064379094 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074905462 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06431367 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062050736 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064512461 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064349233 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064453104 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062111495 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063972692 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064245692 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064963006 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064142819 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06436197 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062082166 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063984278 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064430702 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06360131 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064194753 seconds)
  done (took 2.945536978 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.08004015 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065681171 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06694602 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066737783 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067483245 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066862177 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067261112 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065817344 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066938046 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065683567 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067637164 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067319991 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065320802 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067873372 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065870636 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067624688 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067085742 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065821416 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065997249 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067323261 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067392497 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066556348 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067464878 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067262922 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067666263 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06778292 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065714248 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066025792 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067483012 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067861986 seconds)
  done (took 3.369162198 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066114943 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060203459 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.06036662 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070230831 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060343403 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060585354 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061399277 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060426354 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060894057 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061617216 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060952831 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060506101 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061566275 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060428859 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060308394 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061307479 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065370854 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079620342 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060562744 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060546198 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064862043 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060779243 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060733429 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060545789 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061680964 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060877715 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060446908 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061125905 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060496175 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06130666 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060713194 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064642958 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065431057 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060507169 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070244214 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064809473 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.06039621 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064595083 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061347018 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060287952 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060171183 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060012164 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060285712 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060226677 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070578497 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061024579 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061538048 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061141549 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060889867 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060762612 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060438871 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062443321 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069454726 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061523698 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061294352 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062920108 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061559339 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062668333 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061645066 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061489888 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061698471 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06533882 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063409646 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.06282361 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081505052 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063524722 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072160559 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061407255 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06261609 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065525834 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062412923 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079712678 seconds)
  done (took 5.890302098 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071500557 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071995934 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079536151 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070351769 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065498696 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061659103 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065439481 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061523215 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070713339 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065562658 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061520409 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065474544 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070921962 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065527567 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062677193 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070552605 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065243284 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06467643 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061556507 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06556311 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06288316 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065084768 seconds)
  done (took 2.835455534 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134623539 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066347248 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105228529 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074592745 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068836692 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074782786 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066325609 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066172387 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066388991 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067406516 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066922884 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067064731 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069691011 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068425649 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068292691 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068419502 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068203683 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06841261 seconds)
  done (took 2.692485519 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076661477 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065944282 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089135938 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067646729 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067708978 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06741511 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071441809 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072070923 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067290103 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067373999 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072013533 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067305737 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067287394 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067516207 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06753237 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067835095 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067234549 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06744497 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071667725 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071170281 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071329412 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071978582 seconds)
  done (took 2.901607022 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076729653 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064925353 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082251754 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068032507 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062155027 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062059753 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067810704 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067064785 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067880401 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066124469 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066740142 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061663163 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067304408 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06656608 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068585238 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067254952 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066760195 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067540317 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066595351 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062399235 seconds)
  done (took 2.705059372 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086532256 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063312491 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064968132 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084198754 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064703488 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064776116 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084540945 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065202981 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065255856 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086493041 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065430849 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06398241 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084461946 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08457236 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063840263 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084150799 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084637679 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084006495 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064993148 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065186148 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087014106 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065268447 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084455458 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065031919 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065051001 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064588473 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06458434 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083599143 seconds)
  done (took 3.415077155 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064140167 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063667138 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064191485 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063963776 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063987572 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064259333 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063903061 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064488393 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063651555 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064575639 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064366977 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064247596 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067061541 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064400771 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064050395 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064378042 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064424152 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064548662 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064277206 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064082469 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064078991 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063890669 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064071144 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064383487 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064465258 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063716245 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064367151 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064043684 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063567386 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064372968 seconds)
  done (took 3.291970612 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073023872 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071286463 seconds)
  done (took 1.510508393 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062419861 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07799051 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060290422 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072762985 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068672825 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064179174 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069740059 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069168463 seconds)
  done (took 1.905960187 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066801868 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090983916 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06246395 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06258514 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065545217 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127204407 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075020627 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074045889 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075832356 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064894191 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063034105 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074370575 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062153966 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075663261 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063830504 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071163367 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069803291 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080577327 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076731423 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06270925 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075175937 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064708318 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062663039 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065192821 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064048584 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070336848 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07794278 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07480905 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070956525 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060406017 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081500281 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061226187 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062546631 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070915174 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065320913 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061234575 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098169695 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062033778 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067102121 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062769128 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074675718 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082848523 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075669497 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079425534 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063071204 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063210983 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061084397 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063159125 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064755837 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070464456 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062275366 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070333441 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062118146 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064655188 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073144249 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06300966 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067577301 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070627811 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074684123 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07173494 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070282273 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07668645 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07035349 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069113287 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062294261 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080714912 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062971036 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074378232 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076009604 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06280405 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074640399 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060955528 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059963761 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060961045 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094759152 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063382577 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062430147 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061648591 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061121641 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062892658 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070591486 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06699547 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068320607 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064635557 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077110426 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070176818 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061334315 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068009594 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078724525 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064601921 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061494737 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077445996 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064241401 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060733172 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078336427 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070737271 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062579253 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061753806 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06423287 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073912729 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061836861 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059681687 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069366521 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062532784 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063192551 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065520398 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069074042 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.06122752 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071293613 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065912046 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062714455 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059884765 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064932651 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061674475 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05960479 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069682176 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060537673 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074655921 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066571501 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074348324 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074902869 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070620829 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075725078 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060168934 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058567285 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077517908 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069919303 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061422315 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076979424 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059985632 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073404296 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060110279 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.061573832 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.069537052 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059380599 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061750474 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059882698 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065057342 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061350161 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061424508 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065526605 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068168356 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071845812 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061473163 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068566439 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060289789 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075577893 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069902079 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064543857 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063378513 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060532745 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071707125 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066941329 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069710969 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.05973856 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060416356 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060181198 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070832587 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069872724 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062131781 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067088025 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064883036 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061068156 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060793693 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061904123 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064843594 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063783528 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060180994 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067206674 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068289768 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.0724039 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065720546 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069141289 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058608822 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059497734 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061281314 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059249576 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064481681 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068236838 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074407958 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070223136 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08030239 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059848885 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069406254 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060893189 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075385131 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072535108 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060237563 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063059531 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058598316 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061122577 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069510698 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070451794 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072123842 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074167721 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064671026 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063702277 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059127664 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.073746667 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.05954095 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067888341 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068550164 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063143237 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059589703 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061045735 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068404401 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064403915 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059331829 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074096418 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.063819676 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058734357 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073698719 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059631399 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070170151 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059366031 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063345874 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064837587 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061137284 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069350711 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074308229 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058498079 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059582845 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074628306 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06049326 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060911515 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068068878 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074475886 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064380197 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067026233 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069465091 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069296676 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064110133 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069158658 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059996586 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068131082 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06181887 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071039026 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059023348 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076194497 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058615798 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073810725 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059786573 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069917628 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060423932 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069268198 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060219326 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076078678 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061075408 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06013168 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070658813 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05903515 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068542391 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059175495 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064733035 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066203605 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068922945 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061165754 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068382024 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060786168 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.315947188 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068088571 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071742923 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072880208 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068041835 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062992727 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071795838 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07530954 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072348525 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065382892 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065412648 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064982391 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.0736206 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065511808 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065270641 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072573421 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068684412 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069400279 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064818328 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064973986 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06470433 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071888183 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072983809 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080870585 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071527105 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070629189 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072480882 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062454657 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078511144 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063542352 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074005597 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062041208 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068664795 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072646679 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062565775 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081571932 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064042079 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070633378 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074887348 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071335497 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066115909 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080468072 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066546336 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070648246 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07006529 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065966667 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068305845 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063492082 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070853477 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071156714 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.07243493 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062883289 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069510567 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070747354 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06362159 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069535569 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063155369 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070611834 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063556409 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060945352 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066525786 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073407119 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066893803 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067037639 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062645526 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06114281 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.0627521 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068603237 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066728147 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07090422 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077504097 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061043272 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06346727 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061408572 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065697073 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079924514 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071675865 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070368943 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066575354 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060958073 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063709588 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064146195 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062373602 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065593015 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061491411 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062143429 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073761168 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064393035 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066508928 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062517513 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063389458 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071667141 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067134451 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062493517 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068637292 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061734013 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067101006 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060882081 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063726579 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066194826 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061512125 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065471675 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.0723979 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.0779868 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06863685 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070977469 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063277414 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070095769 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077634448 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069678305 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063506573 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07201684 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06164801 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079969025 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071359761 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070350557 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071886454 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062785714 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078451228 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06604891 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071908544 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076970969 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062500935 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06789164 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060733944 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076862039 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065658331 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060775588 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069257153 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069309795 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06703424 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072949367 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062002387 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.216892179 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067318913 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065908163 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063395854 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063066487 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070676415 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077600863 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062638632 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065462187 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069990224 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069926327 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066265031 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073793598 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069610347 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062914968 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063522943 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064984313 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062840122 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073941063 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06222744 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06624164 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066478581 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061904443 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068462321 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077882846 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070899339 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07111003 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061380605 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060839939 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079513917 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06587193 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065546986 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070467324 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071495502 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074284441 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072439159 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080046837 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063899559 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069294604 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075833859 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064261453 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06291541 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066026042 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064019372 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070867291 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072233494 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069482022 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06392338 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068379697 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075232882 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06295981 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066670631 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066796684 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063127999 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071694885 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070145502 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073410782 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06301773 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061210542 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065092073 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070413151 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069368602 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071062412 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064703711 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070361874 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077854939 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071050481 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066078365 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061567091 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066337379 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072010864 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068192747 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062997409 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067473598 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066640945 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070592476 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072453649 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06616431 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061501239 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078330379 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06961091 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071060987 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063390078 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063853465 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062335708 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061377537 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072896456 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061304026 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063362387 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065891893 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062964492 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078672894 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070248415 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077635554 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062953375 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066032352 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062085995 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072530607 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067896002 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063985371 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074035893 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061610197 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077856808 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073751848 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067156066 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.081337375 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066751029 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069708702 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076698196 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071404362 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070671473 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06539022 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071277422 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064184797 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072509562 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061104726 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060147857 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071344051 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07039572 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073952061 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060798797 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071184511 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063072219 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069874908 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069346327 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063187631 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062641539 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063111237 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070750805 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065853147 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070574178 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065874456 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.227193634 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06312291 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.0731709 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07094325 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072617892 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075775379 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073858252 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069769071 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062477767 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068903957 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.06944536 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062484715 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066668642 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064785153 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082754871 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06374298 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063137772 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075286625 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068250782 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062170724 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067981242 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066189566 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07191541 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062977798 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072502962 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06592993 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062226258 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066281241 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06590365 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060936326 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061293791 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06192091 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072345402 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065832916 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061766468 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080055024 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063288015 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07029233 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072698377 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068136513 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063149755 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060393524 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06249892 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074564574 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077614449 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065400522 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070672998 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063823652 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071156463 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060600962 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070459175 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069725751 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070547356 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061537516 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06211786 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076769027 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076788979 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066695417 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071226002 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07120038 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063658382 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083527837 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070597101 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063011202 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072669107 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0642386 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060998305 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061089767 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063036282 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073460551 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061694741 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064002142 seconds)
  done (took 42.280617628 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100174391 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063084763 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061917951 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062403676 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072629566 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062927015 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062056562 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062754158 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062974117 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064782645 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061758659 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065317995 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073260684 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075202776 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072196642 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066544031 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062130436 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063379646 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06346516 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064495354 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073980724 seconds)
  done (took 2.953305632 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065155106 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065811005 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065945636 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066891772 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067088801 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063319216 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067436331 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06358799 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068263945 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064538919 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068131051 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063809875 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064050139 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063750567 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064637779 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065793667 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068257803 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067268688 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063611712 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067731874 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065344607 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067658051 seconds)
  done (took 2.950399709 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063603392 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06235312 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070938306 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061861955 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062862546 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066671662 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062764705 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06726039 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067307857 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067876129 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07232882 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064277282 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062665388 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068966939 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063053366 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063710015 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107341546 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064646105 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064618567 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062824024 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066021475 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070970908 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061480576 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061519997 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066262198 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065224308 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061765017 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064188888 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062504972 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066024509 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062613647 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06106841 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071092957 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070155354 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066220208 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065890629 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063335509 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062227183 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061154324 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061524101 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070208146 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062982634 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061622978 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063142952 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070697577 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062339913 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06124705 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071268312 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061453061 seconds)
  done (took 4.727915968 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072457552 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113935086 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067564442 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095127346 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074550683 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.06742521 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066931216 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095833827 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062900626 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063656739 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075576884 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076260939 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064623781 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066217916 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068651119 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06463734 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065485073 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063669424 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067020435 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064205203 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067191504 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068489417 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074304055 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074955539 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065428171 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064081881 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064158831 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065484067 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075055013 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067796417 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066171484 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066318414 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074877126 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067940239 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064406597 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064294134 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075141933 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064620564 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064308995 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062598916 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064071404 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065862987 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068507035 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076495329 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064616482 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069326167 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064829766 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062791653 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074766544 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064383644 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068560454 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075424401 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065856266 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064898296 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066471815 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074912275 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064813137 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063699514 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064855685 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074580452 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063109356 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066345723 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078286353 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063998677 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067738957 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075426581 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069311786 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065665219 seconds)
  done (took 6.370496624 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070524438 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096808567 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072316901 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072229929 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072382933 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072161849 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072149402 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072355062 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072049583 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072329135 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072593981 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112371528 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069153816 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076544666 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072056576 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072283121 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072527789 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072114408 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072551354 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072281901 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072465283 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07271135 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072497119 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072819161 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074803076 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068764642 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072154579 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072190289 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07302023 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072062356 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074783654 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072114597 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072145483 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072447189 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075078832 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072353302 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062822601 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072201903 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072601655 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072063874 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069633729 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072254262 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071911331 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068586109 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072683549 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072268668 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072874051 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074819238 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078965896 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072365271 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072301882 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072754097 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072341314 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074943476 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072707043 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079495239 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073214134 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072901496 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072739097 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073168127 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073062924 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079113446 seconds)
  done (took 6.111303163 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074592398 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067789862 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079907995 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06232109 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061473957 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070895074 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061576262 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061756382 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068552874 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068722985 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070334445 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071079704 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072976567 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070234997 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071588003 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073196848 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07105398 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071136348 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068564455 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070947513 seconds)
  done (took 2.926521343 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076773644 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080405832 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067211661 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070339846 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067163586 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070862556 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066739885 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067741208 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067612616 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067447119 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072024394 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072112716 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067692367 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070957624 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071758753 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071735853 seconds)
  done (took 2.652904542 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06526905 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069727966 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068060062 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062939494 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064840367 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062304946 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.0630827 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061485433 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064323542 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076043872 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063001795 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06531909 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063123374 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062084091 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062377084 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065395272 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064649799 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062577453 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064099176 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066813223 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071225504 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063780448 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065491794 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062679753 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065072996 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070993637 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064476412 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065409147 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062985184 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065478655 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065421453 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069157957 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065174369 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063254114 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061981441 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062609832 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063238272 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065547587 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065860653 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062961874 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061714079 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067749017 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062918603 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063476179 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064187884 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065388032 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064427714 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068383207 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062672818 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065114108 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062905005 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064299153 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063233224 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.06972835 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064980882 seconds)
  done (took 5.096827201 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078500822 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066945353 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061476064 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061646466 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066703619 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067127192 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066995639 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067291034 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06741022 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061744588 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067399532 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066423631 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067392858 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06674882 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067845226 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067433073 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061658069 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067304113 seconds)
  done (took 2.739887382 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067884276 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067146127 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066222467 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063471492 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063029383 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068169768 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061639041 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063137513 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062988137 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063504834 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063415632 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062801064 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063084265 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063167012 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067760194 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063923901 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062902801 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062281996 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063491813 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061644569 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06804261 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06214675 seconds)
  done (took 2.944003928 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088923506 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084969407 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128275658 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081107582 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088879905 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072545146 seconds)
  done (took 2.079349379 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094171104 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104594368 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066047287 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066235377 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074810892 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069718613 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069444761 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069822338 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074547094 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073337103 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06976785 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075034562 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075248461 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071406522 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075260895 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077189911 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069903778 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069875023 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066551896 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077802621 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069997726 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075289531 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070363997 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069842873 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069723752 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071406042 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077500112 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073849722 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069651676 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075511069 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078275876 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069786366 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075721574 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073341255 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066597659 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075151379 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069688795 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077938093 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075210758 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07118144 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066820312 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075192781 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075467085 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071704566 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077900164 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070196911 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071756605 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070094139 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070302631 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079996508 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075897636 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072049754 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075818606 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07812186 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078282371 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080132857 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074116457 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071797132 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07570717 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073751272 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071604807 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075857798 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072020033 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074223762 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078397382 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071953119 seconds)
  done (took 6.419375563 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101648998 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067384925 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069896503 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073467884 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071375594 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070390617 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070740626 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070286625 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070824805 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068084379 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105737493 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070907226 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071848328 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074593929 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070555311 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070292843 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070172535 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071866953 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067453698 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080761526 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070701491 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07194081 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071909207 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071961903 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073995298 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077923202 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069845914 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07039391 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070165073 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070033249 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071757342 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070506629 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071971009 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067045458 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071548494 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070229445 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069803546 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071467468 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070121548 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075487644 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071753312 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07781909 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07018655 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070321073 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074266127 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070110667 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070043114 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067710675 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070134281 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067533467 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07408594 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073824786 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074083751 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072017812 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070283601 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070473714 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070162021 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070149505 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070500313 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077654664 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071674749 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070615172 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080131392 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069934594 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070282424 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072049858 seconds)
  done (took 6.351665521 seconds)
done (took 131.405147291 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219417364 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19087012 seconds)
  done (took 1.936941223 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075521337 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166226866 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075361305 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075313229 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109475585 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108587215 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076727402 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.0731719 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076018544 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072919711 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140256072 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077262172 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073109362 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073590013 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073006352 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073403003 seconds)
  done (took 2.97092475 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108486703 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186320878 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084991246 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072237092 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116839972 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079176236 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073580659 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076348245 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078287184 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071122683 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108562018 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082772459 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075383109 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.078234084 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073786903 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074830564 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076171603 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077485295 seconds)
  done (took 3.150518727 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099347159 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086679912 seconds)
  done (took 1.743257989 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16240444 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107728849 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146615265 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332937665 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132102772 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.12877631 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.132884467 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.130421634 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11852122 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124018034 seconds)
  done (took 3.066681168 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106588378 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105766377 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308938855 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10650947 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085745497 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080505406 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078555567 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.083006037 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07804885 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079701638 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125848471 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076456868 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073713852 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125009823 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099664975 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108075928 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071783855 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078885496 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080439654 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071870375 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076755356 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080532857 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179654831 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079747348 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101004008 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076420403 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077952804 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07539102 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075488761 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079247903 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080018567 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100018432 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078912175 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083426069 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.078006588 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09796858 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073052709 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099817019 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075014576 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073704494 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075792218 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079700222 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072748126 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078809132 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076670903 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07833534 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080708077 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072144406 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076163534 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075182412 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073297617 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077551253 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076987016 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078024599 seconds)
  done (took 6.412367498 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108455301 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108987547 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07104473 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113281438 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106621809 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071362649 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105357727 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101240254 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109704493 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070620992 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069910307 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070423913 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077161221 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080343587 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117617543 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109474845 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072627445 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071552488 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109004027 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107752228 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069590876 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102688721 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101414807 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107745594 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069509843 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070809469 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069589014 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070140167 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075489772 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075649299 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069429322 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076336769 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081883701 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075815436 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069035544 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069066285 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069448376 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076422876 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076939966 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077609977 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075398211 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069030438 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069475603 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070293117 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070348259 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068949454 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07530923 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07647823 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075266865 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069383942 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069994253 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069241289 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069853168 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076497354 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075353001 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076799224 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076922911 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069309869 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069428092 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070997685 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07755849 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077603892 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07716391 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070670144 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07846038 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069602414 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078915152 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081234792 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070136335 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070206866 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069572763 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069659648 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070232036 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075263549 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075790175 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070584416 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069985241 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070327337 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077932774 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075826149 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070053153 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074980338 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069152491 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069775043 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070616016 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070104228 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074754966 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07640521 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070390483 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069779422 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070058078 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069753874 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069590469 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075908667 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077201032 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07694334 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07621497 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070450676 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075865249 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075804286 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070149217 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07573241 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069543049 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069878724 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069949516 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075215149 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074796881 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077659414 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069438068 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068958881 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075035443 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077636412 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.208185519 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076251682 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078793089 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076479671 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069752096 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078907195 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069933545 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077825421 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070186795 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078114196 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069931621 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.0756437 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070111488 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068966745 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069697565 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075687635 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070513858 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070168005 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.306636689 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069913315 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07603457 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078947718 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070692865 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075967689 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076271979 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070290202 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075478573 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069762469 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076892301 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069892546 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070227586 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069100138 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078464145 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069290254 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069850908 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070024203 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077384171 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069602526 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078208549 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075287813 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068990188 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079609972 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077700985 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075718334 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078278101 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070496679 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06995021 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069276652 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072902225 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075405936 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07642626 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070340962 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069794405 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076002888 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.079317581 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070627283 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076645794 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07584646 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075626412 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070107435 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070122661 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078573049 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077747196 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075524399 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075675374 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075861801 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06990376 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07524764 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075016091 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069201936 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081387313 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069729183 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079308398 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075628483 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075137225 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076211598 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077485275 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077532981 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078124297 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079633251 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069180449 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069729542 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075716213 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06951663 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069937422 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075553812 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070366198 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069665812 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080334214 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069706445 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07831849 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069694391 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076441561 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069451138 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070206421 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080330874 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069593356 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070140961 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075835288 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069678692 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075046515 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07748078 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075311002 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069232891 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070050964 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075582055 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076074492 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069310715 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068803301 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069402236 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074682122 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074495549 seconds)
  done (took 18.866376966 seconds)
done (took 39.719117131 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170451003 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115311472 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208861163 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198878562 seconds)
  done (took 2.358352538 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101092081 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066607303 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080851988 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090673611 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066443875 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076602702 seconds)
  done (took 2.090870204 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198579035 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173502601 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239837952 seconds)
  done (took 2.215336451 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367166991 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149509826 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216475627 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.501633425 seconds)
  done (took 2.938644167 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.1103166 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100350015 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077737732 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111244181 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085245553 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063180405 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134221255 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070340463 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.1003657 seconds)
  done (took 2.515564292 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129516065 seconds)
done (took 13.878017996 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.272389805 seconds)
    (2/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.202377471 seconds)
    (3/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.196975599 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.189346308 seconds)
    (5/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.121941431 seconds)
    (6/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.213950745 seconds)
    (7/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.105626994 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.201689083 seconds)
    (9/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.260132063 seconds)
    (10/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.208446573 seconds)
    (11/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.183147596 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.158989935 seconds)
    (13/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.178247301 seconds)
    (14/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.07813403 seconds)
    (15/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.117349559 seconds)
    (16/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.240600646 seconds)
    (17/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.084128608 seconds)
    (18/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.200903861 seconds)
    (19/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.156932144 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077310219 seconds)
    (21/341) benchmarking ("sort", Float64, false)...
    done (took 0.138602677 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078550607 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.092295679 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.08065664 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092115772 seconds)
    (26/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.077443121 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079329429 seconds)
    (28/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.200931431 seconds)
    (29/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.203304036 seconds)
    (30/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069484873 seconds)
    (31/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125684803 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075505754 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.090923338 seconds)
    (34/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.222878759 seconds)
    (35/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.084357833 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.176986909 seconds)
    (37/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.218977971 seconds)
    (38/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.19874439 seconds)
    (39/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.236615815 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077615771 seconds)
    (41/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164268859 seconds)
    (42/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070218225 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074017153 seconds)
    (44/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.185915968 seconds)
    (45/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.18258848 seconds)
    (46/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.079185721 seconds)
    (47/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072292115 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.077193014 seconds)
    (49/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083454017 seconds)
    (50/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.077505728 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086930516 seconds)
    (52/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.200317643 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088880761 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087582621 seconds)
    (55/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.08352099 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066224304 seconds)
    (57/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.19730898 seconds)
    (58/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08371074 seconds)
    (59/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.154954079 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.0836533 seconds)
    (61/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071946253 seconds)
    (62/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079089093 seconds)
    (63/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137947775 seconds)
    (64/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071265641 seconds)
    (65/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161956945 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.186151255 seconds)
    (67/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.176350836 seconds)
    (68/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.219981083 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149530837 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.205697312 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.087314812 seconds)
    (72/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.334641718 seconds)
    (73/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07718846 seconds)
    (74/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071789423 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093328164 seconds)
    (76/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266834013 seconds)
    (77/341) benchmarking ("sort", Int8, false)...
    done (took 0.157900571 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.226880438 seconds)
    (79/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077486943 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068729202 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.155542185 seconds)
    (82/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068156714 seconds)
    (83/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069018757 seconds)
    (84/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074016882 seconds)
    (85/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074703922 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095351783 seconds)
    (87/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.0753709 seconds)
    (88/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075550745 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.143869467 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.067494864 seconds)
    (91/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067668701 seconds)
    (92/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.1657225 seconds)
    (93/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076981257 seconds)
    (94/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177601423 seconds)
    (95/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069423667 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067555669 seconds)
    (97/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.088525174 seconds)
    (98/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.07552784 seconds)
    (99/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074446755 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153558648 seconds)
    (101/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068582479 seconds)
    (102/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077497001 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067003804 seconds)
    (104/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.172232679 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06716265 seconds)
    (106/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07008184 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092386568 seconds)
    (108/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.08504674 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077021371 seconds)
    (110/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138652106 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152498032 seconds)
    (112/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067140084 seconds)
    (113/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.085582186 seconds)
    (114/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074240227 seconds)
    (115/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066478045 seconds)
    (116/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067571643 seconds)
    (117/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067924895 seconds)
    (118/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06537932 seconds)
    (119/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067533401 seconds)
    (120/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068858141 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066524571 seconds)
    (122/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074833706 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.122759261 seconds)
    (124/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.06983946 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116149529 seconds)
    (126/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075307312 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124275357 seconds)
    (128/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06608084 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170569445 seconds)
    (130/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066332556 seconds)
    (131/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.07009 seconds)
    (132/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070339476 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066479296 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.084049141 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070049384 seconds)
    (136/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066570989 seconds)
    (137/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067248213 seconds)
    (138/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075796305 seconds)
    (139/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153917104 seconds)
    (140/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069408229 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171859402 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.134538591 seconds)
    (143/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075103394 seconds)
    (144/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06641779 seconds)
    (145/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078970003 seconds)
    (146/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.17211787 seconds)
    (147/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075815587 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074105299 seconds)
    (149/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.191215828 seconds)
    (150/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071280034 seconds)
    (151/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066206123 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083398535 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133565459 seconds)
    (154/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145757278 seconds)
    (155/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067336607 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.196540772 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074641144 seconds)
    (158/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073020955 seconds)
    (159/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065514799 seconds)
    (160/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067071148 seconds)
    (161/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076265532 seconds)
    (162/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066885394 seconds)
    (163/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065958132 seconds)
    (164/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.142984888 seconds)
    (165/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228265741 seconds)
    (166/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085382908 seconds)
    (167/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076031191 seconds)
    (168/341) benchmarking ("sort", Bool, false)...
    done (took 0.142923083 seconds)
    (169/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074228946 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.162331233 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.082373805 seconds)
    (172/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067744863 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093073 seconds)
    (174/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066139485 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087062844 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150808382 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085541104 seconds)
    (178/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065619339 seconds)
    (179/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.225503385 seconds)
    (180/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065793624 seconds)
    (181/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075318487 seconds)
    (182/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072768608 seconds)
    (183/341) benchmarking ("sort", Int64, false)...
    done (took 0.232265564 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.136628343 seconds)
    (185/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.07074845 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.194635966 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074955042 seconds)
    (188/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.144771744 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067273136 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066122571 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.15717231 seconds)
    (192/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.199163421 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14348254 seconds)
    (194/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067521679 seconds)
    (195/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.219893737 seconds)
    (196/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066949022 seconds)
    (197/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066609921 seconds)
    (198/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08372219 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090390767 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094585613 seconds)
    (201/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091213917 seconds)
    (202/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07633664 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065186354 seconds)
    (204/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165919191 seconds)
    (205/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094466156 seconds)
    (206/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080131859 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081337574 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066558072 seconds)
    (209/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067589981 seconds)
    (210/341) benchmarking ("sort", Float32, false)...
    done (took 0.139702383 seconds)
    (211/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077287414 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150566544 seconds)
    (213/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068233622 seconds)
    (214/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069821568 seconds)
    (215/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075888502 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066800738 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067582361 seconds)
    (218/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067807052 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093175181 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123984252 seconds)
    (221/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074972054 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147313368 seconds)
    (223/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065268688 seconds)
    (224/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.067674641 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065178159 seconds)
    (226/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.06517904 seconds)
    (227/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084849191 seconds)
    (228/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.06753964 seconds)
    (229/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069068931 seconds)
    (230/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06890436 seconds)
    (231/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074779367 seconds)
    (232/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06711059 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074073617 seconds)
    (234/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144346463 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111300404 seconds)
    (236/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067073525 seconds)
    (237/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078160995 seconds)
    (238/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.06691107 seconds)
    (239/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070215041 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066685174 seconds)
    (241/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078443049 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126635497 seconds)
    (243/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132908936 seconds)
    (244/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067479833 seconds)
    (245/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069101384 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069065135 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078057786 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066451217 seconds)
    (249/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074816013 seconds)
    (250/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067686565 seconds)
    (251/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067100799 seconds)
    (252/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067219995 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078600746 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077053355 seconds)
    (255/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08733711 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084504461 seconds)
    (257/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070258954 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085293022 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073929252 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066441038 seconds)
    (261/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067619298 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073809766 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069742598 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076716208 seconds)
    (265/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145301885 seconds)
    (266/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073654792 seconds)
    (267/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067087351 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065209845 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091761699 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066838346 seconds)
    (271/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067003106 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.164650562 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067898513 seconds)
    (274/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081212012 seconds)
    (275/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.140459003 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066672862 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068188412 seconds)
    (278/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067523194 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179726484 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08910853 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066838787 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151243551 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065617573 seconds)
    (284/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073911637 seconds)
    (285/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066917109 seconds)
    (286/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070123427 seconds)
    (287/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068284195 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.06686584 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066219534 seconds)
    (290/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066903342 seconds)
    (291/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066763423 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067150167 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150810156 seconds)
    (294/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067162082 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086438791 seconds)
    (296/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07899213 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074027346 seconds)
    (298/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190830943 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090308616 seconds)
    (300/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066510157 seconds)
    (301/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066826243 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066673806 seconds)
    (303/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068929495 seconds)
    (304/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065024482 seconds)
    (305/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065589243 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131742289 seconds)
    (307/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067288934 seconds)
    (308/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.246930868 seconds)
    (309/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068764766 seconds)
    (310/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077036092 seconds)
    (311/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.068478978 seconds)
    (312/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069585961 seconds)
    (313/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.068781131 seconds)
    (314/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078256104 seconds)
    (315/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.160489854 seconds)
    (316/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.072518545 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067930185 seconds)
    (318/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070041218 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.067802595 seconds)
    (320/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.067886234 seconds)
    (321/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.069620513 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067511495 seconds)
    (323/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069374253 seconds)
    (324/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075049475 seconds)
    (325/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069490617 seconds)
    (326/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074998492 seconds)
    (327/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071832417 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142140814 seconds)
    (329/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092536993 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078939356 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066999219 seconds)
    (332/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067218215 seconds)
    (333/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067475029 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066548493 seconds)
    (335/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067399912 seconds)
    (336/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066824099 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067495183 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075693037 seconds)
    (339/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152773378 seconds)
    (340/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067443159 seconds)
    (341/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067580444 seconds)
  done (took 37.193498488 seconds)
done (took 38.812899069 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091313157 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079643546 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078393996 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075225754 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078809284 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077241613 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078808413 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07710957 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07817815 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077746485 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077485388 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065823456 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074266111 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081321958 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075800623 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082267341 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079077423 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082349776 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067821139 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081668482 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093978102 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079008035 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075940423 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080804889 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067694561 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075815745 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090902025 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087999789 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07355779 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076439952 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074525631 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085448183 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07438822 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073084938 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076013279 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072618892 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076128962 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073690575 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089615426 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072835485 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068651369 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079409402 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074331593 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074998328 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075239388 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078586243 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072213796 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080058766 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066742686 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077264673 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089605314 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071343601 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073144692 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074803251 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071934038 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075644733 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072932318 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077799392 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071866875 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077585759 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077745987 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074786568 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066365291 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074894544 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073928432 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074619457 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065407262 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071544397 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06681431 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066597669 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065525482 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075356317 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073428549 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071605406 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066073681 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066555466 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066093406 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078482739 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072505712 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075570387 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066565543 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071618356 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071448679 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066735686 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071417994 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078319638 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066032761 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066698574 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065617937 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080583784 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07301108 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066624247 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078464872 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071465651 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071680649 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06676189 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065858774 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071215824 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074888661 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066656803 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065345021 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071310423 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071502944 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075696497 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067221307 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071592862 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071417361 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065353785 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07552363 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074067566 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075441806 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079252859 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075142387 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078890256 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066951748 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06577482 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076193011 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06691204 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071821507 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074287387 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072247492 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074453632 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067062441 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065909262 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071497644 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073097239 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06729856 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067268356 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066959026 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075792337 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074030825 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065506828 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066361947 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074819283 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074861744 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065704988 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065211233 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075005356 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066423204 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072114908 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071909852 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074514823 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065422406 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065847012 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213564292 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067161639 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066137002 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071982554 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071580763 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066963428 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074849122 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073066736 seconds)
done (took 13.026198112 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06736426 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105442298 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074016586 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082983494 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078668649 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068642893 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070611251 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08350239 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071061209 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086660981 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095061745 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089234783 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093759775 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066074269 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067400878 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068444551 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066294477 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07527625 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082017906 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091053274 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095724634 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066984492 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.07625007 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084083767 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077851535 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08374845 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068702292 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068085094 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070237015 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.125408915 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092537619 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.0668619 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06817371 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080717624 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081540592 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074125244 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068543641 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071502077 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.07065993 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067227252 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068869777 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081668614 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07082922 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071423644 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068844273 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068747675 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067739446 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07070188 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080725141 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07139491 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075077173 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.07901612 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069144344 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067252628 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065360147 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070874346 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067131713 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067753064 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067726762 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067042697 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067606998 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069897962 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068043978 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067858911 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071300498 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069883842 seconds)
  done (took 6.656362957 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084274207 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09341145 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081829795 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081895804 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066894077 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067825272 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06753445 seconds)
  done (took 2.277780858 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069203536 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075025074 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079701199 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079391727 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088552539 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076804938 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067984223 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099115665 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067128839 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076149108 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083586387 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08133355 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070896546 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079854606 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067998031 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.08006134 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068663742 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074815471 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075132184 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080893562 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071741481 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09730661 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081362368 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068187576 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.08176599 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075140935 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070082487 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068146443 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068593808 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.0676741 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067227644 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089803615 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074277796 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079412083 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068507938 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066883545 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072132078 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06873193 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071775371 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076362897 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07122793 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06751483 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06806758 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067772238 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069064019 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072128359 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068730001 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067403199 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.0676431 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075208251 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066663319 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073896268 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069745161 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072312505 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072591372 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071825887 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074555462 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067625234 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075305336 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073680393 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067299503 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080244905 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078945703 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071034181 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079188845 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075947546 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073767368 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071006452 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067067563 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067344029 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067766434 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078676522 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070465913 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069295068 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068273005 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072421438 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071593099 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082803774 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082392647 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080689395 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070238855 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06798303 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071544857 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082635693 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071840432 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067468829 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068761893 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066898436 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072504686 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068032287 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071875418 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06730343 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074396261 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070007552 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069625079 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07559624 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067501159 seconds)
  done (took 8.835223157 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070643489 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069575598 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068493492 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068162908 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068669665 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06901557 seconds)
  done (took 2.186556254 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092108359 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068224824 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079655494 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068032973 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090151352 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074147086 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074595614 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069867008 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084625482 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078237146 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074625408 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076918475 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073990645 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069663412 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074090158 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069036198 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073939824 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070900032 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07761365 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070562049 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084354662 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069795139 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06988822 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080069731 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071661465 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069100268 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069599592 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078597538 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077743422 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069811525 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069749608 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070880019 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07610065 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069616721 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074233866 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076024586 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067750347 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073591295 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069742442 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070636285 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076542829 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069861628 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070292615 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073683183 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069375225 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076745211 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073498221 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071375025 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074311823 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072930094 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073232839 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068509251 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070871964 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073042606 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076566745 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069540165 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073509003 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073844803 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069434403 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076635687 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068197119 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070856113 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069375783 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071245969 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072778985 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073334761 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076352244 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069730668 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070609159 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068028762 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073281037 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067761922 seconds)
  done (took 7.011272615 seconds)
done (took 28.688367383 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542830856 seconds)
  done (took 2.252394821 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.589076666 seconds)
  done (took 2.344479161 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.37930394 seconds)
  done (took 10.134852563 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.293918938 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.316826091 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736180064 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132801618 seconds)
  done (took 3.270415085 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748696851 seconds)
  done (took 2.516397432 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227063623 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218900012 seconds)
  done (took 2.220788685 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.334718332 seconds)
  done (took 2.094877566 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.154365786 seconds)
  done (took 2.910032036 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.226584821 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159653617 seconds)
  done (took 2.152182984 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.537191657 seconds)
  done (took 2.297613251 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.295633497 seconds)
  done (took 6.062901646 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233544761 seconds)
  done (took 2.033658241 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229798342 seconds)
  done (took 1.998668825 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.04149422 seconds)
  done (took 3.80197348 seconds)
done (took 47.855292105 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085172975 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086320985 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086275354 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081492176 seconds)
  done (took 2.071412974 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076556333 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071615117 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074135999 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074305157 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072094512 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073428996 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073986361 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070503802 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072359489 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07085225 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069548083 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070742933 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07360504 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070923556 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073426813 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07475829 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071132571 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071311354 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073508125 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071063443 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073901149 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.07094981 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06922702 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070871417 seconds)
  done (took 3.496004851 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080019172 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074197254 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075970413 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071784855 seconds)
  done (took 2.073542841 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078130773 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076790276 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086013383 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090935593 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076658215 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077758398 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08460051 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084712654 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066431862 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089351593 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068704904 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067847968 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067642046 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086713732 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084123834 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063644539 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065065175 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077895655 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077049653 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079493351 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069680613 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066403049 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07692346 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077982057 seconds)
  done (took 3.610252648 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080784983 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.0661587 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078596289 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092413477 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092298526 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066258868 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079593941 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093398389 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12768221 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06656266 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072590174 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066454162 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105162018 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066699363 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08206808 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109144665 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112092928 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070172378 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100124057 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066331899 seconds)
  done (took 3.473470379 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076427419 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070238336 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070831714 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066375285 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077785142 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073861203 seconds)
  done (took 2.223100612 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068832991 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068936668 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070646766 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073385654 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068666264 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068866586 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06794143 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066618201 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066449802 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067932172 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068121156 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06818839 seconds)
  done (took 2.604763739 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.154469776 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069662135 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070675924 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066658693 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071875126 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067683314 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082047176 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069301261 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085224005 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068178468 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068157838 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.0698619 seconds)
  done (took 2.725239355 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100268988 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101410839 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145820949 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12064289 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121238787 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100849921 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123501293 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.097092828 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160787509 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137131667 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117872939 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094558574 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087516705 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070816492 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10089402 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102168785 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136491381 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073738569 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114188672 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164701927 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115124312 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.11251637 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122727395 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117022867 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081810135 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122321848 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094595764 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103231351 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124528407 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110639139 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119578265 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098326017 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07283688 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072237122 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150464216 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101630379 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108076242 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093756276 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100801396 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088933486 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10787204 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070150934 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088531085 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107255624 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085225081 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117496499 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088853612 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104667297 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081583145 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131586087 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106749323 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099240977 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086494927 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104368829 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130912427 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095874773 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111697781 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107476184 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083085491 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118764164 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100753564 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254839043 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095097558 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081744518 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159603623 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090028339 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112549514 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112606455 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083338382 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091043781 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10361939 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132015205 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108091283 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108651148 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115554258 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096822332 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111622379 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093113068 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128964165 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093568039 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07382072 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105298553 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129074156 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086221539 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101206097 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130092817 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093065845 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078748478 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093560964 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119680225 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081457141 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097083434 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071121969 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099123683 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108220558 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098532918 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112805539 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107956217 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079386002 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125092078 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109658358 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073989735 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118177884 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099243917 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153489 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096672128 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077080162 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100548139 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094694874 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14946783 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086029193 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081246756 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100068581 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142274149 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095579948 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170920733 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096929721 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1296719 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098630333 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088689374 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076562475 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091114877 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103163281 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108846727 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101948983 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089015779 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077393732 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086835 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095955537 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.253502275 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082482386 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114774198 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103036805 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076315643 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089654521 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080181385 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126463725 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079250446 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109833843 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126272063 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079870894 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105902771 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098969022 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108615583 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098329183 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107205212 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14010751 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116939908 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080251886 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085040867 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108987604 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142405215 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114321868 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085853751 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07731282 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100613603 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11145073 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098086093 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107957726 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100689075 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110204234 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098256422 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141272941 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11860437 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092573516 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096623179 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097547482 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123952368 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077740028 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156167431 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094911026 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11894095 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08594257 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141455087 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114605223 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090610608 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085848959 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096917075 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105491579 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107034795 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1442069 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096692653 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073237042 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094237817 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133015533 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077475921 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101217171 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091448869 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094422833 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119722204 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084699036 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082722116 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069335708 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101686005 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135675451 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070225798 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11286792 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.280102159 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104073458 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105059064 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070533892 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100621694 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138196628 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105894587 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141618449 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117050696 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101000598 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118924788 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100198519 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106150032 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081056014 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126060044 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134546093 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096998466 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091086829 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135465707 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11864272 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135351797 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.09693294 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115291117 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106225397 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102429513 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104882187 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101888616 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144466249 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121441112 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125538666 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086987083 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107310993 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11018493 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137530229 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083607385 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11799765 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076595872 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112454093 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078945648 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108625118 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080817567 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112241645 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08081191 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100997316 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070688026 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075378151 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14271722 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113520865 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090430459 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08789695 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13759227 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132757967 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082502673 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103356529 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104950511 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102011187 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101998295 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108528086 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085397598 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094442922 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273227747 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080617649 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08327375 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100278448 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095461483 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107807249 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085648046 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076068893 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135778128 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10512298 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095990725 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078680798 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095794632 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122427217 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092663424 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090369536 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106878589 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104509735 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140909782 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090876603 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098765433 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.117860362 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081379774 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09316038 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070623739 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085876172 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077191647 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110041116 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077240919 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109717879 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069948163 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131204297 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08858547 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094447831 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103695131 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101716857 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129570086 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093637037 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129909304 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09249899 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102715564 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109778441 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095432843 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082252907 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104480965 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096900675 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11035585 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096870749 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107084604 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110824579 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09550541 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14265941 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091425215 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122059409 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106409314 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109452947 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105488914 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117922444 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138672658 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1148978 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113186854 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076016729 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083939762 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106821821 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101498894 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146843654 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102974549 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073249862 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087017431 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091117264 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0964038 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.267743662 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084308965 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143397312 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088996799 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088095989 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113722389 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091039253 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098321401 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077196965 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096353675 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101782679 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095352606 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096233307 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108476118 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118071608 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114222428 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13342014 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10023059 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093676725 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119420089 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111251944 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111673738 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087266075 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087703563 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124490051 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103599261 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129184563 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.103240102 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097509757 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103579218 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091745336 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10072466 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098122804 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110817717 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08179664 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077103784 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069764696 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073320175 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11874411 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109906006 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099841344 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099698334 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073328841 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104935087 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100798563 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073271936 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088895695 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095229853 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100383209 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085014898 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093421246 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115187024 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092423885 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104804971 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100890206 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129964615 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100958428 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090009833 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144366308 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131646139 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090035139 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094473696 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073072458 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080715532 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10368455 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146299318 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118315468 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077915818 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084307799 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.077942145 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.2501886 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073478486 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089304179 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09129219 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105063638 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093269335 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113726252 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104867874 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076921526 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10417415 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098818378 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093546008 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097011089 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102632479 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106764606 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.12435842 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102020241 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098685768 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077255222 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081695253 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077248926 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08085371 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10374219 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078945598 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0779763 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130772123 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092484874 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105621047 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109671572 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085802136 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076907803 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133655137 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070865027 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135063983 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07243654 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083189967 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081885769 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080562077 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095176453 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106285276 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097210823 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114715482 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106976343 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105859135 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112029502 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156747095 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072197017 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144013328 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077402235 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076935558 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077342524 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115781441 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091264513 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106155042 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141749695 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090898098 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094029475 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0786119 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129638383 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099485048 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104386727 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084004015 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080534459 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129573617 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081090624 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073024346 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088317057 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112727042 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073839277 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105616556 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085794695 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.245260863 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115465476 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632357338 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091886543 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077117051 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090143511 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142498832 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129044527 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085136808 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109536343 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119605323 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091336751 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085333816 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108899451 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182944326 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075612925 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095813583 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104727266 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099346317 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093439518 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093152311 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088199079 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.0933471 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087081849 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081251111 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10915905 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089145295 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093161389 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098626885 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084434897 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081058803 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131656911 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.1052972 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083473001 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08984451 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102358722 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089199291 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092294447 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070838791 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115183048 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092785439 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10276824 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092383609 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109055625 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121151918 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09008812 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113804644 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090014071 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111362968 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086320291 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079678151 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104051078 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079426259 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079535583 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118676122 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085533987 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09415683 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105931492 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096931983 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115589951 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119244648 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113185943 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098753716 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080374668 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087605094 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089771757 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07693771 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079559699 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075277229 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077180097 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107328193 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.251615482 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085413064 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116288531 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083419514 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104464247 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101818431 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110289182 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084608223 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102025934 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110049812 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09209006 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10416502 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101612003 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128855334 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1456848 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10017674 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124658445 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134176404 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077970249 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077302317 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070515037 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115667506 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080536012 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082002655 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082676801 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134017154 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082762004 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096315211 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232575568 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084186565 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084775093 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097894192 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071630241 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08451484 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109324617 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085758875 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081722293 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099915518 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085090399 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118925777 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112528733 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09500918 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084005619 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082280851 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095061753 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106355601 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130742262 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091387091 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076940519 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108206479 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104715564 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124725644 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07414883 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082223579 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13056238 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093253826 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10495574 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081811276 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122160469 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134566287 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091805061 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135087442 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072284505 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085001412 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090667957 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126699597 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075952478 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09023796 seconds)
  done (took 65.46373533 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152249575 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143177717 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083359134 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098606511 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188581144 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198119676 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120987943 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097431538 seconds)
  done (took 3.021797966 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069333743 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084277607 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082102215 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207987259 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109127839 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068566882 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074270467 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083120683 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068605201 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06838119 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103080615 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069117991 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068772248 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374854176 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069065236 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073220414 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068865659 seconds)
  done (took 3.66650394 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.324445483 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.40874467 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.225188859 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.637305687 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141830896 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486284888 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077703718 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083684898 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.631249845 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374659608 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135754389 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088818261 seconds)
  done (took 18.546052224 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076734871 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079563637 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079129791 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075918886 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075971714 seconds)
  done (took 2.31316028 seconds)
done (took 117.068923991 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08426641 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172876272 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068597487 seconds)
  done (took 2.204678899 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083192578 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082079616 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082562951 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079863957 seconds)
  done (took 2.26372124 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07602279 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077821396 seconds)
  done (took 2.079645393 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222673366 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176121455 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091329147 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083968741 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080848669 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081602659 seconds)
  done (took 2.188591082 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072559795 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072864977 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073403484 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073377898 seconds)
  done (took 2.221375099 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068634839 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067109001 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069883906 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072171517 seconds)
  done (took 2.208651588 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086175277 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083623768 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113346639 seconds)
  done (took 2.21392664 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08415021 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084097821 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079276772 seconds)
  done (took 2.182012765 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109944444 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098072408 seconds)
  done (took 2.138107054 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081191047 seconds)
  done (took 2.001295098 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.0906825 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098447954 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140666569 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108275049 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141159377 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127047805 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077960341 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07947342 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074841742 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074014218 seconds)
  done (took 2.94396368 seconds)
done (took 27.148182893 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080040167 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369937842 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361105577 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088232114 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672983053 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358122522 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.015490954 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092044493 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100651037 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069490487 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08614124 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651429815 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.006642598 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327355377 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.991471395 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326090459 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65271759 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069990334 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069112374 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070074184 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.00025505 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069695462 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069525866 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069985177 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.654421343 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375367509 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070585912 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326851038 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069525938 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072122451 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358237874 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070974288 seconds)
  done (took 16.569437461 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072096302 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123833197 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073772562 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085333503 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071650921 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070728136 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07252108 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069811644 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111498215 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069511454 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08676912 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069284999 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073335353 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071465176 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089314609 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069574607 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071141982 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074001292 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070126427 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070635933 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087972895 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069204417 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070018181 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070872217 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069966008 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083023714 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07097011 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069498758 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07015621 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071807862 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072947217 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071436575 seconds)
  done (took 4.388593915 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122487488 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127307937 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074912283 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110286983 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118740961 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071966326 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.15215041 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093376833 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115097399 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069732326 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087270173 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069685384 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105247646 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071090953 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089728082 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069569632 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071356776 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070291228 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069872614 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070455969 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088404001 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069281564 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070193346 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070055735 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070554897 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084733265 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070710029 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069909468 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069797177 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072683731 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074007171 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071225116 seconds)
  done (took 4.665304924 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071274364 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072817947 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081324203 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08200756 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067854481 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070420397 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071197998 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068044342 seconds)
  done (took 2.539052334 seconds)
done (took 30.111831151 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080775444 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069585328 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072237619 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089086214 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075074452 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071644363 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066363229 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075969391 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072794304 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072490621 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074443314 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.0686145 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07135655 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065895362 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073594594 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067548025 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073601871 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071377027 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071851199 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073312375 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06974803 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073304793 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076132117 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071863367 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.07222809 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071854861 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07661761 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073273562 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067600678 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070279294 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069487678 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.0820195 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074136428 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073549664 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067418754 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067593492 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07141265 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069718804 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073838822 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076455566 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069683327 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076479251 seconds)
  done (took 4.970639331 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089460524 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094908169 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087326643 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083219257 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108232199 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083217309 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091954753 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080703529 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079309978 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091312933 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07546296 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08047275 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082527339 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076757644 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080013602 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07606946 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081249108 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074896629 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079772484 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079639888 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092153682 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072989266 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080557353 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.08138571 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074756806 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080895402 seconds)
  done (took 4.119172867 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074921192 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089341759 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094046152 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143259664 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111957244 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083567261 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083026647 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098396134 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101732984 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069465391 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072950581 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095254033 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097792951 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076623312 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107567495 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08738127 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081778971 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071346508 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075992818 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103977643 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092406443 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089912204 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102766569 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089910525 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069304124 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078904118 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076549668 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08491442 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077359014 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081477052 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073645981 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072616204 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070067848 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082025029 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076332492 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067380343 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091038479 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081964424 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084821014 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107679927 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079144851 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071193571 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099624304 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134972656 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071082656 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073751689 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07292144 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081760032 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070833109 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099473354 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087744637 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068829431 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088244554 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070421606 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070807253 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086119125 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070766017 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071145179 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081391196 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075207284 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090228156 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074549485 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090194791 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06882687 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080407348 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070604202 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070661928 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068190353 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104871226 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076651384 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121746919 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070808595 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067406404 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081432669 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080420574 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076520757 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069091176 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088691412 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081145296 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073156106 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080978699 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072154887 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072481321 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105661131 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068596577 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067136477 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067233656 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071748248 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072871305 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069475848 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082440136 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068814927 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072599203 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08445534 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070022806 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069823848 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.07119169 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070199186 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068856526 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079680397 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073086924 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071359504 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081562451 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070438953 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072647619 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083727027 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078404352 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068945645 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070460557 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071511872 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07083314 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073795625 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072383326 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.07115054 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075976918 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076978893 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075184886 seconds)
  done (took 11.410962621 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165694295 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154668505 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070721778 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149727898 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080553 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076068196 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153255775 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092334158 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.072715999 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.073261326 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069708473 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097635978 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093190168 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.107390849 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073765872 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070636255 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095455798 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103738684 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155200175 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149208662 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096035249 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.08126766 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074963078 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072194188 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071617074 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078787804 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085611468 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077316901 seconds)
  done (took 4.743070184 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078172679 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085007769 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074280414 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093624358 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087927475 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069960664 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07191042 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071248426 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086595971 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07654158 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069667328 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074086303 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073527723 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070585505 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070849372 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076097461 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076079376 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068659271 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073297856 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07415763 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080473659 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09570343 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07414236 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070180735 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072507433 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069898403 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076718224 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079382691 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069414881 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100227122 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06692181 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07425779 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083674169 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071100221 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069626521 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070149136 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069977088 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07015277 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070137495 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067699024 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067736929 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074269528 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.0689664 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075924901 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083719437 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077247216 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071108048 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075853971 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072649562 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066833711 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073256582 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072888321 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072434179 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077820412 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072995409 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071988718 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070682937 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09945852 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075836367 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068936826 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068528186 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068180765 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071716933 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077651002 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086418232 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071675522 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067825661 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069623041 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074483513 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083455544 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069450013 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074981303 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06692321 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070334814 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072355384 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072403985 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072825439 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069828314 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069197314 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070089734 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069690366 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069459298 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069085372 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072310084 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067372443 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068042558 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070372885 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071368512 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076017286 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068742514 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072627752 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071036898 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068848446 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072561087 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074995915 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072070991 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089224397 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078173568 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070326935 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067860679 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084000392 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071845925 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.06885967 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075079153 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074483653 seconds)
  done (took 9.768769665 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092931847 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071327828 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089316335 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096179317 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079941359 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075067967 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083810014 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070785382 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086026642 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069110903 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078675042 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068073678 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083292269 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079007057 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071375448 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080292817 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072031047 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090324867 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084566735 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068384544 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078823746 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082267619 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082117036 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087375716 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087127929 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088333479 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082311597 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072476715 seconds)
  done (took 4.265104032 seconds)
done (took 41.228945233 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.020128362 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.197880969 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.025563617 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.276464226 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.084117651 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.249872849 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.272196501 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.02295867 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.228232658 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.053921225 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.355006628 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.405742069 seconds)
done (took 70.213353515 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.043001605 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.190006527 seconds)
    (2/2) benchmarking "String"...
    done (took 2.253874412 seconds)
  done (took 6.398763657 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.621456098 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.028481046 seconds)
    (3/3) benchmarking "different"...
    done (took 2.07765415 seconds)
  done (took 8.680504396 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.129799172 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.672063521 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.281281781 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.026058013 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.030851955 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.402698331 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.844007385 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.495807488 seconds)
  done (took 33.707017445 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.194422136 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.218111617 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.7710455 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.798059981 seconds)
  done (took 16.98420875 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.639139831 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.290485384 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.292804272 seconds)
    (4/4) benchmarking "different"...
    done (took 2.282748432 seconds)
  done (took 11.515765036 seconds)
done (took 89.515296948 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.029654198 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.106882289 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.042720477 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.180325647 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.063284969 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.057066681 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.037070399 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.072537165 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.029296334 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.03156248 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.488776108 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.029640506 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.03749965 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.065001575 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.038257185 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.061748801 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.309461696 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.032902793 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.071884017 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.538006009 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.556306927 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.025910623 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.040147402 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.076705463 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.085239824 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.046768211 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.563486976 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.037316621 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.651831159 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.045796067 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.031499581 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.033306018 seconds)
  done (took 212.470438121 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.028668817 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.143504835 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.185106856 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.052738703 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.513880847 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.220427566 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.1703406 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.549117798 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.034188222 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.036365878 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.341092222 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.029537095 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.361411877 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.996416008 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.024169195 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.036968264 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.301556102 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.339134179 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.028687642 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.20971986 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.0515006 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.187462737 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.143593551 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.290969162 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.061510512 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.040834618 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.053109564 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.039585217 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.214049303 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.280617594 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.046690861 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.068770228 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.160895739 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.895740653 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.047148155 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.035695743 seconds)
  done (took 180.178872129 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.201484773 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.042076347 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.092927299 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.167355195 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.785351491 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.765812487 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.030577161 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.031285702 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.030313422 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.039900198 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.032432255 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.102539878 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.456655761 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.235569818 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.031337285 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.032849747 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.481041812 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.032915738 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.031442148 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.031732538 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.10891263 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.404543684 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.250072612 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.032931249 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.041127987 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.168491705 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.039794872 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.032236939 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.166715847 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.033245177 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.03281452 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.110599877 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.167184082 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.039059318 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.114930206 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.039733477 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.032675688 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.529221363 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.035762141 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.032589083 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.033546275 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.034175818 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.098117192 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.031971778 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.137023264 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.123417884 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.032817844 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.045082533 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.222652851 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.730768478 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.036410191 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.034735255 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.033298104 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.033990685 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.033995129 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.922407673 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.035580682 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.061090388 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.676573718 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.033176249 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.021255375 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.036974367 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.035414332 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.035037973 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.040778877 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.072418643 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.846256407 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.340410079 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.421884292 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.859182909 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.034451906 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.365993724 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.090528281 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.036382356 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.115170691 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.035566049 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.035983644 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.03574127 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.036240021 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.16933216 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.133143845 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.037270275 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.170594851 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.041999202 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.036122721 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.222530652 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.419741895 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.036529809 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.049925723 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.091344943 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.037312168 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.037452952 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036152811 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044623593 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.147949473 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.036152787 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.035932434 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.037118691 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.129859117 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.039775245 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.074785529 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.259893172 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.108312076 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.285967851 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.274363973 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.037101278 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.038932642 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.053308776 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.0364691 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.037367014 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.046133219 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.036813033 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.040155043 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.038436935 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.038215433 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.037587538 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.036086867 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.049352334 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036363742 seconds)
  done (took 440.290063671 seconds)
done (took 837.141522995 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.76094798 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.840093719 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.675772911 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.71120089 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.677348386 seconds)
  done (took 15.629171892 seconds)
done (took 17.593080098 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.070123927 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.056915589 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.043980431 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.110704061 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.065991112 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.049517793 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.084418176 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.086426288 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.072664946 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.050367009 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.099541741 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.057980317 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.071089561 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.073261828 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.127207753 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.079145572 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.056180418 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.045984505 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.108201738 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.055436972 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.056236425 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.050834902 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.053081734 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.105696595 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.134342363 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.064187248 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.053433322 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.099355829 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.06359842 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.100859548 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.112168722 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.075792435 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.089226952 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.128384868 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.122125668 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.13736334 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.061342691 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.125191252 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.059725997 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.14370845 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.114439239 seconds)
  done (took 87.380371198 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.050154547 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.186024015 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.265146484 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.08556987 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.048366744 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.26010681 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.106293441 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.175984773 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.178676756 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.271029905 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.273810527 seconds)
  done (took 25.875316287 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.049537514 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.18642045 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.265759755 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.08644913 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.072648242 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.263008363 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.114701275 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.177794474 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.183846047 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.288048008 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.274324601 seconds)
  done (took 25.940028715 seconds)
done (took 141.164778397 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.422634342 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.075181816 seconds)
  done (took 6.465060117 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.046397626 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.061484324 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.197611912 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.044592629 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.048432822 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.044661733 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.046049266 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.047097624 seconds)
  done (took 18.504211378 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.045534556 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.045652461 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.007587534 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.04458043 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.045380681 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.044939428 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.045959277 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.044922823 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.043890669 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.049647626 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.045563886 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.045288706 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.044232706 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.045397261 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.045608616 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.048805555 seconds)
  done (took 34.665212378 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.046613294 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.045905987 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.045074091 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.045394072 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.046052068 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.045870356 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.047725068 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.047317682 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.046978916 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.046551996 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.046690154 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.047009943 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.047351294 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.047943809 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.046600517 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.045706861 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.047094574 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.047504302 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.048986181 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.047092387 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.047664792 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.046543821 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.050115456 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.045441794 seconds)
  done (took 51.094304494 seconds)
done (took 112.711284614 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.241514016 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.603001128 seconds)
  done (took 8.817213892 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.048293679 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.050023082 seconds)
  done (took 6.137551675 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.048576777 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.032348772 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.047045931 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.034191229 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.051047256 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.033279025 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.048361721 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.048872158 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.051534408 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.034793805 seconds)
  done (took 22.387399163 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.034361147 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.047748884 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.033559025 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.048198247 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.032894229 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.047493064 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.048984888 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.047971003 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.049676037 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.049296219 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.047493082 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.051378113 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.034053944 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.058624021 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.058031075 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.059230374 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.057179618 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.057912488 seconds)
  done (took 38.835301605 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.058668751 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.056980245 seconds)
  done (took 6.100232472 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.058347544 seconds)
    (2/7) benchmarking "second"...
    done (took 2.056999482 seconds)
    (3/7) benchmarking "month"...
    done (took 2.057002113 seconds)
    (4/7) benchmarking "year"...
    done (took 2.057547015 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.059521872 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.057881917 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.057867317 seconds)
  done (took 16.390149872 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.059215343 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.208927308 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.258107466 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.672917565 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.058649492 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.061611741 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.922049481 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.061199385 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.062742197 seconds)
  done (took 22.351033831 seconds)
done (took 122.990066758 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.894048394 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.055159609 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.364572907 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.123751038 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.126334531 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.350453363 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.068896306 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.601556509 seconds)
done (took 44.570799614 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.141165409 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.053182607 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.087121748 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.089066408 seconds)
  done (took 23.213319399 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.055642233 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.398566598 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.084218079 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.018111779 seconds)
  done (took 23.555130334 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.435508902 seconds)
    (2/2) benchmarking "read"...
    done (took 2.410381173 seconds)
  done (took 6.832394896 seconds)
done (took 62.725515861 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.056677759 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.057375115 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.056269188 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.057451646 seconds)
    (5/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.056434849 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.057656214 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.057210991 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.056053847 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.056746065 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.057212198 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.056752458 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.057863039 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.058522321 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.058041086 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.056664604 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.056856645 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.057047224 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.058795846 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.056668932 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.059460062 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.057501828 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.057692003 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.059346412 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.0612185 seconds)
  done (took 51.366741574 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.058879069 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.058181013 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.056887989 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.058886956 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.057904234 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.059883452 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.042922639 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.057738031 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.059746096 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.057923475 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.059676204 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.060309667 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.057975296 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.057837658 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.059452113 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.060991942 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.060236744 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.059285733 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.060095014 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.060597819 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.06063865 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.059824977 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.061085485 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.059810729 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.061177667 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.060124689 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.058559768 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.058978336 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.05827869 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.059780255 seconds)
  done (took 63.74684686 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.058046567 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.060174109 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.060415783 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.060156627 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.06040363 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.060361866 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.060261253 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.059186736 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.061073908 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.061644117 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.060780212 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.061983741 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.060037671 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.062195105 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.055556919 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.060452168 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.05945761 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.060468676 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.060460029 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.060469079 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.060031015 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.060263714 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.061834314 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.063407564 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.064577071 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.062323009 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.061590781 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.061766257 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.061864357 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.062538998 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.062207494 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.06241119 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.061532788 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.062229846 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.063415357 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.060896511 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.060621468 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.060299539 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.061783144 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.061550401 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.062788209 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.060957466 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.062074041 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.063182029 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.061407097 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.0641335 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.062600251 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.065199241 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.063557048 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.063676865 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.061160546 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.063884168 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.060735055 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.063623569 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.062904423 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.062413104 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.061769266 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.063108109 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.063728303 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.060686464 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.063170542 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.064734166 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.065489336 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.062003347 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.064503161 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.063489915 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.063179765 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.063820471 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.063194353 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.066659631 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.050287915 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.063304783 seconds)
  done (took 150.436608549 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.027334791 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.066372051 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.063074716 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.065033583 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.062592109 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.065907686 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.064285193 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.063224989 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063731103 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.064063847 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.064324296 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.064489522 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.065075075 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.066107681 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.065067952 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.062936251 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.067056026 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.062539013 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.065155262 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.06544501 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.0650335 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.063123445 seconds)
  done (took 47.371590606 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.065382915 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.065710662 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.065233726 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.063242477 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.063740413 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.064913898 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.064869581 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.065737183 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.06859274 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.064921514 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.06395034 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.065258907 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067450716 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064796028 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.066391212 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.065446684 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.065487823 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.064952696 seconds)
  done (took 39.170416014 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.066247763 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.064695589 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.066510973 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.066001807 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.066109801 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.067610353 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.067064773 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.067482999 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.06550185 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.065327269 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.065102793 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067545866 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.066834183 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067996721 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066924917 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.069630955 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.068890399 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066000194 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.066843929 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.067768188 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.067349194 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.067899394 seconds)
  done (took 47.465085833 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.0664755 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.067683779 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.068675513 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.069708545 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.070280085 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.068276536 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.067761492 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.066153699 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.065953743 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.06706936 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.067328547 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.068672715 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.069651955 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.067113904 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.069235993 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.067906656 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.06975729 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.068277642 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.06896996 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.067709065 seconds)
  done (took 43.354264255 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06875538 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.070646941 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.070956417 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.069481281 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.069801135 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.066868268 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.067892069 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.068227474 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.069410197 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.071586966 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.068719427 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.069592239 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.071262492 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.070068772 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.071590229 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.069210214 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.069233919 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.071095801 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.06823617 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.070829303 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.070355863 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.068200947 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.071553599 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.072120016 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.071490661 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.072381912 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071621327 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.071782263 seconds)
  done (took 59.956469743 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.070423158 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.070856209 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.071270009 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.070666777 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.06762781 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.069700062 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.071131393 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.068596118 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.07195096 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.068949873 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.070582869 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.07063713 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.074510517 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.071323098 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.070209932 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.070750724 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071015039 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.071409852 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.07386003 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.073647902 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.07435507 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.070649404 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.0719528 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.073730741 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.072638022 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.072815209 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.073533962 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.072428896 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.071544634 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.073738917 seconds)
  done (took 64.14529906 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.093481755 seconds)
    (2/2) benchmarking "in"...
    done (took 2.090741269 seconds)
  done (took 6.181108393 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.073459601 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.071949891 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.074438707 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.073512475 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.072276634 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.071913418 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.071207669 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.058716033 seconds)
  done (took 18.567538716 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.074263779 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.076025683 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.074081415 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.075435486 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.075179265 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.081431682 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.074410518 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.076239914 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.074952635 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.075073002 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.077749801 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.078658974 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.081730878 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.078304584 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.074388938 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.075843304 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.076297071 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.076539133 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.075762778 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.074525538 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.077681472 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.07580852 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.074715654 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.074359353 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.073399825 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.076228448 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.085695869 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.076571477 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.076013072 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.076054077 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.081759893 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.07640102 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.073592939 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.077133064 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.076503844 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.076020276 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.08191929 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.076347016 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.075566951 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.076500183 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.077645323 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.079438942 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.079177405 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.084502145 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.076917827 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.075875531 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.060970582 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.075768642 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.076291432 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.080856034 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.086108601 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.077651208 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.078022518 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.075498192 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.07887828 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.077560748 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.077976119 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.079506068 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.084979013 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.083068051 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.083985118 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.099656919 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.086356677 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.076304528 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.077462752 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.089675609 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.1051951 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.078720545 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.080326264 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.074272175 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.086007171 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.076105364 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.0778312 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.078789444 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.091979288 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.085961117 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.078074758 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.07856326 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.075333726 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.077616642 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.079452727 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.077319325 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.078670087 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078715402 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.090975477 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.108377934 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.078304594 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.076002031 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.079957395 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.079030019 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.084667786 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.080694478 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.078673032 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.079597435 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.080928968 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.083099549 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.077830288 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.077958261 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.079443703 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.089327485 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.080605463 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.079399357 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.082613868 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.088217257 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.077943859 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.080940977 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.079522546 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.080287709 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.090352339 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.078497113 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.079305317 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.078896593 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.081269681 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.085507554 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.079563227 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.085421357 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.089697778 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.08670905 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.082079437 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.086106001 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.083430931 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.083712772 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.091369419 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.110385856 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.081623315 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.084838101 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.084778515 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.096207275 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.084564843 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.08260083 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.085798638 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.083711042 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.080627721 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.083454935 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.0818852 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.081505992 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.082968563 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.079879185 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.083941502 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.081093912 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.087003788 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.081627044 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.082466165 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.081799438 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.086851477 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.080713928 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.086464016 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.091032535 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.083865995 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.083710559 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.081222423 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.087416722 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.084590797 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.082463592 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.084077444 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.081475694 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.084558638 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.082798199 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.086557717 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.080945759 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.084263631 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.085884491 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.087144881 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.08228248 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.084517029 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.084887557 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.083142191 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.084171926 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.085610856 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.083327564 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.084911851 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.083388612 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.086841802 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.083579022 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.081785901 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.084754539 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.08519764 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.084570307 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.088412775 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.096105748 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.088310322 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.094849769 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.082443976 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.09166345 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.083567194 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.086837887 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.086131613 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.082392514 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.083116727 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.083049085 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.084013234 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.088435651 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.107513199 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.09786799 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.08890865 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.085081494 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.089365368 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.088249955 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.090711856 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.085599755 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.083212449 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.086562502 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.085675486 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.085097066 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.08459131 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.086347465 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.084688794 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.085914311 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.089206397 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.084129772 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.085380858 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.085970739 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.085098371 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.08794957 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.084854239 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.089570644 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.086138695 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.086053016 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.095171969 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.088773446 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.083995358 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.08480209 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.088028473 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.086500105 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.08663262 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.087430524 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.088454546 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.084824592 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.087742062 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.094146348 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.087584538 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.086448179 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.086522502 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.087038201 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.087876804 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.088855547 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.09014158 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.097931047 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.090636445 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.085744258 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.092723855 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.084805286 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.089167393 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.086926906 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.086802039 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.089512933 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.088966613 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.087005878 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.087888152 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.093612678 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.0892254 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.086135342 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.086769312 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.090219691 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.089870418 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.09366678 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.090703315 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090016227 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.098186593 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.092681658 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.087426744 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.092475042 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.093046339 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.089788819 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.094160283 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.090162217 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.103600209 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.099879971 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.090420674 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.088125446 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.087135708 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.093213093 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.090166869 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.089173864 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.098179331 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.092126755 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.092812796 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.094150647 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.088177836 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.091289399 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.09685319 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.091815683 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.093199037 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.090966347 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.090546993 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.090067377 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.090940482 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.091838585 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.089715395 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.093011491 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.095151155 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.092404258 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.088496659 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.092232392 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.100455464 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.090217487 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.090777708 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.098136254 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.090758104 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.090783883 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.091303861 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.090838656 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.092868737 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.091718777 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.089208743 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.091449016 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.089299601 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.097112242 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.10429617 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.096611567 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.102146803 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.095146845 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.104820663 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.092489658 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.092839417 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.092619879 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.096217414 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.102472384 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.090878093 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.092238701 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.103299709 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.094044407 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.091763907 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.097790881 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.091301215 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.093401977 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.090163641 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.089104054 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.09779435 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.095164198 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.092505456 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.092555394 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.092162762 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.091217442 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.097027957 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.096522588 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.091457956 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.092440111 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.093170408 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.095981836 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.093603484 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.093871157 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.094597074 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.094265992 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.094943607 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.103345 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.09148385 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.095548163 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.098462568 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.092869883 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.10392409 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.092964753 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.094386731 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.095299688 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.093095855 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.099253032 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.094367288 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.093743837 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.093526248 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.095065506 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.098692243 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.106783059 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.102306656 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.097279351 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.096066535 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.059100879 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.094750008 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.105080021 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.12568539 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.093338593 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.097520496 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.097043584 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.100666868 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.096760417 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.095146964 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.064338526 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.101969368 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.094313699 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.092983135 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.097587803 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.109659898 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.095559684 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.097065803 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.0951464 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.098690895 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.09773245 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.09634674 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.097060057 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.097830882 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.094842919 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.108260141 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.099264648 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.099753973 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.095096767 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.097919467 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.098071062 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.097737657 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.097670342 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.099224861 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.095589601 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.09450631 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.098952982 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.104607957 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.094534383 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.102678341 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.111389595 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.096690358 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.094515554 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.098641377 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.100166508 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.100655033 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.09896452 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.097346981 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.10190511 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.098289738 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.098587453 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.101956174 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.107361199 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.101248029 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.096683516 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.098403358 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.098035595 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.098206962 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.09749323 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.100708091 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.108677704 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102601157 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.113244561 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.112884471 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.098132372 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.101947505 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.108595071 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.074093733 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.097594613 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.098156982 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.101064025 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.102569674 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.104085788 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.098007884 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.096113781 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.098193533 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.101803831 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.097427391 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.099184631 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.100953026 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.095553103 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.10180736 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.101355964 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.105404688 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.099242375 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.100334033 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.096631536 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.099546317 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.103892037 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.104425778 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.103121635 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.10331879 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.101110229 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.105880691 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.105246822 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.100034943 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.09771423 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.100385144 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.099159057 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.102403097 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.102985294 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.102923704 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.101625968 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.105419404 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.109146534 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.102796389 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.098541339 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.102871942 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.106350721 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.103366029 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.116316898 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.101181194 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.589905464 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.108474974 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.071449283 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.097721402 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.103436489 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.100649241 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.10697721 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.104108238 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.106525117 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.101508723 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.101677549 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.102210682 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.106288272 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.112867599 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.10742192 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.105875173 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.110681939 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.107374184 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.104306491 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.102624694 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.101228973 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.103384247 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.103394913 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.107033689 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.104095924 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.104848908 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.10223297 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.103386419 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.101468278 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.10354158 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.100485614 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.100706439 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.104414219 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.111105642 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.110487224 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.100956975 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.103395115 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.101046643 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.104879164 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.112574598 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.101208776 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.100630751 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.100562752 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.102612123 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.103269483 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.109339758 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.110642701 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.106394527 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.101272753 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.107483452 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.119631017 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.104683414 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.11153276 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.135130786 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.102911381 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.101447565 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.103271104 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.102181276 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.102054944 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.105035342 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.102563324 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.108791591 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.102899485 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.101758668 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.109438816 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.102942586 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.102590384 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.103262105 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.104115109 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.108787317 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.102712867 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.110783168 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.101811745 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.102653417 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.102397732 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.106705807 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.102550004 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.102297636 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.103409887 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.105074378 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.102173379 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.103217807 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.112682833 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.103851846 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.10560937 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.117279388 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.115878468 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.104349359 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.103223401 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.10447878 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.109340029 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.106011615 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.102867637 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.108312163 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.112687762 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.108525456 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.111980131 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.104764607 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.105659593 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.105550289 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.103157617 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.104010941 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.117003098 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.115511332 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.105257378 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.105822217 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.112280386 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.10452416 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.111194308 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.111349114 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.106481642 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.107374896 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.105872251 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.103949373 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.104696877 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.10608192 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.109221039 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.113877325 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.105235674 seconds)
  done (took 1249.858685156 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.104893309 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104795783 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.104599229 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.104803111 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.105336724 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.105680632 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.105688424 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.105805383 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.105835686 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.106031643 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.106042393 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105509304 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.105607104 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.106343257 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.105791254 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.10541892 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.106201604 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.106791874 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.106599464 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.105816718 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.105462729 seconds)
  done (took 46.249126906 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.106404329 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.106368491 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.106351107 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.105909711 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.107317473 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.103350989 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.104508981 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.103979096 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.10361249 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104042187 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.104099645 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.104450805 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.10453009 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.103869047 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.104501113 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.104496509 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.104141639 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.104609437 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.104691099 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.105501666 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.104162192 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.105151278 seconds)
  done (took 48.336255182 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.105724868 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.107140818 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.107113178 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.10687468 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.105212834 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.108185337 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.10450604 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.10803693 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.106263261 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.107862073 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.114192697 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.114629114 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.105907156 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.109105796 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.105875216 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.107654762 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.251728383 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.108399926 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.107314521 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.10631171 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.108483483 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.113850321 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.107007379 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.107498624 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.106509043 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.108714021 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.10711921 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.107207373 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.107303761 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.109422038 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.113695861 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.10728522 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.108813449 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.110976496 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.107981763 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.108848283 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.114032231 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.109423062 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.108564397 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.107849654 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.118550024 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.13304327 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.107671006 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.109321626 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.116877512 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.108319783 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.10783909 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.112835554 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.117004424 seconds)
  done (took 105.541251073 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.108538177 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.109015639 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.107877028 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.108791217 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.108345683 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.109444353 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.108448852 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.109291262 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.109028039 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.109031795 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.10799787 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.109235365 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.10891061 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.108861558 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.10998785 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.108673165 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.109247299 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.109274694 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.109197984 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.109078301 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.109704425 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.10944014 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.109518693 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.109696109 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.110014025 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.109996316 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.109250099 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.109553563 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.109408259 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.109007864 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.109626751 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.109706445 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.110885975 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.109534016 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.110164255 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.110544163 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.110324752 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.1110107 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.110744646 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.109822611 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.110011101 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110865314 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.109391352 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.110381732 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.110078761 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.110928511 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.111141811 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.110612183 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.111588826 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.11097888 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.111635267 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.111094998 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.111156471 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.111092449 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.110903353 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.111401237 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.111194773 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.112033185 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.112071487 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.111740627 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.111275925 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111439106 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.112339156 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.112242819 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.111982316 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.112616168 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.111847179 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111716857 seconds)
  done (took 145.526926669 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.112602069 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.112798816 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.111970093 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.112698017 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.111970397 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.112297238 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.112043436 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.112550465 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.113056725 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.113201387 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.113070029 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112493497 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.112643795 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.112501905 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.112685541 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.112991119 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112902158 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.112703898 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.113798671 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.113646114 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.112674088 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.113714147 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.113764603 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113386919 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.113995415 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.113876595 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.114059105 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.11391932 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113998656 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113797615 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.11373035 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.114150714 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.113904003 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.113803321 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.114895495 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.114621506 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.114899783 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.114233112 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.114438604 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.115098769 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.113636331 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.11439681 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.114731571 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.113785606 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114850011 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.115238546 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.115908378 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.115253673 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.115811908 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.115830673 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.114966718 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.115573726 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.115150045 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115493511 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.115733215 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.115225232 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.115627977 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.1163482 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115838369 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.116073194 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.114639094 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.11566383 seconds)
  done (took 133.109802962 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.115073701 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.116135994 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.115648358 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.116395156 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.115465393 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.116332098 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.116044907 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.115878498 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.115071526 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.116033756 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11649669 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115722785 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11757379 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115932976 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.117164868 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117702943 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.117156824 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.116199489 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.116692499 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.116680219 seconds)
  done (took 44.364867148 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.116575385 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.117652554 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.116895673 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.118034927 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.117811586 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.119303901 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.115994528 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.102828802 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.118610161 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.117422342 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.118177242 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.117685522 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117566034 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.118462335 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.11796656 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.118724518 seconds)
  done (took 35.911076545 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.118106873 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.118219262 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.118188019 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.11890133 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.118663792 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.118591536 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.118989858 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.118431922 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.118551182 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.119636306 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.119708459 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.119914244 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.120143085 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.119474054 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.118544491 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.11940888 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.119927681 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.120220495 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.118986073 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.11932234 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.120027478 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.120205084 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.121271007 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.120354121 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.120676642 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.120932337 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.120585829 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.120891644 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.120619993 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.119934481 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.121545266 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.121806104 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.120935421 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.120755228 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.119789507 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.120908828 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.120958277 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.121761531 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.121158084 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.120926863 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.120793325 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.121595964 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.12240338 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.121984681 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.122456099 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.12222271 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.122430023 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.122244247 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.121989196 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.122309266 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.121480347 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.120898362 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.122216411 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.122332366 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.121665279 seconds)
  done (took 118.670530318 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.121998374 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.122327225 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.122105197 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.122425172 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.122288507 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.121870624 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.122652333 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.12229831 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.121741765 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.123326205 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.122601919 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.122240808 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.123400846 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.122335875 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.122892241 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.123071656 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.123474931 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.123438 seconds)
  done (took 40.25231114 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.12339097 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.122983017 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.123753779 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.123417292 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.123253207 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.124316988 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.12439271 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.123596369 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.124592441 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.124746812 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.125095669 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.125132586 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.12478187 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.124435052 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.125512538 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.124776158 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.125505479 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.125340043 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.125865083 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.124700346 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.122445223 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.124663571 seconds)
  done (took 48.782716783 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.123347629 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.124335637 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.139122363 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.147948259 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.145070858 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.161140214 seconds)
  done (took 14.888017664 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124056752 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124888649 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.127383674 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12402383 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123659532 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124927692 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124785779 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125148008 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126113012 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125826946 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124328441 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124678231 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125100309 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126057755 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125102968 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125740192 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124574319 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126150504 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125201457 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124835075 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12525357 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124727885 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124979445 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126425121 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125288751 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124930385 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126391994 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125983616 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126078487 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12498169 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125758426 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125914643 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125954512 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125445888 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126052026 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125531154 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12639972 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12658376 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11270286 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126157894 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.12683373 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126077082 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125421806 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126149874 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125994867 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126529239 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126123176 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127237306 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126435023 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12683693 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126465952 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127570057 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126275765 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12722811 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126400454 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126939181 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127114394 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126822642 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126741345 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127016963 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126997636 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128088981 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127854849 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126919167 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127777644 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127931163 seconds)
  done (took 142.350969025 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127625314 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.126801575 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128425907 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128102224 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128196017 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12826685 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127882168 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127860564 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128386687 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12773206 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128191277 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128872902 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128236288 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128858632 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.115532848 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127730614 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.113055224 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128158748 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128473969 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128665061 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129047926 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128623298 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128874562 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128811407 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128746671 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129031845 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128766 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129793247 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129973668 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128431618 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12955653 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129591334 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129372394 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.12917991 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12939935 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128927811 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129684765 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129900427 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129432227 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130680021 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129520958 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130356239 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130354612 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130468515 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130306438 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13101689 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13024463 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130744456 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130504905 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130452312 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130984667 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13126953 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131395337 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132068869 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131544975 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130318171 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130818219 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13049723 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131527607 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131506623 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131231996 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131382114 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132277787 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131552764 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131201106 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131982838 seconds)
  done (took 142.57945428 seconds)
done (took 2910.177603921 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.226454384 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.219144632 seconds)
  done (took 16.500896072 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.287107912 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.180657545 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.307881417 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.239417442 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.152078549 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.140195302 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.120101416 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.122234386 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.212055744 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.122577748 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.176423767 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.119580636 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.123271831 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.116234957 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.119932584 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.120014503 seconds)
  done (took 56.714837699 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.125269253 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.122971377 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.121169853 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.118129038 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.131152385 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.207562894 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.139847498 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.1240908 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.13187528 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.155054635 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.137317846 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.12372708 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.127407003 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.125295036 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.211957716 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.165677094 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.177827266 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.181316659 seconds)
  done (took 40.664827491 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.204612264 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.12665688 seconds)
  done (took 11.37704475 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.125216985 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.151876875 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.136385008 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.131009262 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.125627894 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.116320772 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.158161964 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.120250351 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.137226752 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.128408057 seconds)
  done (took 73.376241896 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.12107195 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.123177588 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.429527676 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.128356328 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.129051141 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.144640713 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.121755777 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.15637817 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.123152918 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.118340064 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.129643461 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.430983858 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.1311667 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.120566674 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.544069135 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.132914007 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.126325967 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.149147772 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.155120772 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.118673674 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.121900277 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.11548893 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.279274668 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.819023973 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.106970987 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.109846877 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.111938191 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.102420802 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.10290765 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.104936987 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.110121555 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.103962467 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.111207758 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.107889026 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.110588033 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.107427094 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.597079241 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.121416159 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.112746721 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.199103038 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.144978462 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.10684298 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.901404706 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.100030136 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.1010557 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.107374481 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.799800443 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.174535311 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.101267765 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.2683247 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.448105923 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.111036688 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.254372821 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.237285343 seconds)
  done (took 146.187893013 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.096936676 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.332048308 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.24892433 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.096849171 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.351755918 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.305580694 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.094386613 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.142706041 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.096378887 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.300084719 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.346005527 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.196620678 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.096045682 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.095152643 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.091052459 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.090055045 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.241895951 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.16215609 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.092352024 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.090981624 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.118095816 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.29478595 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.215301829 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.089250944 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.114892158 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.294413959 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.208100818 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.189078349 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.89851747 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.087284357 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.152460958 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.077060593 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.090916532 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.084223451 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237605658 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.179562506 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.169257795 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.088659084 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082767348 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.084196435 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.760957327 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.286589403 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.179235103 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.207359351 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.333030956 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.297622698 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.693738233 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.084252108 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.721468606 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.24819841 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.287956358 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.296801602 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.198982227 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.084712611 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.638474854 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.086937239 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.08088531 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.300099941 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.299280446 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.183028161 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.08228978 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.080509087 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.079613858 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.320492078 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.081800162 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.169006193 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.081662629 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.080795946 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.173811701 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.182306128 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.305726201 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.299998619 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.107756756 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.405884567 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.568530661 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.287321321 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.144792261 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.299029803 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.079404934 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.078152784 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165623419 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.91857487 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.336102135 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.324065133 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.280046066 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.108659022 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.730100698 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.081138632 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.26778836 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.272238923 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.316715822 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.319396344 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.316960123 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.462004715 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.080059527 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.059301157 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.377814769 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.197316853 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.026650706 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.432544172 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.309358526 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.562527745 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.107044897 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.415974035 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.208707749 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.084580103 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.730206798 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.084384778 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.289273615 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.119947767 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.08437747 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.083020121 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.277996344 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.985131602 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.0835718 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.778307408 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.143284848 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.087349131 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.286872955 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.087080534 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.329457071 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.088450581 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.317949081 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.717946706 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.109981628 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.311108067 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.33376204 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.719383627 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.325057521 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.328835876 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.196072735 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.306638964 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.802159035 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.086755038 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.346091798 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.082547172 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.090211526 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.254617951 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.091709973 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.227867734 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.089567584 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.346121635 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.100655167 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.316448076 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.08655669 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.326017134 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.113550916 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.135434648 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.084949413 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.216406085 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.086468706 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.923666235 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.241899526 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.092382823 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.087014633 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.863503079 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.083561028 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.230804347 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.30952906 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.105049675 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.152109586 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.644525549 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.083620893 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165646503 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.103447258 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.356714759 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.083900403 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.334051444 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.044161307 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.565126153 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.082175476 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.319378044 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.266886116 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.087283573 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.082575598 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.93040822 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.085859106 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.085472176 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.239267243 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.56038678 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.010836074 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.284934759 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.08797419 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213780288 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.089716854 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.164719956 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.43089577 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.086598853 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.086260221 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.088375382 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.088943459 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.086530645 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.348607322 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.110025361 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.51912424 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.225059224 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.34137688 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.391301976 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.285704354 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.124280464 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.091122545 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.313600009 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.088678231 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.151906268 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.086742798 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.105840546 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.317305983 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.088765218 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.295301309 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.326011004 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.96575659 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.139358598 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.097670489 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.088165527 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.06869528 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.239069267 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.171404441 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.087772195 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.091541835 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.202711692 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.208039487 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.246109719 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.903513679 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.252794691 seconds)
  done (took 949.282952725 seconds)
done (took 1296.162488721 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.089549656 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.091880846 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.091911077 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.091798739 seconds)
  done (took 30.370993871 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.091286003 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.092258878 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.091988935 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.091926048 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.090876344 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.089752293 seconds)
  done (took 14.554107636 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.088892367 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.089640704 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.090335798 seconds)
  done (took 23.278634055 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.51662963 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.49651542 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.159947087 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.233303146 seconds)
  done (took 11.414926229 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.094024214 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.090146798 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.089941418 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.093186235 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.092822076 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.092227897 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.094795408 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.094709866 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.09026578 seconds)
  done (took 20.850167799 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.338239012 seconds)
done (took 106.815973511 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.158683463 seconds)
    (2/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.536408821 seconds)
    (3/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.188704012 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.221249246 seconds)
    (5/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.993799667 seconds)
    (6/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.179634559 seconds)
    (7/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.172673405 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.444104684 seconds)
    (9/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.278330864 seconds)
    (10/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.403151264 seconds)
    (11/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.20259692 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.031675689 seconds)
    (13/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.264109053 seconds)
    (14/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.226137691 seconds)
    (15/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.931666254 seconds)
    (16/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.098183691 seconds)
    (17/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.748948157 seconds)
    (18/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.47488206 seconds)
    (19/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.206411375 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.116506611 seconds)
    (21/341) benchmarking ("sort", Float64, false)...
    done (took 5.781831729 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.108197849 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.401614066 seconds)
    (24/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.094157926 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.996459079 seconds)
    (26/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.405328428 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.108915642 seconds)
    (28/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.529870838 seconds)
    (29/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.251324975 seconds)
    (30/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.297005172 seconds)
    (31/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.13655736 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.106376745 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.092477839 seconds)
    (34/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 3.832808488 seconds)
    (35/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.172801363 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.194326973 seconds)
    (37/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.502134104 seconds)
    (38/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.461936865 seconds)
    (39/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.129139141 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.32066284 seconds)
    (41/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.184849001 seconds)
    (42/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.15815762 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.178257954 seconds)
    (44/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.24375243 seconds)
    (45/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.254319513 seconds)
    (46/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.785998512 seconds)
    (47/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.565759566 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.254278562 seconds)
    (49/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.34145781 seconds)
    (50/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.34262489 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.529556452 seconds)
    (52/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.517429295 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.502873779 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.159987191 seconds)
    (55/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.124325721 seconds)
    (56/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.338913208 seconds)
    (57/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.320998052 seconds)
    (58/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.388152528 seconds)
    (59/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.59845434 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.349473207 seconds)
    (61/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.187089499 seconds)
    (62/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.109149224 seconds)
    (63/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.274063373 seconds)
    (64/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.126752031 seconds)
    (65/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.229400969 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.11688348 seconds)
    (67/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.110119298 seconds)
    (68/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.446660539 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.231973654 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.894217004 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.486388525 seconds)
    (72/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.478329914 seconds)
    (73/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.121645887 seconds)
    (74/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.188679785 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.059311307 seconds)
    (76/341) benchmarking ("sort", BigInt, false)...
    done (took 7.114397025 seconds)
    (77/341) benchmarking ("sort", Int8, false)...
    done (took 5.070127598 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.892019747 seconds)
    (79/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.117245707 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.826176974 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.144729266 seconds)
    (82/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.108635075 seconds)
    (83/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.225026595 seconds)
    (84/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.111704183 seconds)
    (85/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.234431575 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.223740587 seconds)
    (87/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.130122926 seconds)
    (88/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.122592588 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.49663084 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.335977639 seconds)
    (91/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.077566258 seconds)
    (92/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.344972393 seconds)
    (93/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.125263459 seconds)
    (94/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.111725481 seconds)
    (95/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.419792947 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.316625898 seconds)
    (97/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.757636444 seconds)
    (98/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.218192497 seconds)
    (99/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.204117324 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.108729648 seconds)
    (101/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.116805673 seconds)
    (102/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 8.678068693 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.553628718 seconds)
    (104/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.654934938 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.516082627 seconds)
    (106/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.171568524 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.11276762 seconds)
    (108/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.576734853 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.112113668 seconds)
    (110/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.303047766 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.11086054 seconds)
    (112/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.277762134 seconds)
    (113/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.35773671 seconds)
    (114/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.363321545 seconds)
    (115/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.31293463 seconds)
    (116/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.119378041 seconds)
    (117/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.525792684 seconds)
    (118/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.189170078 seconds)
    (119/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.120318317 seconds)
    (120/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.058418763 seconds)
    (121/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.123495053 seconds)
    (122/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.180650414 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.250167889 seconds)
    (124/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.247308324 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.250773327 seconds)
    (126/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.128140806 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.985267633 seconds)
    (128/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.93261301 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.113279627 seconds)
    (130/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.403700438 seconds)
    (131/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.35026549 seconds)
    (132/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.18113668 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.317258402 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.425867038 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.392691835 seconds)
    (136/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.332303622 seconds)
    (137/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.542397511 seconds)
    (138/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.11811347 seconds)
    (139/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.129771889 seconds)
    (140/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.181623357 seconds)
    (141/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.589103519 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.237883393 seconds)
    (143/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.267710138 seconds)
    (144/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.336533994 seconds)
    (145/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.25274424 seconds)
    (146/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.074938433 seconds)
    (147/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.135769439 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.241513076 seconds)
    (149/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.236318145 seconds)
    (150/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.305974652 seconds)
    (151/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.277100432 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.221377867 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.224505322 seconds)
    (154/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.116558944 seconds)
    (155/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.12100849 seconds)
    (156/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 4.161390438 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.212695682 seconds)
    (158/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.195114958 seconds)
    (159/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.224738346 seconds)
    (160/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.376293772 seconds)
    (161/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.372251969 seconds)
    (162/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.534375456 seconds)
    (163/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.816523072 seconds)
    (164/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.203723822 seconds)
    (165/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.439817086 seconds)
    (166/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.504952056 seconds)
    (167/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.359018714 seconds)
    (168/341) benchmarking ("sort", Bool, false)...
    done (took 2.336205071 seconds)
    (169/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.259085293 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.279902405 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.41534931 seconds)
    (172/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.119905375 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.899455215 seconds)
    (174/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.474695367 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.342414871 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.143211688 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.275702237 seconds)
    (178/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.22817305 seconds)
    (179/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.521230706 seconds)
    (180/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.248580383 seconds)
    (181/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.139277314 seconds)
    (182/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.133751379 seconds)
    (183/341) benchmarking ("sort", Int64, false)...
    done (took 5.756517154 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.246504163 seconds)
    (185/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.117174419 seconds)
    (186/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 8.642703115 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.128693796 seconds)
    (188/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.373816339 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.354820921 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.206781793 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.013647874 seconds)
    (192/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.345692769 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.257221282 seconds)
    (194/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.355469679 seconds)
    (195/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.443931435 seconds)
    (196/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.253739497 seconds)
    (197/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.326800303 seconds)
    (198/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.274571677 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.07186925 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.126160571 seconds)
    (201/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.188586013 seconds)
    (202/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.133504683 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.268903977 seconds)
    (204/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.399544412 seconds)
    (205/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.109590898 seconds)
    (206/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.918832257 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.456707915 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.453611737 seconds)
    (209/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.443825958 seconds)
    (210/341) benchmarking ("sort", Float32, false)...
    done (took 5.814237851 seconds)
    (211/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.137652627 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.119255969 seconds)
    (213/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.2416333 seconds)
    (214/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.406981713 seconds)
    (215/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.078780918 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.5784378 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.306564602 seconds)
    (218/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.481649035 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.842676437 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.12693242 seconds)
    (221/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.166837837 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.140334192 seconds)
    (223/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.135994142 seconds)
    (224/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.229815168 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.255904227 seconds)
    (226/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.199653233 seconds)
    (227/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.20216309 seconds)
    (228/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.910669 seconds)
    (229/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.834529042 seconds)
    (230/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.29967782 seconds)
    (231/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.394269428 seconds)
    (232/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.443653479 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.140732349 seconds)
    (234/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.239573953 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.242773015 seconds)
    (236/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.530215742 seconds)
    (237/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.717347637 seconds)
    (238/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.256769735 seconds)
    (239/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.325452083 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.473658765 seconds)
    (241/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.927937929 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.133159144 seconds)
    (243/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.157892557 seconds)
    (244/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.395363057 seconds)
    (245/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.42904816 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.288665793 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.125024272 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.45338738 seconds)
    (249/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.144378579 seconds)
    (250/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.119097685 seconds)
    (251/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.733780456 seconds)
    (252/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.411120062 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.778066837 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.429276002 seconds)
    (255/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.124404972 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.051652345 seconds)
    (257/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.391255875 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.146450792 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.145586097 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.517844752 seconds)
    (261/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.359878974 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.134428144 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.198614164 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.134655855 seconds)
    (265/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.696539988 seconds)
    (266/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.216623051 seconds)
    (267/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.411025019 seconds)
    (268/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.221481175 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.839602424 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.43922468 seconds)
    (271/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.313112835 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.428836141 seconds)
    (273/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.199329303 seconds)
    (274/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.002098388 seconds)
    (275/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.28486816 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.241529787 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.125763707 seconds)
    (278/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 8.645618878 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.156631786 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.57211898 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.490021895 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.119161585 seconds)
    (283/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.139272739 seconds)
    (284/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.134919663 seconds)
    (285/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.135113455 seconds)
    (286/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.534795323 seconds)
    (287/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.121873848 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 10.055383288 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.25339419 seconds)
    (290/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.537627189 seconds)
    (291/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.38049562 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.419744956 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.124565259 seconds)
    (294/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.411981519 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.387379314 seconds)
    (296/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.896653289 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.526975574 seconds)
    (298/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.117545502 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.020624945 seconds)
    (300/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.583396805 seconds)
    (301/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.322271728 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.543326911 seconds)
    (303/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.08620731 seconds)
    (304/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.350931314 seconds)
    (305/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.423111193 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.221260932 seconds)
    (307/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.237957507 seconds)
    (308/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.124570786 seconds)
    (309/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.515391531 seconds)
    (310/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.128265606 seconds)
    (311/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.418852475 seconds)
    (312/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.892060582 seconds)
    (313/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.220216753 seconds)
    (314/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.141212371 seconds)
    (315/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.33701209 seconds)
    (316/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.342945581 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.297736598 seconds)
    (318/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.145847658 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.400908938 seconds)
    (320/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.122455951 seconds)
    (321/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.152538475 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.453629182 seconds)
    (323/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.121815974 seconds)
    (324/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.132302873 seconds)
    (325/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.899065201 seconds)
    (326/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.153746481 seconds)
    (327/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.200777078 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.235072293 seconds)
    (329/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.133832364 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.972591667 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.45615777 seconds)
    (332/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.532231765 seconds)
    (333/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.434740882 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.362380462 seconds)
    (335/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.34972439 seconds)
    (336/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.264084576 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.59507559 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.236158352 seconds)
    (339/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.227772848 seconds)
    (340/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.193343603 seconds)
    (341/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.253509336 seconds)
  done (took 1181.15557963 seconds)
done (took 1183.27638163 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.14456358 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.125324684 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.634502167 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.135034841 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.111422538 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.128209197 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.645761281 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.151813629 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.144040828 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.648821461 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.134066561 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.12566651 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.139668871 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.164953118 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.137592083 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.141886416 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.131978821 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.152099097 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.160317969 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.13157035 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.177705798 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.130531818 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.124249131 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.180238411 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.125691183 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.141261687 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.145026127 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.181557166 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.178109197 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.129222833 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.132870355 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.491814427 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.178472177 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.130987884 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.139726858 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.142042617 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.13464346 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.144353927 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.148320858 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.1436442 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.128217282 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.142700444 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.133124847 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.131259267 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.127796505 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.128283579 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.135339132 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.253345916 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.142679767 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.475939754 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.190137863 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.146161171 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.181614892 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.131961809 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.130679364 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.132248305 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.179963911 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.135697999 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.133990694 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.474306962 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.22254833 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.144239285 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.474857585 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.19043205 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.142015145 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.13848957 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.128754198 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.145759457 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.491125428 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.685457847 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.158452097 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.1486209 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.129469339 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.131786514 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.142965882 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.645440755 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.142036706 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.716660619 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.15290952 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.144122503 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.135895844 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.133975417 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.13407213 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.14764411 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.149973258 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.130504221 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.140937287 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.136549207 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.145854173 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.49155219 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.172505579 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.642946837 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.134218456 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.149454548 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.148847205 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.716244878 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.156310056 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.150969894 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.134946967 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.491862757 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.172659604 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.151599497 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.134647659 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.142408691 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.24773337 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.136057358 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.151545924 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.130689297 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.152852405 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.137964678 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.132528349 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.146764633 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.154476226 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.167835472 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.150253085 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.132005856 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.139576741 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.138997865 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.151790792 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.143125849 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.139513961 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.144009869 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.132841918 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.184471328 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.151665932 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.148616438 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.248072771 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.139160346 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.258682729 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.1487476 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.139745841 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.133135487 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.479433371 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.174670587 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.156283709 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.139602334 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.156459289 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.154310461 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.149299935 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.133693912 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.150168061 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.136687927 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.184833487 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.133764679 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.158836347 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.184496677 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.147547556 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.140076951 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.151748241 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.169234407 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.154687077 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.138194383 seconds)
done (took 335.612829948 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.181010213 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.132673995 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.211598974 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.133138796 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.200850748 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.184359784 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.134059326 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.134817804 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.133653711 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.524021311 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.133155886 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.138761025 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.135283456 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.13291993 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.182234674 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.134429707 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.132916501 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.367392731 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.134476945 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.191883612 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.134890346 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.132082934 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.132972354 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.526342684 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.135120363 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.134850747 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.193601464 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.134804703 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.372711051 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.134225604 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.134276614 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.37172002 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.194264659 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.14558611 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.143375106 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.140450218 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.202034432 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.142611845 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.180598668 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.181735158 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.211590707 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.167635102 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.133288821 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.135099581 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.13745932 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.136497887 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.135610098 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.170771324 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.135721631 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.140808422 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.371971322 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.143441611 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.140598088 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.137242197 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.135996668 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.151200437 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.135060284 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.137119354 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.199958399 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.137175108 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.184690579 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.527116136 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.55655087 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.136719061 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.135700118 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.13626444 seconds)
  done (took 201.442220127 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.203346852 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.220712211 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.201814269 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.140884364 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.187954598 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.204067599 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.140900472 seconds)
  done (took 17.351746166 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.143616677 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.135958869 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.158863324 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.16095668 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.136544338 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.274999645 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.149184114 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.144203221 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.163134367 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.141261767 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.472630546 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.163979973 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.144872667 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.134771133 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.149113332 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.167881157 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.140210438 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.138143644 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.237779721 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.216391309 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.142626356 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.146625581 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.165879419 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.151400315 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.138602584 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.139140619 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.138820506 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.14803926 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.139429187 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.13749919 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.137335985 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.154827547 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.139363448 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.138325833 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.139749503 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.139817093 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.139629585 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.13854392 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.139497213 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.139597114 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.140571012 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.140327887 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.140230217 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.139480036 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.137482574 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.162456793 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.139781016 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.142169892 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.138987463 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.140354099 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.16762229 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.140106267 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.138448195 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.144933571 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.180148625 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.14677568 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.138979675 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.138318129 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.141769108 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.139398022 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.139809149 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.220627615 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.162991711 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.139898715 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.165131226 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.177192037 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.140926085 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.139149539 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.141449072 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.163640113 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.140094298 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.163988199 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.14044473 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.239593969 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.139958282 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.282482644 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.166775867 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.144995286 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.1429416 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.142006589 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.148988718 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.140463543 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.145315183 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.148496526 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.147976836 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.140141132 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.142038215 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.142544278 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.148959486 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.141503131 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.187656927 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.141027819 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.141155308 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.23884855 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.141549549 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.241208599 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.168443932 seconds)
  done (took 231.383533772 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.148284786 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.144392948 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.155703958 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.142418612 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.142664924 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.147227516 seconds)
  done (took 14.936843971 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.145115698 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.146582001 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.141872107 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.143068922 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.142114522 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.141535342 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.141224343 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.146211501 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.147797805 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.141614806 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.143035693 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.141323566 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.143080776 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.143834493 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.143028764 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.144807479 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.144050037 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.143193078 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.145117677 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.14246124 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.387424577 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.145537432 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.144736238 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.147708872 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.147739125 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.1441738 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.153962979 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.144201433 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.143340644 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.150239542 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.148378597 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.144927592 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.146822393 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.152922897 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.148585791 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.146707552 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.149007539 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.144511176 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.143989222 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.14487579 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.143133472 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.146019191 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.145046688 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.144972382 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.1474516 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.150749406 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.150192467 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.154268887 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.144118792 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.144394464 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.144500421 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.145241837 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.145582229 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.144505307 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.148289558 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.154639617 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.149553005 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.146469243 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.146872291 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.148716565 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.14809236 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.144776403 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.147866956 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.150634491 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.15244484 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.145465232 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.147801906 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.151987533 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.146059212 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.146877148 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.14766052 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.147039731 seconds)
  done (took 157.832674219 seconds)
done (took 624.984036628 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.258567045 seconds)
  done (took 9.320849722 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.274884377 seconds)
  done (took 9.442910378 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.702847446 seconds)
  done (took 12.770387923 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.161775413 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.169949589 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.156282797 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.148277081 seconds)
  done (took 30.711432808 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.440993255 seconds)
  done (took 9.504000007 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.163073655 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.141934456 seconds)
  done (took 16.439544859 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.17619704 seconds)
  done (took 9.240411826 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.168651064 seconds)
  done (took 9.251698627 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.172277888 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.159783226 seconds)
  done (took 16.414261584 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.148645031 seconds)
  done (took 9.212328988 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.015747209 seconds)
  done (took 10.167209337 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.149599922 seconds)
  done (took 9.233093187 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.192094018 seconds)
  done (took 9.255767122 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.211171858 seconds)
  done (took 10.274997161 seconds)
done (took 173.304598131 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.15365204 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.144128169 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.146339893 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.144306222 seconds)
  done (took 30.649081656 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.183640505 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.180480913 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.192450142 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.181634655 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.172983349 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.172740864 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.185423449 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.182131688 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.172859989 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.179388419 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.181543967 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.181208188 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.181306867 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.18997361 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.191302065 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.183737046 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.183952168 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.182707255 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.173585773 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.192866184 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.18484156 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.180390564 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.146906678 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.148127258 seconds)
  done (took 54.369975983 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.337887507 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.214374141 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.3021902 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.195543414 seconds)
  done (took 11.113027894 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.148971253 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.212983498 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.199836511 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.194613852 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.199545257 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.251188344 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.201144952 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.284199099 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.275224715 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.27791774 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.155874889 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.170601623 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.174272509 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.194025978 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.25183812 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.149031454 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.149441023 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.267402679 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.212087153 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.406273619 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.149987642 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.203572567 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.201386166 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.201328904 seconds)
  done (took 55.196384276 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.150326795 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.156635844 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.156940631 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.150101378 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.152464033 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.151994569 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.157036786 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.150497909 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.173031562 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.15273129 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.150507087 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.151122178 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.156364267 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.150212879 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.150564012 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.162219402 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.16581969 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.150919047 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.15420854 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.157941514 seconds)
  done (took 45.167032115 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.150486069 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.997443193 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.497552083 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.401456736 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.149833291 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.150027501 seconds)
  done (took 33.413181476 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.163900936 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.16913772 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.157073924 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.175277373 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.198195399 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.155944303 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.210919073 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.311138397 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.155564388 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.208797222 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.166803271 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.159629066 seconds)
  done (took 28.299569016 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.148684779 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.151193881 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.150680391 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.161989429 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.161586795 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.159415226 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.15923463 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.14964189 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.161370595 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.170364451 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.157738324 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.162278652 seconds)
  done (took 47.962778671 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.364608125 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.37715136 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.365258131 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.706787916 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.467251057 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.134350907 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.437158501 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.363965131 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.928829487 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.896820269 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.4449031 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.134253681 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08766629 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.076206649 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.072815379 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.394932366 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153962541 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.015913028 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403305396 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.200243129 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154984564 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.153631564 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156703557 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.466790634 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.481037568 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.149826647 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.367555995 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167552495 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.198811149 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.366094186 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.717282007 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.202755471 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.355753464 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.407491394 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493729435 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.207404727 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.258583494 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.279410602 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.192941651 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.188253954 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163375551 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.164378354 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.704171948 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.166603699 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.425343066 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156435816 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.164770258 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.26772571 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078596881 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.522908613 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270133016 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.157496612 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.18655589 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.590118126 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274817915 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.396386525 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.158417553 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.284896235 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207651883 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.467639668 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.264647191 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.260619138 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.368656062 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080666042 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.546987995 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280613464 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.156568775 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16475037 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.857310705 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.404581317 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.238991047 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.538197958 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.926838369 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.157760291 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.160750717 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.215738832 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259635151 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.157023083 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.470373898 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.145346413 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.083433976 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.25473031 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.661597363 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162790841 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.158283596 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167473147 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.01077952 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.085938984 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.254653511 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.465987642 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.485976376 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.157110776 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.158353222 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.181142734 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161638866 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11031151 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.676171048 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.222209847 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.086365916 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.723343175 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.735106727 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.114267286 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.649445689 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198912302 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.438486757 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.312258619 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.565466053 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.369351745 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.40585145 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.697566655 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163341508 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.78238249 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240663966 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235184131 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158615254 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.749464998 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.299905888 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.502428632 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276706914 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.159697299 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.088728015 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.172816608 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363056925 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.745829166 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.214346378 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1584364 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.165393227 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.160919021 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.164042703 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.328979713 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17783765 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.454297268 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.236777282 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.161151724 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.101202026 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.165143551 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.450386947 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.771329913 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216600534 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.416212498 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.43110345 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.944003349 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765597893 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.169709821 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.431075589 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.236174629 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234585414 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.736198126 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.295376731 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.259033609 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161524314 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.288803184 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.172338298 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.16551479 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.489849917 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.68428704 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.589125797 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.206340791 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.162667548 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.122737551 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.295367558 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.401220336 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248959893 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185923202 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170068343 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.251514216 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392412198 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.164394615 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.089903669 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410386534 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.411618288 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.455039562 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.588258412 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.237610804 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.239095255 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173721801 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.377744219 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.248524061 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.82903075 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.741409253 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379071337 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.693300104 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.125040211 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.806845548 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.479300934 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.547211412 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182116972 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.617398451 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.287782581 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.814727434 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.190121899 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.680474609 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.093651608 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171383077 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.500809388 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.12471855 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.478626751 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.231173842 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216242249 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.165868926 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.165720503 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172956493 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107988672 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276120371 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232420763 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238328257 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094282918 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.826615078 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.202257617 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.16895343 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.166244137 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.56303891 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.990798973 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123603914 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.165519446 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242635683 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.944264407 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.716144021 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.168321189 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.169546077 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.782370821 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.172673885 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.084430265 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.171881467 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.035743163 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194421647 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.482977217 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.87595477 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.466654069 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.246188013 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242458038 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.166412769 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168603381 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.867132357 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176556289 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.868592763 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.453903954 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.445849612 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.607744508 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.232388896 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.37956198 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.183043617 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.167942508 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.694634022 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.194218622 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168724231 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36981425 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.685770286 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.550927294 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.816561276 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.263779235 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168555419 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.430224064 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.161687396 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.736433049 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.852899378 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.1734401 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.171130571 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.428516148 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.853277077 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.171487812 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155538238 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175282469 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.383473369 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372991195 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.44256218 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.471457739 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.626891078 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.101794839 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.173628947 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.212655567 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.416112456 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.168161168 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.207547796 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.681213284 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.28348566 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.59941119 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.453568365 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.663938892 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.810996 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.437934506 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.236129815 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.184026581 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.822922214 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.301390381 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.101577065 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288915382 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.098824721 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.872349344 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.461498124 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.187860957 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.436716894 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150584745 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.506656168 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.469565021 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.496453517 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.222916044 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.201193795 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.170487855 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215021997 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.170998647 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.316289121 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.290866972 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.171380735 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.683274594 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206387051 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215441687 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174862795 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.692465377 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191480878 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174873035 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.9513687 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.194449027 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.289974624 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242749757 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.963065657 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.77563761 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.195301425 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.129102789 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.829938897 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.438024757 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.232020443 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.611777468 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212824104 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.579182516 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158931801 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.388165922 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.177184516 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.71534959 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216807278 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443314609 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13076142 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.387046971 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.375612175 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.200923949 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.177545525 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.099875218 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.339597454 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.048838931 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.158455215 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.177741195 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.864569137 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.628061826 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.338965506 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.652397328 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.996046634 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.177090773 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.549197366 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.581099826 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.769445002 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205620057 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176889318 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.547210964 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.304099588 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.536937223 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.463844844 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.180755557 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.202371359 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389458149 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302954729 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.095564961 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.66691161 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.76253921 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.87773158 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.188672605 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.381425046 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.555381453 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.423533511 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207717789 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.255082024 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.582694845 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.441912738 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248884166 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101007848 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177194021 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.579650708 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.592319357 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.274005093 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421514826 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.490016316 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.688763818 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.80578519 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.596706867 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.595310477 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.67417152 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.596108775 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.395816593 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.548620183 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.510713006 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.775124453 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.592132003 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.391684215 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276498061 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453187991 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.049334663 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.887743872 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.422834411 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.182648565 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.108878934 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.387823368 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.186953004 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.525896617 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.859131183 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.430215664 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.49596461 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675577767 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.724627097 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.323316871 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.199326585 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.149943854 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.202767331 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.203122601 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.178841609 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.672593943 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.470670886 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.192748839 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125454147 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.850053968 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.108110403 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.394202835 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.322808534 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.212313633 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.74812839 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.490920612 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.279970844 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.481265737 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.389563189 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.212422253 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108839051 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959014499 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.128231474 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.295787255 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.60801157 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195899251 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.181579405 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.383778863 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.108127457 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226223644 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.186894236 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381215556 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.796679103 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.450744124 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.308529112 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.431571004 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484350493 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.091932143 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.211857746 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.454223581 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.109269038 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.78306525 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.892452373 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.223818738 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251552932 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181833425 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.185239699 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.454339261 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.558310186 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.275478015 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.879458055 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.211235027 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.207723623 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.562968234 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.27502046 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.183929884 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.187123979 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.65246188 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.413024 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.182139195 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.163937433 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.395868175 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26964715 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.379656263 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.256138037 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.699060256 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.18864292 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.089403677 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.283663196 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.128380876 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181660464 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.905951468 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.246693222 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.185080728 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.453657847 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.882793836 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.385469327 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.584061106 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.059926825 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.336494887 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225971332 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.185585988 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.19088866 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.563806494 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.493338465 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.182182717 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.459931707 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230553409 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.190021866 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.852598406 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.155939268 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.1842024 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.911267398 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.079307663 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.915558017 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.587360564 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.200963546 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.209859315 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187806564 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.114476422 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.184237723 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.370725535 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.154587972 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.193769987 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.554402263 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.556206079 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273730761 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191308766 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.188643094 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.193232955 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.40044569 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.698668588 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202876292 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.886077652 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391477814 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.185150969 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.686937341 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.635789187 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.399944598 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.222554425 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.329685919 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427578622 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.84948858 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.331336542 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.153984022 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412093352 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.189468917 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.460022237 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.460980821 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.189401392 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.401235566 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.776631538 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471609992 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.54743874 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.505037096 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.25667706 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.342225664 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.094277071 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.192022708 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.19458377 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.456525324 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244441815 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.186657236 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.197741319 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.835950035 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.970001934 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.656260008 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346175277 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.560242806 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.018787774 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.941202097 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.190410168 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.116505868 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.185908717 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.21315133 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.192294822 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.115764822 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.910587042 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.978255639 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405480797 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.500449634 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118977423 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.395043411 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.778360901 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.115161064 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.15959892 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.188986189 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.436399414 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12249606 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193799175 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.149192884 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.517763364 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.888062519 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457749127 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.190478486 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137385687 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.192970508 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.193968763 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.192239495 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.279497676 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.191507381 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307998952 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.459436417 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.620237744 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.29581529 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.843373165 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.966161538 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128465107 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218867471 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.815619952 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.761930212 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.529448848 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.327160353 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.896027323 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.136765571 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.194271731 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207683628 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.443628361 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.193650322 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195985091 seconds)
  done (took 2266.247645723 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.263815573 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.242026385 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.250715658 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.249587665 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.315381741 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.286339969 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.269836119 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.32261363 seconds)
  done (took 60.306277016 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.193374663 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.19916989 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.199657179 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.193738122 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.200225852 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.194768753 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.387132477 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.221697519 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.193794868 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.197298711 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.205018129 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.195280463 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.194305858 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.191056619 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.1965913 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.500508646 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.216344817 seconds)
  done (took 81.998130737 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.250189647 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.036186831 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.194924778 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.919795369 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.243087061 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.542546693 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.196928098 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.198675177 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.314802964 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.492884262 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.226785275 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.206873508 seconds)
  done (took 93.931341889 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.194548404 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.195031509 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.195172135 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.19582575 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.195201588 seconds)
  done (took 13.084325871 seconds)
done (took 2823.864609086 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.43725349 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.291126758 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.264243762 seconds)
  done (took 6.663005335 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.337819898 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.385287139 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.497787193 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.521636611 seconds)
  done (took 11.85791872 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.485673684 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.563236563 seconds)
  done (took 7.158537404 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.561774059 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.203863756 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.584189902 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.197860571 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.196698845 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.199017045 seconds)
  done (took 23.708464517 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.196490915 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.196792359 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.19734097 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.196493069 seconds)
  done (took 10.897260752 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.196227645 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.976945592 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.194608012 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.201882161 seconds)
  done (took 22.677828973 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.42404523 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.494395857 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.963247883 seconds)
  done (took 13.991683531 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.819807264 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.645307942 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.812422762 seconds)
  done (took 10.388255369 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.060481861 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.012698911 seconds)
  done (took 8.182624651 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.338146557 seconds)
  done (took 4.446328413 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.030952683 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.508719672 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.674521893 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.713070747 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.777530803 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.411192021 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.514640557 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.462051772 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.594151917 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.631341909 seconds)
  done (took 28.430198883 seconds)
done (took 165.300629333 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.64400215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.218050409 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.408528365 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.542532691 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.440264429 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.432686128 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.496649056 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.565812802 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.250653021 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.236656449 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.57744135 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.442036998 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.435467837 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.221655863 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.442321092 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.22375106 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.479835842 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.671958633 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.260548828 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.472028145 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.465418863 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.220286659 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.414816507 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.236623089 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.441179236 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.406752207 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.831615426 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.221935166 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.41442305 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.844763661 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.360054756 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.624883515 seconds)
  done (took 180.057278592 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.201784473 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.197629887 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.197925277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.198187586 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.496628653 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.197948463 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.196891785 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.198079465 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.430571285 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.416554027 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.198967226 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.480887955 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.201351503 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.199283099 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.201130725 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.199283111 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.545832308 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.199083334 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.20072805 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.20027076 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.18675235 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.357367783 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.199134092 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.369060567 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.529125607 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.200957032 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.201432588 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.199955988 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.199249514 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.19959234 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.201884707 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.201933118 seconds)
  done (took 218.521303769 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.200448012 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.200850718 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.200649168 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.201523296 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.201118586 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.202110123 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.196613341 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.198900753 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.880750315 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.87055991 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.200756905 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.200201065 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.202573513 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.200852021 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.204138564 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.200854222 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.199493751 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.200762023 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.203994227 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.200399564 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.204455682 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.989288912 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.202262508 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.035278791 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.202095474 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.20665688 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.202259887 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.201065223 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.186298724 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.201490186 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.203589134 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.200411503 seconds)
  done (took 231.521117195 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.448635614 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.203957216 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.205114474 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.213525952 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.206029599 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.203872293 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.205750195 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.451340199 seconds)
  done (took 22.256352557 seconds)
done (took 654.485815075 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.588088379 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.945387842 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.334589024 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.230572611 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.480637813 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.267400924 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.224798645 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.291280737 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.878883576 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.300930423 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.645027143 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.228348027 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.973677236 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.250307878 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.34115207 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.287445445 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.572844731 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.831668109 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.358132003 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.894576499 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.425713778 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.177450841 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.307831528 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.920938409 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.694740802 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.184623425 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.250640723 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.575049594 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.230938849 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.457288571 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.867776181 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.490350246 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.238807154 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.227137344 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.288620737 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.268054297 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.432735702 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.234894335 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.341024356 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.975281374 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.891168726 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.764245069 seconds)
  done (took 114.289562448 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.216791839 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.213503073 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.215524745 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.213920173 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.222232975 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.21339901 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.214680878 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.213342295 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.212180786 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.213979048 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.215300631 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.222323963 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.216319117 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.221661111 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.2150568 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.213447869 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.214603034 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.222055566 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.214598965 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.215508569 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.215331067 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.215451198 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.211474904 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.215726825 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.213736026 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.215405778 seconds)
  done (took 59.738816819 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.2112479 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.35833035 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.499737644 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.239901878 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.212804657 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.213160903 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.236464249 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.216328822 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.211907372 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.211558284 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.30259955 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.212879966 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.222625627 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.498157578 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.235179931 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.209065699 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.210005413 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.210822757 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.366298689 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.224270899 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.243299781 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.217392805 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.239763322 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.226735772 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.215595353 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.211926873 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.215507267 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.675608155 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.223360277 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.306394026 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.252232135 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.243472927 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.602201762 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.50977547 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.274015485 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.216127611 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.211284258 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.354157901 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.222686012 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.212215196 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.240274933 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.220053326 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.501528628 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.740925757 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.224461009 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.212402531 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.671559872 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.364480944 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.256901659 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.225301715 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.511299746 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.238498548 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.213372883 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.214198561 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.247564075 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.223783466 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.213017431 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.495592009 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.230354752 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.240392979 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.218854347 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.216879472 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.379739597 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.221950415 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.3677763 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.219381286 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.218114838 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.213205643 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.503209462 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.237968555 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.735229276 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.225905944 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.214321814 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.309297789 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.367544048 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.695958216 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.228516982 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.377144129 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.618168119 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.251391018 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.223984516 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.65954226 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.254556225 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.224871848 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.214250034 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.213744226 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.215382799 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.258930233 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.241979755 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.6613982 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.742462436 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.508709154 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.252947816 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.227903339 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.21611697 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.495642789 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.224018553 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.214700993 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.498463917 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.7661034 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.228631627 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.222680941 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.724050938 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.228213717 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.245040468 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.22780407 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.520036841 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.243428239 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.260046126 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.216895884 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.223194155 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.221161195 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.246088836 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.226244198 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.216654438 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.716577994 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.365971177 seconds)
  done (took 273.257798334 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.220879342 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.214208256 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.218786418 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.202652521 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.219851754 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.216774945 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.214239623 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.216749477 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.217639687 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.217027439 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.215521717 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.218873621 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.217924862 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.220828213 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.251981715 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.219593273 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.703466479 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.218441698 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.215430106 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.214705121 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.79145544 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.222550507 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.214981032 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.214991413 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.217783173 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.216474813 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.220760661 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.250075001 seconds)
  done (took 177.340882729 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.217902803 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.264072157 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.22928101 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.26366828 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.227571642 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.218834519 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.238929358 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.233134148 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.224544256 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.218897068 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.21915402 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.245485706 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.227316837 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.291628789 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.243732768 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.246017613 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.296709859 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.221506055 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.218575378 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.218398372 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.26634126 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.230418615 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.245616416 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.272931508 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.228583878 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.264781746 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.233608886 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.219496182 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.219373647 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.306290107 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.234391916 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.247610996 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.255154731 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.237557041 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.31215096 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.308309009 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.295328899 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.243586186 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.224234906 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.219490908 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.220217365 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.221800008 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.268298237 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.231861356 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.222245375 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.311519372 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.235182358 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.221528969 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.241609108 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.221859099 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.232345965 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.236952778 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.253037145 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.320137861 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.263249284 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.246852421 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.242467899 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.238809172 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.222911926 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.293526222 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.226389953 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.308476028 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.239458003 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.223431021 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.222984896 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.224954198 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.270198503 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.254838512 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.297421214 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.228734388 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.294817371 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.273704816 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.233721034 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.223069234 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.224260772 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.271457148 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.304411831 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.274665148 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.281024433 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.2536828 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.233869104 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.222079929 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.226062434 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.250562914 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.228324785 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.310124606 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.310839988 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.227338001 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.222741038 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.223189296 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.225557991 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.246019236 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.275141994 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.258770148 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.303771086 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.256055608 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.258377083 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.228861584 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.235466378 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.227509299 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.254721447 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.232355663 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.235108839 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.567604546 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.258836241 seconds)
  done (took 238.562796452 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.601911491 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.271811945 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.295463742 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.493112186 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.608569604 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.347938399 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.262689035 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.279878124 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.281722948 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.389733602 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.331806312 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.317913965 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.256759291 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.246392748 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.274147872 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.28286783 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.311352929 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.57091431 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.368486639 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.061815007 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.260567327 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.52362693 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.557194851 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.607241486 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.312434016 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.634913986 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.911680447 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.358556716 seconds)
  done (took 72.16247685 seconds)
done (took 937.47331036 seconds)
SAVING RESULT...
DONE!
