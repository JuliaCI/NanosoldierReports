cset: moving following pidspec: 1571
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.819884104 seconds)
loading group "shootout"... done (took 1.116595487 seconds)
loading group "string"... done (took 0.668377326 seconds)
loading group "linalg"... done (took 8.660768302 seconds)
loading group "parallel"... done (took 0.17069146 seconds)
loading group "find"... done (took 2.912847843 seconds)
loading group "tuple"... done (took 2.126722059 seconds)
loading group "union"... done (took 14.940306852 seconds)
loading group "dates"... done (took 1.451163845 seconds)
loading group "micro"... done (took 0.221270414 seconds)
loading group "simd"... done (took 4.827010889 seconds)
loading group "io"... done (took 1.089544264 seconds)
loading group "random"... done (took 9.582319082 seconds)
loading group "problem"... done (took 1.527923357 seconds)
loading group "array"... done (took 25.289718742 seconds)
loading group "misc"... done (took 1.897614466 seconds)
loading group "scalar"... done (took 43.642831695 seconds)
loading group "sort"... done (took 3.383962756 seconds)
loading group "sparse"... done (took 12.828355963 seconds)
loading group "collection"... done (took 18.50636692 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.435973144 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124168593 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129824766 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.113807821 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187644346 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12487746 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131501926 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085878624 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.883758401 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139813419 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115465033 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.429479301 seconds)
done (took 5.360006765 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166398593 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090782664 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083005815 seconds)
  done (took 1.408258066 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071865104 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063974371 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067484388 seconds)
  done (took 1.433808182 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065588017 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136302439 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066982321 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067251813 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067421467 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066715801 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066731696 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067986518 seconds)
  done (took 1.773617251 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072685744 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067818801 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065811939 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068255511 seconds)
  done (took 1.513561559 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066216199 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122637836 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065575443 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065295722 seconds)
  done (took 1.555492136 seconds)
done (took 9.174862624 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139737936 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.818332794 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.778450726 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126973638 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250543054 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450352957 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124732843 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183703143 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089721833 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075396405 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122222792 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078640521 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.42495227 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.408947082 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071726963 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176242407 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.644017763 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087007231 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135979402 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.462556839 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074375147 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088407022 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085253485 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071942621 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.329436205 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153197253 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667708303 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097078198 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069102765 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09480894 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071134083 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078653203 seconds)
  done (took 10.802319773 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09304071 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090344841 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069017638 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124422962 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093965591 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070285652 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075583004 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068056441 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089418655 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124100476 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090528109 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.103876703 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066604688 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069367136 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.07425247 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197669336 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082628774 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081794635 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068197075 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082078542 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105848161 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078354346 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079056029 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078763847 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132845283 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169977251 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096932989 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098836057 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066872595 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079642484 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11560562 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125830668 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06701928 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065560913 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120684773 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095840986 seconds)
  done (took 4.682850715 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.891401672 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096264112 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083108855 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074530619 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106351574 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114158709 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.123664275 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122615233 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100053918 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069402606 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153167665 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.671156102 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.165922315 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072408669 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120491804 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.359305963 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.069335985 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070866431 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068702429 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071409548 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070346394 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112952575 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066727169 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175946078 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.588357761 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071216366 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06972644 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096954055 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.094485902 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066225687 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140796772 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09273941 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070130495 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083264784 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.544925142 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066051212 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.177150608 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089990351 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094480817 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067342162 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068363007 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079521742 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066641759 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108600516 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079874061 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.517597794 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070271576 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.58380965 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225368885 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073110972 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072294857 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101638631 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064620255 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068536576 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.843282454 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.14948173 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068267935 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272345693 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069658737 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068721318 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069508185 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099885466 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070849422 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068569831 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073680642 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096550524 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.798330909 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090890046 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097059253 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066877205 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.401505092 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074362831 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070074178 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069809032 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084282477 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111131234 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067235579 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066782924 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110909667 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095990299 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08994007 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070326277 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067649111 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066502015 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325839052 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163450327 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066441237 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06787187 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.474718834 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064272112 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.1861309 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069311056 seconds)
    (92/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064948402 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093200626 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067489538 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064526364 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065312901 seconds)
    (97/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064727163 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100344915 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071318233 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.688315133 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068271413 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.491635544 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068976997 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103047813 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120158529 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067871232 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102267377 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068329487 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065738682 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074119135 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066197929 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064748144 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069856897 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066054556 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066967666 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069606272 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068809152 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068202653 seconds)
  done (took 23.143029681 seconds)
done (took 40.764379488 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.333401175 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079201344 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079102952 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07970156 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079299975 seconds)
  done (took 1.937207625 seconds)
done (took 3.323168178 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133153863 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075686421 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064729133 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101305445 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069267726 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102219272 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108864402 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104460332 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069245842 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069384369 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069633857 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105444285 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105568809 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069246632 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098733089 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104198072 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069475184 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064658832 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069054485 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069409161 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069367047 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064617452 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069466373 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069230733 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099257381 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069053495 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065126943 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098882729 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069176898 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099139598 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069429054 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069152803 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068918719 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100189173 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069501796 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099400334 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065183767 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069345518 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.188560128 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069657735 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069202023 seconds)
  done (took 4.768292583 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071410434 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081663071 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083688724 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062380943 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071674319 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082383275 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062620205 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081994359 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091448832 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083277289 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082499849 seconds)
  done (took 2.188956681 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070212536 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083615565 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084616734 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062621165 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074714028 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084230733 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062799298 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083683286 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08567242 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083673736 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083778975 seconds)
  done (took 2.17594129 seconds)
done (took 10.444600539 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096655358 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065862765 seconds)
  done (took 1.460326412 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223368503 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.507497804 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.30194871 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.094024676 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07276469 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086086192 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.205243494 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067489345 seconds)
  done (took 8.0439118 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.099500554 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068994012 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071505322 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067455987 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06844851 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070440883 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070251089 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068974076 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068740308 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068355101 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069589483 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067394337 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068200026 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068304126 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068785863 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069549399 seconds)
  done (took 2.547627527 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102949792 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069391082 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09931773 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062369383 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072287715 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062717872 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071162552 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073255862 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070795959 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071314859 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072415145 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071349105 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071452865 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072130029 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073324754 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073170557 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073424686 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071062192 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073361117 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074045168 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072983591 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073688898 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.0744018 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07177535 seconds)
  done (took 3.20473391 seconds)
done (took 16.575705869 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17510509 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075665785 seconds)
  done (took 1.559269382 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068151662 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069299866 seconds)
  done (took 1.463883273 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073866587 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061170463 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078582973 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070704573 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061858838 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061547176 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077340607 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061944481 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062037657 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062404933 seconds)
  done (took 1.995934126 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062923174 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069007457 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067124757 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065111919 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067557895 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063556716 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065735887 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06330583 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070043623 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062359811 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066484105 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083577596 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065500182 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083561426 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065260549 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065813683 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067696544 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065156139 seconds)
  done (took 2.548050058 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061096061 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061988567 seconds)
  done (took 1.455671964 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064830348 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061979525 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064993462 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064566679 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062413813 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061552656 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062130912 seconds)
  done (took 1.768341953 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419669027 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122570674 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341900552 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069302037 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076662508 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254482854 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063702194 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068744494 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069020235 seconds)
  done (took 2.857150469 seconds)
done (took 14.992037016 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082176137 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180771516 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087397352 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.404276302 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091405997 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067557429 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112965695 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177973305 seconds)
done (took 2.561495817 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278195217 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.247809934 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.403414857 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125402503 seconds)
  done (took 3.115668036 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.335010137 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078398478 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077376317 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066782539 seconds)
  done (took 1.907838932 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06528063 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07184872 seconds)
  done (took 1.48122405 seconds)
done (took 8.137799987 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072203687 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06218684 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.06765953 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064323314 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064000866 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.07396505 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064442886 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062106612 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.093574268 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064604342 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.06636137 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06464367 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064390733 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064206105 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062640832 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064458624 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064015372 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064194846 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061894879 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064326019 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065193004 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063374228 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06425727 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063527466 seconds)
  done (took 2.95857326 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079605495 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065502304 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067067018 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066790728 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067640846 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067191285 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066936863 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06590754 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067116847 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065269408 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067443151 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067392009 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065951714 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067765069 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065912853 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067482216 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067403037 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066359729 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065782797 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068219623 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067147933 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066059702 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067524476 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067364944 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067726333 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067569071 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065733464 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066257339 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067509729 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067980178 seconds)
  done (took 3.376058975 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066280781 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060269111 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060534199 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069782397 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060410887 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061072996 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061031269 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060032007 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060996219 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061628785 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061174959 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060322034 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061329622 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060242373 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060200719 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061196841 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065194164 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079216295 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060472337 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060252773 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064785411 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060842818 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060336404 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061340723 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061492278 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060761364 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060373101 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060869208 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060431193 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061180061 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060508745 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06484795 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065656429 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060630181 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070329084 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065401289 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060660344 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064416095 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061606737 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06011999 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060397899 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060334337 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060562311 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060583993 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070429858 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060938483 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061672859 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061388086 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060863196 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060208041 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060768632 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062382742 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069384379 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06197805 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060454726 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061884158 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060006571 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060867053 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060445774 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060135153 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060123038 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064117292 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061795971 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061364966 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079966559 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061956645 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070753601 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060368855 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061077778 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064079557 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061009494 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078608754 seconds)
  done (took 5.872256175 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071543401 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07219924 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079467805 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070643496 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065331809 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061988117 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065576234 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061498729 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070976039 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065880307 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061597772 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06516647 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071106995 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065812216 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063084256 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070762166 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065771181 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064844746 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061356838 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065573685 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063018009 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065211789 seconds)
  done (took 2.837651145 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138988069 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066132104 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10478398 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070737423 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069575013 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07079859 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066438143 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066677604 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066640502 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067109465 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067060142 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066850155 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068596439 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067173265 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066968539 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066644991 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06665798 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066930125 seconds)
  done (took 2.684206947 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076671379 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066082568 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089569474 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065820136 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066124912 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065753204 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069540318 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070443575 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065688188 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066122336 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070165883 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065705472 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065824192 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066197113 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066170985 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066187798 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066091131 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066249897 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070342421 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069491851 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06948323 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.07008572 seconds)
  done (took 2.87752057 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077337664 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065183074 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080471011 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06734974 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06129234 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061045168 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066697358 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065329832 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066123964 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065026349 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065965571 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060553322 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067384998 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065363516 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067571597 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065611059 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065207288 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06539165 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065384708 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060822108 seconds)
  done (took 2.689818407 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072000985 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063282087 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063162673 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068405699 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063184316 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063721861 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068984046 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063514088 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063628285 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084899757 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064144411 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063704431 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069107617 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066954405 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06343611 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068971912 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068835432 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068578285 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063178802 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063170568 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08485483 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063312646 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068886071 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063752624 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063553755 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063273874 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063450681 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067008637 seconds)
  done (took 3.239436465 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064370546 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06340336 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063938141 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063708761 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06387362 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064017148 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064238461 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064329948 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063750272 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064535242 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063685806 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064059592 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066430704 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063687522 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063764043 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063901058 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063447924 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064757978 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065434603 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065435542 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065050294 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064760133 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064803444 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064381672 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063989169 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063420541 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064356433 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063929653 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063484618 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064183365 seconds)
  done (took 3.300863187 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073098321 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071325694 seconds)
  done (took 1.516877723 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062438692 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077905262 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060263306 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072581972 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069246312 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064346357 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069967401 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06891552 seconds)
  done (took 1.912706217 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066905113 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090316801 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062684992 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062721233 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065827894 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127334901 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074557572 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074007671 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076226317 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06502912 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063287342 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074230577 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062556906 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075552517 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06412838 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071503182 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06987046 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.08012442 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075814974 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060931264 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07497541 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063673306 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061070953 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06370309 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062420674 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069325394 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07803464 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075141158 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070936058 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06032784 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08124554 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061352463 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062304065 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070757121 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065700168 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061108674 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098159265 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061895165 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06633527 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060895393 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073892698 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081939547 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07575777 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079212288 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063101691 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063638157 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061183347 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06306024 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06500119 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070791647 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061439749 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069054128 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06049364 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062523555 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07213864 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06167163 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066440879 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070881282 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075121014 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071910542 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070251151 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077066476 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070504354 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069097027 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062383628 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080981142 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063148094 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074833832 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076521962 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06303747 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074611219 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060780845 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060277246 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061075428 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094563251 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062835248 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062454671 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061660592 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061450346 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062657455 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071255644 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066629673 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069018522 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064456742 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077160492 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070240613 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061421102 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068228322 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079470103 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064413568 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061613753 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077521821 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064348271 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060635512 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078231959 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070734627 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062930147 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062206858 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064040793 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074165153 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062092297 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059587803 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069254929 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062432177 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062922785 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065706363 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068855941 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060648426 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070706982 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065860396 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062076714 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059730271 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065260159 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06168133 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059102419 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069664201 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060683255 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074622169 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066751566 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074412393 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074754601 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070521451 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076038426 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060451033 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058904031 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077633065 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069406594 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.201726349 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080398798 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061861525 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075524371 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061815785 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063467301 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071122678 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060803983 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063267448 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061317002 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066103855 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062655556 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062818556 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066758242 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070009586 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073062589 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062545383 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070071881 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061928773 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076808911 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070926127 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067001514 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066068312 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063167776 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073508151 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067523753 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070464489 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06106066 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061864722 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061108127 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071756733 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071011229 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063031168 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068401483 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065512987 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061861995 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061237828 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062384675 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064616614 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065015627 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062084383 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069202151 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070220527 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07505956 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068205637 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070311187 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060163618 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060818983 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063092773 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061007104 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065745567 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07085104 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077427488 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072948759 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082427967 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06147346 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071271844 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06281357 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078518776 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075023086 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062943942 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066166698 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060142023 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062940542 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070704125 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072981108 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075094595 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07656842 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06587334 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065812808 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06101538 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076011841 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061743069 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070319117 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071111399 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066338779 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061514476 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062970632 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070707951 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066281206 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061682439 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076893686 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067519595 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060800089 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075332673 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061667936 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072390441 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061185135 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06499708 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066410962 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063502163 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070952243 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077117781 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060876803 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061996087 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077016332 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063374229 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063388833 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069224523 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076882245 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065682802 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069428803 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072480443 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071043831 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065631548 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071127227 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.06207829 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070590306 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06431406 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072923015 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060748797 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078318224 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059943931 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07594557 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061208331 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071684771 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061579581 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070068335 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062267425 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077041766 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062179125 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061020983 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071768935 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059155236 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069950527 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059814072 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065061797 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066932873 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069574396 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061939227 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069891038 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062316042 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.212601492 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067096853 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070726975 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071328039 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066253609 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061142966 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07011831 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072672613 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.07000376 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062970558 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062763593 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062020064 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070749776 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062781207 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063356367 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069569268 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066077164 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067027162 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063392123 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063219683 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063007937 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069836226 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071105517 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079318234 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070066427 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069203943 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070926728 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06126045 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076878039 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.06146461 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071186764 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060056936 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067295594 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070348755 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061601555 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079704544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062711772 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069455398 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073609221 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070134908 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065005009 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078732137 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06455571 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071931139 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069430281 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065984808 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067545978 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063169954 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069792617 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071381875 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072428407 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062796086 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068912696 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070755643 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063237681 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06939735 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063050988 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069714079 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063278714 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061076062 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066068726 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072962204 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066917621 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066885445 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062488506 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06042268 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062087033 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068308841 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065938099 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070273885 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07664373 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060617524 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062781699 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061438172 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064728403 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079434716 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071136306 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069886936 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066456242 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06043692 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063441375 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063700601 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061797121 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064944815 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060953854 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061284492 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071807913 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063328172 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06581147 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061874912 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062686321 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07120831 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066650405 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062232114 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068312703 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061436257 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066975748 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060780368 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062886072 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066521534 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060793007 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065039743 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071971262 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078216528 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068020539 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070155008 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062795076 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.0690332 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076472584 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068480477 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062440548 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070973735 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060860897 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079322643 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070459022 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069677034 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071148412 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062292565 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077657653 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065152937 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071196324 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076060343 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062154748 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066944345 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060116492 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07568108 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06506891 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060309809 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068670277 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068355414 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066357693 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072267097 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061463965 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068476859 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.215124071 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066230816 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064283809 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063564531 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070765239 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078301532 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062903025 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066292108 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069985031 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070603054 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06633498 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074445144 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070384752 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064107875 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.0652656 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065666826 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062754156 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073097561 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062339755 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066382139 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065943316 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061241553 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067732677 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077925513 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07107252 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070856977 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061710301 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061760912 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081104965 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065624897 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06480186 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06949082 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071162582 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073677248 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070923538 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078044796 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062364791 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067583209 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073983119 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062648193 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061093758 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065649348 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062898746 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071174742 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07128955 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069581669 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06349715 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067936353 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075502717 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062588957 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066178907 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066471465 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062333994 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071968412 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069850265 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072774429 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063298718 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061193991 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064961819 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070422662 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069297915 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070770212 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062714213 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06838193 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075386057 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069129488 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064673692 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061369897 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064797344 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070571112 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06656371 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061262923 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066525458 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06541741 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068396843 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071264361 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06621373 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061500423 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078871904 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069665942 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070599188 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063840881 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063936477 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0623972 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061305077 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072759725 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061520428 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063417602 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065969615 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063257687 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078964692 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070068668 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077672317 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062690329 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065807932 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061463456 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071328648 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066103151 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061877474 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072309368 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060862506 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077304402 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.093348779 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067531637 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060850372 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066191966 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069480484 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076374559 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070817021 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070780438 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064927952 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071001975 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063568408 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072070245 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06137828 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060233568 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071272923 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069796637 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073774423 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061022962 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071000445 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062713831 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.0689849 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068351294 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062891545 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062378647 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062244267 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069712713 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064759867 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069753771 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065076039 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077417194 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061738861 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071572126 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069782063 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071598759 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074492264 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072825451 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068174168 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061630258 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068463135 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.06840872 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062659651 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065778933 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064081031 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081532686 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062765906 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062215671 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074074398 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.066333963 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060519781 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.066550489 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.064819444 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070400402 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061265168 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070336723 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06405827 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061016345 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064568788 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064655439 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059041573 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059810932 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059963367 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069882332 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06458535 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060117777 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078285209 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060839904 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068415367 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.069811372 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066161565 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060765596 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058980723 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061302217 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073718928 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074359199 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063539448 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068907185 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061201819 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069108815 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058267956 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068209141 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067794867 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068385342 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059003023 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06050105 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073642967 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074582446 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064181982 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068184115 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068186163 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060776873 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079396535 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.06840987 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061476336 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070322297 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061483118 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058740017 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058915688 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061199441 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070913569 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059193701 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061618891 seconds)
  done (took 42.076596577 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.108084369 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063729087 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062708521 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063768407 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072071445 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064946284 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063959876 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064648784 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064628354 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066055676 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062911117 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065851852 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069713775 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076029114 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071500874 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066623909 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063135269 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063955413 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062624485 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063611254 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069081912 seconds)
  done (took 3.033278989 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065509927 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065915878 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065838005 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066786171 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065681714 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062131575 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066101636 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061987309 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066619155 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062266984 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066198406 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061996954 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062420957 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.0625459 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062323774 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064069722 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06696927 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0658037 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062206459 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066084759 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063648809 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066019518 seconds)
  done (took 2.910250186 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063139496 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062419712 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070211091 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061098355 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061267307 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064545037 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061117294 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066266555 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065760348 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065802724 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071141074 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062553026 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061492292 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067451478 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061050253 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062555855 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105342013 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062592363 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062683077 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061659901 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064205325 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071316704 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06205641 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061585914 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066031744 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064847836 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061111201 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064143675 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062924426 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065967762 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062768296 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061547811 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071089308 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070425946 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065665709 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06603593 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063440942 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06276584 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061703847 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061943284 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070176237 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063051458 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061600476 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062985104 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07046945 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061428611 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061123503 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070304559 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06091233 seconds)
  done (took 4.687795777 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07137391 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112813349 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067701864 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095077035 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07430049 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067908377 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066946572 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095609708 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062825209 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063673405 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074942161 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075257644 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064326973 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065662914 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068573342 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064712727 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064821909 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063445434 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067452315 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064661057 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068143954 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06945885 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07505093 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075022293 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065322001 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063916601 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064240295 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065876916 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074366517 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068171857 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06603516 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066308084 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07471565 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068135926 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063825114 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064032603 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074729772 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064407521 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063820341 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062708458 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063595188 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065313254 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068240694 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074566198 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064232907 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068771091 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063841876 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062092835 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074016339 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063656153 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067796683 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075567938 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065432493 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064673083 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065603282 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074859582 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064519584 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062982763 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064373254 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074629457 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062583359 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065245498 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077989408 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064000327 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067945789 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075173267 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069093326 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065379763 seconds)
  done (took 6.344204702 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070000397 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095696494 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076297113 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077047004 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071722 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071768106 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072009485 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072154946 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071939718 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074863338 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071637922 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106616069 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069246821 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075521433 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073823499 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072121428 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072014529 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072174584 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07205824 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071782538 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071805167 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.077122678 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071776621 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076734105 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074768361 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068417024 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071363452 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071555804 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07725815 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072076188 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07393252 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071749153 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07179482 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07724975 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074123755 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071569645 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062496871 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071642136 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071737153 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071686538 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068176764 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076996077 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071812961 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06806131 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072036829 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071542794 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076794044 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074387492 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073464837 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075268564 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072094677 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0775498 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07203352 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072031483 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077106251 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079624147 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077218308 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07719215 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072376229 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076994951 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077122235 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079261614 seconds)
  done (took 6.132900832 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074382164 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067618793 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07980577 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061074275 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061348393 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071031452 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06132537 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061044826 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067879903 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068053512 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069871608 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070444145 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072558944 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070135505 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070672243 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073012074 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070445201 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070503071 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06796448 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070663271 seconds)
  done (took 2.908321375 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.07588834 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0798872 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067019496 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07028703 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067251554 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070827349 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066051231 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067535533 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067546814 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067250525 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071763787 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071766707 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067324115 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071178641 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071626448 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070455984 seconds)
  done (took 2.639827386 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06490092 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069092198 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070814848 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.06268082 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06441267 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061897345 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062990823 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060859824 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064151518 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075572729 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.06229354 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065326047 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062566422 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062164099 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062181032 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065152934 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063896814 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062349359 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062923997 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066782443 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070635349 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064181773 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06513949 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062202625 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064895394 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070924901 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063898964 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064984657 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062515821 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065389344 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064914413 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069014418 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064399878 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06327197 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061393417 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062154502 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063158568 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064866688 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065611224 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062692766 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061060341 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067583561 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062869382 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063271018 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064025115 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065112186 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064144065 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06801886 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062751317 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064677248 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062847929 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064728973 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062850178 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069310854 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064569767 seconds)
  done (took 5.074188472 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077951912 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066225515 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060700064 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060940912 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065945845 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066796379 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066575716 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066677519 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066889956 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061190253 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067109365 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066271344 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067014265 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06656757 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06705754 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067144207 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061627805 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066870857 seconds)
  done (took 2.722954311 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067468732 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066493991 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065932165 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063007883 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06315755 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068258721 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061812397 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063676646 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063203615 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.0652333 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06477862 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064296655 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06443431 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064307449 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069134573 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065107674 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06417812 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062950303 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064861661 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0627053 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069907583 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063372232 seconds)
  done (took 2.952766381 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088209931 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084590364 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129010673 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082376418 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090945663 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073757551 seconds)
  done (took 2.077691778 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093605617 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.09810803 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066025411 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066063478 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071131701 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069743567 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06940693 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06986758 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073089108 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073281499 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070017852 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073466875 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073450932 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074886324 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070951279 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071269128 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069759261 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069723891 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06667124 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077099609 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069743427 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073021132 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069875591 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069989737 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069765452 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075017346 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072830072 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073444256 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069812176 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07303228 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071188796 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069537858 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073423708 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073643093 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066172311 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072996858 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06970264 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077469837 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071154591 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075057535 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066024471 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070998441 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073020732 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072581027 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073445232 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069861246 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072721645 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069574412 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069841078 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078808479 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071736856 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075323476 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071707833 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073637672 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073114981 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079070833 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073788456 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075632565 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072137391 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074111128 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074967485 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071923223 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075270162 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074123495 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071604995 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075626971 seconds)
  done (took 6.336776617 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104182603 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066821174 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069509455 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073318763 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074957808 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070173507 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070035012 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07017207 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06971513 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067073737 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104658909 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06998777 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075318156 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078204231 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069972638 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069875017 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069979175 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074983168 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067187525 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078716021 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069450579 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075017011 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07490518 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074704532 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073406341 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071478114 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069752792 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069386397 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06984021 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069560428 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07254947 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069669205 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075110483 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06688372 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075170598 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069721572 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06954359 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072675376 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069561304 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071645166 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075285129 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077150196 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069662654 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06955779 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073637157 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069821751 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069651561 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066838435 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069548924 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06696151 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073615145 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07366193 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07365758 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075413254 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070235236 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069873155 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07021434 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070280727 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070094302 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071901239 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075372715 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070272858 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078931506 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070068308 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07012641 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07544652 seconds)
  done (took 6.341742968 seconds)
done (took 130.857961495 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218003287 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.1901801 seconds)
  done (took 1.920775302 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074879364 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165397784 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075430802 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074818669 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108761918 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108261519 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076885009 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072827028 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075709071 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072782199 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139262324 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076640442 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072333279 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072782996 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074720257 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074305299 seconds)
  done (took 2.952188028 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107581633 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184274341 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082349629 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070382298 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152067312 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077198186 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072716773 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077846319 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077482053 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070759071 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107797187 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083867621 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076454597 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077367933 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072274032 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075975211 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077073743 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077467694 seconds)
  done (took 3.162660392 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103597826 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092618404 seconds)
  done (took 1.740969717 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155725189 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105296377 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145475037 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.344087544 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137539402 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138931237 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142304786 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137620018 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112796861 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.135606353 seconds)
  done (took 3.093619656 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105891484 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105003334 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308637173 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103363612 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082835311 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078197401 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075845725 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080560732 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076077215 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077227785 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122311277 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076071385 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073205754 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124692381 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099391469 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107193932 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071505754 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078682502 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080038046 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071408915 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07680858 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080264621 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177864952 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079136227 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100567253 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075669628 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077941713 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074820866 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07464098 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078731915 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079292563 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100081021 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078754584 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083227969 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076912348 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097716724 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071921588 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09942628 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074387176 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072943395 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075371364 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079235979 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072727484 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078767536 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075499563 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077611618 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080328116 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071073487 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075423287 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074808598 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073268824 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076688898 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076485492 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077940616 seconds)
  done (took 6.349370541 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107485134 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107884893 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07025982 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113449149 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105380109 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070681481 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105187459 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100665942 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108661403 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069913477 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069693976 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069790092 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076995878 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079978676 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116710727 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108715568 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071972645 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070756148 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107350142 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107262391 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069483998 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102197541 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10071045 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106563562 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068982209 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070921206 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069060558 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069812296 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074407928 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075485271 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069332754 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076567333 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08133998 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075834737 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069155442 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068954414 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069163413 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076136907 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076762932 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076834754 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075422751 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06860044 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068933475 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069699155 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069922403 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068655094 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07571528 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076157846 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075779427 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069223976 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069978127 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069260537 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069414314 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075706494 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074742386 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076758393 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076318094 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06932794 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069623153 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071153144 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077868773 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077814173 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076405059 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070496031 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077707005 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069188488 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078472425 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08149544 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069175417 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070227251 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069452282 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069191466 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07005067 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075090785 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075425435 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069893036 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069031233 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069287541 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077652883 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075217766 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069384362 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075053256 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068907589 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069851604 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069715293 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069496158 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074441607 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076365584 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070077132 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069186264 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069120565 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069555812 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068727218 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075150486 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076109272 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076557946 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07531929 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069739136 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075432805 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075748911 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069458124 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075113368 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06961449 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069564847 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069277224 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07490846 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074159897 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076357329 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068752324 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068325704 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074698612 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076565198 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.207624796 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075831729 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078027643 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076196367 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069438621 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078790977 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069941787 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077524401 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069996251 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07784114 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069756246 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075603952 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069726782 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068775622 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06967167 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075127726 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069687145 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069478547 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070371688 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069510974 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076254432 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078656239 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070157223 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075486053 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075371266 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069779935 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075726136 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069422937 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076184309 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069736276 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069615202 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068600855 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077587716 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069323916 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069396742 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069395488 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076893524 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069150615 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077492293 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074457617 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069088804 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079421213 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077145259 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074981379 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078228901 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070015667 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069650487 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068999271 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072076825 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074692566 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076191568 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070367939 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069312128 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07489671 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077661853 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06863864 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075265239 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075271365 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.07557205 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069716194 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069723053 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078850021 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07751487 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075542728 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075366568 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075936771 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069475412 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075006307 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075151847 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069320885 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082291531 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069437753 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079334713 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076061182 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075085344 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075834797 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077320692 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077889832 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078285212 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080386929 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06917684 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.300601939 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075523534 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069476964 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069556311 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075281844 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069663037 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070054536 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080275803 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069566247 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077562966 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068575185 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076344762 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068992622 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069846242 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079773352 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06931376 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069916188 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075583455 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069627811 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075394971 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077953321 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07496597 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069158051 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069824171 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075768228 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07622286 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069333402 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068892405 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069258694 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074391952 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07406455 seconds)
  done (took 18.758496573 seconds)
done (took 39.539257155 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.168609694 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114825736 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210812654 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198726192 seconds)
  done (took 2.338607756 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100441806 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065395239 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080651256 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090373136 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06566755 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076449536 seconds)
  done (took 2.071318305 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200239346 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176383205 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244890983 seconds)
  done (took 2.207578189 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366727381 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151798732 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215656105 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.498266183 seconds)
  done (took 2.92001166 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.109660072 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10028111 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078428372 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111838645 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08582908 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063532679 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134345754 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070399439 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100877019 seconds)
  done (took 2.507125619 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139198039 seconds)
done (took 13.802219288 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.105587703 seconds)
    (2/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.122708137 seconds)
    (3/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.21753628 seconds)
    (4/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.240464361 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.092754649 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.118804038 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.219970064 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.217709322 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092364318 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079581411 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.154221121 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.204266692 seconds)
    (13/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.124885336 seconds)
    (14/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.221742586 seconds)
    (15/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066236803 seconds)
    (16/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.191991055 seconds)
    (17/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.175216575 seconds)
    (18/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067175074 seconds)
    (19/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.191563721 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08734155 seconds)
    (21/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079015988 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077182148 seconds)
    (23/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.173540117 seconds)
    (24/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.253851354 seconds)
    (25/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072424085 seconds)
    (26/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.080307283 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078195252 seconds)
    (28/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.160589955 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.155669893 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078662671 seconds)
    (31/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077811716 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.238024016 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.221647063 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.125224543 seconds)
    (35/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177546739 seconds)
    (36/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066160958 seconds)
    (37/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227732419 seconds)
    (38/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075823893 seconds)
    (39/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163191396 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099569643 seconds)
    (41/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074780497 seconds)
    (42/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.251675156 seconds)
    (43/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.202329309 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142922689 seconds)
    (45/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143690127 seconds)
    (46/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075663229 seconds)
    (47/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073987532 seconds)
    (48/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156568556 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.09237334 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073245526 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076806136 seconds)
    (52/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091139388 seconds)
    (53/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193595774 seconds)
    (54/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.136942928 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.221124011 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066010035 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095647285 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115721391 seconds)
    (59/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.150001007 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085663383 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151286084 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.24695126 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.142734673 seconds)
    (64/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074858096 seconds)
    (65/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074600798 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.091375832 seconds)
    (67/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065591494 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.170153382 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092637432 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075071295 seconds)
    (71/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076610168 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.194738587 seconds)
    (73/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.109751722 seconds)
    (74/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071067181 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065846976 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073170889 seconds)
    (77/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170637799 seconds)
    (78/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076620065 seconds)
    (79/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07791503 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086513515 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073379086 seconds)
    (82/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065854612 seconds)
    (83/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067733598 seconds)
    (84/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09267936 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074066376 seconds)
    (86/341) benchmarking ("sort", Float32, false)...
    done (took 0.136847736 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.09228441 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132212043 seconds)
    (89/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153357364 seconds)
    (90/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.180091463 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073652487 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124504195 seconds)
    (93/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074491827 seconds)
    (94/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065004687 seconds)
    (95/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.194656612 seconds)
    (96/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064932532 seconds)
    (97/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133578273 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.141670571 seconds)
    (99/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.213824773 seconds)
    (100/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074685374 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.141013492 seconds)
    (102/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069472053 seconds)
    (103/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064701334 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121884114 seconds)
    (105/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.076439016 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073858226 seconds)
    (107/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065379619 seconds)
    (108/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.194353196 seconds)
    (109/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.161014884 seconds)
    (110/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.224119737 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068361491 seconds)
    (112/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065424666 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.122285317 seconds)
    (114/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.06597771 seconds)
    (115/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064562231 seconds)
    (116/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067398106 seconds)
    (117/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078769098 seconds)
    (118/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065845362 seconds)
    (119/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065409955 seconds)
    (120/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09322738 seconds)
    (121/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.143767433 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066901551 seconds)
    (123/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143684245 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.160998122 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073014014 seconds)
    (126/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.192039218 seconds)
    (127/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.160796044 seconds)
    (128/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067177773 seconds)
    (129/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066922396 seconds)
    (130/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066251808 seconds)
    (131/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.139947691 seconds)
    (132/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141350055 seconds)
    (133/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.142137816 seconds)
    (134/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.192126984 seconds)
    (135/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071473203 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064982382 seconds)
    (137/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.082198041 seconds)
    (138/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075005373 seconds)
    (139/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067411963 seconds)
    (140/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066558294 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08131779 seconds)
    (142/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065048861 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109270867 seconds)
    (144/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06783583 seconds)
    (145/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.174914091 seconds)
    (146/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074059075 seconds)
    (147/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073123348 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071354591 seconds)
    (149/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.064927214 seconds)
    (150/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066276849 seconds)
    (151/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075482261 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072446081 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.08061739 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064836772 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.0655127 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073826446 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 0.138149841 seconds)
    (158/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069786533 seconds)
    (159/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.192258405 seconds)
    (160/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.066390206 seconds)
    (161/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07327722 seconds)
    (162/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064674504 seconds)
    (163/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064873415 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.147907068 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.212907537 seconds)
    (166/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066844506 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071636913 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073723652 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.065639257 seconds)
    (170/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072159522 seconds)
    (171/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071645713 seconds)
    (172/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.162354477 seconds)
    (173/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078893382 seconds)
    (174/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.1936135 seconds)
    (175/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077259559 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089306469 seconds)
    (177/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.183676945 seconds)
    (178/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.196113253 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.458764824 seconds)
    (180/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07845622 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148913399 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.069000058 seconds)
    (183/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.086706184 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089563784 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.087576673 seconds)
    (186/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.161491022 seconds)
    (187/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.068722083 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077039437 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.079190734 seconds)
    (190/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.145549682 seconds)
    (191/341) benchmarking ("sort", Int8, false)...
    done (took 0.158287478 seconds)
    (192/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068356706 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068922199 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067924445 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157641874 seconds)
    (196/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.184405244 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.154381363 seconds)
    (198/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067815092 seconds)
    (199/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067517662 seconds)
    (200/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.068150777 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069088763 seconds)
    (202/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.068663237 seconds)
    (203/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075294037 seconds)
    (204/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068064381 seconds)
    (205/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071165058 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149863737 seconds)
    (207/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075786246 seconds)
    (208/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068660276 seconds)
    (209/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.0677285 seconds)
    (210/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076231303 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093342878 seconds)
    (212/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143683689 seconds)
    (213/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088659595 seconds)
    (214/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.070523018 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065828777 seconds)
    (216/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096561306 seconds)
    (217/341) benchmarking ("sort", Float64, false)...
    done (took 0.140107798 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067422105 seconds)
    (219/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07540988 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075256662 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074665682 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.082520112 seconds)
    (223/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067912685 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067379602 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069410836 seconds)
    (226/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067156719 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068978236 seconds)
    (228/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.083399264 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13418489 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084660792 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148793151 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132944188 seconds)
    (233/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067641865 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066421564 seconds)
    (235/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074289357 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.08282538 seconds)
    (237/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193952047 seconds)
    (238/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.084111574 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07885768 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077378318 seconds)
    (241/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085272066 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066946334 seconds)
    (243/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066856839 seconds)
    (244/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06758844 seconds)
    (245/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066610693 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066954516 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141864269 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067005332 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07439879 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.067471946 seconds)
    (251/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080104307 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06801523 seconds)
    (253/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069198816 seconds)
    (254/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082462594 seconds)
    (255/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067555138 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070601866 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074310557 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068188738 seconds)
    (259/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074296622 seconds)
    (260/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067188332 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065723307 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.067731909 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092378162 seconds)
    (264/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.067432222 seconds)
    (265/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170505243 seconds)
    (266/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075367139 seconds)
    (267/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07033204 seconds)
    (268/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067901518 seconds)
    (269/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066824464 seconds)
    (270/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067849668 seconds)
    (271/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070544467 seconds)
    (272/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067389588 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086311542 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066529245 seconds)
    (275/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075397377 seconds)
    (276/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067806252 seconds)
    (277/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066779426 seconds)
    (278/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067431333 seconds)
    (279/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067104 seconds)
    (280/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069771003 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065570413 seconds)
    (282/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073558857 seconds)
    (283/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065866037 seconds)
    (284/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074259068 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151039905 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066909983 seconds)
    (287/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067451687 seconds)
    (288/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067404514 seconds)
    (289/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07423729 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131013279 seconds)
    (291/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067037839 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066886375 seconds)
    (293/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.06830222 seconds)
    (294/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262640376 seconds)
    (295/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066886298 seconds)
    (296/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070389565 seconds)
    (297/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068544655 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089977584 seconds)
    (299/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065278552 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152188896 seconds)
    (301/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067135552 seconds)
    (302/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069303246 seconds)
    (303/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067373273 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067338962 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078797646 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083697171 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.239413141 seconds)
    (308/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069872459 seconds)
    (309/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068888874 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089898141 seconds)
    (311/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067078919 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070385072 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066821283 seconds)
    (314/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075005683 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091124905 seconds)
    (316/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06704871 seconds)
    (317/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06713078 seconds)
    (318/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071312947 seconds)
    (319/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070193065 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.07834473 seconds)
    (321/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066908278 seconds)
    (322/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069067852 seconds)
    (323/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.06678406 seconds)
    (324/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067765593 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085324784 seconds)
    (326/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078136942 seconds)
    (327/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071361864 seconds)
    (328/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067671681 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152970657 seconds)
    (330/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06931068 seconds)
    (331/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082370628 seconds)
    (332/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067202541 seconds)
    (333/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067742535 seconds)
    (334/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073854192 seconds)
    (335/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066733142 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066505532 seconds)
    (337/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065968499 seconds)
    (338/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067230259 seconds)
    (339/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.06749091 seconds)
    (340/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066483845 seconds)
    (341/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067643619 seconds)
  done (took 36.86400185 seconds)
done (took 38.478908015 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093321606 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080951629 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079383063 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076097296 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079674067 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07862718 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07962448 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077167895 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079129749 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078228218 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.078279905 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066743608 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075306164 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082635391 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075788723 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082885462 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080221409 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.083215496 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068220559 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082288222 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093990273 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079388977 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078216828 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083965189 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069234619 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078263791 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.09424658 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091162627 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076717245 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07902845 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.077194012 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.088591401 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077380234 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.076353088 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.0794843 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075693834 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.079324383 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076491875 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093797173 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.076039863 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068498649 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079659591 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074874975 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075323609 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075937957 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078895662 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072889852 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080740997 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067463244 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078262262 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.09341912 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.075185852 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.074230108 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075068138 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072366195 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.0761641 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073425909 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078559371 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072572611 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078787259 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078083218 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076041255 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066986278 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075955737 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07511707 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074311026 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066278835 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071746675 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06692712 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066974905 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066361305 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075791179 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073778147 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071691701 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066308715 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06714481 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066297963 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078960561 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073310946 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076485552 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067334607 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072532008 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071632165 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067432031 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072206964 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078738929 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066240877 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067641023 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066163683 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.081262709 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073893099 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066828311 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078992979 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071549971 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071989274 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066670834 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066514787 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071677506 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074692881 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066556269 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065976705 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071924199 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07209584 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075904728 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066971103 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071844823 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071995052 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065961295 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075634703 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074331235 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076415834 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080707416 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075720698 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078826138 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067404986 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066345483 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077040537 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067216009 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072352989 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074772139 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072819081 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075615534 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067245546 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066125082 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071979984 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073217879 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067686463 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067694387 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066934665 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.0763713 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074305298 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066103473 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06731568 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076148642 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075541294 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066292072 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066105146 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076353117 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067093391 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073042972 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072708661 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075376476 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066914281 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06698338 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.214859227 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066718749 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066162241 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072377339 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072052933 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067980801 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.076399292 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073158471 seconds)
done (took 13.238079176 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067765083 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108760832 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.081516868 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083770957 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080159716 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069018875 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071497468 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086653127 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071711315 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.092023625 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095502848 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089623011 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.098482433 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066871494 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067787602 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068934131 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066767373 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079558421 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084946363 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091054469 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.104204916 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067412965 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083687066 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08780512 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.082117027 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086068727 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068761057 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.110430613 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070530918 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.086484742 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.094066994 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067775966 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068976072 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085776457 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082932435 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076578137 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068709208 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074163121 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071436581 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067659472 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069394665 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085172218 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073937363 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074302908 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068621233 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068965184 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.0686492 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.075039591 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.085191195 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073325027 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079642815 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.086347606 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069446837 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067835634 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065918198 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074875078 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067739166 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068293649 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06793433 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067733877 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06817036 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070174195 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072554801 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074484417 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071294898 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07382083 seconds)
  done (took 6.846591289 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083636218 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.094055733 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082448622 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082415036 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066935425 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068165765 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067824423 seconds)
  done (took 2.334561311 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068258317 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076385109 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079791342 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079917769 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089721798 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077563921 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068299243 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099542676 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067710983 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076835404 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083660771 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081147639 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071515682 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079818099 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068518874 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.080252508 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068397982 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075916746 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075951029 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081273876 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07234167 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09835872 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081866123 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068558929 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081761429 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07538324 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070603321 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068733482 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068738382 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.0675724 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067692327 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090131315 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074861485 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080172313 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069059684 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067336728 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072807589 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068908137 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071810423 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076856808 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071384293 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067969438 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068090644 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068376571 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069244952 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072169123 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06865881 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067893073 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06733178 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075312922 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066834113 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074398485 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070187807 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073137313 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072392784 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072471305 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074943577 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068331722 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075110839 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074145735 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067756267 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080332897 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07967789 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071601521 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079312337 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076232385 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074546989 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071804499 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067474403 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067038716 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068220338 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079232051 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071399585 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070279965 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069004086 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072718315 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071721559 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083244923 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08303142 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081035223 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070455603 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068320955 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071801854 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083039522 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073188029 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068220458 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069173199 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067223432 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073232381 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068494155 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072800016 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068044812 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074790903 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070529352 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070255679 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075862379 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068154763 seconds)
  done (took 8.929890802 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070824161 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069803864 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068849813 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068908883 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069624353 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06941874 seconds)
  done (took 2.239184997 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091156809 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068545216 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080342029 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068335981 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090095962 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074969762 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075612648 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070313025 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084682343 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078788461 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074789895 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077309594 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077431984 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070210251 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074707419 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069671324 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074590999 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071727149 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078720462 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070733575 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084714367 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070505263 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070602645 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080413388 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071544404 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069798543 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069676327 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.0789089 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078170098 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069924378 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06985109 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.0713449 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.077064248 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.070143763 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.075269937 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076914743 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068569829 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073760353 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070565745 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071297256 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.077082732 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070581199 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071107942 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07378459 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070053343 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076909145 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073884834 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072246201 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074275355 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07372113 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073767114 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069113929 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071349168 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073742778 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076797959 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070155513 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073681849 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074296564 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070043901 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077056096 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068473291 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071152754 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070179783 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071024632 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073188139 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073985276 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07695478 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07016379 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070158963 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068691202 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073693845 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068289983 seconds)
  done (took 7.095196993 seconds)
done (took 29.220952678 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.546739635 seconds)
  done (took 2.309366366 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.618350984 seconds)
  done (took 2.426026728 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.333869682 seconds)
  done (took 11.134895331 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.344201276 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.408788806 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.746764203 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133648689 seconds)
  done (took 3.468040475 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748028132 seconds)
  done (took 2.565552701 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229907826 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220202989 seconds)
  done (took 2.268779279 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.334858575 seconds)
  done (took 2.139209783 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.157401953 seconds)
  done (took 2.960534316 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234843511 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163416919 seconds)
  done (took 2.211947247 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540728916 seconds)
  done (took 2.348760469 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.277526049 seconds)
  done (took 6.092644369 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233079943 seconds)
  done (took 2.080363972 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231081456 seconds)
  done (took 2.045204967 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.089991847 seconds)
  done (took 3.897108329 seconds)
done (took 49.769905026 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084717132 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087208874 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08758207 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08235241 seconds)
  done (took 2.123719296 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075281134 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071494799 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074363504 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075224951 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07290021 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073587841 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073946788 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070987936 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073098956 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071710443 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070141043 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071411495 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073941083 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071171671 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074392933 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074727172 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071106431 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07152117 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073593138 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.07112221 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074212768 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.07159005 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069372713 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071155158 seconds)
  done (took 3.55715989 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079259718 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07300484 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076599308 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07185705 seconds)
  done (took 2.125473131 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077644849 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077317471 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08674407 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090957915 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077038172 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078250365 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085161645 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085097385 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067183296 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088233391 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068998606 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067811353 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067902854 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086813701 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084658031 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063850889 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065412671 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078822872 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077633957 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080306847 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069961071 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067029726 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077884536 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078153114 seconds)
  done (took 3.673339938 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083027719 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067028436 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082543854 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092361322 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092991697 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066594018 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080478151 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093890041 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128778127 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066776925 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073147887 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066872046 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105829439 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066894625 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082046753 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110253849 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113249204 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071107438 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100092553 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066760863 seconds)
  done (took 3.545691369 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07672332 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070919845 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07124434 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066662435 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077506116 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074077386 seconds)
  done (took 2.276635932 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069266314 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069102066 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071046474 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073282979 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069122092 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068821675 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068436417 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066986646 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067152081 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067971188 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067903077 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068557702 seconds)
  done (took 2.65906998 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155686848 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070101106 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071135329 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067243632 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072238559 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069269288 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082265172 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069979113 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085116684 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068086925 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068216377 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070467437 seconds)
  done (took 2.782126793 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105228713 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112108224 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146975147 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118798514 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117549657 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098218465 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126856064 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096485255 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161058289 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138609511 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11803737 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095175914 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087744678 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070643435 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101208101 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119896447 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138662172 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075325933 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119255847 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.170977361 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134227587 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136553995 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149845995 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118054184 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091674397 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149761749 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098629712 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103929524 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1263113 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12822904 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12027716 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099116508 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073367512 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.07232217 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150725012 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103842282 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121598094 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094043456 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106331477 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089302919 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108986736 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070745391 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088302181 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.115266523 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086221158 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132799112 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089514995 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116884145 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082707019 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139274413 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125597914 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100785304 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087162151 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106116483 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.295669932 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114049763 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135868267 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108850358 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084365995 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119776392 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103984056 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102316876 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108651875 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081580134 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178876296 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090016584 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112856922 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113374877 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095565954 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096749403 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108566032 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137394721 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126954726 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12696379 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140202328 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096942369 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123876856 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101206956 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130070912 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106028725 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074123804 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122398945 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129841444 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100592307 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102097821 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132062686 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093213245 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078697366 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100782776 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120342181 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082186856 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113465721 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082211753 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110178451 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135761752 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098757237 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113474742 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118546415 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079334391 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157691406 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110156786 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074439553 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118847516 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116211742 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159742108 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.257366793 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078421627 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100887893 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10529063 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149881884 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108568312 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081293532 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111392238 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141091739 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096246995 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170490644 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097391323 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142318646 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11435133 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088831802 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076533185 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091263993 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114053649 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108953742 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113762331 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091934638 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085570306 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088567916 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113492136 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093726948 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082197757 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114727658 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103586735 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076488811 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090167649 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.081079802 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143467066 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079262677 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140566299 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126753438 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079836878 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107608335 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099288859 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109412206 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099060643 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118165909 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141569445 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117558756 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09145437 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.095176228 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110256234 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145107938 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128556048 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094240405 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077964266 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102183878 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113401642 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098741949 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127959629 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101630775 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110321244 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104823686 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144645751 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148179549 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102943029 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.264477654 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10869076 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124511275 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07807185 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156804938 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105591721 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118950193 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086392904 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142212343 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115094392 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090785748 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08866334 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101474147 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104984676 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107467461 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144163073 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097070049 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07395314 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094541615 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14582512 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077751097 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11134521 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092111235 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094351366 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119473211 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094798984 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082957869 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.07063967 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130705144 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160876602 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071046111 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11560891 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112840361 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104056285 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123093748 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070570835 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120143956 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13960879 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119555587 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142442647 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14886702 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11802868 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11956218 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115570177 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107325107 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080820498 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126322546 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136072353 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097959272 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094064363 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137460881 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119000939 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13778587 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.281206181 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116409317 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106592056 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1087315 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103788455 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102720899 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144390965 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121687906 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125857717 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08700306 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107213113 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118600995 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136703892 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083237956 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143143406 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084943142 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119603157 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078660916 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125139864 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080413766 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112815263 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080718347 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100859307 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070722388 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076322653 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142433759 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113305304 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107641047 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101751087 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139031417 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138009462 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082693531 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109381995 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117066838 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102420389 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117676355 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11041296 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090270276 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096456398 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110483657 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087014831 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082933876 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116257701 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096000711 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128305317 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08584831 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076667069 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142669268 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106411848 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096935487 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078904563 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109872315 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123584591 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094343286 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088811551 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116481707 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105724184 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143009388 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092402963 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098776099 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.287706535 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08168855 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09333722 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071938028 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086480853 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077382094 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128196651 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07759007 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117442314 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070287996 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131030856 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087994531 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094330909 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103036196 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112745344 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128573079 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095903334 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14135246 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09108271 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1195764 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108992057 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095855191 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089119976 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105808396 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102490085 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123567645 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097335736 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124875294 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146543801 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106069384 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14298545 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092566542 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122852141 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107974564 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125095231 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11403799 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149260701 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140014129 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113839922 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11317107 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076540724 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096264407 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10661017 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113359597 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176585067 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127599867 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073660111 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107875687 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095833055 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110472288 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106476904 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083952731 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14890709 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10380925 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089591467 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115120009 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.252713447 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10548082 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077956673 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096308656 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101775765 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095269761 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099234584 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116187159 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128466645 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114356487 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14323488 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100560897 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093723149 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119318355 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111345553 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11162426 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086835798 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08774881 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138529495 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119862491 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129544846 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101032627 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110877869 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113169751 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101882362 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130181484 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111624601 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.128905927 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081781535 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077424896 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069751167 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073618304 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124694699 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110229333 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113297357 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100486688 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073944921 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105005434 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1079813 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073682007 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090230594 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095468154 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101137883 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.09308089 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109037068 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115024118 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092665279 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106339626 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100747656 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148085531 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101505489 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090498151 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145735304 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15746745 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093374246 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09850944 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075618283 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083919411 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117179341 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151463195 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.313714225 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079307377 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08796655 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086805373 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087832891 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072799732 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087149513 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090793089 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105386841 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100217635 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114514436 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105292855 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077138364 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104595898 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101141265 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093617214 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10529187 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119486252 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125846716 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.142304559 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11171124 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108453883 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077472063 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081936697 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077251061 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081050256 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103257518 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080498496 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077810949 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144663025 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09384343 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106686734 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110408722 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09127646 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076992083 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136115044 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070388422 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136540902 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072540545 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083640443 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083807862 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080647489 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095543676 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141047195 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111113602 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114854159 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107588672 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106545697 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142343805 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157976445 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081371745 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144874987 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076903166 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077374527 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07754718 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115499746 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091602967 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116289594 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143326494 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092572381 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105663622 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078774753 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.307419713 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098354329 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106275122 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088501385 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080883444 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143814061 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081197904 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.08156423 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091531166 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112310302 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074084473 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105357722 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086153973 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080965017 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144208487 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631202658 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091189191 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077037802 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097593766 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143206761 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130336404 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096244018 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109318852 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119394551 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101043374 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096749972 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109417416 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183817638 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075602444 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097184459 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105295391 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099779361 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103756328 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099971978 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08935793 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093713057 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087934014 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081024424 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110364752 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090219469 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098054174 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108573023 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084247165 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088134695 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131503833 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106341922 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084437371 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089678668 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106748149 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09009131 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102785229 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070207835 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115146922 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092323561 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118951831 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095644117 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109055643 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129026808 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091671853 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140210073 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.109203529 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.287161469 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091644432 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080995041 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128545229 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08954028 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079409061 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14542256 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.096510737 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093936801 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105277827 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097766978 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114817591 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118641364 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112879111 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099000063 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080461946 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101445506 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103615148 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086541062 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079566789 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075757399 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077829542 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108685185 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086742745 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08493576 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115395302 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09092009 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105189457 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.1017679 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124644229 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084979827 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102867102 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111543573 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094086229 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11134035 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102155956 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129707995 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176865011 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12775458 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12981203 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135468388 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077982714 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077284649 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06977092 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116043391 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080373324 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090328577 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082497368 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13569266 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082859288 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113187542 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233902644 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081733264 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095886355 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098281945 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071115468 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08476319 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109540847 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088845618 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082466833 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121355134 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084952011 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129891663 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.276445281 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101515533 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096334143 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08231889 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114367127 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106264011 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130012981 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096453847 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076585303 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115914893 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104760653 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139784852 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.0744256 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082384683 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130362957 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105118507 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13393161 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081570105 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152032719 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143893913 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100973465 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13515686 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072626572 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084761432 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090793247 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127304252 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086524094 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11358644 seconds)
  done (took 69.039900941 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.15048732 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142919557 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082641824 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104767425 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187988518 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198161993 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120614874 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097458115 seconds)
  done (took 3.078664829 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069335125 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083810852 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081994926 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207621922 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109385931 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068635307 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074147516 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083312031 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068711571 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068104751 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103147125 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068476433 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068528524 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372006461 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067892612 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072903011 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068900292 seconds)
  done (took 3.706010634 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.334196737 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.393831103 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.254836399 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.617654092 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.142692832 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485787307 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077792146 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083600041 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.571969962 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372885628 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131970871 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088742665 seconds)
  done (took 18.538124358 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076871039 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079512941 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07940598 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075804576 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075640395 seconds)
  done (took 2.358032898 seconds)
done (took 121.304342651 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08471694 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172155187 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068559265 seconds)
  done (took 2.250280444 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083033987 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081335434 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081684621 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079208621 seconds)
  done (took 2.30858559 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07579786 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077310005 seconds)
  done (took 2.126593103 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222744448 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177748673 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09127643 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082732805 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081018995 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.085560962 seconds)
  done (took 2.240296203 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072880686 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072426053 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072973843 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073593987 seconds)
  done (took 2.268076683 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068528997 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067247263 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069678779 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071966587 seconds)
  done (took 2.256320257 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086038483 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087524522 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117274687 seconds)
  done (took 2.273113617 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084217397 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.0837821 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.0789121 seconds)
  done (took 2.226600346 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109863393 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097794894 seconds)
  done (took 2.183186422 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080996666 seconds)
  done (took 2.069897508 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09103546 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098521221 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141028875 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108951583 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141493163 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127695632 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078325866 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079441418 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07479974 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074183717 seconds)
  done (took 3.0002986 seconds)
done (took 27.764291083 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07984552 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368638661 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360801689 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088208162 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674235742 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357953401 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.995089626 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09204022 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102045187 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069498173 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086276232 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650954792 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.986483837 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327538457 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.972002668 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326019579 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653235374 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07001662 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069481366 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070132501 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983003913 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071221278 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069844078 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070568549 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652537995 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375637327 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070337256 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331383865 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069187469 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07365201 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358638136 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070968372 seconds)
  done (took 16.553392118 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071132361 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124088289 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073324559 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085527099 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071761822 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071108591 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07275795 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070527496 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114455826 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070084177 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086873953 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06937705 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073356207 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071200173 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089564054 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069828427 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071959391 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07366195 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069848708 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070491461 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087904319 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06931047 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070510576 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070796805 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069908511 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082570734 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070552626 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069578983 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069833079 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073963579 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074108255 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071271867 seconds)
  done (took 4.452101785 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122596906 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126923232 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074646312 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110716255 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119359331 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071787348 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152021575 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093167402 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116373684 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07048259 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087237957 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06978633 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10488577 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071219734 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090314543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069867158 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072240593 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070491964 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069793557 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07046432 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08833889 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06949195 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070158821 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070641843 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070408751 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084656946 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070862176 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070556122 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069731415 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073857642 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074560924 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071039306 seconds)
  done (took 4.722213646 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071088135 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072653632 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080896169 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082019341 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067948158 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070230085 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071426616 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.0682649 seconds)
  done (took 2.587329658 seconds)
done (took 30.328000541 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080508459 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.0693454 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072403738 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088313039 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075016334 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07153743 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066065014 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075582618 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073088271 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.0731835 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074806982 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068576371 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07133363 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066455577 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07411087 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067638862 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073984136 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071734142 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072254071 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073802389 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069899228 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073102007 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076175315 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072319436 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072118306 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072310247 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076488654 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073386429 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067797383 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070570768 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070099048 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082186933 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074038126 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074360415 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06775183 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067804247 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07172658 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.06966234 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074411126 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076516212 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070112077 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076989672 seconds)
  done (took 5.021629611 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089678475 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095326844 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087596886 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083292366 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108036759 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083438591 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091472549 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080742514 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079741417 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091419216 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075256171 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080849144 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082478737 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077040417 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080138843 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076054649 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081196303 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075398367 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080441955 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080446921 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092480858 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073107207 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080274212 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081706946 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075409884 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081679346 seconds)
  done (took 4.180231432 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074451831 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089713714 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09393472 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143037018 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110620414 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08392079 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083584663 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098642732 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102400367 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069287422 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07384884 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096089674 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098158694 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076473012 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108243333 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088259447 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081784064 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071457055 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076589362 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103978226 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092316968 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088479089 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101893985 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089191967 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068915521 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078671797 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076662434 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086078726 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076891663 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082152217 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073837586 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073133262 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070358452 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082183904 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076687786 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067545712 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091392456 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08239297 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085077691 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107002441 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079894032 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07120662 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.09979109 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135098118 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06889755 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072291881 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072987418 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081987363 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070778131 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099412729 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087642819 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068950301 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087823969 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07079871 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070627306 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085824888 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070830718 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071144551 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081765419 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075334263 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089916413 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074707174 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090817934 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069191267 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081199217 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070749982 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071073387 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067982105 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105455757 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076777928 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12205382 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070534704 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067468424 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081797464 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08060604 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075615808 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068985188 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088845737 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081576166 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.0730983 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081001025 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072235795 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072564039 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104854484 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06846506 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067512991 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06749681 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071385573 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072742773 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06959547 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082572346 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068662159 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072717394 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084647101 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069194335 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069935919 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071439508 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070502773 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068659513 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079709499 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073475188 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070904295 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081702726 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071070376 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072322378 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08408974 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079007046 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068830226 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070404933 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071891006 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071270041 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073932064 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072982833 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071635551 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076363599 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076732581 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075437392 seconds)
  done (took 11.471405387 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165110168 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155286989 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070509119 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149023175 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077537246 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07366874 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150538056 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08919641 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070448829 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070602411 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069216529 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09760447 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093382036 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105104637 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073784248 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070478835 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095091917 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103308979 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154449689 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148911732 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093456112 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077870591 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072135457 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071186485 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071265961 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078662013 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086532075 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077700925 seconds)
  done (took 4.773253297 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076947227 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085361382 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074104338 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094120584 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088253855 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070232736 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071853298 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071424763 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086872536 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077064221 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069869615 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074266628 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073800084 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070762681 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07065921 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076717653 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076471702 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06927079 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073738279 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074693296 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080560847 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095476969 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074493405 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070286225 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072918875 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070915938 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076817346 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080202864 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070177744 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100152044 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067545083 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074177409 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084189405 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071298401 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069826146 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070436388 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070769324 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070539086 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070393074 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068218028 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068312116 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074767518 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068909439 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076491516 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08426346 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077411911 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071458554 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075818314 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073022517 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067196556 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073513868 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073376837 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072841392 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078055788 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074103377 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072517881 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071649477 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100306141 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076304 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069807107 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068637768 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068374214 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071681808 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077726571 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08685154 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071742346 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068419444 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070320585 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074819339 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084238718 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069678923 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075188895 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06729892 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070171256 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072410415 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072672526 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071495248 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068170219 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069688277 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070008003 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069976129 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069726252 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069437505 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072188854 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067688022 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068249047 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070284797 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.07138914 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07657125 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068795645 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072898678 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071430075 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06876355 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072573233 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074841804 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072532256 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.0893883 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07870133 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070552304 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068004762 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084118979 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071920834 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069387431 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075240487 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074197893 seconds)
  done (took 9.855531423 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092362419 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071415262 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089129941 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096090136 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079798619 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075361533 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084293683 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070646564 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086270732 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069293904 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07853909 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06817511 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083209241 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078846029 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071300629 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080416783 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07238647 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090202297 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084301956 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068473031 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079359895 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082335538 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082911636 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087657102 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087364363 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089025469 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082780098 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072920513 seconds)
  done (took 4.323177442 seconds)
done (took 41.631230828 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.102308467 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.256515609 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.084004833 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.347302291 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.135127058 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.316178239 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.312771193 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.082522118 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.10508167 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.13309885 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.411367409 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.441011099 seconds)
done (took 69.806005837 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.170402998 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.228146068 seconds)
    (2/2) benchmarking "String"...
    done (took 2.30044347 seconds)
  done (took 6.549004744 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.687919537 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.088029696 seconds)
    (3/3) benchmarking "different"...
    done (took 2.136389345 seconds)
  done (took 8.925873361 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.190313571 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.724652385 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.333897957 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.087912847 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.090932332 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.495916232 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.8900704 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.560345575 seconds)
  done (took 34.202466791 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.284643439 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.286475005 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.833313225 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.874683093 seconds)
  done (took 17.343752655 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.696335449 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.348336016 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.349875133 seconds)
    (4/4) benchmarking "different"...
    done (took 2.341077127 seconds)
  done (took 11.809583443 seconds)
done (took 91.307583137 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.090122341 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.387001832 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.101045128 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.244152352 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.098518712 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.116263164 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.098911158 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.132017767 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.089766062 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.091003474 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.509099382 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.091462253 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.092631598 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.129242868 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.093889358 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.165214119 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.45734376 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.107337751 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.139382028 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.626950653 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.618994402 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.111525858 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.105351969 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.147058581 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.110396969 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.13799504 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.593192017 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.101151637 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.714064652 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.095613221 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.097841013 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.101113885 seconds)
  done (took 214.812384382 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.092298593 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.222309391 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.278759415 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.128121488 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.674946742 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.285578212 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.231208698 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.749038131 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.095431796 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.115277217 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.422360843 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.091330288 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.431824146 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.043307198 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.088345915 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.138761263 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.341935335 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.433046334 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.092016644 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.271742966 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.11401034 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.199125707 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.161219597 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.398697249 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.108016914 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.193203578 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.096782884 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.124015547 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.282845342 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.332861333 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.099189242 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.104941958 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.224801754 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.960390476 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.102598116 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.094419271 seconds)
  done (took 182.846439034 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.471586611 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.113277513 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.158075655 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.326731845 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.866535848 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.843683295 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.094438222 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.095007674 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.09516823 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.102407655 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.097279571 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.164023079 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.591162742 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.108082839 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.101412145 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.095817195 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.625149562 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.097260568 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.095050261 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.095095433 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.158463042 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.468450983 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.231213676 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.098178671 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.107884524 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.231595056 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.105901231 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.094361209 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.095617246 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.231976235 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.100573324 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.175055051 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.233962873 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.100346994 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.10522823 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.177182637 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.103697458 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.599946232 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.096084166 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.09768507 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.101205923 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.161695352 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.098725488 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.187637683 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.18633918 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.099337602 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.112154388 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.16975885 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.786179664 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.102433067 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.09701917 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.096285996 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.095585481 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.098067487 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.160835646 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.099068127 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.122122836 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.753356602 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.103029613 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.095793827 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.098645753 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.096945727 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.098572128 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.105310613 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.137869346 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.919004494 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.335280419 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.489042598 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.911981853 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.102038292 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.863205898 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.159250237 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.100908548 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.176342485 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.097930062 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.097418913 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.097728308 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.09810286 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.241243341 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.223129274 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.09995754 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.234053041 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.102777976 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.099180683 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.703556536 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 23.005711446 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.100006874 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.109630406 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.158909766 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.099674083 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.100108063 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.106241664 seconds)
    (92/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.098350756 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.230379495 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.101298474 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.099638207 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.098730552 seconds)
    (97/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.099096765 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.204275527 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.102125699 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.68286629 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.325495611 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.175393584 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.3490773 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.344041495 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.103257084 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.099822416 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.114681424 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.101721069 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.09967894 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.113338832 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.102272059 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.100842759 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.10333683 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.102539764 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.101405946 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.103196976 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.114932447 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.10179418 seconds)
  done (took 447.894032469 seconds)
done (took 850.093005582 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.803207572 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.873677246 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.716044875 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.748973048 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.713278573 seconds)
  done (took 15.884888556 seconds)
done (took 17.916841945 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.134194001 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.118387825 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.108077592 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.168779124 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.127041568 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.113439724 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.149295409 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.150078238 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.13290652 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.114126344 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.158363396 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.118023435 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.134053579 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.137971303 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.182419233 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.142814606 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.118838309 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.109855033 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.173568211 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.118864993 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.119451257 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.115870214 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.115319603 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.164664264 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.197852296 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.127245735 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.11433327 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.163655361 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.127879858 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.163534135 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.175805398 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.139332537 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.149152203 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.192116127 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.17583305 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.198399771 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.125797776 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.188666367 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.122794488 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.203299926 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.173293134 seconds)
  done (took 89.997335949 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.114285788 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.243154344 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.32270355 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.145191336 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.113878144 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.3266463 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.170293197 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.2407712 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.243429865 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.326440154 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.358204908 seconds)
  done (took 26.641889585 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.114660406 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.248510124 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.332248369 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.148879619 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.136967087 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.327554915 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.17648492 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.241210866 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.250672707 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.345936889 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.334362022 seconds)
  done (took 26.697332546 seconds)
done (took 145.368771223 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.484376583 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.134755677 seconds)
  done (took 6.652185294 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.106696782 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.125170092 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.259253676 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.107409069 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.108581265 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.108702051 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.109294805 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.107585706 seconds)
  done (took 19.067474836 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.107904868 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.108125266 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.10768718 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.107708527 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.107417662 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.107524435 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.107704991 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.107592391 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.107378584 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.107912805 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.108179102 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.108333358 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.108846466 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.108031214 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.107987746 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.108520973 seconds)
  done (took 35.763369953 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.108431154 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.10773038 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.108055284 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.109015173 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.108702126 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.108858088 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.110708844 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.109255817 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.109231369 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.109603565 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.109268714 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.108580455 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.109354904 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.109676011 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.110240362 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.109974833 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.110097876 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.109163645 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.111328721 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.109141947 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.109808905 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.109827807 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.115014138 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.110828895 seconds)
  done (took 52.670879518 seconds)
done (took 116.197414504 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.291316657 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.643085104 seconds)
  done (took 8.972161006 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.113939177 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.109640086 seconds)
  done (took 6.318220465 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.110757416 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.109700442 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.110537257 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.110769412 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.110498763 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.092417137 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.097023157 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.109774819 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.110823269 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.110660367 seconds)
  done (took 23.111669044 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.110893433 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.110826751 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.11088772 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.110910086 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.11114134 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.111601812 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.112037584 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.111931996 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.111654065 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.111590131 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.111999796 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.112204943 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.111651933 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.11243813 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.112549846 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.112732192 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.111441696 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.11234246 seconds)
  done (took 40.048987822 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.111585919 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.112546106 seconds)
  done (took 6.264080076 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.112454307 seconds)
    (2/7) benchmarking "second"...
    done (took 2.112122178 seconds)
    (3/7) benchmarking "month"...
    done (took 2.112069325 seconds)
    (4/7) benchmarking "year"...
    done (took 2.112253258 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.11251947 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.111895863 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.113765866 seconds)
  done (took 16.826833879 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.113878668 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.256412146 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.307945846 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.725456243 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.113701508 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.115676454 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.006875722 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.11803712 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.119425779 seconds)
  done (took 22.917210343 seconds)
done (took 126.498950052 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.943971944 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.115148024 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.407643198 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.177269646 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.223556073 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.409346737 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.141499826 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.667194104 seconds)
done (took 45.127523798 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.205060036 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.112203366 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.1469711 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.147771022 seconds)
  done (took 23.448574247 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.11360645 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.414967394 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.135260974 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.076103595 seconds)
  done (took 23.794483997 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.48691978 seconds)
    (2/2) benchmarking "read"...
    done (took 2.455968905 seconds)
  done (took 6.98894867 seconds)
done (took 63.482037909 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.115311501 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.113980554 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.114843657 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.114780841 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.115440021 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.11557059 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.114672249 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.114323437 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.1146319 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.114831037 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.115673921 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11465695 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115425867 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.114971033 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.11627396 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.114442315 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.115538316 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116464112 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.116081454 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.116733189 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.117287877 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.116408065 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.115944682 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.115744225 seconds)
  done (took 52.81387015 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.116084384 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.115991894 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.115913711 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.116172766 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.115594102 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.115864557 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.116518359 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.114945719 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.116436931 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.116506649 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.116211021 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.116806005 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.116545686 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.116048158 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116875262 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.115892081 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.117353042 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.116450177 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.117149042 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.117118709 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.116606061 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116350433 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.117794205 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.117375595 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.117715309 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.116322341 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.118400276 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.118186878 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.11735577 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.118680429 seconds)
  done (took 65.545219417 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.118119585 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.117742548 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.118497742 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.118552856 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.117460568 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.117982685 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.118170684 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.11846725 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.117113731 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.119571727 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.119018148 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.119340569 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.119233404 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.118665638 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.119061807 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.120056273 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.110918951 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.11205578 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.111938804 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.111896395 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.112673074 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.111975817 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.111593332 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.112243248 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.112270044 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.112623394 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.111881531 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.11219573 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.112384132 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.112558356 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.112769617 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.112305509 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.112829158 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.112500447 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.112541829 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.112954785 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.112822467 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.113653098 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.113542799 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.112859682 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.113603201 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.113344915 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.113270223 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.114306586 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.112798434 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.113798833 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.113572447 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.113941913 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.113401756 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.113580658 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.113459486 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.113383587 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.113773938 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.113678862 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.113812571 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.114319308 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.114600497 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.11440136 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.115272924 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.11497073 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.113801081 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.113931958 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.114496989 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.114662397 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.114539217 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.115688005 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.114431646 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.114837024 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.114292765 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.116930869 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.114738979 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.115455406 seconds)
  done (took 154.298064032 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.11487208 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.114351458 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.115103068 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.114956713 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.115642725 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.115138966 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.115466086 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.115283437 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.116630231 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.115650209 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.116546663 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.116162503 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116161127 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.116504665 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.116748877 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.116408684 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.116220923 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.115612824 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.115876273 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.116454177 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.116266147 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.117431301 seconds)
  done (took 48.591668323 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.117149427 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.116350651 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.116296169 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.116774219 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.116792848 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.117355413 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.116779168 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.117384802 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.117045352 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.117494085 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.117093289 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.117671877 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.118250391 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117691985 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.117143869 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.117226106 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.117599869 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.117476449 seconds)
  done (took 40.152021391 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.117356097 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.117934747 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.118769089 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.117475404 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.117629637 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.117778058 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.117115667 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.118591679 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.118011361 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.117329339 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.118019177 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.117828106 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.117641894 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.117744297 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.117605825 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.118320536 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.118193027 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.118812725 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.118182569 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.118874731 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.118703777 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.118970921 seconds)
  done (took 48.641317814 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.118025501 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.118331289 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.119268315 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.118739967 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.119534008 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.11854076 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.118746714 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.119705654 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.118815062 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.119798535 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.118380851 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.119877004 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.11960701 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.119790447 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.119703077 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.119449393 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.119620274 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.119888749 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.119509181 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.119945935 seconds)
  done (took 44.431087659 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.120276989 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.120512409 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.119772772 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.120343182 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.120296953 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.121731934 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.121372636 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.12058437 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.120534574 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.121228879 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.121212129 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.121146026 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.121401682 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.121382265 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.120751413 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.121261296 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.121402216 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.121763693 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.120994953 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.121654177 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.121949005 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.121713659 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.121999617 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.121606954 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.121254941 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.121984325 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.121361677 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.121985063 seconds)
  done (took 61.440729364 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.121150375 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.121732773 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.12188033 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.121600749 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.121599318 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.121911427 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.122388745 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.12211689 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.121140172 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.121543305 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.122496233 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.122347007 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.121888006 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.122259213 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.121894837 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.123036538 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.121820976 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.123152328 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.12251553 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.122307754 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.122864165 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123354704 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.122257824 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.123001214 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122016962 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.123137487 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.123858133 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.123345191 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.1237752 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.122730913 seconds)
  done (took 65.720205869 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.143203314 seconds)
    (2/2) benchmarking "in"...
    done (took 2.141331032 seconds)
  done (took 6.333479842 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.123192287 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.123456779 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.122802175 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.124005056 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.124104502 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.124480874 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.123831159 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.123590949 seconds)
  done (took 19.039221353 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.124499377 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.128503096 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.123606674 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.124210075 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.124839405 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.132948308 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.125574281 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.115278176 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.127227225 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.125960067 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.129408617 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.130463753 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.134074139 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.130645382 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.124479627 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.125326028 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.127271846 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.1280717 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.127421966 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.124549013 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.129672892 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.124787245 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.124408296 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.12582274 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.120666384 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.124174062 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.137496198 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.127439713 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.128524265 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.113861441 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.133284087 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.12609692 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.126537048 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.129157707 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.126541362 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.126196847 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.132830849 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.126891896 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.125933468 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.12622888 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.130263136 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.130216674 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.131439381 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.134713091 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.127516176 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.126859199 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.126898212 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.126891449 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.127037102 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.132269742 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.125080118 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.12897155 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.127530458 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.126740456 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.130818065 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.127993578 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.128072651 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.130654474 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.135899197 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.135121151 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.116082613 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.13500271 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.117082399 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.119977385 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.10205349 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.136486561 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.124620216 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.130549732 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.128286802 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.128320229 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.136205695 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.129318417 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.128667992 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.129117907 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.143774504 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.137207875 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.128734406 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.128341239 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.116201043 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.128692981 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.118649653 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.129780773 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.125492837 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.128243046 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.141072523 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.157043305 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.129791536 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.130072344 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.132176021 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.130650198 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.135204221 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.133197359 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.128815302 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.129189887 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.132217573 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.13262139 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.129676157 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.13016572 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.129095267 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.138842684 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.129578178 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.129007255 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.134821665 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.139190318 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.129004728 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.131303397 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.133207744 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.131253962 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.139078508 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.13083664 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.130439393 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.129977741 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.131796186 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.135605205 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.130441058 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.136070384 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.140716651 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.139051526 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.132420966 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.137091026 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.135620449 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.121865486 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.142536313 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.155647172 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.130394797 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.136846067 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.138112053 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.144803721 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.136429513 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.131337164 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.136237774 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.131725455 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.131580389 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.134945406 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.131899193 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.132733872 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.132334403 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.132467377 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.132955396 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.133300455 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.132587956 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.135525054 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.136533622 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.133492504 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.137897729 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.133429636 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.136805697 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.141173163 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.13344606 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.13337002 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.133283216 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.136540729 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.134658328 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.135335554 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.133059605 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.133241567 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.133502339 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.134279229 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.136413397 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.134002678 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.133294178 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.134363289 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.13865329 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.133831275 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.135172745 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.134525345 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.134896733 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.134846347 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.13651868 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.13591432 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.137695382 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.134937 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.140525547 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.13395508 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.134865525 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.13495006 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.134550751 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.133905449 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.139944513 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.147457316 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.140253677 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.14671288 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.135767686 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.144075787 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.135083246 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.13845303 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.138209115 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.13605655 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.135693777 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.135622855 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.135922093 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.141577487 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.158224169 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.147541314 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.140095374 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.137222412 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.141713384 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.140306651 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.143702442 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.135902029 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.137929474 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.139569196 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.137013794 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.135863426 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.136786817 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.141556193 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.136603621 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.136666 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.142401064 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.136545169 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.136630822 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.138910795 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.136677774 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.139621638 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.13667708 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.136742967 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.137990543 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.140601947 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.146336198 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.140509815 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.13660767 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.137369476 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.141280791 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.138290697 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.13761205 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.139514389 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.14206033 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.137030238 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.139843983 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.147218347 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.138937639 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.137885712 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.138535259 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.138336482 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.141834992 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.13676016 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.142989698 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.146361573 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.141644655 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.138845882 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.145428025 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.138507413 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.142039354 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.139273956 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.140783615 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.138615269 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.141448495 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.139429465 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.13910219 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.147557145 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.138692088 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.141264392 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.138736107 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.141777867 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.140057519 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.143215659 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.140837599 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.144333431 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.148309697 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.146220283 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.140504915 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.143518181 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.143836006 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.141104005 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.144987391 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.142534469 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.155406255 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.151635947 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.140221058 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.140967627 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.141264398 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.144045634 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.140108972 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.140711561 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.149349187 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.140886756 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.140931554 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.143884718 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.141873057 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.14352196 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.148430573 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.143548439 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.145279667 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.143684973 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.143238503 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.143248947 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.141889761 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.145487686 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.141299812 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.144562064 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.146348739 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.141296164 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.142825898 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.141107147 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.151622675 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.141286365 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.144094785 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.149988014 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.144295577 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.141741507 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.144403343 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.142279978 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.144566531 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.145221955 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.141382634 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.143748753 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.142933868 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.147101323 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.155754012 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.147650021 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.15242168 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.145885795 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.155645119 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.143232166 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.143690659 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.143676154 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.149175768 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.151967171 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.143585753 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.1434399 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.152225866 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.14479153 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.144467807 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.148247793 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.143331248 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.143773624 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.144532101 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.131928709 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.151358636 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.148689269 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.144104217 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.144744361 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.14419814 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.144575415 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.149071404 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.147925792 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.146551419 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.144937708 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.144338336 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.144316782 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.144702416 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.145190587 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.145446757 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.145801459 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.144575809 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.153378798 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.146223356 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.144940262 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.151603526 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.146014852 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.154585265 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.146409526 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.146010282 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.14633848 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.146288917 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.148659127 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.146251981 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.146594257 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.146263119 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.146068849 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.148331291 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.160221476 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.154569773 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.15009545 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.149388688 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.146404171 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.149390319 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.158111808 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.171947482 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.147125186 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.150289488 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.152324402 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.154478194 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.151016744 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.154481632 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.151679525 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.156312174 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.149710325 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.146516478 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.152441155 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.161550903 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.147888159 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.14743187 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.147540164 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.153192734 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.149808184 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.147426842 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.148745683 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.151717372 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.148493468 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.16096833 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.148241749 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.149782441 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.148051791 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.14796636 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.148466294 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.147977986 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.151001572 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.151377314 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.148692472 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.149021283 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.152385923 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.155479204 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.148738051 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.154870326 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.160704541 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.149138599 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.148918604 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.150828507 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.148923771 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.152102054 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.149226556 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.148851054 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.151604798 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.149451947 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.150660771 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.15466798 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.160548542 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.151940146 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.149677669 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.149431525 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.153999757 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.15008528 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.150335782 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.153229279 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.159644353 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.155607786 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.164475941 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.161522102 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.151372094 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.151715924 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.159913863 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.15938147 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.150805874 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.149866245 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.150300726 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.154616266 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.154377034 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.152811249 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.150670372 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.151897077 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.158261165 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.150849881 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.151952549 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.151666353 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.151372806 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.154987157 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.154512371 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.1583114 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.151781212 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.15168498 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.150430964 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.15316323 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.15429878 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.155115678 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.152088374 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.152519551 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.155033274 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.154872485 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.155982784 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.151816125 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.152943142 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.15574151 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.153064445 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.151869039 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.152341387 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.152756631 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.152097487 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.156992691 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.160830584 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.153189388 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.155470329 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.153369264 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.157992415 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.152519594 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.152428059 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.154675739 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.151737518 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.160869947 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.153437847 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.153443009 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.153382117 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.152896275 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.159772821 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.156735986 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.159064894 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.15364583 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.153730656 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.153668107 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.159003288 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.163943607 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.158626928 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.159097816 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.16193746 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.159529519 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.157361755 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.154820912 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.154044475 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.15384343 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.155186564 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.159130266 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.157115432 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.158354023 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.15498492 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.156905823 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.15581929 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.158237217 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.155066096 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.155053359 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.159790041 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.166959045 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.164610085 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.155523519 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.158756772 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.155882606 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.160447332 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.167840675 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.155860309 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.155585074 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.156241667 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.158950342 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.156751215 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.164703755 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.165087637 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.160630995 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.126839625 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.163498355 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.175267689 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.159889263 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.168499837 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.189550383 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.158519873 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.157460471 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.14616848 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.157241667 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.15749291 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.159498379 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.15747272 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.164036081 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.157837422 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.15698533 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.165455111 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.157324523 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.156871825 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.156941488 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.159247042 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.165410257 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.156565465 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.165259738 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.15777013 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.157738644 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.157476531 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.160703547 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.157331996 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.15829331 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.157707841 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.161212419 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.158571553 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.158278354 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.167385896 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.158041356 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.161587956 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.172593826 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.170195511 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.158241254 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.158428661 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.15856035 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.164245921 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.163322397 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.158286093 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.163713531 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.167382936 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.164245556 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.168354054 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.161916947 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.161033784 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.162127531 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.15953386 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.159586637 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.172860514 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.172444689 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.159167971 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.135595597 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.163711152 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.159144565 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.157761002 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.166439512 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.162851155 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.163313229 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.15252224 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.151234375 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.160718119 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.160059673 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.165725735 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.157093851 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.160983224 seconds)
  done (took 1280.318162636 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.15931051 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.160893711 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.159615707 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.160174819 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.159752854 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.160588466 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.160418858 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.15985283 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.16048168 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.160563007 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.160886602 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.160902577 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.16066193 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.161049764 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.160955016 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.161552173 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.161307792 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.160480092 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.161703703 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.162188758 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.161801369 seconds)
  done (took 47.459342193 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.161975554 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.162061468 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.161169537 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.160966313 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.16203695 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.161051645 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.162192919 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.162131112 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.161484486 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.161473597 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.162150662 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.161215874 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.1620745 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.162659303 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.161845364 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.162011447 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.162011014 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.162156868 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.162462456 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.161592062 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.162115509 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.162696289 seconds)
  done (took 49.646787111 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.163066778 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.163231812 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.164981673 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.162989192 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.163078527 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.163679797 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.162407736 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.16526062 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.163205742 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.16328818 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.172786799 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.171774483 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.163149539 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.166435215 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.163632077 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.163512484 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.309622203 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.165116303 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.164391594 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.163822496 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.163547292 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.17206394 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.164267132 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.163864388 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.163324604 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.164487644 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.164239601 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.164534858 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.164543254 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.166133748 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.169839493 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.163771384 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.166086842 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.167982119 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.165041889 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.16582559 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.169349636 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.164911783 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.164688855 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.165280456 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.176966133 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.191062303 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.164784694 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.166290175 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.173716269 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.165530783 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.165296877 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.171228214 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.173358444 seconds)
  done (took 108.389746437 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.166116899 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.165584824 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.166192107 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.165156574 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.165385625 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.165622545 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.165928364 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.165165591 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.157401208 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.163702055 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.162838617 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.167167162 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.166715056 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.166647928 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.165895574 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.166144271 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.166847584 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.166813244 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.166196546 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.162610478 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.166361613 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.166815651 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.166542218 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.16673589 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.166941013 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.167324157 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.16738724 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.166934123 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.166828054 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.167399633 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.167974741 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.167777052 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.167367188 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.65880009 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.167715758 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.167958927 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.167770737 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.166954393 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.167675584 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.168175007 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.168134656 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.167727136 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.168061415 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.167997803 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.168003942 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.168646166 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.167755496 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.167594974 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.167701333 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.1682512 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.168833219 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.168103429 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.167560606 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.168232559 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.15800225 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.167095966 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.168289525 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.168683547 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.168744775 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.169288872 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.16881419 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.168461411 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.168395189 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.169508853 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.16827038 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.16889235 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.168680288 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.168517626 seconds)
  done (took 149.935332935 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.168801051 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.16973438 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.169434179 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.170224639 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.169605986 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.169646431 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.169127878 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.169499335 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.170456295 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.169695233 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.169979443 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.16994295 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.170049694 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.170160873 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.169900264 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.170315239 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.170293711 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.169936792 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.169805343 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.170529227 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.170769929 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.169457014 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.171295036 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.171061172 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.170728908 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.1705615 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.171265198 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.170702173 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.171157829 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.171407763 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.140711648 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.166534941 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.146172726 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.170775194 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.171946256 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.171117084 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.171634143 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.171667003 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.171744557 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.171864981 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.171914398 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.171642572 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.171326407 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.171960327 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.171678936 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.172200494 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.172055894 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.171850243 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.171279203 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.173020534 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.172193288 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.172659742 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.172249072 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.172273812 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.171824265 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.172197964 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.172866442 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.172542809 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.171335561 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.172939427 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.172476504 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.172506719 seconds)
  done (took 136.641677345 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.172623446 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.172347438 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.173267957 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.173055153 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.172760157 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.17321247 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.173255588 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.173326566 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.17360743 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.172980438 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.173183644 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.17326564 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.174774924 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.173472241 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.173326181 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.174180518 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.173656459 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.174318373 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.174144166 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.174049878 seconds)
  done (took 45.565644694 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.174180526 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.174183029 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.174802993 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.174862005 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.17483251 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.174470365 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.174529147 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.173489297 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.174503306 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.174904819 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.174611268 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.174616102 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.174722975 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.17450949 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.174522776 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.174905906 seconds)
  done (took 36.890934337 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.175276342 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.175569338 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.175675798 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.174926258 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.17520475 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.17460053 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.175516088 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.175853547 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.17572101 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.176094043 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.175536596 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.17543025 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.175727965 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.175966498 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.176107481 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.176566729 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.175501507 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.175736809 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.176767972 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.175733563 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.176535458 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.176354131 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.176262449 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.176681851 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.17002783 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.153380345 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.176350824 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.176871845 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.176915235 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.176658547 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.176647089 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.177334787 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.176264104 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.176698056 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.177106156 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.176655927 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.177037118 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.176877473 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.177865983 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.177576498 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.177995468 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.177530255 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.178647481 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.177861225 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.177229628 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.177474361 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.177944956 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.177968978 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.178287845 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.17740941 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.178102979 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.178164142 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.178179599 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.178449095 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.167975343 seconds)
  done (took 121.779389402 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.178110605 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.177124764 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.177439314 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.178558958 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.177612826 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.178288453 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.177845602 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.178434331 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.178696793 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.178081318 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.178243454 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.178364264 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.179215291 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.179112072 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.178307186 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.178935069 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.178765977 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.178856837 seconds)
  done (took 41.311669815 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.178742921 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.179101236 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.178871445 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.1790154 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.17943709 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.179490275 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.179786999 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.179497325 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.179199932 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.179302836 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.180153561 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.17994603 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.15425648 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.178040659 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.149352903 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.179965541 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.180792006 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.175507959 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.154520427 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.180048089 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.180047598 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.180776693 seconds)
  done (took 49.968688668 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.177659484 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.180322117 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.195926999 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.20438583 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.201583811 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.216713929 seconds)
  done (took 15.280396718 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.180895705 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.183096465 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.183767273 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.181132262 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.182005099 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.181008096 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.181682913 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.181250553 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.181748721 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.18170763 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.181792017 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.181598769 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.181713336 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.181856276 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.181340836 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.181508026 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.181538854 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.182263775 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.182621299 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.181814784 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.182734625 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.18220036 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.181850596 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.182025957 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.181857541 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.183154142 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.182174117 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.182770827 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.182278431 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.182861046 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.152466477 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.182776491 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.177570194 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.18139857 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.169532018 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.183358301 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.182602551 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.183606027 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.183408895 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.182974591 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.183710179 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.182930375 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.182342727 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.181099881 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.183823728 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171020743 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.183440304 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.183241877 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.184385708 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.183580965 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.18382999 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.183781526 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.184406589 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.184340216 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.184508324 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.184734883 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.184377765 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.184714551 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.184485134 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.185296071 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.184758298 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.184882015 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.184500176 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.184835088 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.18514147 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.184881822 seconds)
  done (took 146.118671177 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.185902745 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.184726522 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.185450767 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.185453582 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172386703 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.184631241 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.185188273 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.185717144 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.185039083 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.185298576 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.185015923 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.184841045 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.185618454 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.185283348 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.184983456 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.18527454 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.186127573 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.185513754 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.185355415 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.185172921 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177457583 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.185873072 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.186314265 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.186288512 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.186432834 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.1866178 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.18623063 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.185830312 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.186065031 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.156483858 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187106643 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.186818812 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.187083272 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.185911319 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.187264931 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187096626 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.186956132 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.187073414 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187210113 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.187541556 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187850976 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.187307708 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.187574485 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187373378 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.188063719 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.187955515 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.187961359 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187810131 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.186999707 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.187604068 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.188515396 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.187852786 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.188850261 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.188165896 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.18776727 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.188062535 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.18844645 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.188064236 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.188448313 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.188739034 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.188725727 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.188537558 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.188343736 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.189031164 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.188957532 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.188980872 seconds)
  done (took 146.389375279 seconds)
done (took 2984.752895843 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.242216354 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.274797376 seconds)
  done (took 16.628169242 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.358208044 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.24460809 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.388328301 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.308544352 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.218502493 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.1959905 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.195181969 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.19451438 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.29026019 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.194701197 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.201406301 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.194527023 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.195197432 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.195397836 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.195737415 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.195264955 seconds)
  done (took 57.891907103 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.198434973 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.196065564 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.196259243 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.192389109 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.207033071 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.272146093 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.219231034 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.199244182 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.210387565 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.227754825 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.214995904 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.203106029 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.203811537 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.201565922 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.287231422 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.243134395 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.255996384 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.27393836 seconds)
  done (took 42.116594239 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.278642316 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.205385288 seconds)
  done (took 11.606869126 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.223478501 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.202038541 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.217356169 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.221036512 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.201060468 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.206803968 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.21265973 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.210953827 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.214628774 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.224414976 seconds)
  done (took 74.274747951 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.19621357 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.196366449 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.445033362 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.205300794 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.20097231 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.218520018 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.194894796 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.228005664 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.197172999 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.192061738 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.207093899 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.448676098 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.211603369 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.196525441 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.545500639 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.208721456 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.201135799 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.229111918 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.228727736 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.200600238 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.202662492 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.201906272 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.358252367 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.904466289 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.203293713 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.1993319 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.202507981 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.19324071 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.193330613 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.196591368 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.198257021 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.194421353 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.20258172 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.200598588 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.20334154 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.200012068 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.689694991 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.218517477 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.203319431 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.274631013 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.242770678 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.205290029 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.998287622 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.198193974 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.194646141 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.201396467 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.899503799 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.284643881 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.199799319 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.373545536 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.562860892 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.213233395 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.364554738 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.369404049 seconds)
  done (took 150.819491649 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.19375903 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.437167201 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.347940634 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.197569403 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.454611304 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.411528034 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.199759684 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.241855674 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.199196287 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.400136898 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.451957954 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.300684583 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.198758116 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.194609441 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.194454018 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.197727525 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.340006034 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.264986245 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.188351327 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.195420016 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.220928491 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.400586573 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.319047977 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.198727225 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.223689903 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.405071641 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.320584614 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.29983968 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.163220652 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.195822679 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.26017606 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.200009908 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.199016638 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.196033416 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.350571126 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.291457041 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.282080717 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.201815836 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.196277966 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.19747685 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.876825026 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.399680152 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.294249825 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.321454052 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.444806926 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.413828574 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.889217991 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.197272133 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.838726476 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.362220088 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.404392904 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.406169468 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.319737491 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.201792079 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.778365068 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.198244896 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.196972546 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.420113294 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.416484691 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.299704674 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.201903085 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.198574012 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.197869711 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.436621301 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.203087499 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.289321967 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.2029709 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.198052083 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.291703411 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.301759695 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.425256076 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.421965951 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.230998417 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.524212979 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.728883622 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.402420127 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.265912204 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.421029951 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.201759001 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.199183084 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.282623196 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.036500368 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.454621281 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.443436045 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.398863936 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.230728264 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.855266397 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.199929923 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.386421935 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.390776706 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.435519026 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.442405491 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.441667805 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.873020335 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.200312359 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.199707553 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.539194179 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.317478743 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.204304573 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.55771601 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.429781982 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.729944034 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.225828734 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.529289695 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.331397821 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.20464448 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.853781877 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.200691665 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.406660626 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.240110865 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.203697387 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.200679505 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.393689402 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.120150707 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.203111513 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.159010463 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.262733969 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.207051072 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.408455216 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.205601099 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.44688234 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.206773437 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.434938514 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.86372381 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.232932888 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.429026146 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.444791194 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.861772526 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.442968646 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.44541868 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.318038777 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.475212653 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.205810336 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.20445458 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.464903661 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.205765968 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.202539593 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.371711208 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.207098308 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.345999289 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.207478156 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.470144855 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.224676619 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.437598886 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.206489989 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.442634603 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.236635578 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.253528047 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.206956233 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.333995127 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.205668901 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.053098389 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.361497554 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.207972732 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.20484068 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.935736378 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.203056088 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.353189891 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.430518356 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.226519337 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.272882706 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.772540741 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.203833352 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.286899027 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.228307509 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.500454494 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.205495393 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.45763601 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.20851647 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.693424295 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.204997265 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.43934906 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.4441483 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.207340931 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.205550203 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.05129343 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.205311264 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.20434791 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.361153247 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.195516195 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.129602334 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.404842308 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.211388575 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.334707014 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.210701465 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.535494878 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.550635667 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.205622755 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.205883485 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.205008062 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.205010487 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.207840696 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.467267603 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.234354894 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.648001946 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.342753855 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.462752216 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.513718632 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.403864387 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.249023734 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.211830676 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.432172866 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.210891538 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.270076473 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.211095194 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.226105255 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.435999517 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.212449125 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.413506122 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.444634484 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.104772142 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.254493282 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.212389054 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.207233776 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.193977249 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.353254583 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.296593931 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.210771709 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.207225736 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.322164672 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.330688672 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.393047437 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.066498911 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.342757815 seconds)
  done (took 977.944957004 seconds)
done (took 1333.399309813 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.208280784 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.20985105 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.212652833 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.207982849 seconds)
  done (took 30.970341138 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.209759745 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.210299833 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.210524896 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.218116738 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.209968639 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.210264282 seconds)
  done (took 15.401633638 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.209436248 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.211310118 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.211887986 seconds)
  done (took 23.764475174 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.646433154 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.624494931 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.298639989 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.361243984 seconds)
  done (took 12.0624104 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.224152073 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.210201725 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.211352789 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.209424205 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.212085513 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.211262695 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.220203713 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.211692534 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.220245804 seconds)
  done (took 22.072243219 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.417759222 seconds)
done (took 110.822910007 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.233854666 seconds)
    (2/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.474139495 seconds)
    (3/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.590362995 seconds)
    (4/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.213063511 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.685284003 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.442895934 seconds)
    (7/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.342299857 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.412048339 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.562747847 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.214711892 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.263032651 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.208469845 seconds)
    (13/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.913828954 seconds)
    (14/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.305365902 seconds)
    (15/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.372036118 seconds)
    (16/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.202281508 seconds)
    (17/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.302177477 seconds)
    (18/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.204752818 seconds)
    (19/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.464148838 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.320951049 seconds)
    (21/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.207078016 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.284884578 seconds)
    (23/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.649626285 seconds)
    (24/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.203862457 seconds)
    (25/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.318240136 seconds)
    (26/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.203992432 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.215609304 seconds)
    (28/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.310365163 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.008359798 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.340473649 seconds)
    (31/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.731789056 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.773203224 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.202995626 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.3647195 seconds)
    (35/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.201809669 seconds)
    (36/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.31819575 seconds)
    (37/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.515890873 seconds)
    (38/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.887915965 seconds)
    (39/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.421293581 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.326934741 seconds)
    (41/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.222580131 seconds)
    (42/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.073746911 seconds)
    (43/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.466166003 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.309912209 seconds)
    (45/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.334803784 seconds)
    (46/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.971274869 seconds)
    (47/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.448516367 seconds)
    (48/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.197470908 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.504176794 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.286404321 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.42641817 seconds)
    (52/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.216466946 seconds)
    (53/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.111506042 seconds)
    (54/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.337824342 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.517527894 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.61507192 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.909870965 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.336457135 seconds)
    (59/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.282912974 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.61327929 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.21856176 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.639557093 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.27323271 seconds)
    (64/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.206223102 seconds)
    (65/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.204706327 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.192961206 seconds)
    (67/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.45637195 seconds)
    (68/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.343551234 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.660213529 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.437205221 seconds)
    (71/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.324008283 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.602177021 seconds)
    (73/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.056192773 seconds)
    (74/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.282942031 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.579097554 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.377815239 seconds)
    (77/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.13019431 seconds)
    (78/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.198619089 seconds)
    (79/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.423477491 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.101430912 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.41130796 seconds)
    (82/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.349064557 seconds)
    (83/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.910318734 seconds)
    (84/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.217008475 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.201284898 seconds)
    (86/341) benchmarking ("sort", Float32, false)...
    done (took 5.86588668 seconds)
    (87/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.196854326 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 3.990755228 seconds)
    (89/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.29889179 seconds)
    (90/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.424225964 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.205839331 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.909914521 seconds)
    (93/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.312128915 seconds)
    (94/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.388046297 seconds)
    (95/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.499826748 seconds)
    (96/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.474747792 seconds)
    (97/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.191771864 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.445844977 seconds)
    (99/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.606201062 seconds)
    (100/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.200868016 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.418150736 seconds)
    (102/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.254828569 seconds)
    (103/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.41028344 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.189804874 seconds)
    (105/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.25202271 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.948609989 seconds)
    (107/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.486166782 seconds)
    (108/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.38150775 seconds)
    (109/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.391417507 seconds)
    (110/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.486901037 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.575736783 seconds)
    (112/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.185398262 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.258113951 seconds)
    (114/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.464670753 seconds)
    (115/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.328114325 seconds)
    (116/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.327513057 seconds)
    (117/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.86629656 seconds)
    (118/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.978719898 seconds)
    (119/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.523148363 seconds)
    (120/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.191284666 seconds)
    (121/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.712455151 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.959644077 seconds)
    (123/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.197621982 seconds)
    (124/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.329673855 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.199203487 seconds)
    (126/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.368179894 seconds)
    (127/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.30275535 seconds)
    (128/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.185671152 seconds)
    (129/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 8.721429665 seconds)
    (130/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.272681935 seconds)
    (131/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.294771393 seconds)
    (132/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.312273116 seconds)
    (133/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.185295484 seconds)
    (134/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.300884663 seconds)
    (135/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.187403653 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.95507537 seconds)
    (137/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.887727798 seconds)
    (138/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.495608569 seconds)
    (139/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.458020793 seconds)
    (140/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.18458151 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.674134347 seconds)
    (142/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.614336695 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.309096224 seconds)
    (144/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.241973602 seconds)
    (145/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.397354692 seconds)
    (146/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.193761344 seconds)
    (147/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.198320534 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.259323135 seconds)
    (149/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.931195555 seconds)
    (150/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.261109125 seconds)
    (151/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.895155793 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.286929134 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.443417503 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.484975445 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.50142802 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.435493807 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 2.40188458 seconds)
    (158/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.201307093 seconds)
    (159/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.50048301 seconds)
    (160/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.181548315 seconds)
    (161/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.302762725 seconds)
    (162/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.527932256 seconds)
    (163/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.457658585 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.209038246 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.181363549 seconds)
    (166/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 10.958008374 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.348078548 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.198208248 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 5.817949258 seconds)
    (170/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.268014816 seconds)
    (171/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.262354367 seconds)
    (172/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.291521557 seconds)
    (173/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.965374773 seconds)
    (174/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.503782841 seconds)
    (175/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.188143816 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.170162344 seconds)
    (177/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.423322173 seconds)
    (178/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.969533828 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.078910853 seconds)
    (180/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.213461719 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.314231337 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.39107558 seconds)
    (183/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.264632804 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.409330733 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.315500556 seconds)
    (186/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.161026386 seconds)
    (187/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.200344624 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.269549617 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.202804184 seconds)
    (190/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.280339492 seconds)
    (191/341) benchmarking ("sort", Int8, false)...
    done (took 5.138823528 seconds)
    (192/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.400307841 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.534843411 seconds)
    (194/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.339450511 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.18551128 seconds)
    (196/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.187426084 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.185895646 seconds)
    (198/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.284739084 seconds)
    (199/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.28071442 seconds)
    (200/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.347097955 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.468587124 seconds)
    (202/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.463876163 seconds)
    (203/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.190214322 seconds)
    (204/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.829830717 seconds)
    (205/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.555937114 seconds)
    (206/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.184146709 seconds)
    (207/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.464162723 seconds)
    (208/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.514315367 seconds)
    (209/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.494559391 seconds)
    (210/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.199985877 seconds)
    (211/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.991439889 seconds)
    (212/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.678378414 seconds)
    (213/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.200220349 seconds)
    (214/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.315410717 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.199162181 seconds)
    (216/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.226622295 seconds)
    (217/341) benchmarking ("sort", Float64, false)...
    done (took 5.889973187 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.493935123 seconds)
    (219/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.2005072 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.347182622 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.200421188 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.578052314 seconds)
    (223/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.045395955 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.517272688 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.502238921 seconds)
    (226/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.605871267 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.37627206 seconds)
    (228/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.37231052 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.298162069 seconds)
    (230/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.2895211 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.21466724 seconds)
    (232/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.306617388 seconds)
    (233/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.429938641 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.302694244 seconds)
    (235/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.210701133 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.464026083 seconds)
    (237/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.184371776 seconds)
    (238/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.41947123 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.809461631 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.490618694 seconds)
    (241/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.727012956 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.588135685 seconds)
    (243/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.188611923 seconds)
    (244/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.645045469 seconds)
    (245/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.496993854 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.560311745 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.312069815 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.53333404 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.20513094 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.45405945 seconds)
    (251/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.195524654 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.240748737 seconds)
    (253/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.622813496 seconds)
    (254/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.067488699 seconds)
    (255/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.350405356 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.271227372 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.207188082 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.187253884 seconds)
    (259/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 4.15221471 seconds)
    (260/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.268725974 seconds)
    (261/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.282778874 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.390840158 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.905536438 seconds)
    (264/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.286850258 seconds)
    (265/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.191306263 seconds)
    (266/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.300394759 seconds)
    (267/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.247908055 seconds)
    (268/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.185437339 seconds)
    (269/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.44805249 seconds)
    (270/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.40437206 seconds)
    (271/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.345919178 seconds)
    (272/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.302079446 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.20967367 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.318631154 seconds)
    (275/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.20281203 seconds)
    (276/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.185974315 seconds)
    (277/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.25543888 seconds)
    (278/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.968157333 seconds)
    (279/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.508810065 seconds)
    (280/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.258300145 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.203569903 seconds)
    (282/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.200173839 seconds)
    (283/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.267419901 seconds)
    (284/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.33636584 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.189705645 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.578418358 seconds)
    (287/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.26891416 seconds)
    (288/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.407202485 seconds)
    (289/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.176022628 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.31220873 seconds)
    (291/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.727727439 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.426941854 seconds)
    (293/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.640553208 seconds)
    (294/341) benchmarking ("sort", BigInt, false)...
    done (took 7.295293317 seconds)
    (295/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.326355093 seconds)
    (296/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.388613952 seconds)
    (297/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.196044139 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.144804008 seconds)
    (299/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.337438613 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.190592545 seconds)
    (301/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.729071232 seconds)
    (302/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.215061984 seconds)
    (303/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.589942045 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.037915995 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.126296156 seconds)
    (306/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.590279409 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.30075421 seconds)
    (308/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.192899185 seconds)
    (309/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 4.505888794 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.147298587 seconds)
    (311/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.596871449 seconds)
    (312/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.392496673 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.482147938 seconds)
    (314/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.207988252 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.129225242 seconds)
    (316/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.468177685 seconds)
    (317/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.274149459 seconds)
    (318/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.324883284 seconds)
    (319/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.477522809 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.111205291 seconds)
    (321/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.10988552 seconds)
    (322/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.38707916 seconds)
    (323/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.390834431 seconds)
    (324/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.665642049 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.314684491 seconds)
    (326/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.806603642 seconds)
    (327/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.296957892 seconds)
    (328/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.406112499 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.196012011 seconds)
    (330/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.668781717 seconds)
    (331/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.669046281 seconds)
    (332/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.19443824 seconds)
    (333/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.52598283 seconds)
    (334/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.594347978 seconds)
    (335/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.504151993 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.502342032 seconds)
    (337/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.277118975 seconds)
    (338/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.621075139 seconds)
    (339/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.501539842 seconds)
    (340/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.598427429 seconds)
    (341/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.253562545 seconds)
  done (took 1205.330968331 seconds)
done (took 1207.834490412 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.21500084 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.183603141 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.710885612 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.205497186 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.193175512 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.198252144 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.72643792 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.224879287 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.210818392 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.725212422 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.204079594 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.19399802 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.209001056 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.228795096 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.2050335 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.207583261 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.199654935 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.219365423 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.228807144 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.200106566 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.245315896 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.200429219 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.192402985 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.245875802 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.194384397 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.208838004 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.216772109 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.246348307 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.246604499 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.198741789 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.200275814 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.566735736 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.247492068 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.200092712 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.207563141 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.208959929 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.200990834 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.210086787 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.217054532 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.210591481 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.196170526 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.206771552 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.201097143 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.198084943 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.197519807 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.194732731 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.197271703 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.321938503 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.210162956 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.550549758 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.257625185 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.217443327 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.248109784 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.199580472 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.199474435 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.19870644 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.247129091 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.201974499 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.200804748 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.550276875 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.291293626 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.210996073 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.551188013 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.260704375 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.208417456 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.20631324 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.196626917 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.217032257 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.568473957 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.769558789 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.228522629 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.217161756 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.198544081 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.199254735 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.211760556 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.724964654 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.213313588 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.794144866 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.225145324 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.212987436 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.204238616 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.200493102 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.19888491 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.215727007 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.218854208 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.198732293 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.205028859 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.204904539 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.213227897 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.570761742 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.240803789 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.713801756 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.207109546 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.220927432 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.221130509 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.794236691 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.226223972 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.218795733 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.201722909 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.56081582 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.241344432 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.20958279 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.20124764 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.210193121 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.313872438 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.212986189 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.201050751 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.187821015 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.220667648 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.205223509 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.190542327 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.214002149 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.220049992 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.234938186 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.21221489 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.17743594 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.196738897 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.189326663 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.219786321 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.209961774 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.205682889 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.211709293 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.200737379 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.252556035 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.222626505 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.216074209 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.315553512 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.206087205 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.326459129 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.214753191 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.207683966 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.200458457 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.554055748 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.245111508 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.223575925 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.208298406 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.225516582 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.222905515 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.21825691 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.202094393 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.216631357 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.204001344 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.252738821 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.201851674 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.228036555 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.252631138 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.203852569 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.208205145 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.223398533 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.236962443 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.221861069 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.207506524 seconds)
done (took 346.026522886 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.251916859 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.201342725 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.279560537 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.184170368 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.268105719 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.25764041 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.201696486 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.20254729 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.202857615 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.5956429 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.203279622 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.207736956 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.203306672 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.202771641 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.253634807 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.202841489 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.201607059 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.440654922 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.206633318 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.266306881 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.204934195 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.202366581 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.203739747 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.603626683 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.204530821 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.205948446 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.265991778 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.204972465 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.463151082 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.204338619 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.203238809 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.443885452 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.265243422 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.216027399 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.210842931 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.200634459 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.273151062 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.213595331 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.252811784 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.254058447 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.272584503 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.240279278 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.204284357 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.202104733 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.210587031 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.208165447 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.203995174 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.238292708 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.205347778 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.209354197 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.442844633 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.212624705 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.210527073 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.204599302 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.205928294 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.223823593 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.205097559 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.207992452 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.266506791 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.208555909 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.254867099 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.605686486 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.604136661 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.205979958 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.206801275 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.205903333 seconds)
  done (took 206.120274266 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.274237463 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.29353949 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.274043026 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.21295556 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.257793039 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.275027714 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.212235304 seconds)
  done (took 17.92534126 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.213102676 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.208431362 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.22989863 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.229253329 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.207968383 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.344734073 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.218344921 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.212565689 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.233161576 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.207590962 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.543034083 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.231417169 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.215250973 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.204844776 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.217689856 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.23542738 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.209222091 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.208999624 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.305031589 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.285242637 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.212688446 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.215900378 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.235757465 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.219319925 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.208414269 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.207297069 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.210452861 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.214457174 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.207329886 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.207351674 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.207921905 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.209835683 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.208792366 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.206700264 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.208429751 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.209211077 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.210145441 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.208731702 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.1987556 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.205841937 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.209870073 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.209775131 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.209689565 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.208576297 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.202998127 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.226607263 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.19894966 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.208862755 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.208170652 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.211094654 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.237994086 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.210039379 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.209922986 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.21483765 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.248902841 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.215094455 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.211841113 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.209523955 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.2102628 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.210049651 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.210809493 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.290112485 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.232784012 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.209962421 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.233969933 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.248153109 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.211971314 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.210186355 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.210906174 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.235984394 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.21096084 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.234194313 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.211310957 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.308828771 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.210843454 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.352257767 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.233707537 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.214411438 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.21479085 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.2093683 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.219111718 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.212207972 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.212931012 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.219061098 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.217282533 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.211734231 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.21178241 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.212256404 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.218280913 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.212143523 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.257920994 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.211467044 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.213783824 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.311038172 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.211249248 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.30925288 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.23719321 seconds)
  done (took 238.169747935 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.21876094 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.214958849 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.226355757 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.213774467 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.214260398 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.21934697 seconds)
  done (took 15.438413066 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.216800034 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.215588975 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.211515017 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.212514393 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.215493199 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.213736626 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.2129174 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.213330264 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.217068702 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.21282575 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.212865433 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.215941417 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.213927105 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.214024501 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.213240223 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.212775122 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.212171703 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.212233598 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.213651647 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.213348243 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.459816137 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.213490179 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.213291469 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.217596358 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.219486691 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.214245434 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.221446082 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.213301539 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.213494955 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.219454043 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.218310107 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.215801768 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.217759975 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.220147617 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.217759628 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.21919247 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.216962606 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.215575797 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.206683938 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.214712029 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.217279474 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.214426127 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.21206572 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.218103302 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.21549945 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.224281306 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.221831281 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.223342745 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.214044317 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.218971072 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.218331285 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.214544059 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.215197482 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.218574481 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.221179966 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.222955179 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.221525962 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.215333797 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.215419904 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.220487573 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.21874999 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.217232482 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.217784132 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.219643202 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.223650058 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.220349809 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.221561692 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.21994358 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.216044524 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.214773581 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.221931898 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.216482209 seconds)
  done (took 162.969946871 seconds)
done (took 642.749669597 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.259040523 seconds)
  done (took 9.39392404 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.413015966 seconds)
  done (took 9.630237249 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.981642417 seconds)
  done (took 13.119630562 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.221968248 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.26148306 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.237166901 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.225088777 seconds)
  done (took 31.093237837 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.470115846 seconds)
  done (took 9.607082416 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.2257576 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.214973065 seconds)
  done (took 16.630240506 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.239348742 seconds)
  done (took 9.377261527 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.227025452 seconds)
  done (took 9.387943931 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.221569814 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.219241471 seconds)
  done (took 16.591069062 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.217935999 seconds)
  done (took 9.354622552 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.069756064 seconds)
  done (took 10.274791401 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.232959842 seconds)
  done (took 9.38589332 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.215312368 seconds)
  done (took 9.352870222 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.30647521 seconds)
  done (took 10.443041338 seconds)
done (took 175.780941774 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.223767334 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.220974563 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.220444459 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.220407325 seconds)
  done (took 31.022838819 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.253400011 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.254324039 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.260913664 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.25323404 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.243209961 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.240963497 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.246553276 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.25285973 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.226221518 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.239023942 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.25296864 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.250934804 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.251473151 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.261868816 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.262547988 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.251898908 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.240729338 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.253547931 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.243592049 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.262672634 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.253560109 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.253061899 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.219852297 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.21987873 seconds)
  done (took 56.087430751 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.409491495 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.28957023 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.373260368 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.266963745 seconds)
  done (took 11.477081051 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.220385692 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.283025976 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.270868459 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.266155795 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.270965345 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.321901268 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.272150816 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.356154542 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.34843048 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.351908824 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.227501227 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.241081193 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.24413245 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.267643123 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.321572818 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.219289019 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.218258212 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.335544274 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.280299949 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.476549535 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.220718691 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.276065132 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.271410191 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.272413291 seconds)
  done (took 56.972868136 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.220762623 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.227832788 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.229074273 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.220956224 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.221817738 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.224408773 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.228976551 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.222328294 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.242502611 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.223356192 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.222266611 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.221505495 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.228257916 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.221814607 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.220611208 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.235291547 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.235670867 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.227072362 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.228095633 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.230690511 seconds)
  done (took 46.674381453 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.221264194 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.071212609 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.569212278 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.475040822 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.223634086 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.225992475 seconds)
  done (took 33.930371622 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.235835607 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.241528373 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.232882584 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.249197437 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.277305622 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.232405695 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.28541898 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.390521877 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.231915928 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.283139254 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.245689889 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.235386932 seconds)
  done (took 29.284994448 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.222203746 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.226100828 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.212438208 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.238199708 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.238106319 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.233756428 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.202818774 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.224167351 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.237454895 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.235892129 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.233147136 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.236466877 seconds)
  done (took 48.882796323 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.406498542 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.454297285 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.434484295 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.873820818 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.528079988 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.166702304 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.510802957 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.439280485 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.932813138 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.024270761 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.53023065 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.208514615 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.164400267 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.150941002 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.121440539 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.466699874 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227498116 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.088469655 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491446911 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.277963131 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229356535 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.224643667 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227281594 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.549177177 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.557279811 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23359606 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.428186254 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239293996 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.219143852 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.494572134 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.843704114 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.278032432 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.430430475 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.484616373 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.575886436 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.284348255 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.326651682 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.42439213 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.270906107 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.261849742 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.238189477 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.238250281 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.771418167 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.239602737 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501076266 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229283883 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.23171621 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.285584528 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156686761 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.598122724 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337577601 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.230605153 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.26421967 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.790101283 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.336434563 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.473109717 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234227513 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.435752846 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256329996 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.528311993 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.330122203 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.330746768 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.442545238 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156603722 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.634252966 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34713614 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.230759652 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235445709 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.929275189 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.474011117 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.314827226 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.612996911 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.992665507 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.231545977 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234387948 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.284041138 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.325035296 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.229527316 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.541956903 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.258489584 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.157972009 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.358290321 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.736973678 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234863063 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.230185907 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.238442818 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.079869208 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.155082558 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.326473912 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.537748367 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.551719523 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.231366353 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.231949848 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.251121612 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234753064 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.18203656 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.850746503 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.298562245 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.157798533 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.795450475 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.852881568 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.197540188 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.719135741 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271788213 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.509183072 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.389654088 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.639338904 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.502767231 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.479743641 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.764583405 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237012595 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.794720265 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315519124 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309579272 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2345169 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.822346002 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.441890641 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.57672714 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.342673826 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.232719386 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.157949598 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.242871998 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435549401 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.854512545 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285511228 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232627968 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.238282468 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.233908806 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237170244 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.351242443 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248323139 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.538413886 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.308373612 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.235172582 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.177214524 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.237115016 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.533959831 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.941683637 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292184432 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.497426101 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.504037074 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000121284 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.832901617 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.241798494 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.516319648 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.310921638 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310250022 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.826706274 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.3917626 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.331735693 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234348217 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.353920715 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.242912929 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.238104889 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.672426845 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.750614967 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.662065495 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.278962916 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.234004851 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.183466129 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.435895275 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.478095197 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.335521423 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.264576976 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.238310493 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.321117775 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.463200723 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.235979434 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133319205 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.489973056 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.477351364 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.538438098 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.655704182 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.332161193 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.308813662 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24573529 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.449829064 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.320159756 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.902686165 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829802963 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458910814 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.827138759 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.204318802 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.878330547 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.545494384 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.613058011 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252526144 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.688785991 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.443985778 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.955294271 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.268702938 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.771578755 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.164261837 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242479604 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.582443729 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.189898411 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.559995064 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.388152015 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253177999 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.236821886 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.238657223 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245882563 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.169179546 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349187832 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.305038433 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309805027 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165572368 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.906521777 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.27850961 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.239098514 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.237162802 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.599117204 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.107394941 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192901043 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.240304504 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314922341 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.001114774 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.793868413 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.2425597 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.240022521 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.851733136 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.247190635 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.155679653 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.243172473 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.117325438 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264672649 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.551860351 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.934531117 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562623332 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.317918277 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.312937499 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.237025555 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.24468489 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.939534257 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.246587023 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.939010568 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.538766417 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.518720377 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.6966959 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.302532943 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.509281219 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.255612685 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.242003089 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.778421841 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.266229733 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23950535 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.445176499 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.761975087 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.618962203 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.197562771 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.328548565 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.240762949 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.524842692 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.241281943 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.858424138 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.94247187 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.249295402 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.2405007 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.493625617 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.926821021 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244716276 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.22172977 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249234364 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.454044155 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.4468419 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.515029155 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.547150646 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.700437334 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.172921675 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.249572489 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.269606204 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.488428395 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.242072018 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.280426569 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.749195141 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.352330887 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.671752475 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.542480592 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.685059652 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.880179472 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.52198107 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.310202429 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.256392988 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.909869792 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377092204 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.178353781 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362413097 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.168855431 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.947360906 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.533839278 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.263843355 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.497851513 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.230059301 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.593856772 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.532354479 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.563616106 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.293723577 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.275647282 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228024818 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.273466842 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.244837196 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.460238173 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.363445805 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.252637737 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.809795898 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285100366 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279088892 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249936001 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.767988839 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266831533 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248521079 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.005335172 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.270262437 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363933097 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31687978 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.03390491 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.894886259 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.271653311 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.20263186 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.903554496 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526469699 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.305782474 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68874031 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282393145 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.65146622 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.247827988 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.460941857 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.251001449 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.858348878 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29231534 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.515780497 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201609764 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.461086208 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.449550156 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.27399557 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.253270942 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173329885 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.356525495 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.11453704 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.231621329 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.250989438 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.936996494 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.70314195 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.481145969 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.728043456 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.069468497 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.250676127 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.63689091 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.672357805 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.909529397 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282397977 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247078422 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.626124324 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.37198443 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.608377335 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.547450808 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.255887437 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.276197361 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.465371418 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.37495743 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167285469 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.747701373 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.834684312 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.948581085 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.258970179 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.452063506 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.633127216 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.561768411 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.283685027 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.326427086 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.652489393 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.529875696 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.321049321 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.174100399 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.246760137 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.646622953 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.663182248 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.345424816 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.492210708 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.562906868 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.845852924 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.949427406 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.712138008 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.696547701 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.714662516 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.654217669 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.4696437 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.619875841 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.580589945 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.846274381 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.663682347 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.464209964 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.340742176 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.527232224 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.119717983 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.960351718 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.496903786 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.253380907 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.184443706 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.457757897 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.254387889 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.701074149 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.933694322 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.502376998 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.567361076 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.740157312 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.795520606 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.466181092 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.276662478 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.221306115 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.275240051 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.272798746 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.250252589 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.747798378 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.542602911 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264624992 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199447456 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.9245909 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.178644744 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.466478966 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.467946788 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.288043941 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.821058266 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.565130272 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.349023006 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.577912945 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.51701784 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.290162871 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179211677 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0261567 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.198332697 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355418414 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.678878862 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268304104 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.254463697 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.454457055 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.182732859 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298055774 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.256787188 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450251186 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881923897 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.537765747 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.381497816 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.498599129 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.553320847 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.178803624 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.27879689 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.525001423 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.177756924 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.901036695 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.963043681 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.294184853 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323773373 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.254182722 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.256743051 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.524821538 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.63548491 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.348696158 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.978085396 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.288847703 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.275746938 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.647358983 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.343950206 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.2555861 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.261220706 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.759906979 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.487271481 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.254135634 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.224873715 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.469246666 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.336128143 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.450243646 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.327032239 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.769300553 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.259115515 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.163575369 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355561034 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.194798498 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260386398 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.977403238 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.317556362 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.253320019 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.538599343 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.895392214 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.457315083 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.653447552 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.515162735 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.470168095 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.295899734 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.256850318 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.258045413 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.645913925 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.553060253 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.253285984 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.525732162 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.295787097 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.258456028 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.912472525 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.22355596 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.254103585 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.940757821 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.260053694 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.983402777 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.653316531 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.27298792 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.258439274 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.257713305 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.183335861 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.256056541 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.434557674 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.251271325 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.254866143 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.619081659 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.548368423 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.336512292 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260724319 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.25737985 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.258855412 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.471097357 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.768460973 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27447831 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.956547143 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.461493293 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.260416262 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.755101413 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.697272621 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.540736538 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.294355172 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.470898781 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.49211896 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.901160628 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.480577211 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.224016732 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.483449657 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.259431042 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.528687524 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.530456955 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.257626573 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.467161057 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.880637888 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.542337182 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.626826502 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.570790568 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.315905018 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.479186053 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.230195602 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.261112842 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.255869801 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.520473132 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30788501 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.255408715 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.263098276 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.909713016 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.999372746 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728737261 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.37702293 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.558222976 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.01326976 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.004156747 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.259538499 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.183122855 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.260029988 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.287296599 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.261734949 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.180801542 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.928156964 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.992856399 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.47024901 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.567124501 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.18171477 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.460787766 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.844087334 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.183036744 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.228802772 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.296360945 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.506425911 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189580996 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.238145167 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.198600051 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.513271471 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.981389739 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.530430329 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.258435993 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206680912 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.259633258 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.245527161 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.257867083 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.34813138 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.258473083 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.373323909 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.52347902 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.616242515 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.355265138 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.910801958 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.988351078 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.194023225 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302513991 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.879927941 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.833794885 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.522769845 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.38427339 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.926170997 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.202623609 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.262345145 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275991474 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.513684695 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.265631398 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266150959 seconds)
  done (took 2312.741684081 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.269466448 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.30275044 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.285554974 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.309845224 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.361625981 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.340529732 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.312592491 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.306499209 seconds)
  done (took 60.666930186 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.257972031 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.22675229 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.26440703 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.260009881 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.26386923 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.266702502 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.463562021 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.288762322 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.274600249 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.26281271 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.263699501 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.265634935 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.264371813 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.260957396 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.269879106 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.577927946 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.284761539 seconds)
  done (took 83.202712836 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.322685277 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.088453711 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.271894621 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.984202958 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.279038148 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.625932605 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.265656092 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.265023515 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.409956441 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.560876772 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.272352669 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.281682665 seconds)
  done (took 94.859570305 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.267660829 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.26805964 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.264893722 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.266191773 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.26533401 seconds)
  done (took 13.507677815 seconds)
done (took 2881.50533098 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.633038627 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.359561477 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.33898075 seconds)
  done (took 6.876193812 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.403064711 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.457741796 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.621317758 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.617640165 seconds)
  done (took 12.287224153 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.551333132 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.632780098 seconds)
  done (took 7.365106146 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.633643549 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.271093465 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.672877167 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.266309646 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.267975611 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.269045132 seconds)
  done (took 23.99068188 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.267848494 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.267918553 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.269818244 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.26715008 seconds)
  done (took 11.251046628 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.261861842 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.073507484 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.264122633 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.271285216 seconds)
  done (took 23.053647906 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.475853918 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.389396429 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.038922991 seconds)
  done (took 14.086016541 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.890424915 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.708530823 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.882627772 seconds)
  done (took 10.663783229 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.121540888 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.083855777 seconds)
  done (took 8.383684193 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.407882183 seconds)
  done (took 4.591478998 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.097330297 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.579344919 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.758726937 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.815292233 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.886884462 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.496239057 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.583726462 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.540060046 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.681384104 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.712299918 seconds)
  done (took 29.333967155 seconds)
done (took 169.277943498 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.701108355 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.293384491 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.477111134 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.646880131 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.512528544 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.478832704 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.55846882 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.634090157 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.323936777 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.305058763 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.646828243 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.508925643 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.500234037 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.292474764 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.50355642 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.292542219 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.504973516 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.731148245 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.328021262 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.570304551 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.564308248 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.288405388 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.482258914 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.308633976 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.50734846 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.427546776 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.894307475 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.295813917 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.474114159 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.909308019 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.432634904 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.71805725 seconds)
  done (took 182.2979155 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.147592265 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.268572093 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.265790189 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.268759831 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.558211523 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.266339617 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.268565989 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.270969907 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.500163499 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.493077784 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.267461961 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.535658255 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.269092922 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.266753532 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.257620868 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.252128276 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.630328036 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.194050427 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.268888322 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.269377339 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.269888044 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.422586136 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.267743314 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.442917971 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.615649656 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.268510044 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.268625069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.268581351 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.268520378 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.269411853 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.271666856 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.267909423 seconds)
  done (took 220.607204997 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.26955459 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.269130835 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.271635266 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.271766759 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.266362733 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.268698401 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.270767977 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.26950081 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.086943702 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.077355238 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.269812343 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.270445112 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.27222174 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.269519061 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.270842789 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.271213604 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.272496479 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.272682071 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.268164768 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.271061068 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.27236155 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.943152627 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.269711437 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.967604042 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.272824156 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.275771614 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.272493991 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.274842263 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.270136944 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.273943752 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.272840033 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.272912713 seconds)
  done (took 233.85513338 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.512843967 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.269122932 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.271836912 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.286633596 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.271343156 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.271441087 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.275739865 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.52580063 seconds)
  done (took 22.872297563 seconds)
done (took 661.828328863 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.623814875 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.996087245 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.400368709 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.298439256 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.543053985 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.337910179 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.29256223 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.364563709 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.936410259 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.369580945 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.720136298 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.302899775 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.048909394 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.321934154 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.408943228 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.360122372 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.64157964 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.908793901 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.428709686 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.965827026 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.493190857 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.251525739 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.37899692 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.975897986 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.722982166 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.271629524 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.316779754 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.647936839 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.300079416 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.526468722 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.963312864 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.552465309 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.304808958 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.293799624 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.356945915 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.338571337 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.495972719 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.300995005 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.400537161 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.045196242 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.944348179 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.820755225 seconds)
  done (took 117.160407869 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.282795435 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.283158515 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.282444397 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.279728883 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.289303852 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.282176679 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.278365352 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.282474698 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.283689241 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.279811193 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.283152187 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.291826613 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.285237102 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.290571393 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.284558731 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.282130634 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.279391021 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.28890703 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.284192107 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.284305279 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.281707854 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.28440317 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.27889572 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.279529148 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.284923152 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.282623904 seconds)
  done (took 61.572476743 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.275050624 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.454945167 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.566152725 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.309408087 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.273722471 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.282837804 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.303416251 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.28739364 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.277421749 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.275880597 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.389672956 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.279948562 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.286236526 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.557204661 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.306131949 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.272643377 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.273839893 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.279112991 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.462235621 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.291415815 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.305849712 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.284837923 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.305380622 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.291518732 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.276321939 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.272446971 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.27562297 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.684529209 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.289515867 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.387614759 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.318231336 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.307386982 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.610132742 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.567395584 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.345300725 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.276059954 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.277320206 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.434596036 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.28893114 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.271857213 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.305434272 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.287415671 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.566596525 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.790611349 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.288294463 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.275168553 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.672161792 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.444341601 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.330283177 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.289708851 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.569597385 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.304698001 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.277073547 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.275375667 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.313005429 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.289200501 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.276480861 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.524892568 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.2939965 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.304478552 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.283948138 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.278636534 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.469069666 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.288872748 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.454788781 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.285673284 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.282657635 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.278218919 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.566184352 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.306919661 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.789348274 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.292688325 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.279451831 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.394013067 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.462323589 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.707426579 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.292675891 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.467330983 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.628709404 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.316599458 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.28867639 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.667218442 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.318587204 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.288170341 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.278267136 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.280778065 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.276457596 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.323539455 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.307495997 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.699765201 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.787991075 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.54458921 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.31709026 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.292511472 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.280156167 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.524783778 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.288605091 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.280960971 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.564705462 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.816590555 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.298877858 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.285445282 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.768522208 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.296247652 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.310338136 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.293662713 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.580692516 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.310052074 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.323722134 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.27888087 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.283177992 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.281439528 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.310390085 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.29216409 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.280354144 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.762693595 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.454426327 seconds)
  done (took 280.609792354 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.284608798 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.278835485 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.281151938 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.278057408 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.283731401 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.281997332 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.280674967 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.276574548 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.282120064 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.275730249 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.279686161 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.284366416 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.280952856 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.285124797 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.321460044 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.282165141 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.770854147 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.278667548 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.282536373 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.284101593 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.85041537 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.291656149 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.280422788 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.275905056 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.282719682 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.282578339 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.283668705 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.317618608 seconds)
  done (took 179.219690306 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.281411129 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.332729533 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.292881903 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.328979345 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.295344133 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.280673172 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.303046636 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.299184541 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.28576495 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.2804095 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.283235746 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.310504032 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.289999045 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.353692571 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.309988283 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.312910116 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.354524156 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.287997609 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.28322641 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.283334269 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.330510535 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.286512946 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.310978974 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.339762866 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.293762969 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.328230613 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.297620709 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.283901803 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.284479296 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.373324662 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.303209831 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.308111014 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.316265509 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.298087791 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.376628014 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.372747784 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.359960994 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.311836873 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.287942327 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.280883619 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.282136137 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.287341305 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.332034909 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.296699094 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.276914593 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.376554233 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.29974783 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.280248844 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.30534858 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.284145568 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.295609542 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.29834576 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.316182437 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.378976613 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.329016049 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.308585723 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.308132809 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.303356872 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.282099653 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.360653185 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.292987558 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.373894241 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.307439661 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.283251883 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.285717989 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.284220001 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.329041789 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.314530115 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.357154613 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.292644166 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.338490962 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.333385035 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.29243033 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.28164311 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.285799958 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.33344153 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.374164386 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.337133585 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.340701598 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.314740665 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.291817628 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.286963074 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.28586347 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.307609423 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.293479132 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.373292978 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.37551857 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.291010489 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.282568471 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.285240559 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.282461796 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.305600548 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.339108251 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.317247217 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.370146799 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.319243256 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.313999627 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.285174506 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.294063745 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.286508 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.311421157 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.288720387 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.293770111 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.614206767 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.314735624 seconds)
  done (took 245.157482749 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.671113761 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.331588865 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.350550774 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.559413081 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.669046726 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.400783507 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.319689692 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.340857627 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.344111193 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.457228049 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.39525278 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.382774904 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.314134762 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.30276666 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.339178513 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.342336716 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.366329696 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.626059957 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.42447974 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.103138633 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.322201976 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.590236294 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.613176587 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.686854265 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.373252748 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.707130153 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.975330148 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.420973443 seconds)
  done (took 73.934521226 seconds)
done (took 959.847641223 seconds)
SAVING RESULT...
DONE!
