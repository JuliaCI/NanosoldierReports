cset: moving following pidspec: 6959
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.822528229 seconds)
loading group "shootout"... done (took 1.176291744 seconds)
loading group "string"... done (took 0.667870545 seconds)
loading group "linalg"... done (took 8.636538652 seconds)
loading group "parallel"... done (took 0.165713392 seconds)
loading group "find"... done (took 3.029762092 seconds)
loading group "tuple"... done (took 2.136734809 seconds)
loading group "union"... done (took 14.945944145 seconds)
loading group "dates"... done (took 1.465538577 seconds)
loading group "micro"... done (took 0.22232377 seconds)
loading group "simd"... done (took 4.82091931 seconds)
loading group "io"... done (took 1.09422911 seconds)
loading group "random"... done (took 9.611397436 seconds)
loading group "problem"... done (took 1.523583822 seconds)
loading group "array"... done (took 25.35101548 seconds)
loading group "misc"... done (took 1.892662903 seconds)
loading group "scalar"... done (took 43.564811834 seconds)
loading group "sort"... done (took 3.315490776 seconds)
loading group "sparse"... done (took 12.708982826 seconds)
loading group "collection"... done (took 18.408013458 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.4204815 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113343188 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125668592 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111504043 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182221367 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118103671 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126637733 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082168791 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.878734195 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134403325 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112708076 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421948232 seconds)
done (took 5.259327756 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.165053949 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089138461 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081886658 seconds)
  done (took 1.380636282 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069768368 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061499676 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065788544 seconds)
  done (took 1.406449842 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063771363 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132958275 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064687227 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065072168 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065315627 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065425121 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06581306 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065849084 seconds)
  done (took 1.738723291 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07014376 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065996624 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064342517 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065904254 seconds)
  done (took 1.478810862 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063773047 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119258963 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063131939 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063300923 seconds)
  done (took 1.519047639 seconds)
done (took 8.981463892 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.13754277 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.816711224 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.763509918 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120184618 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244466368 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.364789573 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121502419 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180888381 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087302803 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073238425 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120190037 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076319772 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.381130812 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.493675826 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069360258 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174411093 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645872575 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087287405 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133466298 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.451687183 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071542562 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085835827 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083047872 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069622858 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331821593 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15138089 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665594719 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094629319 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066597755 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092734752 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069087836 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076344974 seconds)
  done (took 10.64749186 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091023259 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088359355 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066873953 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122014248 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093348268 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068255759 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073739956 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066346189 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086871467 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122203551 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.08931677 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097719109 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064812589 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067393836 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072059436 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195389661 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078763169 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.07983316 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066010503 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079722913 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104138654 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079517717 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078029302 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076332104 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130966142 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169179941 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096936936 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.097028023 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064564443 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077661639 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113656098 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127013181 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067719227 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064791944 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119795328 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095854463 seconds)
  done (took 4.598287949 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.87579643 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094409784 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082893543 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07420833 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10740933 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114190072 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121114803 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121832107 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097932033 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067507309 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152794436 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.665056513 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.11461756 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.156889447 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069967434 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.117705371 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.352954484 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.066082959 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068587376 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066622176 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069136657 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068159495 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110845695 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064571794 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175406846 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.575222585 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068309144 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067230113 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094107865 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063254543 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.136409968 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090188424 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067888131 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.540186196 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063417968 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062446415 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.195972705 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095226208 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067402658 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067965902 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079486438 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066338167 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109196476 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080610225 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513078235 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067984931 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.578733015 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.223430499 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070942529 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07063799 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099508154 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062962991 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066094008 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.977457768 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.142746819 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065447344 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.269738972 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068740007 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068173634 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068935649 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098994745 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06547207 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070143101 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071356603 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094508493 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.871202938 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088270149 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095266162 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.064983711 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.395509116 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065545046 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071480522 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067572191 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067393243 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067457393 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104289069 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064758466 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064177899 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109285841 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093349957 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087699253 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067919279 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065544583 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064217447 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.361013044 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.159153919 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066264113 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065294652 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.471436691 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062133711 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064019249 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065614027 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089924248 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.061734284 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.181069124 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062814541 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063834324 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098229379 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066420186 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334110599 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065181487 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.479406391 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069802659 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101346368 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118606947 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06641848 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099099638 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066588801 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063623585 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071924531 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064305709 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063043493 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067673362 seconds)
    (113/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063774235 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064175484 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06487955 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067242291 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066469874 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065910562 seconds)
  done (took 22.710257076 seconds)
done (took 40.046723939 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.311555574 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077254518 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076916975 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07775871 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07724003 seconds)
  done (took 1.883822527 seconds)
done (took 3.237291488 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249227567 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073286866 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062527486 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.199621086 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086355588 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173661265 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.210872475 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.15701816 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086826823 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086097163 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.086144493 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.217106947 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.22251069 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086736165 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156625901 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.224011815 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086849625 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062511906 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086416458 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086206402 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086758838 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062667021 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.085901832 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086212277 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155373486 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086496263 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062065388 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.154698455 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.084719654 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.155537663 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.084943483 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.084871021 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.085006647 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.154279191 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085124389 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.152980179 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.061965135 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.085331495 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085025473 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.085236203 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.084164694 seconds)
  done (took 6.077049057 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073244363 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.19956699 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082941946 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061734167 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071547817 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08252277 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061596639 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081641998 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091801109 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082675273 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082372116 seconds)
  done (took 2.314382773 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068407299 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081572179 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082573215 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060293831 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072813894 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08308662 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060657237 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081596236 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085861316 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083604092 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083539194 seconds)
  done (took 2.140062565 seconds)
done (took 11.812352602 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095492552 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063718329 seconds)
  done (took 1.438987067 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.226950457 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.497427555 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.915222024 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090540803 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070290488 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083108307 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.193619246 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065265106 seconds)
  done (took 7.612144115 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.096864737 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068272689 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06575166 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069535843 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067449462 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066077944 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065655444 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067537168 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066780332 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066910209 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065891646 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06600324 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067885582 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.0666317 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067798068 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06594398 seconds)
  done (took 2.494689732 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102008192 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067826384 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.098803072 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061870577 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.070853681 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060623728 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069996307 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07239344 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069697444 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069499404 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071206971 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069386323 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069425602 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069574545 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071138233 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071634162 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071334547 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068709709 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071433805 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071741407 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070517572 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071502598 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071776946 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069481052 seconds)
  done (took 3.144712304 seconds)
done (took 15.98759658 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171864807 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073054944 seconds)
  done (took 1.534859241 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066000318 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066310053 seconds)
  done (took 1.439256376 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070926669 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058790984 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.0760003 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068254152 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059845936 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.0593658 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074965027 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.05991023 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059429014 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059725845 seconds)
  done (took 1.953000128 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061057179 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067177018 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064645698 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063210324 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065326081 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060766905 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063367241 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060937072 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067127032 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059857684 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063891833 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081245884 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063754569 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081502528 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063403303 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064073734 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065630512 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063455581 seconds)
  done (took 2.487113553 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.05919822 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059888053 seconds)
  done (took 1.430849849 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062796572 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059894629 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062322269 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062307753 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060098068 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059538531 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060348319 seconds)
  done (took 1.733748109 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421022349 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122022024 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34175119 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067022501 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075085676 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253874402 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062585586 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066955641 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067215373 seconds)
  done (took 2.827750942 seconds)
done (took 14.725835043 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080285849 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.177847012 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085548939 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.37698856 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089762401 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065499034 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.111227448 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175087639 seconds)
done (took 2.493646727 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.275460732 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.227289388 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.397644562 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.123690968 seconds)
  done (took 3.066026217 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329700806 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077022895 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075430384 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065181764 seconds)
  done (took 1.875741395 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06308056 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06924171 seconds)
  done (took 1.45465822 seconds)
done (took 8.001841886 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069605239 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060068048 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065425378 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06201869 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.062367505 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061592527 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062316714 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060799344 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.092031958 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.063950655 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.064020962 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064005816 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061516657 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063480191 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063743405 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06405534 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063640131 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062785216 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063379236 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063538117 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064155798 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062702683 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062983686 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062931137 seconds)
  done (took 2.898206944 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077690643 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06392475 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064827892 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064845049 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065786492 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064832335 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.0646431 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063627746 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066042977 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064721852 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065695514 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065510591 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063674013 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065552442 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063332212 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065542154 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065179536 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063978294 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06373477 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065904726 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065140792 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063938166 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065624152 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065250559 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065513122 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067603256 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065500316 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065641066 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066796636 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067381966 seconds)
  done (took 3.306491651 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064641646 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057817505 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058413551 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067842475 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058201308 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058637509 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059055749 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058240954 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058471556 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059745157 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059108417 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058528348 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.05979681 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059051066 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060038148 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060821141 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065030649 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079816765 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060419171 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059861898 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064390213 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060123408 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059760142 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060209425 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060392597 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059676376 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058942028 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058685167 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058490201 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059396329 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058913058 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062858624 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063576035 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.05874849 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068524313 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06310888 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058511809 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066826212 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060546963 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058773895 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058229047 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.05875979 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058665443 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058300338 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069960764 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059028524 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059498079 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.058926511 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058679365 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058448722 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058516041 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060793198 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067372826 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059985143 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058496057 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059881779 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058565595 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059322098 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058733774 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058610368 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058185031 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06226268 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059915425 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059423282 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07837833 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060152102 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069014002 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058545921 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059386521 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062718648 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059200987 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076303313 seconds)
  done (took 5.740321862 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069249023 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069864783 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077512278 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069069506 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062592725 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059420321 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063001518 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059755934 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06851362 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063743225 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059718428 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062904611 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068729478 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063126742 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061737646 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07011535 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064856857 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063525603 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059783419 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063487158 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061059215 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062805389 seconds)
  done (took 2.773741581 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136746349 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064465651 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103638649 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068730236 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067039882 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068639344 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064730171 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06477973 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06495509 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065326687 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0653606 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064715958 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066931785 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065536759 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064911956 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065212751 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064514517 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065375437 seconds)
  done (took 2.630176026 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074493779 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063919962 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088407354 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065283338 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065729727 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065565006 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067892639 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06807498 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063992901 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064516104 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06820154 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064167995 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064190803 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064668337 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064324027 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064430254 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064064443 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064540511 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068151795 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067661492 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067900034 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068965977 seconds)
  done (took 2.821160618 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076950952 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063081411 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078528257 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064933117 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05920271 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05874428 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064528378 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063322245 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064766437 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06330139 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064140579 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05884523 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065428034 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063574701 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066246662 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063858176 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063443825 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063994934 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063141038 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059039071 seconds)
  done (took 2.632142923 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070098606 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06140375 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061382651 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06630257 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061226193 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061605721 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067244024 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061931165 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061670824 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083564971 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061803229 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072539375 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067045882 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065197253 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061656823 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067038326 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0665891 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.0666889 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061878703 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0619778 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083576346 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061859783 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066837217 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061778576 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061264734 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061499275 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061824234 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064641809 seconds)
  done (took 3.176285055 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062240448 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061189614 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061956661 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061775736 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062356749 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061613974 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06178413 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062163502 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061375042 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062059855 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061619933 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061657591 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064584338 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061763019 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061995296 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061634031 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061818612 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062181578 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062094504 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062126038 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061834191 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061823517 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06203486 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062148799 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062178187 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061961544 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06233442 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062160687 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06186226 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062488374 seconds)
  done (took 3.210391213 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071331694 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069879906 seconds)
  done (took 1.490128653 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060339153 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075546079 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058300338 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070588494 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066646953 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062240514 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068406228 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066697754 seconds)
  done (took 1.873721147 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064558874 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08861044 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060299501 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060860851 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063517128 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126167208 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073191421 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072216193 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075068988 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062761674 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061079299 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072783422 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059899379 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074052198 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.0630161 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071057081 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069114223 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079812945 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074487169 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059062899 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072562538 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060817018 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059128921 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061001757 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.059958724 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067088312 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076033457 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072843331 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068944953 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05800919 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078470056 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058767887 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060946363 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069071389 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06410944 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059954804 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096997045 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060123479 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064958578 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.05940137 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071670414 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080574374 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074289437 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077349447 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061026294 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061309023 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058824561 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061280935 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063141748 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068996463 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059400182 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067669651 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059272492 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061426876 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070381847 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060293991 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065070294 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069330516 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073730173 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070655357 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068814163 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076424184 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068570612 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066890344 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060532891 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078961488 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061029241 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072758939 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074019663 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060327459 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072598952 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.05843842 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057762844 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.05900517 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092367079 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060723035 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060501565 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059378449 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059110856 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060455677 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068897206 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064288249 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066399844 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062680557 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075142399 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068768988 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.058883152 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065305496 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077139082 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06257744 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059313936 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075541606 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062324921 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058169627 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076910522 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068903773 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060553237 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059660207 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062694243 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072210705 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060089414 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.05767188 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067728045 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060547339 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061127994 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063185028 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06725791 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058500444 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068865248 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063598968 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060303641 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057473167 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062775861 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059584648 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057753912 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067978405 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058319674 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072321064 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064406928 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.0722064 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072615523 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068838589 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074062484 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058211728 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057190476 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07603056 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067926361 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059346345 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075763214 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057636314 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071322537 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057664892 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059159029 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.204404194 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059996366 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062307162 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060622756 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065692052 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061446937 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062096851 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06584878 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068663054 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072623189 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061568742 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069399845 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059673035 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075228464 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069656266 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063910462 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062978743 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059996318 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071155862 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067338408 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06996062 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059957861 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061311455 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060663211 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072151967 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070955943 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061070842 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066600418 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063742483 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060092715 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059579301 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060507284 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06439761 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063551089 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060705101 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06723134 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.06845264 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073087629 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0661495 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068728124 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058371506 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058789452 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060997983 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058593629 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063294836 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068658056 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07446182 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070675523 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079871216 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058964999 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069067912 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060598184 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076019964 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072431013 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060585596 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06353914 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.0581657 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060529202 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068615479 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070766415 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073135061 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074445662 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06409064 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064448474 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.05881418 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074404583 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059612431 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067756507 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068414084 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063523884 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059281028 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060572463 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068270161 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063815511 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058938938 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.0748002 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065024606 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058570484 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073131847 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059463276 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069970162 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058912511 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062571644 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064210467 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060822247 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068602193 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074573297 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05807007 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059988118 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074597873 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061024616 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060834348 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067665856 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074576043 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064018962 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067207404 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070007444 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069145718 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063679475 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068783774 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060231743 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068344014 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061920987 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070986025 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059054348 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076705681 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057767645 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074293036 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059423041 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070155209 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059640591 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068652892 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059944185 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075844517 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060507086 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059454827 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07073848 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05766407 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068333056 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058299469 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06405982 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065542347 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067502804 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.05982965 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067990883 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059635531 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067340873 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062817991 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.06669628 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067758179 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062491494 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057791948 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066492361 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068704954 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066463358 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059109899 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059188054 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058501155 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.208857207 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062139963 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06208431 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068943326 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064747816 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066539429 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061122789 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061906787 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061489101 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06815843 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068839238 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07752958 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068525686 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067069559 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068667832 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058570033 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075171733 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059306023 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069546169 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058271217 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065294614 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068660358 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059252323 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078502777 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060401212 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067243575 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071662503 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068330443 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06303279 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078212972 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063740581 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069497288 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068871879 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065156906 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067314994 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062407962 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069454587 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070659087 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071889329 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061716292 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068313167 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069835262 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062209119 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068430914 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062595061 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069413808 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062217619 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059499305 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065390401 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071770487 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063995741 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064377444 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059400673 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058323376 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060411344 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067532818 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064593186 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067961475 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074664625 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058052671 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061648278 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060207901 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064203915 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079274346 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070828905 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06875134 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065248168 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059709868 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062309154 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062643517 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060920996 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064197735 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059505763 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060108405 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071572587 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062345797 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064918313 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061342265 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062095247 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070143773 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065283531 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061349005 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067435601 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060180135 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065970172 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059753937 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062212552 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064318955 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058312262 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063538595 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071397051 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077129686 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065903435 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068348094 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060378929 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066930761 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074639557 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066180418 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060117614 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068629909 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058568817 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077886371 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068394456 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067684549 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070636623 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061220918 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077640231 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065047912 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070890133 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076051667 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061551751 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066991365 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059823086 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076376534 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064767478 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059780059 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068758821 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068653476 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066385131 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072106787 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060838745 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06833197 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065600872 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063506237 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.06106782 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.0608376 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068743429 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07631779 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060344845 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063622272 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067645493 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068563533 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064077457 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070235798 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066831338 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05938898 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059898262 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062039028 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.204430286 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072459877 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060743024 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064667084 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06450392 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059685247 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066315368 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075876331 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068951341 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06905817 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.05917195 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.05873038 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076852362 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063132418 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062611932 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067483235 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.069210223 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072245069 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068623758 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076737357 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059701012 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065103396 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071202252 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061223598 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060571478 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064508754 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062038373 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069966158 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070479712 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068197782 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062557551 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067938391 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074914753 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062212027 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065514643 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065764713 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061350971 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071180993 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068176654 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070782282 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060811731 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.05914315 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062938788 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068448878 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06702721 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068701438 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060021931 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065723569 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072772937 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066813945 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062183177 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058596181 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062250461 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068348918 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063814399 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.05944638 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064762942 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064380982 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067577628 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069884304 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063992284 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058690005 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075926687 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067105966 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068514509 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060852474 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060986607 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059505087 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.05858587 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07050745 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058768661 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060798325 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063840458 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061612857 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078537727 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069288517 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077153644 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062095409 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065119629 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060407404 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070808047 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065322258 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060934448 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071756718 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059848229 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076670558 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072606671 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06621825 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060268225 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06587823 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068803418 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075975081 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070499415 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069765735 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064484013 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070293395 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.0627911 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071965232 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060343223 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059585819 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070949823 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069631039 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073694784 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060579843 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071344225 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062734413 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069348334 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069051322 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061410442 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062143296 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062264075 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070343865 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065237229 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069657062 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063958286 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076864174 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061416572 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07176906 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069455022 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071235182 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07268602 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072381629 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067569917 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060454515 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066121389 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066046708 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059158643 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06326549 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061227135 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078987262 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059699874 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.05930916 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071807908 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.063637694 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057918409 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063851528 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.204831458 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070757484 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061230103 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071181623 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063849225 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060544381 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064059207 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064499924 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058175871 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059208829 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.058982088 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.06938635 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063641981 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059643688 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078282025 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060697043 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068265895 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070241398 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065783966 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060589112 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058212053 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060461479 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.0728224 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075129895 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062560956 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068077217 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060390118 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068895626 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058102758 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068512823 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067767913 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068302025 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058901922 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060544268 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075587357 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075680681 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063960882 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069788277 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070170452 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062221678 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082414523 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068767543 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061475749 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071816031 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063076962 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059740994 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05937139 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062160135 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072848884 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06023849 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062914789 seconds)
  done (took 41.232639976 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.095988901 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059885716 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058892275 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058826352 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066564583 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060055726 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058820305 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059790925 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059851371 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061381278 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059520408 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063379794 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067055104 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07390061 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06908771 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064018615 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060064568 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061542742 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060524623 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061395737 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066772165 seconds)
  done (took 2.806204413 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062481137 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063175591 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063041617 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063295877 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062260396 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058982487 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062864053 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059160047 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063892116 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059243285 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063511659 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058930744 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059516813 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060428728 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06044206 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062487193 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065149809 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06404626 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060503035 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064256283 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062356982 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064547656 seconds)
  done (took 2.805828731 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060825653 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059418374 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067583745 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058266556 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058052501 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061871464 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058110209 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063101345 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063452645 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062870239 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067764704 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059438553 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058027714 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064578468 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058241706 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059219881 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.100763762 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059884206 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059716337 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05849955 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061319189 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068297117 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058517389 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058793097 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.062759184 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061797521 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059433412 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062861777 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060740191 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06442473 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060945797 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059746484 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069372911 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068308368 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064623606 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064563842 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06180485 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061060159 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059701807 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060000366 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068754106 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061351136 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060139438 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061569236 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069171739 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059888213 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059450902 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069254678 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059591384 seconds)
  done (took 4.521267825 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.068781876 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110280639 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064429428 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091783161 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071096711 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064869447 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064300463 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093144704 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059785683 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060271318 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073641799 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074829467 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063164516 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064443453 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067149022 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062666316 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063588727 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062394288 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065704349 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062531368 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065979057 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067124991 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072959577 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073724377 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062561912 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061899557 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063153072 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064144315 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073382253 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067030093 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064341063 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06499699 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073708721 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067845303 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062588536 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062821225 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074159965 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062075748 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061279087 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059940051 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062022525 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063973582 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067413078 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074542554 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06294667 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067832412 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063202678 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061045386 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073698931 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063053795 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067327944 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07484313 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064428305 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063194507 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064366397 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073843241 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062880969 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061811675 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062947942 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073500963 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060407692 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062834625 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076959451 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06267284 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066394097 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074952432 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067975591 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064147428 seconds)
  done (took 6.184731055 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068412485 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093315583 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074220991 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074268703 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069479781 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069389927 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069213397 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068915791 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069356574 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072181304 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069522837 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103017157 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066011143 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070849398 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069446393 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069005318 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069182592 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070907872 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071105779 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07107745 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070693773 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076150697 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071108829 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074413858 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071710131 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065684481 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069175998 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068996796 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074302991 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068825482 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071550363 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069275964 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069129879 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074281291 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071662928 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069314341 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059818536 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068924777 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069552171 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069106632 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065421894 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07383496 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068873352 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065070065 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069198035 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069172887 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074472323 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071840111 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070862273 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073120762 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069837121 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074621573 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069049284 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069351226 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074723907 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076560377 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074050505 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074651499 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069207534 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074709726 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074673092 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076917071 seconds)
  done (took 5.921226228 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071746155 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065011014 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077120808 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058520163 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058735737 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067990203 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058803827 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059202322 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065496071 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065842063 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067425975 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068091253 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070284075 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067086622 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067964946 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069838566 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069093527 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069502603 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066834276 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070151457 seconds)
  done (took 2.809189693 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074335551 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079727523 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065913362 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06916104 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065605496 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069659631 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.0648562 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065922644 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066566293 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0656863 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070406365 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069281486 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065744832 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069870923 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070673728 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069657321 seconds)
  done (took 2.5642519 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062104974 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066914162 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066057113 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061429085 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063564486 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060809017 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061560149 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059758752 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062919592 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074639937 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061131389 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064317897 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061922904 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.0604768 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060542947 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063776897 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063017895 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06120985 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061608001 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065661833 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069664143 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061810814 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063823182 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061101365 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06344415 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069713712 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062532986 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063477209 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061036375 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063802692 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063449057 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068516117 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063612915 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061808832 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060531258 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061311867 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061628446 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064244747 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06401117 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06182905 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059041761 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064998012 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060455344 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060467116 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061330557 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062520425 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061482123 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065380383 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060293472 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062024857 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06030889 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061550377 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060406465 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066951338 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.061890484 seconds)
  done (took 4.926158491 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075853794 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063929319 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058579517 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059718122 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065012783 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065937143 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065457577 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065755449 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066211371 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060119093 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066121013 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065231994 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066240348 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06549281 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066244118 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065606458 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060103894 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065469461 seconds)
  done (took 2.640943513 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065401363 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064305553 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06303626 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060560606 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060307492 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065197804 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058991236 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060165504 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060534269 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060789029 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060752237 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060662533 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060305637 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06012913 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06443881 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06037772 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059923214 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058932267 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060657107 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058705495 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065035925 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058764514 seconds)
  done (took 2.816092359 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.085585265 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082506995 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.12510409 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.07795098 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08655869 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.0697368 seconds)
  done (took 1.995063533 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092375159 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096261547 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064611967 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065493201 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069732833 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068025941 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066726187 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066946564 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070569141 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070632563 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068088691 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071789015 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071957797 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074175202 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070593743 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07057714 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068592181 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068703658 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065423363 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076163729 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068577042 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072250076 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068680959 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068268358 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067844254 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072634528 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070344822 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070377238 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066680014 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070159684 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068409959 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066717123 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070464923 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070610864 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064000692 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069911792 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066806592 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074428492 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068205746 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07164621 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063683636 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06839826 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070452587 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069780369 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070136517 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066907346 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069892565 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06704514 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067085826 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075458254 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068885984 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072034628 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068816335 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070892674 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071145704 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075847443 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070939351 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072272824 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069425012 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071811584 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07216219 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06881903 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072366326 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070893534 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06888778 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072515662 seconds)
  done (took 6.130894904 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10420071 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064615394 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067799296 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070419966 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071849731 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066789646 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06711158 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067465824 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067072833 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064858561 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102077198 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067086808 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073219973 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075472951 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067154668 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066923337 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067345864 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072154209 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064301723 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075556092 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067031275 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071887947 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071691722 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071697149 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070862011 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068739217 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06689504 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066724182 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067280605 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067630829 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070531047 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068560436 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072812725 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064106312 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072322211 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067540483 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066886884 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07010556 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066888641 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068702332 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072764647 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07472597 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067004817 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066966132 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070772371 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066812288 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06738106 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064613303 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067388551 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064772055 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071185038 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070798494 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070885301 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072363021 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067457359 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067432857 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067367858 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067298268 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067474546 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068522033 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072249756 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067476284 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076626935 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067889241 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067686459 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072413138 seconds)
  done (took 6.120460525 seconds)
done (took 127.352398645 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217720016 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187609276 seconds)
  done (took 1.866643596 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073929697 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16316498 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072698045 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072504926 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106162394 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10538605 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07425056 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07005496 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072613726 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069893322 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136532523 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073991076 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069699538 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069912759 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069902355 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069952387 seconds)
  done (took 2.856318924 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107461803 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.181948177 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100340727 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06757806 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148946327 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074928917 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070031211 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074481291 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074620122 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068472198 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104743863 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081571765 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074060322 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074544386 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070051832 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073714114 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07458984 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074328182 seconds)
  done (took 3.086264861 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10299417 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089110923 seconds)
  done (took 1.684473095 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155872595 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103338023 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14249529 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.341979503 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134261808 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.137725054 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.139110236 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134876038 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.109232243 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131287996 seconds)
  done (took 3.015474117 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103457491 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102874051 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304413643 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100302213 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080256701 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074999221 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073061871 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077801263 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073280584 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074646377 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119510418 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07302657 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070253088 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121440888 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095875114 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103986182 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068673716 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075604214 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077371713 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069094894 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073667678 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077385047 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.174647177 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075993278 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096633376 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072651636 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074919178 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072282302 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071982136 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075842159 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076579581 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.096603444 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075743889 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079888851 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074414111 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094195647 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069542449 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096008978 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072384844 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070387698 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072897623 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07675307 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070193776 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075846328 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073283339 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075036925 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077792975 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068661055 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072981345 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072309904 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070897552 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.073997827 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073656389 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074480683 seconds)
  done (took 6.141696316 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10630804 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105755299 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068064476 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110277104 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103338388 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067793174 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102159172 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097849758 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105787622 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067539667 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067007211 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066997511 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073901847 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076989055 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113323663 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105687276 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069527409 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067757236 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104937805 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104481873 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066841334 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099682121 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097762279 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104282802 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066559998 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067754559 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066410899 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067141944 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07184064 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073088278 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067058883 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073352574 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07822592 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073074058 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066002544 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066419569 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066366976 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073096728 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074265728 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074188701 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072403745 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066016423 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066532471 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066938845 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067166562 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066146533 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072269437 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073217273 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072412036 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066607352 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066929201 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06621225 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066727431 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073619821 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072330555 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07412171 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073390641 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066605125 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066444586 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068296636 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074328833 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074480868 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073709491 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067658622 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07459956 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066491167 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075222872 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078702798 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06660395 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066886524 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066715515 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066906206 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066709598 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072490635 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07216248 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067021129 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066317877 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066723714 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074715629 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072531745 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066744672 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072347258 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0663468 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066759112 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067363566 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067105834 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071960662 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073294374 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067414723 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066736523 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066823718 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066274557 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065911035 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071746579 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073129294 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.072880971 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072662732 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066807682 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072379841 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072151815 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067097734 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071870829 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06640159 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065904707 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066085804 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071550107 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070482161 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072968231 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06559908 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065090961 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071048215 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073453077 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06550039 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070585349 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073323714 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208490021 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067714833 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076684146 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067417497 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074930543 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067110544 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075343127 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067520132 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072844577 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06665194 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066007427 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066769298 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072690219 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06721583 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066518715 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067331925 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066472276 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072864162 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075570034 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067584418 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072537033 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072557451 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066866336 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072689867 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066561273 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073711058 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066937544 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067143483 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065835131 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07488936 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066713604 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066849942 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06657328 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074175186 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066787821 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074575845 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07201487 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066164775 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076376275 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07444728 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072098779 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075052645 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067516559 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06694878 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066160303 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069244784 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071644619 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073239376 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067292057 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066579898 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071764081 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074487664 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066026985 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072382244 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07239833 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072551366 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066803187 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067063363 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075564251 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07471463 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072681935 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072277826 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073014597 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066761596 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072394424 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072505184 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066490884 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078727082 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066976685 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076378009 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072844387 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071940947 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072822176 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074372162 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074703744 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074935893 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077256135 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066469812 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066692056 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072784256 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06650018 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066672993 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072400525 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066888675 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067223095 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077420216 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066882097 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07450341 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066207363 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073031467 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066304662 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067528699 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077077201 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067040731 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067009029 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07247257 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066681152 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072070239 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07495405 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072032159 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066597634 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066536156 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072741229 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073449027 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066705155 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066107759 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066686558 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071763601 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071093051 seconds)
  done (took 17.834495898 seconds)
done (took 37.989210485 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166178598 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112539241 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207298511 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197042875 seconds)
  done (took 2.277407679 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097899121 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063207114 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078339852 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087045096 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06344707 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073199099 seconds)
  done (took 1.995058314 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198575914 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172811044 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241578634 seconds)
  done (took 2.137517278 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367822421 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.145857305 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212905615 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.494595496 seconds)
  done (took 2.857503118 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107899747 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097112002 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074858456 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10858005 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082629905 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060502757 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130223721 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067425314 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097019686 seconds)
  done (took 2.4247252 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135820583 seconds)
done (took 13.377650282 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.120194361 seconds)
    (2/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.101656057 seconds)
    (3/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.215167579 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234171955 seconds)
    (5/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.278037262 seconds)
    (6/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.212655932 seconds)
    (7/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.193644305 seconds)
    (8/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.153711092 seconds)
    (9/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.163617946 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.1711836 seconds)
    (11/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.180050562 seconds)
    (12/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067992395 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.198123565 seconds)
    (14/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071515795 seconds)
    (15/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.150433641 seconds)
    (16/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.09202256 seconds)
    (17/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.236368161 seconds)
    (18/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076174446 seconds)
    (19/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.092928378 seconds)
    (20/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.109637907 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153666507 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073725254 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130703717 seconds)
    (24/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.176440977 seconds)
    (25/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.145159275 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075657457 seconds)
    (27/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072153578 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063921574 seconds)
    (29/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.075127483 seconds)
    (30/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.186058523 seconds)
    (31/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076044457 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072151597 seconds)
    (33/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.183826296 seconds)
    (34/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164125039 seconds)
    (35/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.194502843 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.122595411 seconds)
    (37/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077011025 seconds)
    (38/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.170350589 seconds)
    (39/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.173555069 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072383673 seconds)
    (41/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.063139873 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.081158822 seconds)
    (43/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071206583 seconds)
    (44/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.19590884 seconds)
    (45/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073865182 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074008612 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.070927419 seconds)
    (48/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.13514719 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.193157088 seconds)
    (50/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.081879081 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143193342 seconds)
    (52/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.139437786 seconds)
    (53/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.071921891 seconds)
    (54/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.06810095 seconds)
    (55/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.233688371 seconds)
    (56/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.080051735 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.088004039 seconds)
    (58/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072395811 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076654996 seconds)
    (60/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067521916 seconds)
    (61/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074273802 seconds)
    (62/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.196432382 seconds)
    (63/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.147731901 seconds)
    (64/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.25100262 seconds)
    (65/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072436095 seconds)
    (66/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.141226166 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.070684602 seconds)
    (68/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.180064508 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093711308 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078895775 seconds)
    (71/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.158252441 seconds)
    (72/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.06293935 seconds)
    (73/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.158481604 seconds)
    (74/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.217503062 seconds)
    (75/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067567556 seconds)
    (76/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.195601876 seconds)
    (77/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072801082 seconds)
    (78/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.224780393 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.082467955 seconds)
    (80/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063640765 seconds)
    (81/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065019835 seconds)
    (82/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.178409596 seconds)
    (83/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065740582 seconds)
    (84/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064065686 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065834221 seconds)
    (86/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.143819459 seconds)
    (87/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07187885 seconds)
    (88/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071929995 seconds)
    (89/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177084648 seconds)
    (90/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078053592 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071453693 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085169952 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.085630187 seconds)
    (94/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063697255 seconds)
    (95/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063457967 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089109453 seconds)
    (97/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.07293454 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083476638 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.121155413 seconds)
    (100/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.063145926 seconds)
    (101/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066680471 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084043483 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091755891 seconds)
    (104/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07082474 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064542801 seconds)
    (106/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.195497837 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092794856 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.063319812 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085245241 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148785467 seconds)
    (111/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.140214787 seconds)
    (112/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.196962389 seconds)
    (113/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064556469 seconds)
    (114/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064178013 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.196240538 seconds)
    (116/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075889628 seconds)
    (117/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073195026 seconds)
    (118/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.082046243 seconds)
    (119/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.191172691 seconds)
    (120/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066718865 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173447013 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.085735007 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.083946945 seconds)
    (124/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071585348 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063666357 seconds)
    (126/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.150758783 seconds)
    (127/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143453209 seconds)
    (128/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064027572 seconds)
    (129/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.063529313 seconds)
    (130/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063785465 seconds)
    (131/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066107498 seconds)
    (132/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.063695264 seconds)
    (133/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.075909769 seconds)
    (134/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065212195 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.063478668 seconds)
    (136/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075343676 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.077999324 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089112015 seconds)
    (139/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07125576 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07394754 seconds)
    (141/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067299515 seconds)
    (142/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.158326772 seconds)
    (143/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.161698176 seconds)
    (144/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.2164362 seconds)
    (145/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063680299 seconds)
    (146/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.21717935 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.075983219 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114919863 seconds)
    (149/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.063693533 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063375808 seconds)
    (151/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.06398887 seconds)
    (152/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072641031 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064336869 seconds)
    (154/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08445102 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088768475 seconds)
    (156/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067170088 seconds)
    (157/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064865507 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071660489 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073193445 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063556178 seconds)
    (161/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068651762 seconds)
    (162/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.064142621 seconds)
    (163/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062554502 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072841761 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 0.140728443 seconds)
    (166/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.081388584 seconds)
    (167/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.224679576 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064774341 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121334926 seconds)
    (170/341) benchmarking ("sort", Float32, false)...
    done (took 0.135174749 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130450648 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.139845773 seconds)
    (173/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076787395 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070468927 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073320515 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189749024 seconds)
    (177/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.063346753 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 0.064527472 seconds)
    (179/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.063414939 seconds)
    (180/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.063331161 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.063358382 seconds)
    (182/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.151563421 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06388324 seconds)
    (184/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.066046631 seconds)
    (185/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.064043851 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071802465 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06223029 seconds)
    (188/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.063342552 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079683767 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.119849406 seconds)
    (191/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.073998729 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.168182175 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.08531863 seconds)
    (194/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.36435336 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076341514 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091624851 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.190440356 seconds)
    (198/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.0654831 seconds)
    (199/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066110432 seconds)
    (200/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.138140492 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152976173 seconds)
    (202/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065610758 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063406901 seconds)
    (204/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065746896 seconds)
    (205/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.131774952 seconds)
    (206/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065435344 seconds)
    (207/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.197641298 seconds)
    (208/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.139902312 seconds)
    (209/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072043162 seconds)
    (210/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259836111 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063499337 seconds)
    (212/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.063430626 seconds)
    (213/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064020735 seconds)
    (214/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081797179 seconds)
    (215/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064068339 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144011617 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.074590257 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187817675 seconds)
    (219/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063779888 seconds)
    (220/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067647755 seconds)
    (221/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.075326027 seconds)
    (222/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072158651 seconds)
    (223/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.076429187 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07058917 seconds)
    (225/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061756987 seconds)
    (226/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.08168288 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062084072 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064409006 seconds)
    (229/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.06326766 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063983557 seconds)
    (231/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.155421973 seconds)
    (232/341) benchmarking ("sort", Float64, false)...
    done (took 0.135856609 seconds)
    (233/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071710827 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066298742 seconds)
    (235/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063461402 seconds)
    (236/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.063793676 seconds)
    (237/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070929712 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072273741 seconds)
    (239/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163930954 seconds)
    (240/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.145711121 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066006599 seconds)
    (242/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.067088445 seconds)
    (243/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.062666153 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06400813 seconds)
    (245/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072162206 seconds)
    (246/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064282534 seconds)
    (247/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065043898 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.082348565 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129580162 seconds)
    (250/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072792015 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075821295 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074048947 seconds)
    (253/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063087218 seconds)
    (254/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089546398 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070830785 seconds)
    (256/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063432057 seconds)
    (257/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063606156 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07057096 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067185759 seconds)
    (260/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06582495 seconds)
    (261/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064577875 seconds)
    (262/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064249289 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061901888 seconds)
    (264/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06396188 seconds)
    (265/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.1967659 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06602136 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15194578 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.063604184 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082570662 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077339577 seconds)
    (271/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064799696 seconds)
    (272/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066077953 seconds)
    (273/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.06699059 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.070764345 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086048074 seconds)
    (276/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070903976 seconds)
    (277/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070519086 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063796938 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12497733 seconds)
    (280/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064420992 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063570228 seconds)
    (282/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063705008 seconds)
    (283/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.06369252 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082784256 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.064467631 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145781215 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061949135 seconds)
    (288/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.064042722 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063098704 seconds)
    (290/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06691391 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064056651 seconds)
    (292/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.061993582 seconds)
    (293/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168831264 seconds)
    (294/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064958924 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.150067401 seconds)
    (296/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063774619 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.064562475 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146757929 seconds)
    (299/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.0656857 seconds)
    (300/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068227459 seconds)
    (301/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06319009 seconds)
    (302/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063725931 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.065057666 seconds)
    (304/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.065221699 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.080806623 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063278014 seconds)
    (307/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071051549 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06333284 seconds)
    (309/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.063087447 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.12873207 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11194287 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.062779647 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.069967176 seconds)
    (314/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.063284439 seconds)
    (315/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.061959039 seconds)
    (316/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06335251 seconds)
    (317/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.062772937 seconds)
    (318/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.063360331 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.062891034 seconds)
    (320/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06295538 seconds)
    (321/341) benchmarking ("sort", Int8, false)...
    done (took 0.143878721 seconds)
    (322/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.242030205 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06615286 seconds)
    (324/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065701964 seconds)
    (325/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065605811 seconds)
    (326/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065181888 seconds)
    (327/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091291446 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124946732 seconds)
    (329/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065613128 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145916461 seconds)
    (331/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076214738 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06357861 seconds)
    (333/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067766737 seconds)
    (334/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07065875 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06359533 seconds)
    (336/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.067618225 seconds)
    (337/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07178008 seconds)
    (338/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070514416 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113499424 seconds)
    (340/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086188336 seconds)
    (341/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066071992 seconds)
  done (took 36.154971175 seconds)
done (took 37.705041903 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090080358 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07723021 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075741373 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073799658 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076641633 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076315331 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077562045 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075296941 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.074739631 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074283172 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074229103 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.062986907 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070984173 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.07842396 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.071935683 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078668799 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075361762 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078903147 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064031264 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.077326739 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089931022 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.074881002 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.071936805 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.076872301 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06371546 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072724567 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086623957 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08396859 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069933305 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072656932 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071052914 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081609409 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.070779713 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069436694 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.072560278 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069363202 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072643865 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.069849879 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086788784 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069131391 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063401119 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07524587 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070423619 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071257206 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072578357 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07559764 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068702322 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077163024 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063187676 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07467423 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.08621795 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068699724 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069899875 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071876556 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068726945 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073192924 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.0694899 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074595572 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068185104 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.074622942 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074753932 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071824927 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063038673 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072030791 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070343783 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070740147 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062129317 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068077516 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063069329 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063517439 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062393479 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071834589 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070074541 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068205456 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062711248 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063559163 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063029821 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077120047 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069503865 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072841673 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063555263 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068155167 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067651946 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063494652 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068146619 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074654388 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06213685 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063312373 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062189775 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077418466 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069388365 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063146986 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074676485 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067645425 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069126266 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064110473 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063136355 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067982594 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071183581 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.062981189 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.061980328 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069196607 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.067808791 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072085602 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064896068 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069525004 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068093129 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062040183 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.072693701 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071259635 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072069926 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.075963627 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072076185 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07485256 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.0631619 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062048399 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072727465 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063699896 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067793676 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070907434 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068592635 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071269228 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063650982 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062005787 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06779782 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06950283 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063586375 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063734684 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063436715 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072337889 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070109492 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061893865 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062969677 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071815347 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071497169 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061955266 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062492982 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072241098 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063435554 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068820354 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067811068 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.070676859 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.061854987 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062249848 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.06132453 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061571121 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.061284191 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068199202 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070212635 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.062670957 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070729039 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.215539711 seconds)
done (took 12.448742766 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06704786 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106078326 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.07898018 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079518203 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.07691732 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064984345 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067614176 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082068327 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067380931 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087986679 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089223924 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085261094 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094167436 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062464914 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063795902 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.0643609 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062253308 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075341501 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080417855 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087203781 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099365851 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06367102 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079362214 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083106857 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077841533 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081235681 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065254293 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064657851 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067720149 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082139807 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089313803 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063588471 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065075999 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082187991 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079067154 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072015094 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064645452 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070156212 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067719327 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063939654 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065717547 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081379919 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070107919 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070644504 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065016801 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065332481 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064285463 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070895841 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080962809 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069218561 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075970984 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082686376 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065846446 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064458113 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064233805 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073251246 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065906062 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066645107 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.0664581 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065435864 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065894236 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068114777 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069863314 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070238554 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067700242 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070345995 seconds)
  done (took 6.441168156 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081362879 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089741312 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07853137 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079134995 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063864511 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065298167 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066357239 seconds)
  done (took 2.189921167 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066719802 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073747293 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078475857 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078222029 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087714821 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075929106 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066774693 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097923349 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06501238 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074610291 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.0817183 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079596629 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067421191 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.07641047 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064584409 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076148858 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065041394 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073022484 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073857541 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079359357 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070471363 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096109271 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079423473 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066574352 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080002112 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073473011 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068373872 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066723539 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066246972 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065561624 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065462832 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088019767 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072227962 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078359825 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066244722 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064734572 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070847472 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065956766 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068555243 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073058555 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069271736 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065366633 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066027172 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065638309 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066698195 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070313462 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066441036 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065440942 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065070692 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073413516 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06501275 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072170493 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067991158 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070834695 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070344631 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070173319 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072728921 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065721988 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073582459 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072246833 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065617759 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078391005 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077808845 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.06967132 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07756994 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074119698 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072289045 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069624111 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06516024 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064929176 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065616688 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077632333 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067673145 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066170927 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.064749336 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068960554 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067819471 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079012516 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079242491 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07745532 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066412545 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064114418 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.067980465 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.07904276 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068724523 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064041928 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065102487 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063894923 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068887817 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064425668 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.0690242 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064165069 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070870207 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066857527 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066100035 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072226871 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06410412 seconds)
  done (took 8.541898979 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068672139 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068381495 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066702404 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066732044 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067282121 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067033007 seconds)
  done (took 2.096686381 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090274809 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066246473 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076198973 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064732367 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086312399 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070865937 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071038813 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066559854 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080750423 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075287229 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070908936 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073330857 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073596037 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066221453 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070897243 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065577012 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070665694 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067654193 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074381207 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066911759 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080473773 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066454576 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066687239 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076360529 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068117046 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065342736 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066704061 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076516566 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076232515 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067901284 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067626767 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068471346 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072788257 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066130673 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070643275 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072708545 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064480398 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070014339 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066664163 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067166543 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072752511 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067796095 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.06810368 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07162235 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067883544 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074657692 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071623256 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069937737 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072322142 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071405093 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071625486 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066744054 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069058661 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07173805 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074965068 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067999999 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071495499 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072840171 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067707973 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074701274 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066162733 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069309874 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067949933 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06916198 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071223105 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071670285 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074560103 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066682881 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067099446 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070430754 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071962983 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066349703 seconds)
  done (took 6.751290967 seconds)
done (took 27.671122117 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543040986 seconds)
  done (took 2.184066551 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.885357518 seconds)
  done (took 2.568050149 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.008306941 seconds)
  done (took 9.696904191 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.353819544 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.413858656 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733216003 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130023259 seconds)
  done (took 3.35846163 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.749273498 seconds)
  done (took 2.446571444 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232997715 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218964629 seconds)
  done (took 2.156394767 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337399615 seconds)
  done (took 2.024685652 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.140773481 seconds)
  done (took 2.826557817 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235442727 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160113703 seconds)
  done (took 2.085374649 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540805751 seconds)
  done (took 2.225098822 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.255746715 seconds)
  done (took 5.945721195 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233381122 seconds)
  done (took 1.959329775 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229413394 seconds)
  done (took 1.916932369 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.004878247 seconds)
  done (took 3.687862778 seconds)
done (took 46.77087776 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08410184 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083991269 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083767181 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079277298 seconds)
  done (took 1.995708379 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073826287 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068456156 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071273377 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071860695 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069304101 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07009705 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070828666 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067817037 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069475243 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068068164 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066881823 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.0678867 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070904508 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.06796086 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070562383 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071557246 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068594188 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067992226 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070351335 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067813355 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070582354 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.0682958 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066205032 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067826462 seconds)
  done (took 3.356852288 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078230109 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071028712 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073735193 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068947735 seconds)
  done (took 1.992045693 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076235433 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074173393 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082929798 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088128044 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073559092 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074723852 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081312656 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082345105 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06357575 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08466459 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.0663889 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.0650849 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064931888 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083361268 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080771178 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060369908 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061821888 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075142758 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074227786 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076904213 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066451983 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063414239 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074193526 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075082858 seconds)
  done (took 3.46981147 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082094768 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063490776 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079011928 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088893624 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090091844 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063090681 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077097406 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091017312 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125618154 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06381242 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069844937 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063422299 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102614935 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063600104 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078462585 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106500246 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109932807 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.06750293 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096658906 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063477667 seconds)
  done (took 3.355259834 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07598085 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067392362 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068630472 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063891669 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074904774 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070976621 seconds)
  done (took 2.133778053 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068430451 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066232872 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067969799 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07064492 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065839294 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066074509 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065005846 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.0639754 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.0640843 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065011244 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064880435 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065497032 seconds)
  done (took 2.497533672 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.147406932 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067179647 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068169679 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064311585 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06599226 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064947432 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079068022 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066959103 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082535897 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064996072 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.0648766 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06845945 seconds)
  done (took 2.607900153 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105613353 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111809402 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145430677 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116692127 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117567144 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096820107 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126442203 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096055396 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158584339 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134399118 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113755479 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09137048 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084469188 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067483103 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097020036 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11504249 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134280781 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070596952 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110814918 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.160990687 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128836677 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13222699 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145211905 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114225125 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087649509 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14486703 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094848995 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099651786 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121973151 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123134343 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119469023 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097957937 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071738838 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070454442 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150147289 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103854637 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120768574 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093426544 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105542708 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088766789 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107529849 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06884071 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085343879 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113748375 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084825651 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132075798 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088321468 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11362713 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078819238 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134633617 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118839436 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094793932 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08218322 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100421849 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.287579421 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112206782 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133425755 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105468024 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080802316 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116705313 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100450663 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098271008 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104640094 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078009421 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173666499 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086641709 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.10917159 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10965165 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.091507441 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092232733 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104777252 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131989685 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122015907 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.123025845 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135070667 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092883659 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11969731 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097148003 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126153894 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102150734 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070682407 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119692643 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126129553 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096490781 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098290982 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127054753 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089869099 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075263395 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09687687 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115948447 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078460447 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109745889 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078873043 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106523373 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13113719 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097804512 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112528973 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118414259 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078449555 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153778463 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107381259 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072579898 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117672186 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112477778 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152320806 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093964462 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075509219 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099381342 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.261982503 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146577068 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106031203 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078936512 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109026532 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137510989 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093140665 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166824549 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093688187 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137815607 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110089005 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084955819 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072869245 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088022048 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109384905 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104740898 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109296094 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087625211 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08163621 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084818828 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109226254 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089968119 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07866108 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11098778 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099443156 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072834216 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086265714 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077248868 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139767785 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076108833 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135380299 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123595727 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076572073 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103502274 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095704039 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105766743 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095336166 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114524875 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137450971 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11359717 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087699133 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091359757 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106117503 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140894922 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1243576 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090402931 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074723011 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098381725 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109670536 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095559343 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123634734 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097793276 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106446541 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100931278 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139695035 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139840778 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096790162 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097373435 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102366867 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280689447 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075525492 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153332595 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102099261 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116145061 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082914156 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138608334 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111942633 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087430195 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085357786 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098258573 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101446809 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103763412 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140442269 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093702988 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070742132 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090906171 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141127049 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074220077 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107591676 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088420556 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090758408 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115926134 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090772483 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079512429 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066489401 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1253045 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155957985 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068276244 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112298202 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108872065 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101300454 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119250354 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068127692 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11713336 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136890492 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116097101 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138858609 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144784993 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114698486 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11664872 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111783964 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103824739 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077768086 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123480054 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132805429 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094431897 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091071933 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133791656 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11554258 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130796346 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111327794 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109736851 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10042891 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.264203301 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101663521 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100057915 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141562653 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11916673 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122183397 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08411432 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103504624 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115144544 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132341771 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07987615 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13904798 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081552818 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115062359 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075037257 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120777662 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077369411 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109355332 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077554253 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09801914 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067419262 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07201368 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137569866 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.10986211 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103491911 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098235446 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135266248 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134060152 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07930051 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106529663 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113541168 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099255743 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113526812 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107293937 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087040066 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093211175 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107163964 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083393104 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079730521 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112649395 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092175686 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12470268 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08257444 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073409763 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137864949 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102677915 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093762486 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075929763 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106043044 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119427063 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090689654 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08563001 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113035669 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102842016 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138619047 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.087496745 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094882769 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120721876 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077736469 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088742581 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066486003 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08206749 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073201511 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285418894 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074945427 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114625626 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067341893 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128180478 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085253821 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091006029 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100194322 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108985509 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125292369 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092471961 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137612851 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087495198 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115543005 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105342529 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092275969 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086581205 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101071349 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098663296 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119849363 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095266808 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120482203 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140643359 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102201975 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139429703 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089752946 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11983683 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105078045 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122644909 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110701836 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145569844 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136613791 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110959613 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110158016 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073529758 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092589095 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103477819 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109285739 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17193286 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123706249 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070516924 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104361286 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092215952 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106261922 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102809166 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080759326 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144622176 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099995184 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086114951 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109484342 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087581192 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100184578 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073314195 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091694433 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096016098 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.249258419 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097127213 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113626087 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125523798 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111028026 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140289042 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097886637 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090864723 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116192378 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108610292 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108233221 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084036625 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084742602 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134621553 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115680978 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126714573 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097704125 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106660059 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10869339 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098040948 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122411162 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105708887 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.12405606 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078160054 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074215666 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066683346 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070185596 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121550833 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106102382 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109764584 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096113518 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070718967 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101639615 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104235536 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070026725 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086777023 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092204938 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097042537 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089249341 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104604815 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111853604 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088702779 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102657885 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097271779 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145416773 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098034736 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086900284 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141555164 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14826471 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086033118 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090974664 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069857057 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077177745 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111579273 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147265548 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147162029 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074533135 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083423836 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082118883 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082256897 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.06832159 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.243440477 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088589049 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102953632 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097100171 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110944903 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102214317 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074065779 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101166968 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097300739 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090407793 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101914875 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115914021 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122164531 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137986534 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107935008 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104832014 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07437844 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078362001 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073916714 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077565475 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099645379 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077546803 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074542625 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140155764 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090255619 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10272485 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106249726 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086356178 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073348338 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13201152 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067908379 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13264364 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069686308 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080435411 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.08115224 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077410334 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092061073 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1373813 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107777186 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111096892 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104772346 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103181799 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138584173 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153747885 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077885493 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141514692 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074194312 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073260392 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074506525 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112123142 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088256153 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113013517 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138753093 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089325931 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101138519 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075538213 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141130637 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096871885 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100756218 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083956577 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076374681 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300184845 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078641381 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078274144 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088424231 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109598724 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070899576 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102604302 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082925384 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078440756 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139366242 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.627802728 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088030758 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073958726 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094189708 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139499299 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124864598 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092499784 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10606009 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116799731 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097638599 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093004866 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105519504 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180750788 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072157702 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092142346 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101156136 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096319664 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100044023 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096836514 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083976735 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090769439 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084909576 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078148516 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106055565 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087560779 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095181002 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105113706 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08133289 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085037464 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128679264 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101995315 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08060147 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087084095 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103601092 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08701815 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099341586 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067483069 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111233163 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089313631 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114956755 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093085595 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105021607 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124636923 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088254821 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135997449 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.104898433 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120753836 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086074151 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076810434 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122796449 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085870112 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07551234 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.303863524 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.093483821 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091645403 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10201965 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095295016 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111225854 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115623206 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10958647 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095766795 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077041982 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097862039 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100123752 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082984257 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076090831 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072462913 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07453249 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104536505 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08295159 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081311963 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112065791 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087186199 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100943591 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097521217 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120366068 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081647495 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09862547 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107345765 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089897206 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107964993 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098337263 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125832207 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171977384 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123515068 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126551304 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131991414 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07501425 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074274131 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066955084 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112957163 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077620245 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.086991725 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079827902 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131618094 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080204127 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109332818 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229325613 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078669344 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09198735 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094307628 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.06801492 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081789864 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105545719 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085393615 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078745258 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116959833 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081694697 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125448796 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109678872 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097829802 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09317178 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079616754 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111322183 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102147842 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.124441181 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090951538 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.071474966 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.27433129 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102007943 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13662696 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071353203 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079539976 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127300356 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101906028 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130349353 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078691676 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146412815 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140136126 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097597726 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131166624 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069356807 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081379542 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086946976 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122959715 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082541955 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108417803 seconds)
  done (took 66.669957465 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149666641 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.13959505 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080244692 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10218857 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185440696 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195720592 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117939732 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094404587 seconds)
  done (took 2.928445933 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069030327 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081801467 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078951505 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.204209804 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094285263 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065663178 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070680145 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080155471 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065746599 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06502142 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099515903 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065373162 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065700415 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366411695 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064435113 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07001199 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065575732 seconds)
  done (took 3.516259985 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335087052 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.936121793 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.236536678 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.189566849 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.144584404 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.554561468 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075027879 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081649922 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.69142244 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.36704926 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140806072 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086625834 seconds)
  done (took 19.692164581 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077153044 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078483885 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076598005 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073763133 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073011126 seconds)
  done (took 2.223533054 seconds)
done (took 118.150208843 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084272435 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174471692 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068195262 seconds)
  done (took 2.126193255 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082489213 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079144937 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078759707 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076654468 seconds)
  done (took 2.174498272 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075143362 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074542368 seconds)
  done (took 1.998774956 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219587671 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174778109 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088518811 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082535062 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077925647 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078103338 seconds)
  done (took 2.101092367 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072504252 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071568587 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071645779 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069860067 seconds)
  done (took 2.131897297 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068542883 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064704976 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067076451 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069767233 seconds)
  done (took 2.114168864 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084338146 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083864726 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113953291 seconds)
  done (took 2.12963166 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08387126 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083108025 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078012591 seconds)
  done (took 2.09226143 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110987053 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096784341 seconds)
  done (took 2.048487847 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080885436 seconds)
  done (took 1.928448831 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091018443 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095951251 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.136832834 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104726666 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137628182 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.12359568 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074726365 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075800854 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071546085 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070963952 seconds)
  done (took 2.825599397 seconds)
done (took 26.087402798 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080107419 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.371325838 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357152591 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085280719 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.670790218 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354071672 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.99888105 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089002207 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099376608 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066526437 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083445418 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647287269 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.990271697 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32418373 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.975626467 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322137438 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649642784 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066784136 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065658291 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066059673 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983271248 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065409656 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066272325 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066917017 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647797045 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372707325 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067461176 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325005905 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06593253 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.0698075 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355678252 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067051133 seconds)
  done (took 16.333237849 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071069544 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123210541 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070462409 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082329632 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068823639 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067763357 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069704552 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066826007 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109976608 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066671809 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083991945 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06612547 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070044692 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067768989 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.0862056 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06614977 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068721141 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070325296 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066655416 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066989051 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084491454 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065992024 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066757503 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066931894 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06665045 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.07919472 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067294614 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066106281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066645486 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070497204 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071125607 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067880718 seconds)
  done (took 4.214773728 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12290355 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128648019 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07249393 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107416063 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115714682 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068263255 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149400683 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089963522 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113435205 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067027546 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084232654 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066229848 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101882174 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067665852 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086827333 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066370744 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068845875 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06713332 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066234384 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066829432 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085262468 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06612401 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066910509 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067233384 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066683514 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081263098 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067405162 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066566579 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066179505 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070059565 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07140558 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06763614 seconds)
  done (took 4.488400149 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.06862408 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069685385 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076248715 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078973838 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064663319 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066899877 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067912331 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064833419 seconds)
  done (took 2.433646734 seconds)
done (took 29.332707864 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077888101 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06613724 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.0692246 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085800781 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072205689 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.068390242 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064365415 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074674309 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071252266 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07125964 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07361498 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065655561 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068121994 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062661366 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070094562 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063831266 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070212626 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068384586 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068566743 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069586059 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066330886 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069971559 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073131721 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068992633 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068392674 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068600766 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073321084 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069904097 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064439185 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067058785 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066110358 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078455934 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.070508439 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070303694 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064197547 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063948855 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068151385 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066445228 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070778376 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073060401 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06622291 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072956043 seconds)
  done (took 4.759900621 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089475791 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.092000443 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084622065 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079807575 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105378106 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080276347 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088682464 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077651408 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076027868 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088375606 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071667163 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076998855 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078503717 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073330857 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075990392 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072239577 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077385831 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071136656 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076080162 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07624768 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089309971 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069125742 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.076961337 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077449026 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071514435 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077425005 seconds)
  done (took 3.957454206 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073207512 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088876473 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090643141 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.139080074 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107389624 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080892403 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080385974 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091567286 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098818505 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066255531 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070045825 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091976082 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094694994 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073737034 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106296447 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086076926 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079762307 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068304885 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073200495 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101255713 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088788345 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084840137 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098434998 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086003558 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065379707 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075499619 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073295019 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082145264 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073548937 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078459259 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070094344 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069755734 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.06681787 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078809445 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073092732 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063953884 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087817866 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079030871 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080555667 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10410359 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076343545 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067384586 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096388041 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132154396 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065415748 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068569058 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069793526 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079229283 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067550212 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096328493 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084672257 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065827581 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08481715 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067491024 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067295906 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082603506 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067555703 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.10919366 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078169817 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072397091 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086526389 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071069707 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08753787 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066018579 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07746349 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068226166 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069257746 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066026221 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104167066 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075243167 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121211142 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068757448 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065308114 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.08037521 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.07961944 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07510567 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067250545 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088362395 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080061096 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070757428 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078137506 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068488193 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068746711 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101256539 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064745235 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064255395 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064984183 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068216948 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069258245 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066173615 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078844462 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065108119 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068886705 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081367539 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065901804 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066330279 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068160368 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066927563 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065473746 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076338019 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.069889312 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067534596 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.077851356 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066873193 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069230341 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08083155 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075279093 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064998687 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067021976 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068383431 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067448708 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070397198 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069390978 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068032934 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073205699 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073448039 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071779024 seconds)
  done (took 11.005972101 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16572309 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155220438 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068791276 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148369422 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074616602 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070427441 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147815013 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086464251 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066443256 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.06739863 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066021652 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09443075 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089794903 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100766225 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07046116 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066961584 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091626234 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099387621 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149502417 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144306947 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090233116 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074232129 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068923104 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068145382 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067577604 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075242218 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08246946 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074928763 seconds)
  done (took 4.543906811 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075820799 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082407557 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070440093 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090762851 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084687556 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066691263 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068397398 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067349478 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083203989 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075443769 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068276864 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072886324 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072114912 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069191925 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069336247 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075202842 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075347445 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066847719 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071078545 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072087048 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078730788 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093270037 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072137909 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067914081 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069491709 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066990842 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073687639 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076129423 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066448688 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096881131 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063778609 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070822666 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080710722 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067576592 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066037152 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066771905 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066327385 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066332989 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067066883 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064495987 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064328227 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071810755 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06483089 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071790726 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08058455 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074109641 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067299157 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072089949 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069247137 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063411706 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069704002 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069860851 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.068913315 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074882338 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069657635 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068685764 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067727216 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097057957 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072312282 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065987317 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065972191 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064830177 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067906125 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074382047 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082902219 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067983572 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06457522 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066314624 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071330726 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08039953 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065924045 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071999806 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063440985 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066693471 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068530672 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069521276 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.06762501 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064616989 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06633234 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066525888 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067018577 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066137891 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065957522 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068546688 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064051925 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064664041 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066837831 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068266538 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072547603 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065296221 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069238983 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067636948 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065266821 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069159965 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071871225 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069248445 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086123352 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074964533 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066616931 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064530767 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080737425 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068356994 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065677722 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071446885 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070476183 seconds)
  done (took 9.36779597 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091426276 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068831948 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086440462 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093211536 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076731458 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072244052 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080501624 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067284605 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08266717 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065818961 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075251387 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064616364 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080127054 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075320055 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067847278 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076521735 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068927287 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086986614 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080805664 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064804015 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075145447 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078574901 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078857809 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084712561 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084208223 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085030892 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078716508 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068613643 seconds)
  done (took 4.08525554 seconds)
done (took 39.587085869 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.956855054 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.116757721 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.924919144 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.189813152 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.257749722 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.06639415 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.064608789 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.938285305 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.235054552 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.975465463 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.263147483 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.290404465 seconds)
done (took 69.216387298 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.030305281 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.080293711 seconds)
    (2/2) benchmarking "String"...
    done (took 2.151508661 seconds)
  done (took 6.102567477 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.535563218 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.936158159 seconds)
    (3/3) benchmarking "different"...
    done (took 1.984230965 seconds)
  done (took 8.323173444 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.03999084 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.573665743 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.176259103 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.934963919 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.937501833 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.293507733 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.754304875 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.406534423 seconds)
  done (took 32.948007075 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.248033921 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.191850889 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.672017852 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.71323936 seconds)
  done (took 16.745803101 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.536350901 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.197094275 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.196998688 seconds)
    (4/4) benchmarking "different"...
    done (took 2.189771378 seconds)
  done (took 11.049481111 seconds)
done (took 87.207404902 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.937958944 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.03604692 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.960976873 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.090255056 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.009342847 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.96607734 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.94710565 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.945619854 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.935884221 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.936016952 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.369541475 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.936148043 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.946572222 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.973825579 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.948724238 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.969271759 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.047001754 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.953720403 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.95492453 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.459017086 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.458133451 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.951114118 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.942413856 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.98495781 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.222736814 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.958447004 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.972192574 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.938785238 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.546924443 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.954394718 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.092477257 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.93592425 seconds)
  done (took 209.137115263 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.937849448 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.834305112 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.884505319 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.950395767 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.412590618 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.130413504 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.057558036 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.45313439 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.942296628 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.947173902 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.073644889 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.937973543 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.102218609 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.874139465 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.933216362 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.979420178 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.054909362 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.125499968 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.937424268 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.126510981 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.942691886 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.89011034 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.85654913 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.070902924 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.942881076 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.944365125 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.940209837 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.942735242 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.128985221 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.030850568 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.950867235 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.98071524 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.143359109 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.810567791 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.966469993 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.948757285 seconds)
  done (took 175.058400559 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.118765294 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.952860536 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.007186175 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.076029169 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.711543554 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.668254868 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.944082525 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.94352356 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.943813142 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.947286375 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.947776444 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.011917502 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.942946373 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.535449137 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.959066253 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942038284 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.941409546 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.18488631 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.949131284 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.944117522 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.944745287 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.004286019 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.354662602 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.076319503 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.944373797 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.954522598 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.081924733 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.950977261 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.941809152 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.076783455 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.945333246 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.02140869 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.077640681 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.951805507 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.022782373 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.953643894 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.433353636 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.940137207 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.944623414 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.94466717 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00283613 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.944109707 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.046155336 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037821748 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.946295735 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.953585548 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.133255573 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.619923608 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.945412063 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.934131228 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.941286885 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.942628264 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.941623843 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.653114112 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.945794189 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.967816664 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.559255531 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.945690433 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.945665592 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.948981818 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.94268086 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.943333705 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.950257437 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.983989303 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.75094074 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.633446766 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.33151565 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.745278628 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.943392266 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.53329566 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.944957283 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.005064602 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.94528408 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.025119696 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.941221472 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.945200258 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9425833 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.94803491 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.033674901 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.031275328 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.942132798 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.082253311 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.950255447 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942414849 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.042397828 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.261533886 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.954731235 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.962031233 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.007567474 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.951757878 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.949915874 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.958036665 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.040424931 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.949992627 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.952010591 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.951831746 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.950008292 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.054832543 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.955268896 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.981217891 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.170837685 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.020626509 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.194027074 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.19126157 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.955763138 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.951745576 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.966611151 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.954355748 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.952882579 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.962255485 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.951869169 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.952296464 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.952702575 seconds)
    (113/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.952517856 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.953524062 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.952639863 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.953417404 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.964480121 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.952144686 seconds)
  done (took 428.63946069 seconds)
done (took 816.874118619 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.65979218 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.724300072 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.573020663 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.609246188 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.572968519 seconds)
  done (took 15.027525436 seconds)
done (took 16.914105301 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.974526444 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.968494549 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.957738021 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.974793956 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.97438303 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.97212068 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.004601851 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.996341078 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.989349423 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.970710504 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.979121058 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.974452051 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.977475524 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.992819522 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.980020801 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.981255555 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.974192485 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.963498313 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.979194941 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.976289885 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.971985723 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.972347085 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.974153124 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.979730287 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.986541485 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.97605745 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.96778495 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.978976823 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.976272218 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.976980781 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.013959521 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.981022843 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.005962516 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.982759518 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.980673803 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.983709726 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.97211387 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.99917329 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.975553992 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.012018361 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.983654185 seconds)
  done (took 83.101292289 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.962811618 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.099191969 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.178351863 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.995056822 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.963341894 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.171587808 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.020826953 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.087549377 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.095000344 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.181269902 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.185856082 seconds)
  done (took 24.835275397 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.962934178 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.098481108 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.175742656 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.998735586 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.985672584 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.176468519 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.025649488 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.103636438 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.079846896 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.17737775 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.202688105 seconds)
  done (took 24.885298479 seconds)
done (took 134.709927074 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.336217291 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.182428052 seconds)
  done (took 6.409523654 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.958100028 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.96275659 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.109702166 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.958553619 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.958912919 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.9598148 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.959160639 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.959942586 seconds)
  done (took 17.719029476 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.958678711 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.957579971 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.957481354 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.957264902 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.957786731 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.957633388 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.956486554 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.958163832 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.959830329 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.958544627 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.957635131 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.958011857 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.95757765 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.959387619 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.958653495 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.958767685 seconds)
  done (took 33.222091153 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.957425095 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.959485342 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.958893147 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.958474799 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.958949104 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.959513368 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.962072099 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.960014481 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.959492753 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.956491962 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.957829812 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.959685246 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.95896873 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.959446383 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.96043896 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.958611595 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.949431514 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.960043739 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.947981969 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.96012429 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.959216632 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.959012146 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.961617146 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.942205107 seconds)
  done (took 48.879632086 seconds)
done (took 108.129277974 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.199901626 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.590576257 seconds)
  done (took 8.68481842 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.964127896 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.960999225 seconds)
  done (took 5.892113724 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.960167873 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.958249844 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.96057775 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.960359415 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.961212036 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.960076586 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.961282821 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.96141551 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.960811373 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.961818681 seconds)
  done (took 21.500710987 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.961420932 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.960332401 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.961325937 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.961003129 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.960884598 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.962095706 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.960211479 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.961370774 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.962534981 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.96223364 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.961269892 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.960844935 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.960964779 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.961273714 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.963518885 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.961515127 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.961718652 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.962152347 seconds)
  done (took 37.201384079 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.963228454 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.961679418 seconds)
  done (took 5.820447768 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.960251202 seconds)
    (2/7) benchmarking "second"...
    done (took 1.96089559 seconds)
    (3/7) benchmarking "month"...
    done (took 1.959514048 seconds)
    (4/7) benchmarking "year"...
    done (took 1.963935677 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.962745614 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.961621266 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.962364259 seconds)
  done (took 15.626941628 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.96229533 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.11990571 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.175312495 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.552604981 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.960763579 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.963422594 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.827883931 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.964538025 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.966170095 seconds)
  done (took 21.38896939 seconds)
done (took 118.009002302 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.825987221 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.967881381 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.275441076 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.036870304 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.047010935 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.265466217 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.008371359 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.506060986 seconds)
done (took 43.828123259 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.071064378 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.963420721 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.994540292 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.994231115 seconds)
  done (took 22.849078303 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.962097857 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.282631785 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.985744485 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.956654134 seconds)
  done (took 23.096231636 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.341176497 seconds)
    (2/2) benchmarking "read"...
    done (took 2.319161727 seconds)
  done (took 6.562523525 seconds)
done (took 61.476957561 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.964306445 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.966009224 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.964298377 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.964332227 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.964902062 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.964610458 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.964122126 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.965066569 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.965526289 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.963736293 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.964945806 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96398781 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.96356484 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.964431836 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96392698 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96534368 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.965570303 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.964936989 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966255966 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.964574039 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.965635259 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.964855764 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.965147571 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.964854216 seconds)
  done (took 49.052250039 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.96474586 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.964133714 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.966586841 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.964975266 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.966865482 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.966331312 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.967243594 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.964927168 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.964931929 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.965840579 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.966171657 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.966228381 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.966761433 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.965592028 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966132875 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.965113257 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.966868439 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.966596796 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966081333 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.965300881 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.967471201 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966460776 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.965225335 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.96631522 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.967040406 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.965782997 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.966262382 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.966402313 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.965216492 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.965068325 seconds)
  done (took 60.877926058 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.966853528 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.966185608 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.966772988 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.966318982 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.967773628 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.967760346 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.965679116 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.966037624 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.966597107 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.96867789 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.967843846 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.968221995 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.96731217 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.966285725 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.967855602 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.967906182 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.961657832 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.941528862 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.968366056 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.968571408 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.967584762 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.968464262 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.970222334 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.96923199 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.968309371 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.968698018 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.967993866 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.967750978 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.970590891 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.968502071 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.968318688 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.968347613 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.968741572 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.969323166 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.968214071 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.968041965 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.968710437 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.973420578 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.979651115 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.968783821 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.970204378 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.96903716 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.969320316 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.968848294 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.9681648 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.970778626 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.970992346 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.969770743 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.970849433 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.970769529 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.970217614 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.969767742 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.970910209 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.970741267 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.970263226 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.971183829 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.969963252 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.970632785 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.969941087 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.97023456 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.969902276 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.968460604 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.970099324 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.971413697 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.97115521 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.971348443 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.968840895 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.969793907 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.969750882 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.972253678 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.97042593 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.969883905 seconds)
  done (took 143.6522129 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.970230821 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970650762 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.970759937 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.971280385 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.969879981 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.970114295 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.971194421 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.97126857 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968280124 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.971141888 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.971886502 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.969213841 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.971727576 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.972268074 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.971623405 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.97187377 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.970492751 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.971544962 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.971471322 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.972380073 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.971898035 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.971806616 seconds)
  done (took 45.267592148 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.972783649 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.972233542 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.971127279 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.972066503 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.972620788 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.973492144 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.972079858 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.972827861 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.97187206 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972609351 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972050124 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973485545 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.970856545 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972751289 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97233451 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.971478571 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973491791 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.973027394 seconds)
  done (took 37.408211484 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.971770272 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.970370394 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.971192396 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.973299792 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.97363632 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.973006503 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971724565 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.97349218 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.975258205 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.973153309 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.974459112 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974059546 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.97426959 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972995945 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.972839814 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.972912768 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.973847807 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974106624 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.972480518 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.973788611 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.974019087 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97225454 seconds)
  done (took 45.316645532 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.974190139 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.974060602 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.972981818 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.973714057 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.974246357 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.974306723 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.973425685 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.973728009 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.972905412 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.973233953 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.973640176 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.974140296 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.973861297 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.975188196 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.974656094 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.975476191 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.975026982 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.974943838 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.976587461 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.973457426 seconds)
  done (took 41.391533889 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.97524664 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.97522375 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.974510999 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.976021597 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.976560314 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.973976876 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.974415591 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.974522668 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.973942171 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.97688202 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.968820908 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.975290831 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.974716929 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.974861514 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.974961812 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.975350863 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.974941601 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.976346204 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.974579348 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.976583645 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.975267308 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.975328498 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.976686241 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.974671188 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.975494949 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.963432255 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.976516484 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.976313384 seconds)
  done (took 57.200808873 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.976880844 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.975921686 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.975646647 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.976164122 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.976097268 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.974774249 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.97491357 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.975537886 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.975517349 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.975243548 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.976347413 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.977440282 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.975936511 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.975068986 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.975300316 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.975523725 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974941926 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.975847945 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.976225266 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.976537525 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.977062945 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976859178 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.977640028 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.975643752 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976133369 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.976972009 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.978198952 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.977917539 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.9764615 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.976382504 seconds)
  done (took 61.196856735 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.990433075 seconds)
    (2/2) benchmarking "in"...
    done (took 1.970818123 seconds)
  done (took 5.870263481 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.968138374 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974675905 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.976908784 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.976821252 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.977583098 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.977805155 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.977160967 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.97569902 seconds)
  done (took 17.713654643 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.977545337 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.979947349 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.978105718 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.977916709 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.977429051 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.983471419 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.978540058 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.978398901 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.980336569 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.979291946 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.984315234 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.980067456 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.988517712 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.982108898 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.979652229 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.97894173 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.978974722 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.979741041 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.977762048 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.978369995 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.980531558 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.979013358 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.976776595 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.977327097 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.978148641 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.980423585 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.988814593 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.97862215 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.979608183 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.980241834 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.983449018 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.978621805 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.978179232 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.980640599 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.97878215 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.979311141 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.986257747 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.979228042 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.979023757 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.97890283 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.982542503 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982172913 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.983158672 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.987266891 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.980453514 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.98003015 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.979026821 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.966289349 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.979867886 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.983319405 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.989985785 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.980043015 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.981346321 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.97994736 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.981688118 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.981565552 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.980142505 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.981852253 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.986986767 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.986410472 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.983928154 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.000512547 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.991355718 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.979322104 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.979166403 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.990160314 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.00881384 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.982499745 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.983720105 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.980972891 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.986148696 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.980357729 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.981850971 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.980209481 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.994458224 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.990763414 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.980561145 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.9807484 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.981391366 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.982275433 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.981546624 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.980804006 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.981498629 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.981129799 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.990839633 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.008810743 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.982303268 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.981559331 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.982924824 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.983039345 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.988516984 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.984142393 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.983237558 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.983053094 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.983804618 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.986318592 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.981167183 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.981224706 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.981225767 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.990054393 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.981156123 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.982851287 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.987649814 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.993127141 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.981704279 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.982655092 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.98295851 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.984606932 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.989944677 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.983226528 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.982146776 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.982834949 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.984319443 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.988100915 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.983479583 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.987430103 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.993208824 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.991441198 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.984895767 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.988283929 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.988333324 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.987065587 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.993845668 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.010425225 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.98354273 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.986683827 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.989911575 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.999576464 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.987058955 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.984634663 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.988389732 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.98562761 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.984688384 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.98644506 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.98447468 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.982514716 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.982969405 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.983735083 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.984001021 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.984254282 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.986572933 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.9859566 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.986755483 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.985033729 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.98767576 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.984488637 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.98467193 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.990682979 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.984899861 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.983310553 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.983052617 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.984683206 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.986902607 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.984898381 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.985905332 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.985167645 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.985087973 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.985555784 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.986499033 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.984753143 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.984045259 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.986154388 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.989842254 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.984583384 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.983114687 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.985055986 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.985634197 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.985297476 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.98707418 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.986753454 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.986707311 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.985986329 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.988791647 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.986339191 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.983515473 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.984201858 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.985758012 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.985615089 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.98940397 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.998371692 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.989322058 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.996698539 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.986124306 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.98078474 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.985898451 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.987539243 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.986874724 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.986221417 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.987236732 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.985570542 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.98640981 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.98861697 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.006868315 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.997895233 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.988830318 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.987963004 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.992819817 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.991234314 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.992074742 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.986859674 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.986276034 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.989436397 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.986336005 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.972791657 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.987647777 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.990106937 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.986453682 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.98706674 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.989365194 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.986159504 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.986495427 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.987084093 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.987200173 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.989390444 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.987688928 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.986317878 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.988990031 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.990111855 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.994900969 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.989711169 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.989813278 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.987783656 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99036171 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.988655147 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987883677 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.988861599 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.991370488 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.987576412 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.989639959 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.994563657 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.990298398 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.98964779 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.988406801 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.980029047 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.988669674 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.989952099 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.99204087 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.998924596 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.991398788 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.991121136 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.993170378 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.989034604 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.991273908 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.990578873 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988984966 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.989480845 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.99129241 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.99048162 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.988662871 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.996331692 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.990527114 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.990910711 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.990572965 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.989526931 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.983797348 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.992166471 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.990309554 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.991911514 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.00076877 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.996206441 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.991041985 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.994579123 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.992692469 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.992147595 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.996548671 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.991384135 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.004529042 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.002143306 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.992193757 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.991533196 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.990781609 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.993521595 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.991989939 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.991465306 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.994508736 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.991538976 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.991311948 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.997574918 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.989532523 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.979423208 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997147578 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.992718912 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.993761969 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992456836 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.993428335 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.992412574 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.99099043 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.993252522 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.990938484 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.99341211 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.996679725 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.991325059 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.990659119 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.992693883 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.999783507 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.992196185 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.992078554 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.999089979 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.993671021 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.993148153 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.992651062 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.992523865 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.992152204 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.994587758 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.992556252 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.993682071 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.993881724 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.995357723 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.002589109 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.996412788 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.001699582 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.993941693 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.003366683 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.992004003 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.99192345 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.993077635 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.982637196 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.003536445 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.99371703 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.991833082 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.000487159 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.993463897 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.994899592 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.998863179 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.993305948 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.99303428 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.993791356 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.994968075 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.000858102 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.996729297 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.993555626 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.993818462 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.99317625 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.993679218 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.996992131 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.995958661 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.996559225 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.994528877 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.994417378 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.993150999 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.993390292 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.994766916 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.994025441 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.994685055 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.994093224 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.998329659 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.992911892 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.995177685 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.000990455 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.994756751 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.001940999 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.995781903 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.994898997 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.996145983 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.996755936 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.999054416 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.995810987 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.995517687 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.996014917 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.996103525 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.996998547 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.006123538 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.002588028 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.998833496 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.997420194 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.996025313 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.994986986 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.005385138 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.023350207 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.996005473 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.997521563 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.000123899 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.001060562 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.998309756 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.002207786 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.998670847 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.005819981 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.997354853 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.996747922 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.999382727 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.009123617 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.996284011 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.997761861 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.996426401 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.000484711 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.999272736 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.995648181 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.997187945 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.998979849 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.997374335 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.006547238 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.996993333 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.998246544 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.996626904 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.996345479 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.994476134 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.997519998 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.998365325 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.998489174 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.996756021 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.997284551 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.997816864 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.003797183 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.997790429 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.000345333 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.006391673 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997786754 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.996230833 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.000676221 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.998555135 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.99829729 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.99827926 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.996771676 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.000614351 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.997723745 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.998807935 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.001196831 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.006424765 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.999528574 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.997906723 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.997749943 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.001832905 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.998538799 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.999839376 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.000390372 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.006391928 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.001704471 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.012677446 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.009925724 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.99829847 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.999257677 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.006163118 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.009048037 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.997682456 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.999341038 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.99896533 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.001610231 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.001114627 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.999868896 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.000112612 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.000371733 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.00450299 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.999685389 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.000481679 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.997930798 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.998796303 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.001045501 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.001764948 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.99154857 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.999955573 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.999126254 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.999487611 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.999973584 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.000418434 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.990015554 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.999638627 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.99953321 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.002143099 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.002423997 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.006851488 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.999147875 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.001073808 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.002181125 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.000965264 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.999594139 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.999757623 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.001660431 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.000949046 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.003819751 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.010048284 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.001263835 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.001791352 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.001591421 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.004741287 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.001018573 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.000421844 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.999602914 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.000263896 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.006931269 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.000152459 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.000329514 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.001168698 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.000550078 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.005348915 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.002782698 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.004153705 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.001615208 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.001531452 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.001120738 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.004392608 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.012267192 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.005499589 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.005011755 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.009864737 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.005326859 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.003359941 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.98966995 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.001306999 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.00197692 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.003531781 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.006976099 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.003420332 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.004084519 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.002300493 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002847594 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.001463218 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.004717041 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.002177433 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.002056091 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.006584779 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.011885573 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.010163393 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.003384395 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.003858284 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.00365985 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.006248155 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.016175502 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.002293719 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001959455 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.003203914 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.004888823 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.005786333 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.012673975 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.013159425 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.006717043 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.00225438 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.00835834 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.024885597 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.005780042 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014258076 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.037428651 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.005760524 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.003194369 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.00321104 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.005250301 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.00379706 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.006455383 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.002884999 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.009888905 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.004284781 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.004288789 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.011087859 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.004444845 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.004626677 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.003548626 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.00633864 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.011962751 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.004408143 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.010727127 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.003862187 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.004639649 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.003599988 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.007079689 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.00529051 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.00494507 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.004799678 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.006712662 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.004469744 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.004642683 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.012622928 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.005351931 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.006569914 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.018434166 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.018236892 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.005868802 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.004238277 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.004914536 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.01075242 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.009400339 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.003459707 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.007946209 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.017660842 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.008463914 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.015120579 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.005999598 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.006917602 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006980724 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.005971572 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.005992001 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.018121381 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.019238613 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.006582497 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.006215843 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.012738331 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.006145337 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.012845565 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.012147036 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.008648218 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.008130743 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007411716 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.005781544 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.005546945 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.007291774 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.009340216 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.015609602 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.007009783 seconds)
  done (took 1190.571953277 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.007006553 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.005662693 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.007216406 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.007880585 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.006770529 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.005953465 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007624936 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.007399695 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.006839181 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.007885536 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.006359834 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.007078038 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.007016409 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.007619254 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.006028602 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.00674928 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.006466339 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.006996697 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.007269218 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.006135956 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.000104596 seconds)
  done (took 44.076264104 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.007509678 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.009706452 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.005723004 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.006543081 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.007038735 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.006285445 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.008045715 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.004708146 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.003818671 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.005134778 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.003735551 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004274406 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.004373682 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.004290939 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.004270182 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.002975499 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.004415032 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.006095898 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.004812286 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.005268151 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.005356327 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.005942332 seconds)
  done (took 46.060347848 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.005040171 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.00578715 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.006365696 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.004766037 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.004479689 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.005251532 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.004972762 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.007284735 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.00410834 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.004853214 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.011371131 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.012822071 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.003463308 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.007879236 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.004086493 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.992209023 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.149132603 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.004522836 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.006540625 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.004259012 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.006226987 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.009955146 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.006509685 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.005372894 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.998958242 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.991695616 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.003572795 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.997796211 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.005097966 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.000825135 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.006369148 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.000012998 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.997543638 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.999045138 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.002134714 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.002165157 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.008023828 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.000125398 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.00172659 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.000185531 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.008691023 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.02450573 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.99876518 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.999520373 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.006421531 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.998578905 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.998888355 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.002750592 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.009672633 seconds)
  done (took 100.279475194 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.001006572 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.999927692 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.000003069 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.999814694 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.00159572 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.000140656 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.000188894 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.000638606 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.00015754 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.000193534 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.000238069 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.998705389 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.999324048 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.999381599 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.000353641 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.989267031 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.999260144 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.000860846 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.998451953 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.999038092 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.998741813 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.999803608 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.999558537 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.000537264 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.997986529 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.998996275 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.000374899 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.000766312 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.000409736 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.999551696 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.996867976 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.996857779 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.998265694 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.999946615 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.99874794 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.998172195 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.998841578 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.998763737 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.998011255 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.996864266 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.997696263 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.998476344 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.998790587 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.000618402 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.998598061 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.997015834 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.997268717 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.996262984 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.99850361 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.99734794 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.997250627 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.997901147 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.998529477 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.997975628 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.997204031 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.998034262 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.997060615 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.999522084 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.998747208 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.997526381 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.998372661 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.997716973 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.997768283 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.998061715 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.982982904 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.984965473 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.997657663 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.999103546 seconds)
  done (took 137.818134094 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.998384433 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.998854181 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998501721 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.999982592 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.998648908 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.998214689 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.999183567 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.999660988 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.000222137 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.00055704 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.999461562 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.998878758 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.998885904 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.99918543 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.999293766 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.998306152 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.000015157 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.000685437 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.000438228 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001915158 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.999248674 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.00019925 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.000880636 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.00043314 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.999688871 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.999321612 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000639394 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.998821952 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.000890265 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.999663064 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.000374127 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.001104424 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.000074468 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.001293153 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.001803749 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.99966212 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.001878007 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.000151269 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.999216644 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.00128697 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.998444277 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.000856946 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.999308872 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.002397179 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001530223 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.001360173 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.001598683 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.001196961 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.001611456 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.002318108 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.000404387 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001794217 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.000520054 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.000267253 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.001572853 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.998506762 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.997187083 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.998282805 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.997483452 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.999315577 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.989001321 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.98943375 seconds)
  done (took 125.915424219 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988980944 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.99026437 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.990440338 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.991572286 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.989906249 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.99055082 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.990585338 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.989659315 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.990597945 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.990947523 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.990784066 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990054075 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.991376707 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.991062349 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.989276895 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.991006827 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.989138335 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.991986305 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.989168546 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.991674791 seconds)
  done (took 41.734922153 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.989118712 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.989632611 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.990305105 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.990336295 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.989091739 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.991121528 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.986501652 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987303563 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989200666 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987586823 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.98979901 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.987187042 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986982874 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.98520703 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.977390184 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.977050812 seconds)
  done (took 33.716923286 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.986484678 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.987915255 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.987315186 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.987574789 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.977029603 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.986114206 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.987751769 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.985200931 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.987928462 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.988529526 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.986046275 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.98653701 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.987646877 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.988349638 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.987050195 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.985307179 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.98585512 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.986642371 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.985670738 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.985289544 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.985479031 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.983949994 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.983229366 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.983852191 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.986757205 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.985714879 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.98266493 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.986030261 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.976721642 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.985737844 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.983976198 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.984607047 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.984138113 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.983792879 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.98896896 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.98342182 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.984992212 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.982750666 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.983909924 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.992451028 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.985093972 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.983768601 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.98209349 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.983410605 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.981243603 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.981977143 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.983465627 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.984470513 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.983486928 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.984348151 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.978674541 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.983551931 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.981493008 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.982962263 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.982481924 seconds)
  done (took 111.082084484 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979946175 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.976319533 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.980636939 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.981829005 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.979061727 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.981667628 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980006226 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.98011854 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.977731456 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.980039141 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.9803427 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.979245791 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.977391775 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.977423128 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.979210674 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.975021781 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.974095937 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.978466145 seconds)
  done (took 37.525113184 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.98102588 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.979308615 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.979167338 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.978953916 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.979129795 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.979969374 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980103653 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.979670717 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981067508 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.980642045 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979658304 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.97853052 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980903956 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.977558266 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.978445942 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.978545649 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.981966979 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980322173 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.979040087 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980653883 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.9810305 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.978668795 seconds)
  done (took 45.464450256 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.980197968 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.98122072 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.993277161 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.999758662 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.998790477 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.013349673 seconds)
  done (took 13.87535085 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978360459 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975555972 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.983323248 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977778419 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975589659 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979280419 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979471285 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976493366 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977763115 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976916358 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981278333 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979679714 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977758139 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975100892 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.975598103 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979218754 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977773895 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977293015 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974871315 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977471781 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978510624 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973206394 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977755864 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97669147 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976667852 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979706544 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975937358 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973464078 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978636852 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978038694 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97774653 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97598057 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973664397 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976433456 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977472357 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978706857 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975504566 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954819749 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97209257 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973012352 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.976121289 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979493966 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976268573 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977162174 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975816532 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978593543 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977376692 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978867466 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975076903 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975523095 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9795007 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976291724 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.975828073 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.977696074 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977038697 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97709915 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973916933 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975614616 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976545123 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976552799 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972045709 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978616399 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97705964 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976446045 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976240918 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976495542 seconds)
  done (took 132.361829283 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972766779 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.975413998 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976031943 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976732625 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976667722 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976862375 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975994089 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976776042 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97636783 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97724003 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973023104 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975716783 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97638553 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976927102 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967851739 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976848066 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97798006 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975251424 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977637045 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.976122384 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975903065 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97670938 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977720405 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976954642 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.979541335 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.976909423 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977541594 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980390667 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97854778 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980894573 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975272091 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978218868 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975571955 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.97771609 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979557955 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977736443 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976716037 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980025035 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978196121 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975935556 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976819549 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978342138 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981283889 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977589924 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979937831 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978508729 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978398378 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.98061905 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978284956 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98121735 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.977745574 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976943136 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976861004 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977897839 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979469868 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980190845 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974380534 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98071827 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980026851 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982390392 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980814843 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975996679 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97864129 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978464535 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981839054 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979773985 seconds)
  done (took 132.431610815 seconds)
done (took 2759.765591184 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.035272239 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.976681324 seconds)
  done (took 15.918610233 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.139664541 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.022884862 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.162381224 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.095219894 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.986434493 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.987432994 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.98043595 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.967952038 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.071963858 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.976927869 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.98329988 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.980080204 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.978754275 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.977747116 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.980013768 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.979646682 seconds)
  done (took 54.190433486 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.980558175 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.983625687 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.976353642 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.982869314 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.995519958 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.053179245 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.002102029 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.98237316 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.994219005 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.016918049 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.997066609 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.986679885 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.987337398 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.981923827 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.073081344 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.025357168 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.032637902 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.052060697 seconds)
  done (took 38.012207663 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.052294039 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.993198751 seconds)
  done (took 10.962174926 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.982761497 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.00389542 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.989790581 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.99272442 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.997530745 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.974666027 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.985643422 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.01195715 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.992675299 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.00139507 seconds)
  done (took 71.842725349 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.984254119 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.98956996 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.286674717 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.993557283 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.987950824 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.006381401 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.981002968 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.011220688 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.982197771 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.980201727 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.990342889 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.2899982 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.991083657 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.984390238 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.411786923 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.993062779 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.987577036 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.010744682 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.012373749 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.989965361 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.98778962 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.986151292 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.144224107 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.679773523 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.981468481 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.984267092 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.987767257 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.977887938 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.976345033 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.97991078 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.98577312 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.979705758 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.987790335 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.983592876 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.987952135 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.988729484 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.476324991 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.997335535 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.990737595 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.070833716 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.025449234 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.98943961 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.758062588 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.981329182 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.977614608 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.98749448 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.659076187 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.072171371 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.981027123 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.168296784 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.316704052 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.997466246 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.153277055 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.115186325 seconds)
  done (took 139.090193061 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.982487165 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.216866035 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.133821464 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.983287171 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.238668179 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191051004 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.984165376 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.022873885 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.983292171 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.182042716 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.231138704 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.082192968 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.985066467 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.980208872 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.981838495 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.977815993 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.127935996 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.049582182 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.982148973 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.978427969 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.007517785 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.187272826 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.103526862 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.982833886 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.005483754 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.187767092 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.101236843 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.084899339 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.795254802 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.978856152 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.034647802 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.985906584 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.984111387 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.977897574 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.13260208 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.07661366 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.063865196 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.981913428 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.977596736 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.978556672 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.655443936 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.179513373 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.078283063 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.11001258 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232596266 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.196156827 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.598004996 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.97763031 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.596612172 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.148243515 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.185869399 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.181598186 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.099168375 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.984056245 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.278309265 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.985224761 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.982879336 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.20605204 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.205320534 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.081164473 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.986513171 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.984401842 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.984078509 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.220975174 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.983425637 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.069943862 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.983656898 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.981187228 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.074316693 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.083034721 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.210942594 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.199438197 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.013338837 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.303374222 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.472967705 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.186570592 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.0501008 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.212457206 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.986343009 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.990564431 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.070039566 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.833053338 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.247593709 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232406738 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.187846629 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.022217763 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.645249277 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.991332063 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.175128512 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178108468 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.22202054 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.23134564 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.23013153 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.362333164 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.986431604 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.990481904 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.279023268 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.103595354 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.992535833 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.341686784 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.217099005 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.481540525 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.014306639 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.334459339 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.1190536 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.993877676 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.63643113 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.988466808 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.193524294 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.031518007 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.99273111 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989044288 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.182841844 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.893764196 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.989854319 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.684475351 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.05161786 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.992620964 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.196854801 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.994329088 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.234666625 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.990324037 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.222493029 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.627553955 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.021039521 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.167781779 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.233591698 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.632569346 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.230417402 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.231563674 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.103034887 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.216951531 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.808498886 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.992405364 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.254978895 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.992458433 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.990051268 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.160780806 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.995573544 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.133666251 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.425348621 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.257216366 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.012338433 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.220425018 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.991240993 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.231984901 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.023220235 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.043097531 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.99263022 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.119765441 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.994427079 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.84386118 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.149994306 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.995169387 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.990252989 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.574186987 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.993444664 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.137876654 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.219640723 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.012960877 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.062599434 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.560599157 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.98916918 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.078133155 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.012466352 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.599574694 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.995308635 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.247702977 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.956915047 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.464815406 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.990894914 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.227686083 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.178244413 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.9941764 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.991092436 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.834879216 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.99362384 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.993629941 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.150993255 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.447612344 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.897444579 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.192311739 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.995671095 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.121469652 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.997060698 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.070354178 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.337159162 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.990144823 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.991579431 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.993018915 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.993965024 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.992524325 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.203951887 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.018990033 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.429070571 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.130680041 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.250037818 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.297749443 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.194508332 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.035075154 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.994920897 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.214797273 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.998813969 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.053926498 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.993956544 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.013974681 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22204774 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.995425444 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.201356148 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.229288707 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.04494802 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.038466025 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.993992192 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.99782367 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.909879152 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.140787476 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.083192366 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.997316383 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.994925826 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.108371743 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.11660435 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.177088913 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.839226513 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.126114041 seconds)
  done (took 927.947611664 seconds)
done (took 1259.873548899 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.998272131 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.993360846 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.998441075 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.9974632 seconds)
  done (took 29.91475491 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.997150136 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.991948701 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.998315968 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.996320887 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.999053215 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.996319926 seconds)
  done (took 13.90671944 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.996622695 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.998390691 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.996587314 seconds)
  done (took 22.920661283 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.42665574 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.401277401 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.073508489 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.137682994 seconds)
  done (took 10.967130701 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.004607848 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.998641428 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.997414745 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.999535891 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.99662751 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.999482876 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.001647929 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.001472119 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.000970404 seconds)
  done (took 19.932753126 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.155190933 seconds)
done (took 103.723616995 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.397661875 seconds)
    (2/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.151168441 seconds)
    (3/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.182434704 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.131579841 seconds)
    (5/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.298625951 seconds)
    (6/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.043305586 seconds)
    (7/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.297371335 seconds)
    (8/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.44699708 seconds)
    (9/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.240660655 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.126694812 seconds)
    (11/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.192879092 seconds)
    (12/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.057841689 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.998584876 seconds)
    (14/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.013658359 seconds)
    (15/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.958553728 seconds)
    (16/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.697628668 seconds)
    (17/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.406654851 seconds)
    (18/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.998088021 seconds)
    (19/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.046498969 seconds)
    (20/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.820876591 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.005056096 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.013504597 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.12506601 seconds)
    (24/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.885139438 seconds)
    (25/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.207063534 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.01437036 seconds)
    (27/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.011209092 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.390638966 seconds)
    (29/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.999585386 seconds)
    (30/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.363289281 seconds)
    (31/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.013885058 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.077020203 seconds)
    (33/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.424350994 seconds)
    (34/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.426070162 seconds)
    (35/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.392360226 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.706417659 seconds)
    (37/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.607477782 seconds)
    (38/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.155563672 seconds)
    (39/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.101770738 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.016280202 seconds)
    (41/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.146656593 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.097828793 seconds)
    (43/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.082633653 seconds)
    (44/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.390157385 seconds)
    (45/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.132271901 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.081599244 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.232917893 seconds)
    (48/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.130187955 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.327216006 seconds)
    (50/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.085081915 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.137434155 seconds)
    (52/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.264321167 seconds)
    (53/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.079416273 seconds)
    (54/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.087578657 seconds)
    (55/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.000090984 seconds)
    (56/341) benchmarking ("map", identity, Float64, true)...
    done (took 3.936203332 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.001997111 seconds)
    (58/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 3.708063492 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.416695208 seconds)
    (60/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.130752545 seconds)
    (61/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.124211825 seconds)
    (62/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.38727609 seconds)
    (63/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.251735626 seconds)
    (64/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.007677041 seconds)
    (65/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.045049064 seconds)
    (66/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.130215751 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.311118143 seconds)
    (68/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.118121161 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.084868078 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.254403384 seconds)
    (71/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.274963386 seconds)
    (72/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.632905062 seconds)
    (73/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.205727657 seconds)
    (74/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.008357711 seconds)
    (75/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.165122574 seconds)
    (76/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.16185245 seconds)
    (77/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.214508204 seconds)
    (78/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.598070734 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.561197371 seconds)
    (80/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.193046349 seconds)
    (81/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.004877967 seconds)
    (82/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.178101253 seconds)
    (83/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.720564527 seconds)
    (84/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.278875966 seconds)
    (85/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.962223581 seconds)
    (86/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.00908408 seconds)
    (87/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 4.100805175 seconds)
    (88/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.007314737 seconds)
    (89/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.00449435 seconds)
    (90/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.677823674 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.030673332 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.022023656 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.348952573 seconds)
    (94/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.700395723 seconds)
    (95/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.54107427 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.866700547 seconds)
    (97/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.622007718 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.099299208 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.053686275 seconds)
    (100/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.383583342 seconds)
    (101/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.067982089 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.829256619 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.013124374 seconds)
    (104/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.09718501 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.006240583 seconds)
    (106/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 3.911691302 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.717771231 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.144084828 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.242110854 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.006580417 seconds)
    (111/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.265591384 seconds)
    (112/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.412159427 seconds)
    (113/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.990487801 seconds)
    (114/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.861322364 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.22154802 seconds)
    (116/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.793159363 seconds)
    (117/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.660396621 seconds)
    (118/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.347249148 seconds)
    (119/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.918842614 seconds)
    (120/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.078772716 seconds)
    (121/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.006621518 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.245092666 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.42862304 seconds)
    (124/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.017993945 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.400354333 seconds)
    (126/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.138467202 seconds)
    (127/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.013582485 seconds)
    (128/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.245205332 seconds)
    (129/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.010067215 seconds)
    (130/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.406092339 seconds)
    (131/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.725882422 seconds)
    (132/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.794736015 seconds)
    (133/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.19011285 seconds)
    (134/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.079542278 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.433906138 seconds)
    (136/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.768297705 seconds)
    (137/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.328320805 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.359876762 seconds)
    (139/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.09024761 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.302541199 seconds)
    (141/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.279786441 seconds)
    (142/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.118924036 seconds)
    (143/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.285345088 seconds)
    (144/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.269116486 seconds)
    (145/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.146458714 seconds)
    (146/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.007930111 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 3.955374228 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.123784368 seconds)
    (149/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.094366896 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.249854385 seconds)
    (151/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.430335159 seconds)
    (152/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.025261035 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.104187904 seconds)
    (154/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.02303941 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.887514261 seconds)
    (156/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.100448106 seconds)
    (157/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.010328505 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.114828842 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.259720402 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.353582814 seconds)
    (161/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.026362286 seconds)
    (162/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.207077427 seconds)
    (163/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.118997843 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.24118858 seconds)
    (165/341) benchmarking ("sort", Bool, false)...
    done (took 2.224040097 seconds)
    (166/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.092164429 seconds)
    (167/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.412250424 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.120278502 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.012460507 seconds)
    (170/341) benchmarking ("sort", Float32, false)...
    done (took 5.725072376 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.114413011 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.184201852 seconds)
    (173/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.995971841 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.030946711 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.023244327 seconds)
    (176/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.007003534 seconds)
    (177/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.31798898 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 5.650497047 seconds)
    (179/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.228776768 seconds)
    (180/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.115341567 seconds)
    (181/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.503298999 seconds)
    (182/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.888311564 seconds)
    (183/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.014102077 seconds)
    (184/341) benchmarking ("collect", "all", Float64, false)...
    done (took 3.767726628 seconds)
    (185/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.347355872 seconds)
    (186/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.115496279 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.21693889 seconds)
    (188/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.755511514 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.139403577 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.90356361 seconds)
    (191/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.115803089 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.050991213 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.912255361 seconds)
    (194/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.222302285 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.030561563 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.782599687 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.021482142 seconds)
    (198/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.182689615 seconds)
    (199/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.315284941 seconds)
    (200/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.147770163 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.016114675 seconds)
    (202/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.099814108 seconds)
    (203/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.164318268 seconds)
    (204/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.400082264 seconds)
    (205/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.009406857 seconds)
    (206/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.853185645 seconds)
    (207/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.315819797 seconds)
    (208/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.381298613 seconds)
    (209/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.021839581 seconds)
    (210/341) benchmarking ("sort", BigInt, false)...
    done (took 7.010120605 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.24842611 seconds)
    (212/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.338760517 seconds)
    (213/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.118980876 seconds)
    (214/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.49351172 seconds)
    (215/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.129812223 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.013996711 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.718247627 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.394182517 seconds)
    (219/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.295142548 seconds)
    (220/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.170333464 seconds)
    (221/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.153194933 seconds)
    (222/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.026265158 seconds)
    (223/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.025692347 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.064047532 seconds)
    (225/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.038458831 seconds)
    (226/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.489157212 seconds)
    (227/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.127102934 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.365996871 seconds)
    (229/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.147796783 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.450662375 seconds)
    (231/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.880659334 seconds)
    (232/341) benchmarking ("sort", Float64, false)...
    done (took 5.761999844 seconds)
    (233/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.173564626 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.703808579 seconds)
    (235/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.442302281 seconds)
    (236/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.367440706 seconds)
    (237/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.115472963 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.038147787 seconds)
    (239/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.310576193 seconds)
    (240/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.024798846 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.378898862 seconds)
    (242/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.530178737 seconds)
    (243/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.028052855 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.327108988 seconds)
    (245/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.041176067 seconds)
    (246/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.260527596 seconds)
    (247/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.030643652 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.30921876 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.152100034 seconds)
    (250/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.034220015 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.647385769 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.318057228 seconds)
    (253/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.109306051 seconds)
    (254/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.799426613 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.147426834 seconds)
    (256/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.027153238 seconds)
    (257/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.238625117 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.044405879 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.104424303 seconds)
    (260/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.397388844 seconds)
    (261/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.364256778 seconds)
    (262/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.272248895 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.109132974 seconds)
    (264/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.224514444 seconds)
    (265/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.427042023 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.105973419 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.048885962 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.027166517 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.955884641 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.646893081 seconds)
    (271/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.088546921 seconds)
    (272/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.108942304 seconds)
    (273/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.423630318 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.276802607 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.947252752 seconds)
    (276/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.439338235 seconds)
    (277/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.038590199 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.31668016 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.826715704 seconds)
    (280/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.533787429 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.140823397 seconds)
    (282/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.80567225 seconds)
    (283/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.106438397 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.145586277 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.426406672 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.15783011 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.0424948 seconds)
    (288/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.227656436 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.337183868 seconds)
    (290/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.092038447 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.802856537 seconds)
    (292/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.125315751 seconds)
    (293/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.963493426 seconds)
    (294/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.099814836 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.117826747 seconds)
    (296/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.240311729 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.032862323 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.086753734 seconds)
    (299/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.141062546 seconds)
    (300/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.162000506 seconds)
    (301/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.425910284 seconds)
    (302/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.105149546 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.251877024 seconds)
    (304/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.99584201 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.942970892 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.355346742 seconds)
    (307/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.043469414 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.347501008 seconds)
    (309/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.137421285 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.163494273 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.158666126 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.343813671 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.218258431 seconds)
    (314/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.383188891 seconds)
    (315/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.135313249 seconds)
    (316/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.363328848 seconds)
    (317/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.256687008 seconds)
    (318/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.339783193 seconds)
    (319/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.437788665 seconds)
    (320/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.3096352 seconds)
    (321/341) benchmarking ("sort", Int8, false)...
    done (took 4.986218574 seconds)
    (322/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.157991924 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.029343455 seconds)
    (324/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.168435497 seconds)
    (325/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.158444804 seconds)
    (326/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.157250364 seconds)
    (327/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.046617322 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.02841307 seconds)
    (329/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.93428135 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.169549341 seconds)
    (331/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.911021211 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.164928874 seconds)
    (333/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.033725441 seconds)
    (334/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.129318348 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.423428344 seconds)
    (336/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.270963796 seconds)
    (337/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.046204566 seconds)
    (338/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.039968986 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.160821536 seconds)
    (340/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.042159874 seconds)
    (341/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.027488357 seconds)
  done (took 1142.130377648 seconds)
done (took 1144.155035567 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.218213324 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.040391884 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.540464117 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.052275413 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.039671717 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.044558805 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.549248697 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.071002018 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.056926698 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.552084507 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.051073127 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.040285363 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.056851766 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.073721318 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.052476566 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.055540861 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.044938852 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.066010426 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.074677112 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.04727593 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.085241736 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.04780236 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.03881995 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.09223545 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.04108899 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.057227543 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.054666177 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.084941844 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.085476563 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.043730136 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.045659852 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.395469065 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.092495648 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.046916992 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.05259864 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.055605922 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.051037386 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.05687973 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.052548229 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.058378402 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.042377859 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.053413179 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.046010734 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.045410235 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.041636841 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.04031224 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.043401813 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.166072309 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.055201496 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.374958124 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.097889424 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.052239292 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.086654775 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.044833478 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.043412956 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.031879189 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.087226842 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.050271379 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.047924448 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.376239176 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.134836878 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.057779167 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.376147032 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.109971323 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.053670255 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.050999005 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.040477438 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.053615763 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.392876566 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.593882876 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.075425318 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.060790694 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.04380939 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.048181171 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.057896979 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.548475166 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.05942713 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.621348091 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.07154105 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.059198487 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.051062724 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.045460795 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.045334621 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.060002476 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055475124 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.042972267 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.050200044 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.049851054 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.058014015 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.395516429 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.088927922 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.541507063 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.053208224 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.057793231 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.054986825 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.618475207 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.074705721 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055882868 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.046384395 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.39437923 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.087532728 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.056707264 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.046835595 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.056421965 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.160471387 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.055121245 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.057969011 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.043624944 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.066773743 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.050886967 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.044578872 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.057999133 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.06543646 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.079567398 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.063025069 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.045194414 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.05334089 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.053052012 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.055680658 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.054159788 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.053300379 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.057199525 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.046430839 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.096681483 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.058804445 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.06126831 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.162128371 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.054312292 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.173313789 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.061257216 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.052527308 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.046572039 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.378931072 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.092180533 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.069160391 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.053578535 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.071993876 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.069173355 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.06463566 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.047837096 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.062734067 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.049267562 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.100530418 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.047274747 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.072367254 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.097557982 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.060546542 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.05401174 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.057926919 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.08088151 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.051809051 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.046897655 seconds)
done (took 323.660975785 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.085614582 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.038962487 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.116493114 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.040940089 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.106849316 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.091335655 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.041390769 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.039841512 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.039486574 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.455371108 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.040016599 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.043661917 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.040414492 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.041072197 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.087892901 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.039825949 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.040730423 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.27149898 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.040462116 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.100095576 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.037401424 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.040868298 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.041515933 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.428926688 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.040739399 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.041154658 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.100641834 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.042285001 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.288922008 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.041520859 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.039268064 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.279429667 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.100914173 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.053867278 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.051884187 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.048088196 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.108583179 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.048599749 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.086927021 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.088110923 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.115498748 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.076271659 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.041068546 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.039628455 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.043762866 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.041924593 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.041566033 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.073608808 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.039158629 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.047996491 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.279673589 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.046545803 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.049541815 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.040467673 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.041301096 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.054536817 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.043772593 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.042718588 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.101492667 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.042297503 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.090145025 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.444267376 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.42811665 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.043258668 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.041493751 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.04030207 seconds)
  done (took 195.173023931 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.114183166 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.126294812 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.113562525 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.046526306 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.096085926 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.11261776 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.047099578 seconds)
  done (took 16.616600961 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.050708385 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.043545654 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.067540281 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.066009714 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.043651626 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.1928456 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.052826017 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.048772052 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.068127952 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.043592663 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.394606139 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.066824919 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.048678712 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.044418539 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.053799866 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.071844432 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.045187964 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.042203709 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.139807185 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.121243588 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.04836494 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.052375661 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.072286636 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.05627589 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.042389164 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.044143529 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.044277684 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.05080447 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.043722525 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.041602136 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.043163018 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.060746832 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.043098815 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.04216603 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.043433862 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.043479065 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.045221077 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.044683661 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.044194644 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.045029704 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.04394858 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.045474493 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.045913781 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.04626802 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.045802562 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.067007539 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.045788454 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.045026991 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.046415069 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.047387558 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.075379693 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.047095408 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.045751184 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.051386498 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.088180645 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.053803281 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.046800405 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.045875204 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.04640176 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.046296917 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.044212518 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.126129161 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.069963809 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.045318413 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.070138958 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.087708776 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.044841231 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.046073954 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.04521408 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.071787146 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.046785518 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.07008044 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.047845385 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.145348304 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.046701957 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.197102405 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.068908193 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.050262842 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.049922679 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.045023666 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.054631125 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.046708959 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.049115182 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.05509685 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.050718385 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.047151828 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.047294616 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.047724109 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.054480666 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.048750972 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.096010526 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.047773081 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.049220434 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.147577242 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.048277426 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.144640045 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.07240255 seconds)
  done (took 222.186569931 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.053612711 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.049756594 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.061893165 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.048716786 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.049281636 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.052777423 seconds)
  done (took 14.291485733 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.049703117 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.053704187 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.049691942 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.047475593 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.0477918 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.050107197 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.048420881 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.051462489 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.053594618 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.049059681 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.050326326 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.051156766 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.050120288 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.049584456 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.048971686 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.04803342 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.05088108 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.050925908 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.05067061 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.04863511 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.296528348 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.046771039 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.049532761 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.042667691 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.057137222 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.048639961 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.060760513 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.051676102 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.050054888 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.056608073 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.055137762 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.053245847 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.05524471 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.056988274 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.055457327 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.055947169 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.057087556 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.052040385 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.050083004 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.051975509 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.051304215 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.051490123 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.050928981 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.053072326 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.053044323 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.062523002 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.057336264 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.060323893 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.051524496 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.053715333 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.054067578 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.049946086 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.055532197 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.054406476 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.056226987 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.05882535 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.057649455 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.05275679 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.051812795 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.055787304 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.057059993 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.053284113 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.054486591 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.058376434 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.057018764 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.054630655 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.055444819 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.059069523 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.052855598 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.052423954 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.054316041 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.052541018 seconds)
  done (took 151.040381108 seconds)
done (took 601.255525398 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.156963991 seconds)
  done (took 9.139469392 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.121937795 seconds)
  done (took 9.20877511 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.364766323 seconds)
  done (took 12.349685146 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.084899914 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.126917655 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.056917977 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.05116241 seconds)
  done (took 30.316238413 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.422305826 seconds)
  done (took 9.405097155 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.073503104 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.053465101 seconds)
  done (took 16.185143675 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.079060155 seconds)
  done (took 9.062588962 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.098325424 seconds)
  done (took 9.093560617 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.068133065 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.083694121 seconds)
  done (took 16.151854423 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.055925721 seconds)
  done (took 9.03686659 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.861919156 seconds)
  done (took 9.934781873 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.070994389 seconds)
  done (took 9.072906992 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.0782718 seconds)
  done (took 9.04035542 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.970904547 seconds)
  done (took 9.952193678 seconds)
done (took 169.928941117 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.062190573 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.057616147 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.053650466 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.056285361 seconds)
  done (took 30.212736239 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.088060302 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.090409611 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.098030487 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.091499154 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.080616274 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.083642527 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.091976387 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.090557935 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.076552867 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.092463392 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.091961223 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.085604841 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.093057188 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.099077417 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.094996059 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.086319065 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.088904573 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.089811709 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.084595339 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.09985895 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.088939015 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.09081693 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.053256854 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.056351105 seconds)
  done (took 52.044743382 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.245137675 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.120653732 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.210444359 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.107551404 seconds)
  done (took 10.663592876 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.056431194 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.119319405 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.105919272 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.102862728 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.107016933 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.158531841 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.109045008 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.189416911 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.181552678 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.184708956 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.055409129 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.076728194 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.075450878 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.104712417 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.159606107 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.052084655 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.053671463 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.183862414 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.117934144 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.311249712 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.056455057 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.108469888 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.107508342 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.110729881 seconds)
  done (took 52.865942886 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.05139352 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.062356243 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.064667525 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.055776106 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.051350467 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.053098516 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.06254687 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.058282034 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.068188481 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.059112246 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.05494593 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.053016176 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.066888735 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.058120649 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.056578583 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.068111865 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.07403273 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.061772062 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.054074617 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.063046137 seconds)
  done (took 43.179186146 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.049470678 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.902682815 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.400960725 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.307329998 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.056285918 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.056130937 seconds)
  done (took 32.752580987 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.063878983 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.06878833 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.061855364 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.082274708 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.106843814 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.064469127 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.113809534 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.213058467 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.065597382 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.115827594 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.070667768 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.055354339 seconds)
  done (took 27.064122909 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.047736284 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.052780787 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.050725567 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.069639537 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.067526163 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.057463809 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.062442692 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.053396152 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.058384694 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.069465272 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.061667424 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.064345711 seconds)
  done (took 46.695908458 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.270665165 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.278169559 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272866867 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.626439932 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.395069244 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.043917572 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.340296856 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.265011626 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.773712906 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.799147338 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359876724 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.04090935 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.000916596 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.976590914 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.954719798 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.295192309 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053430293 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.903074249 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.317625583 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10448951 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055641036 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.049494221 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054342731 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.350456442 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.390741222 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.050673576 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.264804561 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072238602 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.070896562 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.265318281 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.60269727 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.105199804 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.257825814 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.315819274 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398450227 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.106913317 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156494985 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.204917805 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.100460786 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.091914308 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064315458 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.068954395 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.596445475 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.067239289 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.32136282 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061720914 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.063180502 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.178194737 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.977601785 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.404651133 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177536016 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050812046 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.067236058 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.49196989 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17438665 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297607379 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058750128 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.209484751 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11516099 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.343263898 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.168955804 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157455889 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266584642 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.980366991 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.497835343 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187902665 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.053881361 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062621841 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.749783005 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.297377471 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.135582854 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.409457885 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.826515526 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.056114735 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058788414 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.096450092 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149930912 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.051117984 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.351218019 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.044647849 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.978463133 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152818423 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.451053476 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063260509 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.05228882 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.059048164 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.900161376 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.983233594 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.154164989 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.343450365 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.394304981 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.055839717 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.055709789 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.078260607 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062311355 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00377376 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.58329372 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.123232441 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.984402707 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.621459496 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.612786954 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.026798929 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.484916802 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098428273 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352774446 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.216709524 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.459736001 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.264096152 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301096902 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.644412262 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057724972 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.617000507 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136934948 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134618559 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.055536827 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.61519529 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.202251948 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.383241742 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18622804 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.05345284 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.986855526 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.065989846 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258256451 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.613859257 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11169776 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057666447 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.061877308 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.053115361 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063283308 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.166540741 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072427263 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.364929247 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.141130627 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.056970537 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994536854 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.063304123 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345859307 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.680530772 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120737557 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322551089 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.314591386 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.763861061 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.656251997 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.085196419 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.333591021 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140551948 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128523862 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.639925243 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.198544934 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.155652919 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060459099 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.193069014 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.060566359 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.061310372 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.403744924 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.471914473 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.491478302 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102117666 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.061700705 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.020240112 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.215632513 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302648393 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170418894 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.089423171 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063623801 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.144079773 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287045188 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.055250292 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.990977099 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321490003 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.309483873 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.364762446 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.473775872 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163265908 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.138304116 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065442992 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.269615421 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.147289252 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.716351664 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.602475159 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297207973 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.611345362 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.021623016 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.704162367 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355421826 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4486948 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.081533912 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.507922233 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.21831445 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.719660797 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.089513552 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.589465237 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.983940356 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066789993 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411268451 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.018322153 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.383324761 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.244223743 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072694263 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.067689481 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.060470342 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066215068 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.025474738 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17212812 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132199746 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132588156 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990269508 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.661379712 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.098684894 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.063827726 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.065350783 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.459810436 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.921991963 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016844032 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.056291016 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141131646 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.798464626 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.611532631 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.061842281 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062393912 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.659959436 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.066381352 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.973549278 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.072857697 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.97957622 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.092414702 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.356241267 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.7781129 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.359771003 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.147530092 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139572106 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.067555818 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068273947 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.767846533 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.071209964 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.766698246 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356204727 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.34145517 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.51564324 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.130303164 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.278715951 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.082939717 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.062967377 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.61707317 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.098264192 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067602427 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.272336235 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.579756694 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.426268381 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.03773566 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.149669645 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.064220355 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.345256793 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.080926355 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.623532934 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.774718506 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.075684105 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.05992098 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.323724295 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.767373317 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.064672545 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.041898907 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072448098 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.278564524 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.266039152 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339875445 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375291023 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.52195523 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.989235036 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071163635 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.088223262 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.310382852 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.064997739 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.098418422 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.513349572 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170351474 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.499404149 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.355394626 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.494088589 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.705933627 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.337020144 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.136703181 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.075734365 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.738952248 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.204802471 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.995133377 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184505635 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.995333203 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.798706105 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357214149 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.075582594 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.343902843 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049183944 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411695521 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.368775819 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.337584355 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.120551991 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.089039104 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.065816938 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112140468 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.06696352 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.225365691 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.179259878 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.076634683 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.579648894 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102022183 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.107970615 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074347648 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.603910086 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091699869 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.066905188 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.754739774 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.091509701 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189957533 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138266143 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.864488093 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.648497919 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.141730629 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.941593956 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.713229631 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.34116048 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.132078499 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.53978352 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112292874 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.476456484 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.064829755 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.284256385 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.073225105 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.609533572 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110951829 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343561643 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026708976 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.278004558 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.277032084 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.094073804 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.067628136 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.989425274 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.174358597 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.949797303 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.053836143 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.06920787 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.751327191 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.526860297 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.255015645 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.556330392 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.890893205 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.070270152 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.485554691 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.473310267 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.661374089 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104437805 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06913099 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.413590364 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.209776953 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.408390308 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.380769623 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074902779 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.097540971 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276768307 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193763117 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.98663226 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.543586862 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652556978 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.770299453 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.080041946 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.276016334 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.424628947 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.343725896 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101968115 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152194339 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.473977456 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.345825222 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145814808 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.993262734 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073789519 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.470094018 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.468913367 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.163822158 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.312020566 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.398423743 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.653948322 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.650840386 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.475493892 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.548904638 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.497227244 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.467461455 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289080122 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448644784 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.398020729 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.951841504 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.483663586 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.284362364 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165182782 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35815697 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.943935606 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.786161453 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.314870101 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.075695205 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.996579316 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.278143545 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.076433514 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.50419188 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.59722397 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.325187195 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.36514223 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.561189372 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.606250138 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.234008287 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.09621959 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.036981875 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.09494259 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.088344272 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.071057816 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.551154899 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.361801911 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089642757 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.013559014 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.742771356 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.99937231 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.289803648 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.234466129 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.104514417 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628049971 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355017221 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.188354918 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.365887263 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.298549036 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.10832703 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994996091 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.812181418 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.023294568 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170934122 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.501430776 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08781089 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.074664899 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274572658 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000545236 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114857572 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.077250403 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276807444 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660322531 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.353808967 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204299009 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328096052 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.376575755 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.999668443 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116410387 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346557801 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.999254454 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.662159672 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.776647904 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.114215257 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147003739 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.075728689 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.075014665 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343441152 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.435559801 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.187030343 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.736600124 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.104004323 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.097235659 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.427957041 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.179936649 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.083077668 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.081263639 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.520778761 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.307766525 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.044030572 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.051099702 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.284289785 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15696183 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.267926095 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145287095 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.591038705 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.076588956 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.998553555 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187331228 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.010231149 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06565463 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.877825196 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.137775723 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.075744435 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354762847 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.740663965 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.274890575 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.471108377 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.111684141 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.244892805 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114172541 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.084406804 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.079182033 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.478530103 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.384604525 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.072067058 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351822833 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125772534 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.077709857 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.736173814 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.043421369 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.081562683 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.785734785 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.995127251 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.801073861 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.466833041 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.212526942 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.081669724 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.076050807 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.001424338 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.073537934 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.245948453 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.067423472 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.079722979 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.448479229 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.422148901 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177834576 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082486358 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.074803207 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.083883645 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.288689663 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.591706717 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095320002 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.773872777 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282252099 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07995777 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.554763091 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.530892341 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.320051155 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.114003416 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.250375738 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325487351 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.622641631 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.249726971 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.048931837 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304337511 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.082883462 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352191966 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.354778177 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.08025431 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.276139041 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.641283858 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.369429396 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.429576562 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.394843901 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.145349204 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.256656222 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.193324231 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.078589893 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.082071182 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.351517944 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140563479 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077749939 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091502097 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.63593781 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.797182351 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.583150155 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241775931 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.423232281 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.961853568 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.83785062 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.086212191 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.003783736 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.085966969 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.104278991 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.085981363 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.009322491 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.855661475 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.809756777 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297310445 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.394921419 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.004530802 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282575902 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.676621214 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.007648829 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.047708331 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.079673364 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.336084922 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.005991209 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079696057 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.034069977 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.37484658 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.776056411 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.348010269 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.081626329 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024381997 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084648113 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.088283963 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.080255276 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.163413598 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.085513797 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19321806 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.358762218 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.486517214 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.196028298 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.720172955 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.807129353 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.025342841 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124341249 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.696840177 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.651196202 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.380211667 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.215311968 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.807659538 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.025976729 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.084241823 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096670425 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.327528688 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.089138027 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082403133 seconds)
  done (took 2202.452417766 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.102579043 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.125580603 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.150613517 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.232790686 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.202228755 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.137295197 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.166540612 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.114355352 seconds)
  done (took 59.243228133 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.091755226 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.062491139 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.088540768 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.08301249 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.083391092 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.108763637 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.268016535 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.108542209 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.088194183 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.085415707 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.084017457 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.085826447 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.082310333 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.078826781 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.087478647 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.372358045 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.107580073 seconds)
  done (took 80.023034115 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.138707519 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.970896739 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.083326442 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.870616111 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.124395638 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.379293996 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.085912965 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.088924583 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.414716838 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.373879922 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.090396064 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.084514331 seconds)
  done (took 94.720491613 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.087980833 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.083691819 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.082453978 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.086333201 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.083486253 seconds)
  done (took 12.433722185 seconds)
done (took 2746.396570212 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.397730479 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.174957548 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.155728156 seconds)
  done (took 6.341695092 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.226278936 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.276876295 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.389075974 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.411624054 seconds)
  done (took 11.318275661 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.375015744 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.470741389 seconds)
  done (took 6.854311256 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.456239275 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.098703737 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.476722282 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.086148642 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.088974328 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.085537565 seconds)
  done (took 23.279285816 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.081480512 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.089256194 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.08443817 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.086075002 seconds)
  done (took 10.353359385 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.087954621 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.866001234 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.090821779 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.095077697 seconds)
  done (took 22.154088977 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.268245283 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.064168141 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.852235039 seconds)
  done (took 10.200791632 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.71174365 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.535759467 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.697857001 seconds)
  done (took 9.960648467 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.231224 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.923662911 seconds)
  done (took 8.164337561 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.236752892 seconds)
  done (took 4.24560369 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.923857304 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.402756175 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.566942224 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.612048687 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.685302732 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.311566887 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.40301194 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.350312304 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.490429937 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.487621816 seconds)
  done (took 27.246863045 seconds)
done (took 156.556746674 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.514277965 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.102233414 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.297906728 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.454995486 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.32359678 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.287696882 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.384059827 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.444787862 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.128434443 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.117643245 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.456825065 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.32573624 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.326241497 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.101726101 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.333874224 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.105073561 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.320148564 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.532894175 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.138441564 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.377822745 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.386874158 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.101714281 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.296008863 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.12345959 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.321233865 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.242274807 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.704868793 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.109772018 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.28484164 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.722150441 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.247007083 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.525072768 seconds)
  done (took 176.153956676 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.959123153 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.082939796 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.085947569 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.084794221 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.379705915 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.091079436 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.083932078 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.085701888 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.384728995 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.370830804 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.087586874 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.365609674 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.087725764 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.084163334 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.089170189 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.087766315 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.481995813 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.996095215 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.086029465 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.084943368 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.091605391 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.21154617 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.090135279 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.229703778 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.471169751 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.091064817 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.09094202 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.087603721 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.092945154 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.086207369 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.093541899 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.090024805 seconds)
  done (took 214.802071912 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.089936931 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.089232335 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.084705362 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.090494942 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.095024389 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.094683917 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.085277933 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.089054256 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.934958952 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.924332833 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.09531354 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.097108413 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.090656272 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.089222358 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.092310791 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.094294101 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.091781724 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.088785764 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.092472134 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.089983655 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.094559046 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.754243167 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.09477341 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.766353579 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.099346604 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.099669151 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.092615686 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.098380329 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.095182578 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.0975842 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.093944261 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.093617 seconds)
  done (took 228.003595161 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.336404797 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.095243661 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.095928209 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.098720908 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.100109968 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.091570698 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.087518885 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.341386318 seconds)
  done (took 21.266500094 seconds)
done (took 642.245169484 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.467180934 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.82399281 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.224566875 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.117520559 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.373335098 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.162465091 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.118074114 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.17834295 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.760172907 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.189943897 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.525629149 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.121710269 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.856740125 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.145023095 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.228257913 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.177297081 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.488141011 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.764517724 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.253375639 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.787436692 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.311213938 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.067295409 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.196849443 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.799278644 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.54780971 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.078061095 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.122491996 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.488281548 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.12035171 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.350500433 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.747046424 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.359148886 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.131463386 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.116734976 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.170813652 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.158458782 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.305622126 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.124431943 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.231163503 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.861853133 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.789357917 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.648862319 seconds)
  done (took 109.510333271 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.104275084 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.100901834 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.106460939 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.10912339 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.107818369 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.10110558 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.103975825 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.105803467 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.10520755 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.10391524 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.108918746 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.114358744 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.101672944 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.109738351 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.102421586 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.108500995 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.104343654 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.113443196 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.105817146 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.106372186 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.11024053 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.108249701 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.101687293 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.106222891 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.106770338 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.106206963 seconds)
  done (took 56.791178966 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.101692663 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.25417466 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.387602167 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.131841161 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.103016384 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.103014189 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.132033341 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.107451983 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.100332227 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.105209599 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.195960757 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.100512537 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.113552509 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.383082191 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.123508593 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.104187589 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.101204691 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.100538417 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.260410161 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.117706603 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.132813553 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.110205122 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.130165782 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.118367396 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.104021572 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.107766578 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.107314584 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.503986051 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.113350761 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.195592582 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.144217951 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.137077511 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.447821425 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.38409321 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.166262828 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.10746445 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.099097579 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.239922119 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.111835132 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.097757436 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.128246931 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.10849262 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.388407734 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.613154113 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.116260093 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.099082164 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.505937235 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.251844856 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.149672725 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.113053215 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.394486617 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.121986399 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.092641558 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.103461727 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.140620482 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.114868201 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.101656415 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.349451269 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.118890192 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.133090727 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.103824948 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.104976716 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.270262366 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.115908544 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.255909545 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.115082934 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.110514945 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.103684402 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.395108654 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.136170288 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.606763074 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.122895291 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.100611742 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.20176076 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.262141041 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.516809737 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.112114142 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.264814639 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.470101203 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.142050489 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.114090354 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.496373713 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.13900217 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.110376087 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.106314361 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.109467298 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.103420184 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.152317723 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.129437488 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.52638651 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.606245031 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.365770154 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.138639739 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.115284873 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.111606522 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.318950224 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.113346287 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.108112467 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.38824561 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.636981283 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.117201398 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.114360136 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.593101083 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.118803063 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.136481193 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.110653681 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.405668587 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.133970896 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.153743938 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.106437811 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.111069704 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.110656817 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.136535241 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.120617217 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.106718366 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.582622609 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.253351216 seconds)
  done (took 259.671170711 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.112435036 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.090646426 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.110483931 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.104666689 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.104540589 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.105377109 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.107089708 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.109890761 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.1110484 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.110269632 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.10660127 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.102080511 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.104452043 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.106525864 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.149663182 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.11203144 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.595365967 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.108465405 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.103136935 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.111609718 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.678725567 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.097051529 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.107479146 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.108571532 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.107732182 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.108962763 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.110486935 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.146921994 seconds)
  done (took 174.169866289 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.110513877 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.157831033 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.122708672 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.156579366 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.121170479 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.110970685 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.132018571 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.122845236 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.115705603 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.110264226 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.108758608 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.134697745 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.116638127 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.183056774 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.133925862 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.13953362 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.184535902 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.110818534 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.110864521 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.111577514 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.1585972 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.117787317 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.135726721 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.1628438 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.121778514 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.156673799 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.119383346 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.112014543 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.107769352 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.192977948 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.124954716 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.138226152 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.142012571 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.13159029 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.203419658 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.196754753 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.190337024 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.136952074 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.11198562 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.112164159 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.110807864 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.111349201 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.160482436 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.122688848 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.111289843 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.20353616 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.126612034 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.113395936 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.131075131 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.112306735 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.12013799 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.123319315 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.144561613 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.208039731 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.148187211 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.138079855 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.135866748 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.131003663 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.115121791 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.185491619 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.117086437 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.195433396 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.13018515 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.114107551 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.109523614 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.118757629 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.151015821 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.146568865 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.182440478 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.120974034 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.167927234 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.145995872 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.120593799 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.10715313 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.114197895 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.162039662 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.166966424 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.161590406 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.161311841 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.145859056 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.116251586 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.107660108 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.113721296 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.137422614 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.119821824 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.196927982 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.199287968 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.120394655 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.11122648 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.109004851 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.11614103 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.133426082 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.161242588 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.155475302 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.192359619 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.145557109 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.14600917 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.112815691 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.124540535 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.116893286 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.138195011 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.113826604 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.116070095 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.458977684 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.149341126 seconds)
  done (took 226.812172659 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.48598699 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.159025309 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.176981871 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.379035359 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.494991148 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.232153472 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.14783416 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.168396659 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.166684567 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.278402647 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.219111535 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.210024269 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.147383561 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.128660852 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.160064305 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.169404039 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.193191241 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.453321279 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.264603424 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.836814994 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.153273659 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.431862485 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.443399939 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.507900164 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.196560483 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.569360889 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.795869712 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.249485245 seconds)
  done (took 68.858345809 seconds)
done (took 897.834066524 seconds)
SAVING RESULT...
DONE!
