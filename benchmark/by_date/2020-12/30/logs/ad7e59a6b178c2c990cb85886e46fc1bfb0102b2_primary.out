cset: moving following pidspec: 2928
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.886900455 seconds)
loading group "shootout"... done (took 1.184724147 seconds)
loading group "string"... done (took 0.672261035 seconds)
loading group "linalg"... done (took 8.64226592 seconds)
loading group "parallel"... done (took 0.166042837 seconds)
loading group "find"... done (took 3.049936295 seconds)
loading group "tuple"... done (took 2.13946384 seconds)
loading group "union"... done (took 14.905482616 seconds)
loading group "dates"... done (took 1.45669498 seconds)
loading group "micro"... done (took 0.220686441 seconds)
loading group "simd"... done (took 4.793867054 seconds)
loading group "io"... done (took 1.071531232 seconds)
loading group "random"... done (took 9.5868409 seconds)
loading group "problem"... done (took 1.525443955 seconds)
loading group "array"... done (took 25.392485029 seconds)
loading group "misc"... done (took 1.897763957 seconds)
loading group "scalar"... done (took 43.808430276 seconds)
loading group "sort"... done (took 3.342854306 seconds)
loading group "sparse"... done (took 12.807902806 seconds)
loading group "collection"... done (took 18.77870756 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.42474358 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115813151 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128511938 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114285913 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186146182 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.119200168 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129233332 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08437646 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.873675201 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134230391 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115092174 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426948888 seconds)
done (took 5.284730959 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167956956 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.08929148 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083894488 seconds)
  done (took 1.377705449 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070373487 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063182892 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06686875 seconds)
  done (took 1.406775245 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064844156 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133842783 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066068271 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066284552 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06627702 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06569572 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065591321 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065965862 seconds)
  done (took 1.741008852 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07078428 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067259043 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.0653692 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067557581 seconds)
  done (took 1.479325552 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.064237028 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122177241 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064754125 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064048818 seconds)
  done (took 1.520130369 seconds)
done (took 8.984492392 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140161931 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.824877026 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.768582162 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123843938 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250236909 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367970511 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.125209226 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.184975553 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.08960143 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074920822 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122695667 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077856528 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386552518 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.503781403 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071406105 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176701039 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.654388477 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087453146 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135855087 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.455647151 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072043177 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087384817 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085278722 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069870046 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.330435513 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154005706 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.660802026 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094590285 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067935107 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094233044 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071220175 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078363522 seconds)
  done (took 10.729718066 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091239609 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091642544 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068779916 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124803782 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094856059 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070417013 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07552061 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067592747 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089411723 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125687017 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.0912417 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.09960607 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066570404 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069085985 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074073199 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198782502 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08172181 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081469126 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067401013 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081424727 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106812879 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079455849 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078980342 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078452956 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133548145 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171430494 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098951532 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099214553 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066531264 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079471213 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11593783 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126907209 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067323827 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065511579 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121138186 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096132514 seconds)
  done (took 4.661716287 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.880950939 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096269535 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083497327 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074357936 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107335914 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114151543 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122647331 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12348309 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100261061 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068913476 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.120804493 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154571965 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.669630968 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.166311236 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070002228 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.121211724 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.359253518 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.066153199 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069247571 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068030851 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071395272 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070117685 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113256677 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066111046 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.180651017 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.579794408 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070414518 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069423115 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095955726 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.0647759 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141058248 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092593239 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069988242 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.541416666 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065343575 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06341679 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.198120441 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095393415 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067189412 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068270756 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079788815 seconds)
    (41/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064918129 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066218164 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109561443 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080409381 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.519440935 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06991882 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.586160045 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.227043767 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073258194 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072039077 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101570375 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064117952 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067443835 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.975926656 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145269599 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066736101 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.275306182 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068199618 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068471901 seconds)
    (60/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064181154 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068984387 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103242162 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067120532 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068054905 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072594434 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095741423 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.885235884 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088226737 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096445882 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067320607 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399049174 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074393914 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068921148 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069503524 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069182931 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107041679 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066427861 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065741601 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112107526 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096245339 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090317195 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069827995 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067563583 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065690284 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.332259973 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.155223606 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064780036 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067107147 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.478792742 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06340824 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06561922 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067882952 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091764872 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.184812637 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064401562 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065252689 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099656997 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068822855 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.067360688 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.715052272 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067523439 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.48669324 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069544028 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104319287 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123321036 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067906968 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103089801 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068496457 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065018245 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073848916 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065976717 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064682339 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069535196 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066238888 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066552601 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069703953 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068437227 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067923317 seconds)
  done (took 23.311258315 seconds)
done (took 40.794662426 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.316864285 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079571714 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079143475 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079661636 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079163811 seconds)
  done (took 1.896603552 seconds)
done (took 3.255329599 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.257451555 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.07553476 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064293884 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.206889211 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089503789 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178161227 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.218609338 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.161656871 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089908211 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089385273 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089453299 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.224812861 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.230878757 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089667374 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.160630223 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.22894464 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.089721325 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063790015 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089342987 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089497397 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089112218 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064137044 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089112941 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089955276 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.159192412 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088677442 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063337197 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.158432708 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.088082407 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.159222172 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.088002028 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087250883 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087657593 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158439077 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087817351 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.156987205 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063670926 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087583614 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088044114 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087443114 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.087223709 seconds)
  done (took 6.223945351 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073679339 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203069002 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08474181 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062156197 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071626961 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082598371 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061853206 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082219071 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091890589 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082761404 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082669701 seconds)
  done (took 2.323320835 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069055418 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083008567 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084820968 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061622242 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073171241 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08338011 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061453343 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082809975 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085884778 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083518772 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083098671 seconds)
  done (took 2.149697602 seconds)
done (took 11.972412977 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095245835 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065257511 seconds)
  done (took 1.439737648 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.225952994 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.498938103 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.899550274 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090334763 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071799331 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085613374 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197294035 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067023416 seconds)
  done (took 7.603482115 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.102441329 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068608147 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068277742 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067688421 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069406932 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067682329 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068594955 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067351324 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069776174 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069822236 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06878195 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067387734 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067590624 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.0681136 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067671862 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068952051 seconds)
  done (took 2.52086398 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103916665 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069365058 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099460065 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061574731 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071736655 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062259588 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070577374 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072684232 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070047803 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071490355 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072829211 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071545256 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071393886 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07143827 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072951159 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073154687 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073231011 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070688141 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073641333 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073888347 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072368707 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072949077 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073357227 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071541157 seconds)
  done (took 3.181549302 seconds)
done (took 16.044021012 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172319733 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075141074 seconds)
  done (took 1.53717232 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065943432 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068332694 seconds)
  done (took 1.441594734 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071042088 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060182227 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.077923874 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070348566 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061366565 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060671906 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076956672 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061353869 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061442105 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061097407 seconds)
  done (took 1.967023615 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061395755 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06846784 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066542069 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064703702 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066430237 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062084859 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065177573 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062487496 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068901117 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061673239 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065577162 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083020435 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065059682 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083877354 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065072483 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066233412 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067504038 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064635324 seconds)
  done (took 2.516827206 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059451695 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061401004 seconds)
  done (took 1.431342277 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063124948 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061645119 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063713632 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063720254 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061493621 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061194915 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061612362 seconds)
  done (took 1.741617582 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.426016409 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124264054 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348642098 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06918393 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077011458 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259189104 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064129709 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068723536 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068778775 seconds)
  done (took 2.855693347 seconds)
done (took 14.812787253 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081055803 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182169575 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088060476 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.383515316 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091870597 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.066743791 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112581663 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176998773 seconds)
done (took 2.515702409 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.279694457 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.238936265 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.408088292 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126003427 seconds)
  done (took 3.091223767 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329631378 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078739015 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077168964 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066767998 seconds)
  done (took 1.880741415 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063871709 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071161816 seconds)
  done (took 1.457464177 seconds)
done (took 8.040946239 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.070221453 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061275053 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067032091 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063593046 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.063414424 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062783932 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064136394 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061754352 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 0.063879248 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.092332147 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063956438 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063986831 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063107603 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063563821 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063201539 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063877776 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063793546 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063306974 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063015843 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061536862 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063498153 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063822054 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062674113 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063217674 seconds)
  done (took 2.90698578 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077603809 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065347769 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066640037 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065886377 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067079048 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06633181 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066219222 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065535249 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066346098 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065235115 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066823195 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067011467 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064960514 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067039714 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064736254 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067088076 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.0667506 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065713349 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064850568 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06713376 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06648703 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065595081 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06761503 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066417669 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067171211 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067089755 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065008309 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065193462 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066812014 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066977796 seconds)
  done (took 3.337281628 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064476727 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059317081 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059469827 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06974482 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059437971 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060076076 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060176866 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059144244 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059670239 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061070203 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060324644 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05981097 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060896833 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059653285 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059976939 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061019006 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064907829 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079480272 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059741152 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059592671 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064128574 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.05994483 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059628754 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060007038 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060675281 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059776856 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.05974761 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060223476 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059956716 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060697027 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059847732 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064435708 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065129303 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060218983 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070321559 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065045784 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059892773 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066605774 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061247515 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060378612 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059676428 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060253128 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060041722 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059702095 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070697543 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060237843 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060909995 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060843466 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060390203 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059849635 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060021727 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062011233 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069065615 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061386203 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060055878 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061116907 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060072179 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06082231 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060127547 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060144638 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059975205 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063739115 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061535984 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060590572 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080495488 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061533862 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070928957 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060494575 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060568494 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064264592 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060912544 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078332634 seconds)
  done (took 5.820636758 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.06992435 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071769754 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079429323 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069845053 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06403632 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060839153 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064374597 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061229732 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07009956 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065093465 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060805746 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064627135 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070482279 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064986662 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062091446 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070390198 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064788275 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064028959 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060978048 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065326785 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06220686 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064692692 seconds)
  done (took 2.802161546 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137387784 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066014234 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106755108 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070791224 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068890489 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070302718 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066471522 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066303021 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066235781 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067349293 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066894333 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066475963 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068909909 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066729596 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066811025 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066408839 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066121153 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06680207 seconds)
  done (took 2.661588555 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07489351 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065946481 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089871679 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065715697 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065516851 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065096203 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069388587 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070130242 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065517754 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065694611 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069791815 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065276184 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065633942 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066194783 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065499131 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065828223 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065582354 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066441598 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070290731 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069755561 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070108282 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070969172 seconds)
  done (took 2.851515392 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076078449 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064506422 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080960482 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066304282 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059868764 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060101239 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066222945 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065093867 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066246951 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064659012 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065590968 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060799956 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066790725 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065294161 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067313949 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065439687 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064731584 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065109607 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065036352 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060811014 seconds)
  done (took 2.660634105 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070147863 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062826079 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063244227 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067825674 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06259653 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06289601 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068792981 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06319715 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063363248 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085601901 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063370577 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074657873 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068600677 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066577256 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063569422 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068562335 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068316995 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069023272 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063657537 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063685435 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085799023 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063158428 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068860498 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063375122 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063023685 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06351662 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063389044 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066600157 seconds)
  done (took 3.222064786 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063444375 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062972373 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063293773 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063062769 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063315837 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063242911 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063184593 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063270718 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062833091 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06328574 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062830431 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.0629152 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066048948 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063218466 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063733694 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063223545 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06283803 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063230754 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063198923 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063215077 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063016969 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063062655 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062876712 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063572018 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063613304 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062727342 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063071762 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063341081 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063011327 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063506276 seconds)
  done (took 3.248677236 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071256718 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071341183 seconds)
  done (took 1.491953358 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060165471 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077115295 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059377813 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071914893 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068414157 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063395569 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069068329 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070383517 seconds)
  done (took 1.884368732 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064933498 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09129696 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061855747 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062012844 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065165165 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128440006 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075049138 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073967009 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07631852 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064472437 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062723193 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074399005 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061160609 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075594077 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06343303 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070985052 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069190315 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079793976 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07461043 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060233941 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074257548 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062153995 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060645838 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062706022 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061344112 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068979336 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077969348 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074776228 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070210985 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059417462 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080330478 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060166905 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06169857 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071033168 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065827647 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061094812 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09926809 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061550288 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066479281 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060758617 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073803057 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082353655 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075830003 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079352362 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062278502 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062381156 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060289219 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062839748 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064157526 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070864212 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061120076 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069004656 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060552979 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06269662 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072479547 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061383619 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06688649 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070843037 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075536737 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071847175 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070054974 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076890259 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070224516 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068294441 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061756392 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080802543 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062344785 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07404917 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07577388 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061473864 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074392855 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059835507 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059330325 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06002548 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094268879 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062404776 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06190508 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060440338 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060413259 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062050361 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070133523 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065716955 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068052912 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063728111 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077115799 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07013797 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060381879 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067366398 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078611498 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063816183 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060424136 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077381176 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063612218 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059674672 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078187286 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070110522 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062141504 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061206815 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063800369 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073924594 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061659876 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058973509 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069033434 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06185143 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06236771 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064772304 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068660563 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060329247 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070664053 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064838371 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062006684 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059023151 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065243591 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06091283 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058479627 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069560555 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059699844 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073864077 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066266827 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.0745802 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074410474 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070277822 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075588695 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059387122 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058085292 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077575718 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069051111 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060992839 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077720795 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059074049 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073191217 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059328231 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060895585 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.207273698 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.0613442 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064336111 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06201782 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066834412 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063098044 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063110131 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06741061 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070360661 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073492262 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062590831 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069963809 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.06097739 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076734436 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071155512 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065025621 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0639538 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061172411 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072577497 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067445485 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.06960107 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059905083 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061275804 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060793405 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071767157 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070393219 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.0622208 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067734181 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065132156 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060725335 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060913297 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06175066 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064164286 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063719085 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061104369 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068268687 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069378596 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074972333 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067933072 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070055851 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059716468 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060048693 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061769694 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059779663 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065103952 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069952967 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076329675 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072119534 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081646078 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060566234 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070692448 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062007562 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077795477 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074008472 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061170007 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06489792 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058913566 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061989813 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07001707 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072209723 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07458855 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076178155 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065068587 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065268509 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060208132 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075957068 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060924058 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069267518 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070092878 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065134993 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060824622 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062235276 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069636134 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064859547 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.0602736 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076123373 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066532424 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059596164 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075202082 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060560771 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071578857 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059847163 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06374699 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065962071 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062275316 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070360513 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076143277 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059000685 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061123025 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076382332 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062292894 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062199114 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068775927 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076147887 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064652821 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068310186 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071338588 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07026911 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064522493 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.06993176 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.06103702 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069975024 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063587186 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072920892 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06056654 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078873663 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058899762 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07577746 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060695926 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071763822 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060967273 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070041804 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061103904 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077655281 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06190217 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061219597 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072484831 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059290467 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069762968 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059921888 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06506871 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066808734 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069143731 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061116053 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068954387 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061144658 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068521647 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064034751 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067621597 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.06896719 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063960487 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058955744 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068230847 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071086534 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068070241 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060618177 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061231003 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059868053 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.210756608 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06365588 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063567883 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070451398 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066305469 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067551383 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0628859 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063498346 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06298988 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069578293 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070231509 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079159863 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069705882 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068710532 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06994494 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059914729 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076660396 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060940932 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071474655 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059588762 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066327056 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069879645 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060547392 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080192827 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062520111 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068930254 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073283407 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069600629 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064064071 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078635193 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063689321 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069257067 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.0687301 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065001827 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067231182 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062311904 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069638043 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070861863 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071411336 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061717931 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068814039 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069722199 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062378568 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068417327 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062261603 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069038244 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062417974 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059486496 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064946334 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072035585 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065029617 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065321792 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060976074 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059334373 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06108842 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06735148 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065195472 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069163279 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076172482 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059383507 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06127602 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059860176 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064052681 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078914934 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070126644 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068937982 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065296894 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059401955 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062653319 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062470549 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060679246 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064624933 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059846351 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059996311 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07161933 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.0625702 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064996807 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060973973 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061584473 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069825399 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065184564 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061447369 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067083846 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060224136 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065400135 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059688812 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061874871 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064817674 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059762348 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064276181 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070977133 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076945495 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067126039 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069432526 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061618627 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068477608 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076559172 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067982146 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061649485 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07030804 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059608844 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079406435 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070165766 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069018368 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.0703585 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061540584 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077602784 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064799064 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070718396 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076222754 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061349061 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067211911 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059667285 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076139544 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064837454 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059666995 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068113223 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068257331 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066298267 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072357717 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060855455 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068329024 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065425162 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063406104 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061392293 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061009229 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068912063 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076107811 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060300486 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063705036 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06776919 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068093927 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064209067 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072119524 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068377045 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060970778 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061477123 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063223393 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.206087728 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074392474 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062811061 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066127828 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066485127 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061116058 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067872571 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077741969 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070805633 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070704844 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060149329 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059690517 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079097927 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064285606 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064110481 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068911334 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070205853 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072830565 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070361941 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077884012 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061056356 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06621496 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072967683 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061338599 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06028482 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064509654 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061889109 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069559047 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070810261 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068214985 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062817347 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067335003 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07452328 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061909405 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06532013 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065084715 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061189009 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071383487 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068943272 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072922155 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06175107 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060303598 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064307293 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069514398 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068150991 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069625432 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061397459 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067026322 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074480095 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068026552 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063636615 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059665347 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063447757 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069663905 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06496242 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059929628 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.0653501 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064130899 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067517098 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070463904 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064892832 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060301782 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077769034 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069157749 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069853368 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062421608 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063051332 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061416872 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059969959 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071923279 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060104796 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062178342 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06520996 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062248314 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078757857 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069599283 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076901568 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061505006 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065472452 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060017767 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07049602 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065201273 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06125482 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071165931 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059567787 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076141169 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072763717 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066416248 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059954987 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065880741 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068607891 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075694533 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070525498 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069968346 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064276754 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070639686 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062581993 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072112042 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060448572 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059586602 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070939644 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069436621 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073500527 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060183966 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071086339 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062555067 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068979622 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068768094 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06220952 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062289856 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062232407 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069993775 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064989723 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069856879 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064960549 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077795918 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061257369 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071685392 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.06952547 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071311977 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07420207 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072783927 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06852674 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060908691 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067701075 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068022119 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061300157 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064546277 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062588414 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081041697 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061073346 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060918475 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074096024 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065342993 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059593969 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065690548 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.207619845 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072168759 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063064288 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072485962 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065390723 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061745855 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065447771 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06550384 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060010746 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060016612 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060745394 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070451877 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06537474 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060691659 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079825828 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062297289 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069549183 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071630986 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066930502 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061997883 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059195748 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06116275 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07386908 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076246796 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06415794 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069381012 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061898922 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069725929 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059145098 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069912203 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06915762 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069650545 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060146566 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060574322 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076239098 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076142014 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06535643 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070465325 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069853334 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062120484 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082785321 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069439237 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061549836 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071748423 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062843 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059448622 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059086173 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062083142 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.0721526 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059767672 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062913918 seconds)
  done (took 41.822512378 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09638929 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061712404 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06014872 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060025841 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0682582 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060953564 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060410279 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061493507 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061091309 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062925537 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060272796 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063592649 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066682334 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073255324 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068854328 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063930362 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060315436 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061529168 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060150028 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061288933 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066864396 seconds)
  done (took 2.822032222 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06247016 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06425863 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064469774 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064469391 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063661739 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060515806 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064959216 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060258153 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064860931 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060889732 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064855451 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060203495 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060617634 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060558252 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060597638 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06177255 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064773768 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063952639 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060168462 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064041157 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062136529 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064469404 seconds)
  done (took 2.821785167 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061057214 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060764309 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069094327 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059201156 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059761472 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063166754 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059311521 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064797486 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064296994 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064299173 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068888808 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060709172 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059472908 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.0655419 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059295197 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06046787 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103175284 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060799339 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061223643 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059454537 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062708154 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069708894 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059572205 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059863736 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064223318 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063293907 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059736814 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062410651 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060585063 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064163092 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06086578 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059309986 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069202388 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069305939 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064091886 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064172457 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061545316 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06070152 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059572606 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059863707 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068552661 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062042362 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060174553 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061290366 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06928048 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059841623 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059582624 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069336264 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05964977 seconds)
  done (took 4.555463362 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069300953 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113364743 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065608165 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094142828 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073376339 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066511696 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065688476 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094827312 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.06104415 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061892044 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074121418 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074616719 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063595456 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064782335 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067208239 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062616039 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063406422 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062236489 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065871018 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062249528 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065663121 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06736468 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.0728103 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073316681 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063832584 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061932467 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062652096 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063980929 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073145937 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066399863 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064170308 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064857576 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073478665 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067583632 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062118568 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062541318 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074086674 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063167043 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062657266 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060807981 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062293159 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064175413 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067007143 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074298402 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063295851 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067532343 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062783607 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060983551 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073662157 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062655724 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066949158 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074607249 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064115733 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.06353944 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064521133 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07391768 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063233041 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06187793 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063177888 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073290927 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061247034 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064127785 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077061161 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062599252 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.0664932 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074590116 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067733328 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064030341 seconds)
  done (took 6.206304356 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068043934 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095595411 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07603832 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075607356 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071428654 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071219322 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070827965 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070741752 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071001133 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074258139 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071215862 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105984737 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067105263 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072818399 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071129372 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071909433 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070603269 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070846041 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070707447 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070597506 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070669223 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076200855 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070880505 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07568252 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072919835 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06754732 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07087662 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070637049 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076174536 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070634108 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073213991 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070891864 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070658977 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076081521 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07322571 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070303395 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061371027 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070639912 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070876228 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070953598 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067161321 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076596135 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070692199 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067205798 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071001745 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070610645 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076501643 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073283126 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072934761 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074002756 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071068527 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076569639 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071271146 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071596534 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076363714 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079029852 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076296778 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076414879 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07169388 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076297473 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076524175 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07858849 seconds)
  done (took 6.018423985 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07232962 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067052529 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079242321 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059828689 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059883505 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069646292 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059880952 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060464112 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067269499 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067299537 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069023335 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070073437 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072219366 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068930433 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069973747 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071488773 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069617245 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069771726 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066898405 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069587154 seconds)
  done (took 2.833820154 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074537306 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079550309 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.0660697 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069144233 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065694684 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069360879 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064824234 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06581963 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0663672 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066024603 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070863323 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070539838 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066028801 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069264606 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070731286 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069878067 seconds)
  done (took 2.565390082 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.063159284 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068221894 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.06684121 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061460534 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064219504 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060758233 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061214314 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059536496 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06283742 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074622096 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.06097037 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063637887 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061202991 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060360972 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060979677 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064251832 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062636051 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061026212 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061404268 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065323819 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069614567 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061761147 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06416706 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060915874 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063052358 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069539665 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062954637 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06339339 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060781792 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063477152 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063218871 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067735732 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063517109 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061402616 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060128237 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061057588 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061819629 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063914717 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063600689 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061720585 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059817787 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066681281 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061400629 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061665648 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06268527 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06394234 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062780313 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067040847 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061520989 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063547025 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061309828 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063035377 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062118223 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068578427 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06347266 seconds)
  done (took 4.943282493 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076264073 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06546537 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059545762 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059530735 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064934648 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066052068 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065196041 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065451334 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066237488 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06019064 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066264494 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064946055 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065944214 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065610122 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065919765 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065358697 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059715804 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065629069 seconds)
  done (took 2.64509368 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065263015 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066198498 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064827756 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06248606 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061603459 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06665127 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059909472 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061714119 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061363049 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061802298 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061675974 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061790346 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061589065 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061496135 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065834888 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062272138 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061608314 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060081724 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06207899 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060298273 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066899 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060162595 seconds)
  done (took 2.846260569 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086340145 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084029495 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127631636 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079449208 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088196811 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.07118723 seconds)
  done (took 2.006463538 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0923776 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097992318 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065238038 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065250284 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070190666 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068145503 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068471775 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068192442 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071236036 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072175855 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068173326 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071958813 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07184231 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073880223 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07026661 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070286722 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068657724 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068570605 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065219168 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076054177 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068537964 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071582851 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068673891 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068088232 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068313181 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073991136 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071923604 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072487691 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068288694 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072334401 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070217224 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068507571 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072316133 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072256151 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065454842 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071895822 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0687143 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076711496 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070194745 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073948132 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065064072 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070276298 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072097325 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071855443 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071851552 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068617478 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071911144 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068434101 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069214261 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078013637 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070475901 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074272032 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070695555 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073243489 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072468785 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078024633 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072614122 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073870534 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07082758 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072741457 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074282829 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070512707 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074171299 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072871794 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070349219 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074403708 seconds)
  done (took 6.208155641 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102098655 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065685117 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068974679 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072281718 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074087877 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069045666 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068663972 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068830224 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06933163 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065803554 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104883246 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068957921 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074153857 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07730389 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069230714 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069241348 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068903194 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074052724 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065709182 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077586632 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068547597 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073877701 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073689346 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074185161 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072394417 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070289608 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068372011 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06867034 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068400342 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068394588 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07198846 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069016059 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074115813 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065757526 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073957366 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069361941 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068622583 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071968411 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068635489 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070501489 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074309535 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076674531 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068714368 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0687755 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072656111 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068450467 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068564293 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066179242 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069057917 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066012092 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073018126 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072779589 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072410966 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074151249 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068924371 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069083154 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069109289 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068714831 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06912627 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070794161 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074144489 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068557866 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07799748 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068697761 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069209229 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074175795 seconds)
  done (took 6.220836446 seconds)
done (took 128.729022367 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217368961 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188882506 seconds)
  done (took 1.86369073 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073859954 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166554477 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073171098 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074310908 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108965658 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105576343 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074269853 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071803619 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074180024 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071751969 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138951428 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074299198 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071508442 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071483505 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071509103 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071449351 seconds)
  done (took 2.87133971 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.106716161 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185747294 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.10268903 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068967641 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151504058 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076473793 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071366228 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07644626 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076779866 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069320215 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107037181 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083226112 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075448386 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076066289 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070980159 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07487029 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076425031 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076639468 seconds)
  done (took 3.112316503 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101784965 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092539594 seconds)
  done (took 1.683702181 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155120746 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103244746 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142333806 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343449796 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.1338337 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.135953954 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142713743 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.134435789 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.10806254 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130889653 seconds)
  done (took 3.010145839 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103740561 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105004787 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309026958 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102334156 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081752121 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076949359 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074919749 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079388652 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074962384 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076037937 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122506155 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074413178 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071599217 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.1241764 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099026453 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106450933 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070365688 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077913435 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079139104 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070187163 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075784743 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079689349 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178972617 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077435121 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099943497 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074624104 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076691713 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07378076 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073629684 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077670505 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078437468 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099195884 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077650967 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08181273 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076536311 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096909008 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071268803 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098979552 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073953389 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071918455 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074384914 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07837658 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071210176 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077849862 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074469049 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077089918 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079611594 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070181365 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074492287 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073446745 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07197052 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075893015 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075626566 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076636211 seconds)
  done (took 6.245310954 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106929531 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106682098 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069191142 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113013733 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105016573 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06968486 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104641887 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100136316 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109079291 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069491608 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068370342 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068504638 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075677163 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080039935 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118330858 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108491662 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070294231 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069248836 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107200878 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107175397 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068339389 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101048296 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099827597 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10704592 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068164206 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069468401 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067708573 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06820434 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073745047 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074490544 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06813876 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075548239 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.084674457 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075208649 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067555995 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067220746 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067499735 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075384909 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075785559 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075903187 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074510945 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067201798 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067570595 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068383801 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06914185 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067301958 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07405163 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075596962 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07437621 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068088881 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068982887 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067602127 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068260128 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074734378 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074001895 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076428787 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075522925 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068229108 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067948561 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069649716 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077174813 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076613415 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076086072 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069379727 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076765825 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068317282 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078533679 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081915082 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06829152 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068354136 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067997076 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068018912 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068551797 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073979885 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074532151 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068829738 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068217591 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068319837 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076671666 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074216714 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068188097 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073644292 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067725186 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068155782 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068387219 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068061501 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074013963 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075200277 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06892083 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067682346 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067913379 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067951234 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067712182 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074128369 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074702821 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074994552 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074314254 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067919062 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074194972 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074254512 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068730315 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074441502 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067663113 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067646144 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068101415 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073346528 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072485351 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074594375 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06731518 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067108385 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073450878 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075523162 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067655353 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072670613 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07531951 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.211811813 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069554947 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079060125 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070207076 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078907765 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069729183 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077952236 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069081057 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074836533 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068740366 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067416514 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068225933 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074652202 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068933706 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068018517 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068666359 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067786601 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074746102 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078421366 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069144592 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074779937 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074655762 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068589429 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074286997 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068245945 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075773121 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068346368 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068234641 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067290533 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077439882 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068198588 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067988647 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067564271 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076769051 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068283554 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076321339 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074285931 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068046046 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081749546 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076738654 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074256848 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076874713 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069675477 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068175503 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068284517 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071112341 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073323633 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075339713 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068608469 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067699366 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073671546 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077649536 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067737942 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073891722 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074521679 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074382482 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068564087 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068281582 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077426423 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077216297 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075041766 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07465957 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076235958 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068795153 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073899141 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07482583 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06810615 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082336592 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068395443 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078698768 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075248239 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07403398 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075002311 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076339291 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077774282 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077507301 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07999846 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068153424 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067955468 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074209636 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068385204 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068330949 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074070347 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068620103 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068528609 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080425617 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067260482 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077562279 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067684935 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075979938 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068095819 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068520743 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080173972 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068584536 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068655365 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074286904 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068103637 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074104682 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077508616 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074254847 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067760266 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068310831 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074717557 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075309463 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06774239 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067793556 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068292386 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073739911 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072757451 seconds)
  done (took 18.257555536 seconds)
done (took 38.54381387 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171272332 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115626962 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212955397 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203365995 seconds)
  done (took 2.295202492 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.099780935 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.064573091 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080371408 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090111974 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064497642 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076082098 seconds)
  done (took 2.009836773 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199277239 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178376999 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.245374325 seconds)
  done (took 2.150052187 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.369416059 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150488963 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.218938872 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504408895 seconds)
  done (took 2.874873566 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110260477 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100241892 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077618628 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111130758 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086021111 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061944209 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133513065 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069202048 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099712184 seconds)
  done (took 2.443907426 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138220116 seconds)
done (took 13.464589715 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.235607206 seconds)
    (2/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.268796169 seconds)
    (3/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.414463937 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.188785199 seconds)
    (5/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095272294 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.121276639 seconds)
    (7/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.104838508 seconds)
    (8/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.223970785 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091567397 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.21430458 seconds)
    (11/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.07234799 seconds)
    (12/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069132636 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.091704234 seconds)
    (14/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.179176946 seconds)
    (15/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070136969 seconds)
    (16/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076718352 seconds)
    (17/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.200526211 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073770886 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075586976 seconds)
    (20/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077889088 seconds)
    (21/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093649154 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.079110332 seconds)
    (23/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.079530448 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077376176 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065502568 seconds)
    (26/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.177937029 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077537683 seconds)
    (28/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.182709832 seconds)
    (29/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.114490688 seconds)
    (30/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073268457 seconds)
    (31/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.141377806 seconds)
    (32/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073786919 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073521222 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065955466 seconds)
    (35/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.239889145 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076984275 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142139652 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.075911987 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072328888 seconds)
    (40/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087809153 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.166487153 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067833439 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074263894 seconds)
    (44/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.221802598 seconds)
    (45/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.073308748 seconds)
    (46/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06518329 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065025856 seconds)
    (48/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078178389 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.091665789 seconds)
    (50/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.256775501 seconds)
    (51/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065945581 seconds)
    (52/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074413612 seconds)
    (53/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067717815 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078068543 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.119827681 seconds)
    (56/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164525601 seconds)
    (57/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.190552879 seconds)
    (58/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.198008743 seconds)
    (59/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069848836 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.198820278 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082323349 seconds)
    (62/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068791545 seconds)
    (63/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.18176229 seconds)
    (64/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.144314401 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074278063 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076597099 seconds)
    (67/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162368189 seconds)
    (68/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.200883113 seconds)
    (69/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.197788203 seconds)
    (70/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.06841158 seconds)
    (71/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092686211 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065190522 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064667577 seconds)
    (74/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15370834 seconds)
    (75/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07227939 seconds)
    (76/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.072182616 seconds)
    (77/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073190114 seconds)
    (78/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136823889 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066515835 seconds)
    (80/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067384546 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089814701 seconds)
    (82/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064565962 seconds)
    (83/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175203879 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07260962 seconds)
    (85/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07090122 seconds)
    (86/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064671355 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07199679 seconds)
    (88/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152522583 seconds)
    (89/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065870815 seconds)
    (90/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.149862295 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063911733 seconds)
    (92/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073008734 seconds)
    (93/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.214668639 seconds)
    (94/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.226779999 seconds)
    (95/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.142594271 seconds)
    (96/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.235123563 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17143309 seconds)
    (98/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073881187 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.178659962 seconds)
    (100/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067003731 seconds)
    (101/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064746636 seconds)
    (102/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074416552 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.094045885 seconds)
    (104/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141306729 seconds)
    (105/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.185122881 seconds)
    (106/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151805513 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.0641059 seconds)
    (108/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064885891 seconds)
    (109/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.071619757 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071537398 seconds)
    (111/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064882279 seconds)
    (112/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071008944 seconds)
    (113/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064739171 seconds)
    (114/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064203966 seconds)
    (115/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084176756 seconds)
    (116/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065166146 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.079116768 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093631588 seconds)
    (119/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076608257 seconds)
    (120/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.17609754 seconds)
    (121/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064830377 seconds)
    (122/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071302895 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074684771 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067689575 seconds)
    (125/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.08126258 seconds)
    (126/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.18364538 seconds)
    (127/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071913198 seconds)
    (128/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092574472 seconds)
    (129/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.238834476 seconds)
    (130/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072152037 seconds)
    (131/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080017936 seconds)
    (132/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068677955 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.217525977 seconds)
    (134/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065853632 seconds)
    (135/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066596021 seconds)
    (136/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.151568187 seconds)
    (137/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.221156333 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07242777 seconds)
    (139/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.073664735 seconds)
    (140/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064344311 seconds)
    (141/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.137480814 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073474254 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083898984 seconds)
    (144/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064593788 seconds)
    (145/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065118638 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114334298 seconds)
    (147/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.15989473 seconds)
    (148/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.144696692 seconds)
    (149/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137976086 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072230617 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132235068 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073514247 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148276258 seconds)
    (154/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.232232742 seconds)
    (155/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064159471 seconds)
    (156/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.134766642 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.080316766 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.141230736 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.079957416 seconds)
    (160/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06425442 seconds)
    (161/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.080211421 seconds)
    (162/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.064616582 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079447973 seconds)
    (164/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.06462221 seconds)
    (165/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064204738 seconds)
    (166/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143895089 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071865041 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07348542 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152492935 seconds)
    (170/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.160783753 seconds)
    (171/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.161842558 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 0.065898254 seconds)
    (173/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075919892 seconds)
    (174/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064839024 seconds)
    (175/341) benchmarking ("sort", Float64, false)...
    done (took 0.135390683 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11596681 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.152110141 seconds)
    (178/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064779645 seconds)
    (179/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07638523 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093057362 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063756534 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081701276 seconds)
    (183/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.225681721 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088057117 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064244705 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073296566 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063845946 seconds)
    (188/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.06446856 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061920233 seconds)
    (190/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070438123 seconds)
    (191/341) benchmarking ("sort", BigInt, false)...
    done (took 0.255084574 seconds)
    (192/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064966436 seconds)
    (193/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075262846 seconds)
    (194/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.356576847 seconds)
    (195/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.070986319 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067958103 seconds)
    (197/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.087310378 seconds)
    (198/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.207308656 seconds)
    (199/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073707124 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.14048311 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.153009595 seconds)
    (202/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.069628496 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.156638419 seconds)
    (204/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.07022018 seconds)
    (205/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.097048028 seconds)
    (206/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072408295 seconds)
    (207/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069798357 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081856599 seconds)
    (209/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072882004 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066494826 seconds)
    (211/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069197831 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089294494 seconds)
    (213/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069725757 seconds)
    (214/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.210277316 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07581986 seconds)
    (216/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06805732 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074756473 seconds)
    (218/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069457034 seconds)
    (219/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.161769729 seconds)
    (220/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068188618 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126864339 seconds)
    (222/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.087534915 seconds)
    (223/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.174814067 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069636054 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.1561557 seconds)
    (226/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068214204 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066659163 seconds)
    (228/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06664431 seconds)
    (229/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066983302 seconds)
    (230/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066404776 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093143822 seconds)
    (232/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066396627 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067483397 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066038085 seconds)
    (235/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066001133 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.082400692 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077758934 seconds)
    (238/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066077597 seconds)
    (239/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.20132103 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076280177 seconds)
    (241/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076419046 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151842481 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117294843 seconds)
    (244/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065984063 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072979962 seconds)
    (246/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.173645037 seconds)
    (247/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066077312 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091480158 seconds)
    (249/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084481058 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073295125 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069708833 seconds)
    (252/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.082826467 seconds)
    (253/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065039199 seconds)
    (254/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064227997 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091156815 seconds)
    (256/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065831766 seconds)
    (257/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065283511 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064511828 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165660715 seconds)
    (260/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066355152 seconds)
    (261/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066104645 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127775226 seconds)
    (263/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073963531 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075154052 seconds)
    (265/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068602097 seconds)
    (266/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153029994 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067309019 seconds)
    (268/341) benchmarking ("sort", Int8, false)...
    done (took 0.151211387 seconds)
    (269/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065907485 seconds)
    (270/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.06591202 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083781098 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065369072 seconds)
    (273/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077573832 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065668564 seconds)
    (275/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06580992 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065385274 seconds)
    (277/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063975991 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064843977 seconds)
    (279/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072703371 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12891191 seconds)
    (281/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066063625 seconds)
    (282/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066084793 seconds)
    (283/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06618882 seconds)
    (284/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066723033 seconds)
    (285/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.064598495 seconds)
    (286/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073559716 seconds)
    (287/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093332863 seconds)
    (288/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06456804 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151081855 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066062325 seconds)
    (291/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065160841 seconds)
    (292/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067818055 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089591745 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153733917 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065481086 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085391159 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124073677 seconds)
    (298/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069575152 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066330344 seconds)
    (300/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065780927 seconds)
    (301/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.065308355 seconds)
    (302/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066358198 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19425983 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066189733 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142143127 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085252975 seconds)
    (307/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.064522017 seconds)
    (308/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073490059 seconds)
    (309/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065922741 seconds)
    (310/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.166359787 seconds)
    (311/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065833915 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06569935 seconds)
    (313/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132706029 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.06582333 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070118158 seconds)
    (316/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067124585 seconds)
    (317/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072487496 seconds)
    (318/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065915784 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171663736 seconds)
    (320/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.240994832 seconds)
    (321/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.073616337 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.06783065 seconds)
    (323/341) benchmarking ("sort", Float32, false)...
    done (took 0.145755329 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08131958 seconds)
    (325/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.069257521 seconds)
    (326/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.070784288 seconds)
    (327/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069128199 seconds)
    (328/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068590821 seconds)
    (329/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067427074 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069367659 seconds)
    (331/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074425309 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135975435 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085502576 seconds)
    (334/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.071053405 seconds)
    (335/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.069514353 seconds)
    (336/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065242494 seconds)
    (337/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069873523 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089145334 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.06816168 seconds)
    (340/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065378934 seconds)
    (341/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064080165 seconds)
  done (took 36.937194651 seconds)
done (took 38.485756169 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090395388 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080413291 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079051814 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075480551 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079423381 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077660896 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078778732 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07672182 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077995303 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077131966 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077272184 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065224357 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074335968 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081226285 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074556769 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081417586 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077959453 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081263852 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066165108 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080059131 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093544288 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077747128 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074268721 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079718367 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065606945 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075087527 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090310522 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087183706 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072598235 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075209126 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07315492 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084293975 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072882786 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071662958 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075485603 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071327055 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075458343 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072452495 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089618882 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071561176 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065751045 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077796915 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072937277 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07369446 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07448558 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077866492 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070852208 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079761294 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065352104 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077018544 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089691979 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070978033 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072491143 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074483418 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071143655 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075146293 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072816266 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077700511 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071583517 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07782495 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077488758 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074769872 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065689051 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07484689 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073030883 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073513943 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064323347 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070861719 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06503186 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065278352 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064643132 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074224266 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072150393 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070438739 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.06460231 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065323853 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064552752 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077868404 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071726574 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075042403 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065768351 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070707841 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070372173 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065865412 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070942777 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077084527 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064821198 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065685502 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064436047 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080259913 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071717417 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065141475 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077000299 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070750734 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070947794 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065219411 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064206712 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070503947 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073640162 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065180237 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063921208 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070755092 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070448357 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074754864 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06539137 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070543986 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070558137 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064023768 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074094731 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072621483 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.07452548 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078869307 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07427393 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077509995 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065379196 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064005987 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07527638 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065500728 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07047652 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07352562 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070593704 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073730562 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065630676 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064343481 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070911194 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071640449 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065367244 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065830705 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065684241 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075056529 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072491408 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064129314 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065090417 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074190165 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074113019 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064604118 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064286547 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074395201 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065438053 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071127105 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070871215 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074330876 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064873237 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065408511 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.06408449 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064853341 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.070276947 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070645227 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070635744 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06563197 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07454302 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.216280027 seconds)
done (took 12.891924531 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065529009 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108754334 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.080589691 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082321674 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079246195 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06681243 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069620154 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085407164 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.06921301 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090803334 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091873753 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088189556 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096938863 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065046944 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06637785 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066946899 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.064840871 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078650027 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083263552 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089920277 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103595194 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066095433 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082604371 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086357841 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.08084578 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085002492 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068116416 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067292632 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068958488 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085379256 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092700189 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066107324 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067806643 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085043415 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082798686 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075040964 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066869813 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07294201 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070289752 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065908988 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068295338 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083999168 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07264573 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072864982 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067039424 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067215483 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066490668 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073811018 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084541548 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072311177 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078846024 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085457001 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068212569 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066756979 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064611696 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073886361 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066991867 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067517941 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066919223 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066257605 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066901048 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069332478 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071747739 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072610542 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069858433 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07263265 seconds)
  done (took 6.663161524 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080629455 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093013712 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081420198 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081709877 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065553597 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066558741 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06628726 seconds)
  done (took 2.260648154 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065699389 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074207658 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079125692 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07867524 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088241626 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075942081 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066794941 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098700591 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065756053 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075161545 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082901001 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080195867 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070411607 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079099401 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066666749 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079107016 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066871592 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073652465 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07462339 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080344811 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070776228 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096576148 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080588717 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066983506 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080520456 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07419713 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068762432 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066884347 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066875949 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066245679 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066363946 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089104496 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073247311 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079344907 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067039682 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065251775 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071395026 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066916175 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.070739151 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075232753 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069908692 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06643151 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066668737 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066444673 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067405689 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071030876 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067046173 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065936241 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065537689 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074011863 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065689299 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072881124 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068510388 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07104098 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070857881 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070508135 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073197244 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06645508 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073761985 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072768847 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066084337 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078820094 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077823675 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069794343 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07829029 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074682442 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072791068 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070130455 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065542962 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065107362 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066157723 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078010305 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069487688 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068531628 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066684755 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071110402 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070280085 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081911959 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081608296 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079861502 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068549437 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066278041 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070101761 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082043243 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071439321 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065993592 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066914211 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065845618 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071618315 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066463378 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071065962 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066181151 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073028244 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068681967 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068054563 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074389452 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066458839 seconds)
  done (took 8.714835546 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.0678165 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068983418 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067172991 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067145723 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067829759 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067819278 seconds)
  done (took 2.166658184 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088355761 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06643408 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078264847 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066833742 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089186732 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073395394 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07377477 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068664622 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083529798 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077685867 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.073263515 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076174248 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076162155 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068340978 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073248418 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067836956 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073785122 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069913445 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076422966 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0688673 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083563395 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068484592 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068696769 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079023152 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069755839 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067813198 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067726623 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077103658 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076392214 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068048472 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067951583 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.06968727 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075229574 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068593442 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073313044 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074928174 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066413054 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071846525 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.0690585 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069404341 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075398874 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068492733 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068672641 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072052908 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068478113 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07499259 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072414666 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070323942 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073231415 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072129185 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07184448 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067059412 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069554078 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072088815 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075112744 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0683283 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071839083 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072912146 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068092516 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075394008 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066911837 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069892619 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068455533 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06944804 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071637502 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072397124 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075625984 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068855497 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074340017 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066395934 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072491214 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.0667957 seconds)
  done (took 6.918373387 seconds)
done (took 28.431072071 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539883306 seconds)
  done (took 2.244761667 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.89874974 seconds)
  done (took 2.641030655 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.054054884 seconds)
  done (took 9.804312098 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.332015699 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.40163997 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737515778 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133819378 seconds)
  done (took 3.389911682 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.74247848 seconds)
  done (took 2.503710506 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229344335 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223653299 seconds)
  done (took 2.214145474 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.333089799 seconds)
  done (took 2.084814943 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.149504147 seconds)
  done (took 2.896121494 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23040423 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163471626 seconds)
  done (took 2.150800171 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540647809 seconds)
  done (took 2.295004625 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.267351128 seconds)
  done (took 6.026271565 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230749061 seconds)
  done (took 2.024677862 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229593352 seconds)
  done (took 1.989023032 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.015216665 seconds)
  done (took 3.76763401 seconds)
done (took 47.786264872 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08353854 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086663042 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086777751 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081938746 seconds)
  done (took 2.066276937 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072543803 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069473277 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072894561 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.072967311 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071114919 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072060927 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072752824 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.06917133 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070856158 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069564032 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068026426 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069831127 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072492011 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069974332 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072147696 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073591873 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069479249 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069716476 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072119004 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069606222 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072589976 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070838587 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067991198 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069175923 seconds)
  done (took 3.453517659 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.077604488 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071648097 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075041463 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070942528 seconds)
  done (took 2.058542061 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076805235 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075773464 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085016543 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089854325 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075173974 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076231169 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083103038 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083899086 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065281262 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086423467 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067506465 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066279869 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06628312 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085448042 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082952854 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062046738 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063445867 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076796868 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075560318 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079041403 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067916548 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065137762 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07576713 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076822791 seconds)
  done (took 3.571602278 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081044929 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065079434 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081509601 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090742121 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091307364 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064885375 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079528738 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092548774 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127843397 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06503393 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071380514 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064929591 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104986783 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06502894 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080976694 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108582451 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111883098 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069246602 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099512004 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065387175 seconds)
  done (took 3.454892542 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.075137216 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06927331 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069798069 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064984182 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076468693 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072822953 seconds)
  done (took 2.203217252 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066838459 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067209356 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069481547 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071787258 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067612009 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067045769 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066493428 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065070085 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065279858 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066050797 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065899246 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066555669 seconds)
  done (took 2.574390216 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.147609422 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069438263 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.069930806 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066299875 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.066695367 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06606221 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081095291 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068600298 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085107818 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06601945 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066157754 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068421457 seconds)
  done (took 2.693445453 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10222136 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111403096 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145040125 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117031294 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117325351 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096686411 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126922692 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096209576 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160511809 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137390584 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117695673 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094182232 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086759184 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069397697 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100138511 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118351832 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13765879 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07237724 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113632819 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165841451 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132287522 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135064392 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14760789 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116821369 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090293497 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148274684 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098209294 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102934297 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125115027 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127460803 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12056756 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098477942 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071595369 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070773106 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150094025 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103248142 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121833943 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092887028 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104913574 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088791705 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108048719 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069311887 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085585107 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113681538 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084651633 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131258121 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087909673 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116068243 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081005002 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138550367 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123339305 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099594496 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085466891 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105476596 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.290915767 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112666072 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135258219 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108071126 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083453484 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11952468 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102960066 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101640803 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107717213 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080297097 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178156154 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088973792 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111848321 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112035513 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094661587 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094961209 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107579403 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136472834 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125565349 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12638131 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138225741 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095355277 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122496391 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100497746 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129962669 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105421808 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073122859 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121699059 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130020068 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100018634 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101323231 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130079755 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092385352 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077641813 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099397019 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119245601 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08043329 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.111454907 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080486407 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.108749812 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133688045 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09764133 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112326334 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117261571 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07790328 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154783516 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109417922 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07309437 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118374144 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115216262 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158136953 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096658397 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076498913 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100567634 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.259379158 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149228113 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108207039 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080457876 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111091919 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14019334 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095690745 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171006312 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09594506 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141224014 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112788454 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087858438 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074982477 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090614094 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112799717 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107942152 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112876423 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090564189 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084196737 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08765471 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111970607 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091621854 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080861083 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114194075 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10198684 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074803704 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089142859 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080066098 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143066251 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078355682 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138376565 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125557465 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078846978 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106936883 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098520311 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108935279 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097842798 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117021296 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140446025 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116498177 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090301109 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09298331 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108820899 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145015853 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127924742 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093344863 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077173122 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101129757 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112962329 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098071963 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126773027 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100924127 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109181762 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10385079 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142547905 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146562247 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101863843 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102279256 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10659391 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.281402992 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077113278 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156302446 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104316501 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118934336 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08470781 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141164303 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114649377 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089869124 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087445307 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100921174 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104340618 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10703887 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143420887 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096033911 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07252101 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09302948 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144996958 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076271956 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110624648 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090570471 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093278082 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118920551 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093230631 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081541971 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068684152 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128086093 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157789601 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07031289 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115337214 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11207544 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103709999 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122276392 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069261424 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119269577 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139652081 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118546005 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141210075 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147536598 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116798967 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119327102 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114536272 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106504353 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080063725 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126627365 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13615671 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095733388 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093117413 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134701598 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119285807 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13696389 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.1177971 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115741149 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.104790706 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.264925343 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103429897 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102198451 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145386395 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120997986 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124448501 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086242507 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106390187 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118579606 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135172816 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082298041 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141865609 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084020767 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11932482 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077398296 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12380066 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079727038 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111300145 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079431394 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100656349 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069284888 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073879414 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141434821 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113466898 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10571039 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100586176 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137102798 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137463653 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081194458 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10869257 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116415388 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102243368 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117394516 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109745528 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089352786 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09584646 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109802304 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085644123 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081907391 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.115762901 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094242252 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127579223 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084141017 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074964272 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140241944 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105184463 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095641332 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078069223 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108633094 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121753309 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093163235 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087806161 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115656502 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105486791 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142890758 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09117884 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09789333 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124555984 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080988018 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092865937 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06924079 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084616671 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075693737 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285127716 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076403211 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116959301 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068753282 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130493959 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086473183 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093666103 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102565208 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112161616 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12790729 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094810955 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140595511 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089918877 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118817791 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107776315 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094521411 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088998331 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103707332 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10160386 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122459622 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096203701 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12280807 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143496422 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105188379 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140949857 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091642157 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122660285 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107306168 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125092486 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112360491 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147866856 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139242717 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112829408 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112590422 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076183059 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095407206 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105715405 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112631693 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175615674 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126823845 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071971599 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107230203 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094601208 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108845131 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104977462 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082907441 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146218853 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102626131 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088249889 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113904869 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092021872 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104865437 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076620316 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095474908 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.099833728 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.249173974 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099440442 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116226713 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127794409 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113306253 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143410394 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099313207 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093268135 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118275073 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111376229 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110288478 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086346723 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086541822 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138153013 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118935027 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129083424 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100878235 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109924089 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112837631 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100553249 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125348464 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108742535 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.126780492 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080438256 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076358557 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068064288 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072799805 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123941823 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109150654 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112498778 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099111928 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072270617 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104172751 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106960517 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071928397 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089169196 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094745553 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100288523 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091882106 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107357094 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114721066 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091210849 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104469981 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099299294 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14788526 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100897432 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088657074 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144557489 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15143188 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088519397 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093110569 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071342497 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079032009 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113776819 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150469249 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153015503 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077575053 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086964752 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085363972 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086108926 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070834394 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.242474386 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090459508 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105682914 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100076376 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113055784 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10567259 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075504488 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103181595 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100376121 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092467944 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104313687 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118751457 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124890946 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141322931 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110331951 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107277916 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076009061 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080272261 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075504408 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079468966 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102343158 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079363266 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076319107 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143426712 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092295221 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104551891 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108778195 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088701544 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075378251 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134088016 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069182217 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135688752 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071236748 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082926523 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082378688 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079134888 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094264489 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139787431 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11039113 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113453306 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10739852 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105278532 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141063562 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155538922 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080673977 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144102615 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075792382 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074963377 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076128141 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114382864 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090065112 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115146551 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141082536 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091551228 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104158986 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077200012 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144346841 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09964264 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104708744 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086867647 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078924406 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300998965 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079862865 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080412142 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090976452 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112069525 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072395352 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104435435 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08502476 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079678538 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142623896 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.62999405 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090617884 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075369119 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095855571 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142331851 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128050783 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095310596 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108538607 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119160392 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10067194 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095862061 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108224647 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18321938 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073744423 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094730756 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103622855 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098320951 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102340705 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098631334 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085210812 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092880211 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087100029 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079849208 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108222817 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089455029 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097788312 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107995428 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083466282 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087474808 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131192125 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104341949 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082264977 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088746418 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106000483 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089638988 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10199638 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068712103 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1142358 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091508432 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117769764 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094923307 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107917289 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127785754 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090319882 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138922504 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107500382 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122787502 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088000896 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077973444 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125782605 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088024812 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077767454 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.306228704 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095870978 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093328213 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104394986 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096870596 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113643364 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117596032 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112031935 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097677783 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079028855 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100440589 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102125971 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085182152 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078496351 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074614588 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07637085 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107439979 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085344199 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083627169 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114708252 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089505712 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103614928 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099893783 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122740225 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08326977 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101203407 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110416503 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092747059 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11010804 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10143282 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12877998 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175543201 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125755322 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129905198 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134793356 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076742855 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075733733 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068250151 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116476477 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079232308 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089636378 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081428267 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134321605 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081941231 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112142956 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231317897 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080675841 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094728596 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096872346 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069546571 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083536235 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10797326 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088051291 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080169347 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119765562 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08391913 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127381708 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111622125 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100405733 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095278639 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081408491 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114942711 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105952414 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129461154 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094906962 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.074720699 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.2744368 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104162559 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137849431 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073218928 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080839329 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129916393 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104288384 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133083959 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079885466 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149690752 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143114029 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100208853 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13435766 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071339679 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083578751 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089494518 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12638349 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084729675 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111408206 seconds)
  done (took 68.215041683 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150293276 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142528014 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079601745 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10415741 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.18547644 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194939533 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117168821 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094348454 seconds)
  done (took 2.999808087 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068131765 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082645097 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080359863 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208388366 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096165862 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068089723 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072777497 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081304065 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066802254 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066651231 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101440352 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067560597 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067551991 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.374265094 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066391839 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072130101 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067355208 seconds)
  done (took 3.609600078 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.337506375 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.977382143 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.243042408 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.21048995 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14388098 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.554948371 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075302874 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082759586 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.694473219 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368533598 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140849916 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088856245 seconds)
  done (took 19.836698408 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077268014 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079057336 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078221072 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075049933 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074661129 seconds)
  done (took 2.297352154 seconds)
done (took 120.811372053 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083529017 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174130955 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067497529 seconds)
  done (took 2.194057136 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082506615 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080818812 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.080161697 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078298431 seconds)
  done (took 2.247838091 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074719947 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076556269 seconds)
  done (took 2.067098187 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222588501 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177706452 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091311577 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082612606 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079263939 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080021914 seconds)
  done (took 2.172691537 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072038474 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071117075 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.07122406 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071924902 seconds)
  done (took 2.200873949 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067860412 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065848958 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068210493 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070668109 seconds)
  done (took 2.189015696 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08559761 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086593439 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116930296 seconds)
  done (took 2.210080982 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.082634333 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082417182 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077398631 seconds)
  done (took 2.162868874 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.108860247 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096734046 seconds)
  done (took 2.121614846 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.079538274 seconds)
  done (took 1.998909743 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089885359 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09799157 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.139574973 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.106939449 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140663418 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.12627447 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076785782 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077871034 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073198385 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072186085 seconds)
  done (took 2.917207048 seconds)
done (took 26.973880489 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07792806 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369252614 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359781157 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087588403 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672286276 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356508522 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.000747341 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091699345 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101635725 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068263506 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.0861401 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653639291 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993368262 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326503951 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.978735766 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325399333 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.681300065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068573449 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067822263 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068282259 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.984796806 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067747235 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068518836 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068675481 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649594236 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374939307 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069807347 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324969281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068582194 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072295844 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357509206 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068886741 seconds)
  done (took 16.503257666 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.069855107 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123936946 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072216575 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084549324 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070173567 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069947024 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071185697 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06911095 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112993736 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068485999 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086544419 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06809198 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07222279 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069755948 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088907723 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068364998 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070798144 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07188451 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068152397 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069235946 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08723959 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068026946 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068783006 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06880872 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068834485 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082087557 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069442865 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068336004 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068549272 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072445124 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072881471 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070313021 seconds)
  done (took 4.343839085 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.120782783 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127555082 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072830966 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109218388 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118872228 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069858666 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152103016 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092057235 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116283428 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06906512 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087048466 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068671007 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104698435 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070094384 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089573948 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068395717 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071109234 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068984482 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068217724 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069129409 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087872066 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06828326 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068748933 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069020107 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069264972 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083661667 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069586769 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068371991 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068689897 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072694786 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073700144 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069801266 seconds)
  done (took 4.62415822 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069800741 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070962889 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077297627 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080716248 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066219142 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068780938 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069231771 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066345548 seconds)
  done (took 2.511958398 seconds)
done (took 29.920048904 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079360315 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067368488 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070383155 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086854932 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07343358 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069861713 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064429054 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074373611 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070963554 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07130405 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073043829 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066558838 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069311962 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064337325 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071548985 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065465885 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071979677 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069625443 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070019388 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071748169 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068169721 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07058937 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07376532 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070060257 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070230012 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070080264 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075151275 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071327176 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065957891 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068383456 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067544631 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.080656827 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072137502 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072158074 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065880191 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065459928 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069851965 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067968173 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072156739 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074802352 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068290065 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074743773 seconds)
  done (took 4.877348217 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.088934835 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094413681 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08646893 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081769692 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107713777 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080808922 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091043366 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079153759 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077176039 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090567294 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072887924 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078619623 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080693266 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074628151 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077528399 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074569679 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079754945 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073048634 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077746373 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07769894 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091195324 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071013698 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07824401 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079578924 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073065804 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079115235 seconds)
  done (took 4.071319408 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073025595 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088045967 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091870945 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.141730568 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109467704 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082429838 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081665446 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093102487 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100754139 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06774603 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071915252 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094529405 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096371588 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074537469 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106289301 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086321437 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.08026574 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069307443 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074234173 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102696209 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090752458 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086430515 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100517787 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088441868 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066786374 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077084495 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075389143 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084424215 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075350384 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080590841 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072101644 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07145737 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068512156 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080591292 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075254818 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065777457 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090190662 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081054591 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081945794 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106113614 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07813058 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069260551 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098324063 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13404078 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066911386 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070161503 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071854915 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08060905 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069276638 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097369388 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086905806 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067230035 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086213824 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06877566 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068845982 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084985493 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069084957 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.112182287 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079948607 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073664322 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08836529 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072524808 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089286087 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067141077 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078867637 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068608556 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069024453 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065828023 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103634465 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07488744 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120659923 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06832919 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065036297 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079902353 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078937321 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074309412 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067043868 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08740755 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080076987 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070856275 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078916576 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069848762 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070482017 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103403578 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066140745 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065141315 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065327887 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069470032 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070467162 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067957232 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0808056 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066794715 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070694698 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083038386 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067041501 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067710648 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.0697713 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068867312 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066854179 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078365257 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070932726 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069251639 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079918282 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068133708 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070496374 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082942705 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077247824 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066448347 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068428965 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069905374 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069047058 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072026925 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070575568 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06916057 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074574315 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074741795 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073724877 seconds)
  done (took 11.236937847 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160989976 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154428287 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068447794 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149205208 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076150771 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072075818 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15102585 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088096642 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068411527 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.0691111 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067283552 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096468724 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091830084 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.10529737 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072570042 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06839354 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093685506 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101673653 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152790413 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147762512 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09246498 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076439454 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070418247 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069810486 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06945459 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077175095 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086341945 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076963249 seconds)
  done (took 4.660901567 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074300545 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082927685 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.07236076 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092118131 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086545 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068215892 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069466277 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069124819 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084733699 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074666052 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067853499 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07261252 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07188119 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068608556 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068659886 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074782901 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074626232 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066764276 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071235904 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072167246 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078821692 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093736075 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071901382 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068089975 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070908857 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.0682135 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075143771 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07782517 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067453491 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098850847 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064734262 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072439323 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082544982 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068702985 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067193526 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068493023 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067556348 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067679565 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068338593 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065659706 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065851597 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073257508 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066320142 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073560699 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081792844 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075798005 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069257541 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073264388 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070269645 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064742455 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071474357 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070914706 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070377679 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076548036 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071150531 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07051238 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069129157 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099249026 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073448871 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067115298 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067222678 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065712792 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069519945 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075790836 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084337538 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069663015 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065687803 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067440187 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072776171 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082035116 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067523453 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073203662 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064509191 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067781635 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070219182 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070930786 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069345721 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065944563 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067727918 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067587509 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.0684328 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067594932 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067278438 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070113787 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065558203 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065910575 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067999063 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069271213 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07420866 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066479409 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070552717 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.06947477 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066596312 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070699209 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073328458 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070389055 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087822837 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076777779 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068341144 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065722354 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082391149 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070076367 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066803697 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073439823 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072044179 seconds)
  done (took 9.55063854 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088563 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069084764 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087665393 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094092649 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077767244 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07326492 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081571645 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068329545 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084341292 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066549566 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.0771217 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065913721 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081333499 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076906479 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069113985 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078570688 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070209208 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088758636 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082917342 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066124811 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077084347 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080059533 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080346781 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086256651 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085580491 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08706197 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080013155 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070031714 seconds)
  done (took 4.183523046 seconds)
done (took 40.515795025 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.023454627 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.184136658 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.024922051 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.266434231 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.304486561 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.028303089 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.241780649 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.011179588 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.179637304 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.054582775 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.36221828 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.389147551 seconds)
done (took 70.077041838 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.057502115 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.161949402 seconds)
    (2/2) benchmarking "String"...
    done (took 2.232750398 seconds)
  done (took 6.339560508 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.608010099 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.010624998 seconds)
    (3/3) benchmarking "different"...
    done (took 2.067567747 seconds)
  done (took 8.628328853 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.118116637 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.651331373 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.270597368 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.011306085 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.014054065 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.427588278 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.818991301 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.482331165 seconds)
  done (took 33.622982659 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.363881415 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.271069012 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.762170849 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.798651308 seconds)
  done (took 17.186732078 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.617847702 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.276087333 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.275190502 seconds)
    (4/4) benchmarking "different"...
    done (took 2.266915775 seconds)
  done (took 11.44126781 seconds)
done (took 89.437260146 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.011319994 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.059288883 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.03404068 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.165028682 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.078334171 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.044664007 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.017042123 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.024482842 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.01117249 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.008289585 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.456345452 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.011378628 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.024161777 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.047870129 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.021818895 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.015880145 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.497055004 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.015087414 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.055508609 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.729636857 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.547538156 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.014722324 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.021737654 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.069998321 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.136717378 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.023965066 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.569365975 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.017527564 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.628923954 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.015881354 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.028169434 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.009925085 seconds)
  done (took 212.35690768 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.01333338 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.977736017 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.065059447 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.03474245 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.469219835 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.206917186 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.151489726 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.51943239 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.013219582 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.015028714 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.342176589 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.008977143 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.362899306 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.946484928 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.009269242 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.050776729 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.260793216 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.361906725 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.007292927 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.201175025 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.032891064 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.132580508 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.084904871 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.310193737 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.015485025 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.083217364 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.016633516 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.040544234 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.19776588 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.219618815 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.015637125 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.048667516 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.139421033 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.879527383 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.027826105 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.033917264 seconds)
  done (took 179.241861362 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.368348263 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.030937377 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.074393964 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.22833638 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.789594559 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.73870173 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.010181735 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.009871799 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.009894046 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017919858 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.010986435 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.012085659 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.079200591 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.487463703 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.022004824 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.00704898 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.010699384 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.423954303 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.00920176 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.990697109 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.996314542 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.076212325 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.379567265 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.142753377 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.011576657 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.02204725 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.147170404 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.018955883 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.01224392 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.14728556 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.013117066 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.090537444 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.143575201 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.019599069 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.093168703 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.015712319 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.50885798 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.011534066 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.011410474 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.014204276 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.076064107 seconds)
    (41/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.007416107 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.01176354 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.121041675 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.10436146 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.008216901 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.02578983 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.206833122 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.697060526 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.010969894 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.011515304 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.011670407 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.010761941 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.013244336 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.506467225 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.012036555 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.037958571 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.631497557 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.016778383 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.012274131 seconds)
    (60/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.011351157 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.011437861 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.011898362 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.01360806 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.020521253 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.053681719 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.822377934 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.039866358 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.399844588 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.819197691 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.013758136 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.616888529 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.072510835 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.013863754 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.09250414 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.008780893 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.012317069 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.013216102 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.012518436 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.168017434 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.141137988 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.012534748 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.149559122 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.01447533 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.013097887 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.243395951 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.358263711 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.013711299 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.02512 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.06551369 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.01439479 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.01408584 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.019949124 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.135983486 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.010815638 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.00983824 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.012912644 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.112382805 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.014850176 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.012257425 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.20846782 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.240653171 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.084285188 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.264665045 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.266389112 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.016304806 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.01382357 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.029311262 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.016354734 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.013060787 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.024519853 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.015294627 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.013394539 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.011515001 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.014254942 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.013459631 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.014982602 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.027782774 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.011686252 seconds)
  done (took 436.260813224 seconds)
done (took 832.217842293 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.707780451 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.785495295 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.627768329 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.660547382 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.628095477 seconds)
  done (took 15.35255511 seconds)
done (took 17.293883111 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.035546279 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.031616399 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.018524224 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.038321868 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.03625929 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.033579308 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.068946433 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.056868179 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.054694944 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.034303337 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.043793115 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.036100301 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.041967193 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.05628911 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.04830337 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.043194423 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.037558796 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.028045757 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.044998467 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.038818327 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.036495142 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.031490565 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.036087375 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.042970649 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.049225374 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.038179105 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.030906799 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.039516853 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.038453132 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.040107347 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.075277069 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.043324477 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.069437703 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.046074287 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.045411781 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.046871256 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.034795785 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.059721122 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.038380829 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.076047825 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.046552317 seconds)
  done (took 85.737233786 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.025797959 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.168777605 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.237025515 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.056924686 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.023735774 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.234244428 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.07860402 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.155529034 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.156721418 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.23978727 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.247187844 seconds)
  done (took 25.574670165 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.025176834 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.145342566 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.222058781 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.058558534 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.025779964 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.239432419 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.085076339 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.153575688 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.161606472 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.238394172 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.278618879 seconds)
  done (took 25.590480099 seconds)
done (took 138.846225444 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.398978218 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.049826091 seconds)
  done (took 6.395851405 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.018754443 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.036703727 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.171672038 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.020918657 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.020868392 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.020719025 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.020361936 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.022088911 seconds)
  done (took 18.279745644 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.018258999 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.020738541 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.019636059 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.020156928 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.019399051 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.02069825 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.020630479 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.019664195 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.021011849 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.019758856 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.020308709 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.020997537 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.021224404 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.020560454 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.020634533 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.020572014 seconds)
  done (took 34.27349819 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.02074206 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.021019922 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.021469259 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.020935933 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.020860959 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.020807761 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.024652729 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.020945609 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.987929292 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.020647009 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.01606681 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.022158743 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.021305131 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.022493515 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.02268541 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.022161078 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.022056883 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.022344498 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.02259534 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.021164339 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.020795035 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.022953474 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.02690877 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.021549832 seconds)
  done (took 50.437885668 seconds)
done (took 111.340576962 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.222657014 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.576239155 seconds)
  done (took 8.74834721 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.025195332 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.021678813 seconds)
  done (took 6.0634368 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.022767648 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.023461714 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.023028468 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.021962666 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.021504968 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.022948772 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.022013701 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.024563914 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.022229641 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.023275005 seconds)
  done (took 22.177387627 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.022016596 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.022754028 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.022105916 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.022933372 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.023565041 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.023148644 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.023398789 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.022110984 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.02261869 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.023580208 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.022572595 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.023394722 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.021648546 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.026284445 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.026700319 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.028304618 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.025911446 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.026105958 seconds)
  done (took 38.379994056 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.026187676 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.026739856 seconds)
  done (took 6.006591325 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.027061052 seconds)
    (2/7) benchmarking "second"...
    done (took 2.026809885 seconds)
    (3/7) benchmarking "month"...
    done (took 2.025982575 seconds)
    (4/7) benchmarking "year"...
    done (took 2.026969887 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.026607255 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.026893505 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.027772629 seconds)
  done (took 16.142596606 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.027566176 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.185592302 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.2340071 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.636468861 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.02811984 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.028892005 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.90792583 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.029754951 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.031000798 seconds)
  done (took 22.064376406 seconds)
done (took 121.530607988 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.875597028 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.030025574 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.315468758 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.181203564 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.05743358 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.332180746 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.054200679 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.584740296 seconds)
done (took 44.384199816 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.135904382 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.02535367 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.057252124 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.05880728 seconds)
  done (took 23.096921127 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.028271955 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.334968743 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.048627281 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.975544471 seconds)
  done (took 23.365788274 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.404809137 seconds)
    (2/2) benchmarking "read"...
    done (took 2.377958495 seconds)
  done (took 6.745586234 seconds)
done (took 62.301052047 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.028715382 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.028779907 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.029684152 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.029657788 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.028793437 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.028895685 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.029815973 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.029380463 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 2.028977442 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.029777323 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.028751573 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030133162 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.029737399 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029916652 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.02998491 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02999228 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.029632579 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030378563 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.029086931 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.029780044 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029687412 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029083263 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.030178232 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.03059682 seconds)
  done (took 50.66604404 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.020749655 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.006299554 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.02991778 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.030409715 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.031535154 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.030072921 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.029714322 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.029656226 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.029960615 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.029895291 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.029931508 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.030202425 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.030558592 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.030412136 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030821665 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.030887038 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.031366806 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031802292 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031854582 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.030907176 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.031452704 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031131703 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.030388817 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.030715433 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.031036691 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.031328603 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.030425985 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.030814525 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031988811 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.032303646 seconds)
  done (took 62.846796873 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.031915093 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.032457009 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.03210248 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.031855821 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.031330515 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.031714326 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.031907541 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.032008078 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.032996532 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.032404738 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.032116941 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.033034307 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.031799046 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.032570553 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.033091639 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.032047475 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.032051223 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.032492505 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.032406719 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.033984894 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.03366984 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.033343354 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.020760347 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.033031292 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.030595323 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.030919633 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.018573533 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.032141974 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.033267183 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.032770871 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.027633212 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.008348145 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.033674031 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.032914606 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.033628873 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.033720285 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.033134512 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.037567116 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.04263078 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.034305589 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.021855565 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.016203252 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.034703326 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.035188174 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.032978926 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.034254432 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.034921527 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.033450212 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.033768949 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.034161218 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.034390369 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.035573819 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.034826435 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.033019113 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.03457038 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.03453616 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.033877925 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.034850702 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.035679532 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.034794067 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.035160206 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.034429101 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.033971144 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.034766144 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.035875564 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.035572872 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.035019129 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.034296142 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.035555374 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.03813514 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.034793219 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.035471417 seconds)
  done (took 148.304865928 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.035695914 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03583044 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.034903856 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.036182834 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036450967 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.035412402 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.035129203 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036151336 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036292254 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.034629376 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036287871 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.035211912 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036750877 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.035650035 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.035988207 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.036465956 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.035906598 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.035931895 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.036296034 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.03688351 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.03804377 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.036408178 seconds)
  done (took 46.756010557 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036301647 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.035628356 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.035893796 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.036229027 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.03750321 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.03724871 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.036513694 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.036456368 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037822986 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036057532 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036681243 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037543609 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.038038806 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036895119 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.037669402 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.037695102 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.036637483 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.038052882 seconds)
  done (took 38.628523681 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.037981407 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.037021106 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.038334843 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.037320713 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.037632753 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.038028069 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.03760647 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.038084867 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.038011277 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.037224126 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.03784364 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038638774 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.038004486 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036835633 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037602536 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.039163267 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.03798722 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037212299 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039840943 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.039030571 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.03871525 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.038254057 seconds)
  done (took 46.801332901 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.038925207 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.038269699 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.039021452 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.039269824 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.039227513 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.039025404 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.040270938 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.037977088 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.038529683 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.04007083 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039488825 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.039344237 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.039188375 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.039487699 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.03896905 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.038881645 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.039554176 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.039626028 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.040310928 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.03925396 seconds)
  done (took 42.750565426 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.040145541 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.039564059 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.039829538 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038683694 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039754526 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.040154491 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039774316 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039630417 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.040082195 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.039974574 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.040477373 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.040204789 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040004197 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.040412841 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.04063309 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.040503162 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039424043 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.041761075 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.039631779 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039399713 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.042876281 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.040197581 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.039960074 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.039863608 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.040120825 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039776735 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.041244282 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.040637338 seconds)
  done (took 59.092330118 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.042942936 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.040565441 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.040225214 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.040922867 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.041126637 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.04298123 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.04225613 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.041020798 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040454282 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.042001007 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.041230392 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.040925534 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.042536962 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.040692849 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.042153659 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.042233468 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042418593 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.042926649 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.042327296 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042383379 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.042318402 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042258641 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.041948234 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.042614653 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042224279 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.042982592 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030014023 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.042151659 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.044213856 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.042966406 seconds)
  done (took 63.216069933 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.060705278 seconds)
    (2/2) benchmarking "in"...
    done (took 2.060619143 seconds)
  done (took 6.09056251 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.043098687 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.04265965 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.042924256 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.043665416 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.042439831 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.043875236 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.044960172 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04452042 seconds)
  done (took 18.317275635 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.044062599 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.043850336 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.044561027 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.045187981 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.042990917 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.05196839 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.046169273 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.045241231 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.04672186 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.044753192 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.049107052 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.048195255 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.053354787 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.047766263 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.043711341 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.045357489 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.045056209 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.046505034 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.044430237 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.045004854 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.047349019 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.044272674 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.044804434 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.044168723 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.044790057 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.045466346 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.054013535 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.045156879 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.044852626 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.040959724 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.05126582 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.046516391 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.044637443 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.047346564 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.045021787 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.046552112 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.053459307 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.04511451 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.046101758 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.043511959 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.0471653 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.047306216 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.048724232 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.054046126 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.045119751 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.045317902 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.046064285 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.045515632 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.046991602 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.04912624 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.055816099 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.046805321 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.046007946 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.046358732 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.046805446 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.045664904 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.046866285 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.048949738 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.040688815 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.053143232 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.049658317 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.068078196 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.057717336 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.046180654 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.046810777 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.056745166 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.075861443 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.047611296 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.048613559 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.046338172 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.053536423 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.04740315 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.046963396 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.046822208 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.059310235 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.05487514 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.046913488 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.046893996 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.044069951 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.033675905 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.04672355 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.047331816 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.046914648 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.046388028 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.056937789 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.077116415 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.048421473 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.048063521 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.049799244 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.048794398 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.053738125 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.050355805 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.048150385 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.048233534 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.049429264 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.051238274 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.049355629 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.048606458 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.048521367 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.056847839 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.048894724 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.048184374 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.053261394 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.059842056 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.047803742 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.049469516 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.041693368 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.049024404 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.056994426 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.050081266 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.048418788 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.04935409 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.05095302 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.054253756 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.049518668 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.053270526 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.058949107 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.056421377 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.050800823 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.054240083 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.052473241 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.052746388 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.059494684 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.078659424 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.051571575 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.052637899 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.054253831 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.065364221 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.053100839 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.050009529 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.05228526 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.050399167 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.05119408 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.052686225 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.050776278 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.051382146 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.049606245 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.049640095 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.050578309 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.050701493 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.053270496 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.052358028 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.051724767 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.050733054 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.055059162 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.050296434 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.053224011 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.058302655 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.052355457 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.051972075 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.050908155 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.052557109 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.052669651 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.051541232 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.049842949 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.05019484 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.050647776 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.05213907 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.053191848 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.051767211 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.052347217 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.053473172 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.057506844 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.051572572 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.051768737 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.05219788 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.051292161 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.051605373 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.052827933 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.052080185 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.054599131 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.051124685 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.05560643 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.052208194 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.051961775 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.050789188 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.052308617 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.051683772 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.055261528 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.064439102 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.05530933 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.063441333 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.052925575 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.060440098 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.052925505 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.053286177 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.052183781 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.051981588 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.052328525 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.052739011 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.05340905 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.056430218 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.075503778 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.065551982 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.054783093 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.054958769 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.058729851 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.059480466 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.059129532 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.053427374 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.05298781 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.055291458 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.053590139 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.052886194 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.053977591 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.056277032 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.054376175 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.053329358 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.055900049 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.054252673 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.054209645 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.054481007 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.054316422 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.055422884 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.054540828 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.05517402 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.054754938 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.056927792 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.062204775 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.056329504 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.054018694 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.055412665 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.055643229 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.055112267 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.054914652 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.054676691 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.057357714 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.055795175 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.055597743 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.061179069 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.056671018 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.05551 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.055391077 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.055113477 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.056582459 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.055202038 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.058080251 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.065555464 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.058105444 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.055602085 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.060866969 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.055394758 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.057005357 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.056143196 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.05650309 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.055371968 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.057429452 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.055217614 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.056364478 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.063094424 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.056204368 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.056638897 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.056309286 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.059590594 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.058292064 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.058813522 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.055465952 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.058830956 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.066348837 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.062490253 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.058444204 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.060992351 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.057466616 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.058738542 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.061675561 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.057437515 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.070101958 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.068740955 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.056582518 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.057107207 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.056260144 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.058298314 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.057945969 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.056653877 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.066654118 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.057599092 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.058227249 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064126994 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.056844105 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.056452058 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.062705132 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.058169571 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.059126579 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.059045404 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.058332712 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.057973895 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.057651049 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.059814267 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.05822844 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.059954059 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.062504075 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.057759129 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.057956893 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.05829973 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.066518357 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.057640472 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.058225508 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.06379364 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.058939284 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.060349797 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.058877526 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.058650448 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.05933239 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.059353074 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.058517697 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.060888647 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.059338228 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.06178319 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.069962422 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.062752377 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.06975708 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.060093169 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.069280886 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.059779883 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.05970295 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.058885276 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.062197718 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.069052094 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.058867242 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.059477501 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.067357127 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.061020957 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.06202515 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.065102397 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.059943484 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.059276256 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.05873207 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.062052998 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.06494463 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.062371772 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.060303614 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.059434152 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.059685088 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.060051889 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.062413341 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.0620598 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.059784216 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.060681502 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.059435362 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.059486993 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.060614789 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.060203722 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.061414053 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.060994485 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.061071775 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.068481688 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.06115009 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.062160651 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.06619451 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.061480683 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.070590466 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.060994194 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.061025898 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.062249226 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.061681868 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.064285751 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.062341574 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.06171042 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.06256872 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.061858116 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.062841756 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.072793405 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.06905435 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.065707796 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.063332364 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.062959304 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.061938654 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.072708186 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.091631098 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.061849668 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.063479807 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.066977647 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.068956605 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.064236585 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.069578355 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.065443466 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.07302837 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.06411138 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.059846947 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.066487067 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.077013229 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.061776816 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.062913517 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.062291094 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.067333849 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.0666979 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.063895263 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.064634667 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.065779635 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.065291185 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.076015768 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.063340821 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.064466686 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.06410209 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.063256094 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.063606539 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.064374762 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.066205853 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.065135905 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.063358229 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.063956176 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.06614034 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.069774421 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.06423151 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.067120732 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.074522867 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.064750762 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.064146997 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.065881914 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.064697664 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.065872295 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.06413549 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.064380464 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.066949625 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.063719478 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.066052824 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.068483593 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.075141344 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.065603371 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.065010225 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.065311092 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.068129855 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.0653177 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.0649361 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.065369004 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.072940228 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.068982042 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.07873573 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.076359834 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.062051792 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.032421016 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.074962633 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.07518704 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.065194759 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.066180217 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.06526996 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.067754951 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.06889656 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.066387727 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.065161985 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.067615269 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.071572347 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.065874238 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.067304699 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.065556821 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.066389313 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.068952943 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.067871057 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.071746546 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.066633928 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.066714786 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.066355632 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.067402698 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.067177869 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.068004554 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.066186365 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.067210869 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.067516578 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.068452356 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.072246846 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.067177677 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.067182391 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.068340898 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.067822174 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.067248032 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.066509565 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.068274622 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.067305637 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.07091341 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.0778837 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.068115653 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.068124519 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.070392249 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.071900649 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.067334755 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.068784145 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.067190552 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.06844932 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.075632668 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.06790883 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.068183172 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.068879833 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.068619193 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.072601257 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.069326852 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.073156241 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.068583239 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.068821184 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.068008429 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.07176415 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.079242142 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.073288932 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.07195123 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.079637625 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.072483779 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.070216177 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.068300688 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.068522762 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.06957135 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.070159957 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.071644654 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.070362827 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.0707394 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.068448052 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.071397575 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.07032957 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.069652062 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.069446876 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.069787966 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.072461534 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.080923151 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.077821121 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.069003761 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.071518117 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.069620292 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.07382806 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.083893702 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.070121171 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.069636469 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.069785907 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.07026248 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.072972048 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.079863788 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.080996333 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.072771736 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.069610852 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.074964179 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.0908481 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.072838701 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.080524936 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.106082539 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.072937315 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.069969196 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.07121444 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.071247196 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.071164903 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.074337475 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.070740206 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.076977169 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.07248489 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.071211894 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.078023498 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.071902401 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.071563764 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.070347824 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.072895171 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.078470481 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.071200283 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.078643277 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.071582905 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.07163448 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.072460178 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.075235023 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.072492622 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.07107471 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.072356996 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.074475075 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.071711784 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.072228958 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.080809992 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.073299602 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.073720139 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.086906133 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.087412391 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.072737702 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.074214342 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.073439818 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.077228336 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.07548864 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.071602941 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.076066112 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.081909076 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.077487072 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.082918781 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.074471808 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.074497242 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.073494794 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.07279589 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.073121117 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.086029622 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.086554385 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.075363273 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.078308844 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.08024949 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.073366297 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.07889447 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.078621032 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.078040995 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.074475272 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.072361327 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.072092987 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.072716161 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.075793063 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.074692484 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.081081544 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.070670456 seconds)
  done (took 1230.37960475 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.070677791 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.070898454 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.070807401 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.072394708 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.07070683 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.073265954 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07202328 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.073192367 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.07051519 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.073230239 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.068250296 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.071919499 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.07068304 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.071468771 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.071210637 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.070733205 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.071031777 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.072337159 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.071806303 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071836912 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.071399823 seconds)
  done (took 45.497102074 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.071118559 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.070820199 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.072760599 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.071322389 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.070137606 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.071530539 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.070478698 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.075086089 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.071548252 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.070628383 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.070900448 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.070114851 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.072045309 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.069915159 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.070715477 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.070409565 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.071893095 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.069667649 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.070101755 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.070541003 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.067772848 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.070031751 seconds)
  done (took 47.556663053 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.064389975 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.063446683 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.063571959 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.062969228 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.060945513 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.062633809 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.062900412 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.065718081 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.063713265 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.064256695 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.070366761 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.071381438 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.06133223 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.067773597 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.062044337 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.060964327 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.206202445 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.061690465 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.063571174 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.061411206 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.061825065 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.066631061 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.063750635 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.061453996 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.060724642 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.062347521 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.062143192 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.063105859 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.061797177 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.063622361 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.067161876 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.061970805 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.065121805 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.064486129 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.062012804 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.06284458 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.066732827 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.065243407 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.061417189 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.06092881 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.070977567 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.08643225 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.062710444 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.059639735 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.067021148 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.05726346 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.059010018 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.064862137 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.066468986 seconds)
  done (took 103.272623787 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.058499835 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.058628361 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.059704726 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.059332761 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.058085194 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.057719094 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.058982489 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.057659389 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.057954093 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.056884405 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.057715307 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.057998784 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.057786034 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.058509862 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.056970142 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.05697318 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.059001389 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.057149503 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.058793931 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.058591759 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.059557964 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.058758635 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.058705093 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.059109014 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.059119491 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.0596859 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.059577338 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.059562693 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.059610571 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.060313525 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.059100358 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.0592468 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.059648786 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.059436161 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.060250805 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.0599851 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.059157047 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.059243246 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.061336434 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.059807446 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.060632668 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.057951119 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.059989441 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.060420261 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.05933258 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.060504289 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.060664609 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.060902595 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.060183637 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.06125664 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.062263583 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.060752003 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.059773206 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.059767007 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.06017338 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.062377154 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.059983155 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.059676342 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.060106829 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.060549768 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.063078214 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.059168424 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.059727539 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.059238482 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.058990049 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.061610007 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.059029966 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.059328593 seconds)
  done (took 142.030395989 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.060793184 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.062546079 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.059670976 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.060867585 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.060084335 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.063559588 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.059805452 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.060357224 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.058771482 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.059905335 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.065637305 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.05709907 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.056912446 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.057230628 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.059207242 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.060715999 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.050921118 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.050384549 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.050596314 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.050677139 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.051267757 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.051684547 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.051372731 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.050779258 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.050221397 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.05288249 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.049901462 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.049999171 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.052039677 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.05060977 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.052067206 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.048609263 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.049114133 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.048052661 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.048475109 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.048389561 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046111247 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.047014484 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.047717027 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.046750164 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.050115697 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.046938449 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.046364504 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.045435173 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.046886237 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.043125033 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.044455723 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.045037843 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.044802805 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.047549006 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.044061373 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.043792147 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.044282185 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.044358375 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.045534884 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.042718939 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.045101735 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.044310561 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.043020344 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.047838094 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.0440672 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.04344326 seconds)
  done (took 129.142639372 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.043143791 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.045885095 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.044035697 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.043879989 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.043834922 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.04434067 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.04655762 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.040564026 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.041745382 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.041207601 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041604002 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043944399 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042602301 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042271652 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.04098397 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.043126668 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.041447545 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.011458902 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.041482677 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.04316683 seconds)
  done (took 42.799996448 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.042476591 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.04066522 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.039768668 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.040271872 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.040237738 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.039951282 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.038563742 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.040883293 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041081021 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038893534 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.042502747 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.040429441 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040924577 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.039562249 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.041242664 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.039362619 seconds)
  done (took 34.616997577 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.039415996 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.039248179 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.041947535 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.039279608 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.039266897 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.039981995 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.039996355 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.042631642 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.040040121 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.040503913 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.040794581 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.039708996 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.03989856 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.040475467 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.039487284 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.039523129 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.039596092 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.040031157 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.038951724 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.038942803 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.040233032 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.039323665 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.042137133 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.040089272 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.038385113 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.040533858 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.041431516 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.041515604 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.040506746 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.040121286 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.040702765 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.039831056 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.041314951 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.039401351 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.039613341 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.03987969 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.04035071 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.04055894 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.038287909 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.038813578 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.038597111 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.03826291 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.039440969 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.039676614 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.039497619 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.040290408 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.039438813 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.039426703 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.039737964 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.039769418 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.04037624 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.040991416 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.039352815 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.040473375 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.039530877 seconds)
  done (took 114.167135906 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.038875511 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.037928269 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.026557345 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.024418347 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.026365198 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.03863262 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.040715577 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.041175132 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.040343193 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.040442482 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.031885255 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.039973554 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.040834617 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.040973852 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.040072057 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.040476862 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.040152352 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.041510548 seconds)
  done (took 38.638588016 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.039784698 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.040497758 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.041561213 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.040564246 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.041184424 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.041713442 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.041717224 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.040043427 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041375301 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.041456479 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041130319 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.040554729 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041479826 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.042408023 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.040842923 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.041680838 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.041030928 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.042505495 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.043359518 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.042270437 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.042530342 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.042177957 seconds)
  done (took 46.880779555 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.04121094 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.042265647 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.056289045 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.063136432 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.061208534 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.078217494 seconds)
  done (took 14.311438613 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042287567 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04178026 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.030490079 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028008516 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02562679 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042314901 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042065917 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041307596 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041457808 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041849814 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043144381 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043266376 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043370697 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042308964 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043431335 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043504915 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041860697 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043954958 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031545127 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044034694 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043016051 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042466099 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042607034 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042574387 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043470379 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043855678 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042277002 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044734721 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043211704 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043264777 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043496113 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04474226 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042523225 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043962749 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04328383 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042310444 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043740517 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044216695 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044564666 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045178645 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.044265327 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04473542 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044930903 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044950704 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044326789 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044495447 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044733364 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044256979 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044857323 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045077157 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044886507 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045045142 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043155153 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044822881 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044707168 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044747012 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044818266 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045817038 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04470225 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045274088 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045796134 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044643965 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044836081 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044368064 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044937983 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044771775 seconds)
  done (took 136.802513266 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046173445 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.045363164 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046086753 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046099639 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045308777 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044007519 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044559665 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045417272 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046467249 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045987934 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04652154 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046608422 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046112538 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045064514 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046731578 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046131165 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046017523 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04618894 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046300373 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046273971 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04626331 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046745179 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046678504 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046044891 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046286856 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046164244 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045616439 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046510266 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046784185 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047271793 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04645594 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048010004 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046830745 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046873156 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046175641 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046446725 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047685081 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048099794 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047526028 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047513035 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047739455 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046492208 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046613514 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048203372 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046933006 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046753132 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046976894 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048421497 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04797864 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048079248 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049499689 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04881699 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048000207 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048566654 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048406114 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049029773 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048615238 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048794296 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048516161 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048022816 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04729625 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048252657 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048094115 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049035698 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049056341 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047903306 seconds)
  done (took 137.078576162 seconds)
done (took 2848.607770443 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.139305414 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.083853579 seconds)
  done (took 16.197352287 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.211818399 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.088420195 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.235140756 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.164695484 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.055313845 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.053345052 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.047048168 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.047874028 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.140507437 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.049016395 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.0587056 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.047414093 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.048799102 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.048877513 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.05241498 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.049654226 seconds)
  done (took 55.388217124 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.051698079 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.053040986 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.049394083 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.049739824 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.062121031 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.132111151 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.075685344 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.051770502 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.063788615 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.084951645 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.068217748 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.057366965 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.057384473 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.05468637 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.138046031 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.097555665 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.109952428 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.126561019 seconds)
  done (took 39.360110816 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.128283991 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.05637514 seconds)
  done (took 11.165834602 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.057689184 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.069519327 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.049799484 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.071513732 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.045350916 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.067265744 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.048053356 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.051521348 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.078409976 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.081217967 seconds)
  done (took 72.597849707 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.050273437 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.0499285 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.350191337 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.058629482 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.056370445 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.072704103 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.048173594 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.079509097 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.051748218 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.047710701 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.05808216 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.35397301 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.060931406 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.050100533 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.470295547 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.061250428 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.055654481 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.082740466 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.082284307 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.055778088 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.056966801 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.052919655 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.21306894 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.734437633 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.050657736 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.050647373 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.056336895 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.046416756 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.047758147 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.049844303 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.051862414 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.048835843 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.054896636 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.048533657 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.055385468 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.055476751 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.549432767 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.068357819 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.057564915 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.140556478 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.094934504 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.05746967 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.880570417 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.047589673 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.049218796 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.057264179 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.727968298 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.112743553 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.051529657 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.21914032 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.391774254 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.064178476 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.219442526 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.221708202 seconds)
  done (took 142.859454621 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.049482356 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.284096248 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.200284482 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.051600118 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.305276166 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.258785762 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.050853458 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.095397813 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.052006282 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.248201844 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.302452103 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.151838899 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.053175999 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.051589469 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.046369448 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.046744591 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.195769029 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.119953204 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.052581317 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.048783107 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.074202953 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.252355359 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.172559333 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.052642501 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.073489573 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.255150848 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.172577074 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.152342445 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.842522629 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.046819609 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.110078289 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.052162254 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.050640715 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.046608222 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.201632479 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.143636518 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.13535898 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.051910737 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047933173 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.048650726 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.721782291 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248939599 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.143256283 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.172809297 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.301574879 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.265935565 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.661257588 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.048440938 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.674631497 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.213836988 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.256836206 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.260112164 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.166762738 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.053477638 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.331560912 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.048206528 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.04896613 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.270802589 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26866524 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.151751749 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.051810324 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.050203598 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.048524292 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.287971362 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.051238408 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140400125 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.050180864 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.049684619 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.144373548 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.149739062 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.27679086 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.272284293 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.080601542 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.375586212 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.54745021 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.255391162 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.11385959 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270188082 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.051608188 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.050406351 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.129969218 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.893177703 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.304348085 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.293979693 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.24848008 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.078469671 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.704253376 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.051619575 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.236423526 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.239976351 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.283416233 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.295551898 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.287811442 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.439093042 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.051075846 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.051794945 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.367040407 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.166807515 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.001521771 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.402055949 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.27915677 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.584639455 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.077556873 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.381317619 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.177515528 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.056373621 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.700505181 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.053122621 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.257352489 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093025718 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.055854862 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.052855632 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.240968399 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.960192791 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.053264934 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.75683175 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.112081072 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054966252 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.255187572 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.0526072 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.295181609 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.052930063 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.285378894 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.660907997 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.082169882 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.228939674 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.301903989 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.686249226 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.294479935 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.29443233 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.165034405 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.27799817 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.837344806 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.04132471 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.313703249 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.053955187 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.053805473 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.222329762 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.06039779 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.6275483 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.057167198 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.318198308 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.073422326 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.285634515 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060174263 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.291339173 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.08618319 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.104906169 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.056034898 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.182886885 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.058073588 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.0006795 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.210433736 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.059011435 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.054327234 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.643821339 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.053069146 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.199802915 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.282705514 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.074211341 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.12542188 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.621150441 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.05569513 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.135249104 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.075717773 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.342897754 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.043407144 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.30388352 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.021739232 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.538717595 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.054110479 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.289932131 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.238821056 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.061313858 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.05450947 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.897444407 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.055719463 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.055776323 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.212687973 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.461975553 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.981516663 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.254913233 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.024704371 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180987006 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.059198703 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.133120918 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.396067763 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046559316 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.054177938 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.057101006 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.056570827 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.056403439 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.265207074 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.080770305 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.489899566 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.192486277 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.312483175 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.361346113 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.255324627 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.095576421 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.061270071 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.27614363 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.057363376 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.117048105 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.058168633 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.07540211 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.28491677 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.058127471 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.261069228 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291674617 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.950482609 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.093359 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.046674524 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.056767886 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.971662599 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.204763056 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.144506001 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.057923375 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.058796507 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.170779765 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.176870131 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.240253649 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.895925181 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.217877646 seconds)
  done (took 941.863299554 seconds)
done (took 1281.407048977 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.059902192 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.059540967 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.060633212 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.058448915 seconds)
  done (took 30.225111994 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.060414188 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.060063329 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.060728119 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.062043931 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.052343098 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.059090295 seconds)
  done (took 14.341951406 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.058057084 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.059792391 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.060539666 seconds)
  done (took 23.16555408 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.483455489 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.462930784 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.135329341 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.19952217 seconds)
  done (took 11.26971818 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.064873874 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.059910342 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.060340489 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.063324903 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.063076579 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.061727614 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.062730998 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.062692217 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.061773937 seconds)
  done (took 20.556115397 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.284152002 seconds)
done (took 105.82906294 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.251037695 seconds)
    (2/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.336877934 seconds)
    (3/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.416625417 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.229373131 seconds)
    (5/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.833891773 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.082650484 seconds)
    (7/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.16715245 seconds)
    (8/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.266320577 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.467298399 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.275060478 seconds)
    (11/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.482631802 seconds)
    (12/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.130459068 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.421557682 seconds)
    (14/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.07605979 seconds)
    (15/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 3.728433765 seconds)
    (16/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.674122705 seconds)
    (17/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.528234324 seconds)
    (18/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.089005739 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.085314323 seconds)
    (20/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.201008598 seconds)
    (21/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.628836253 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.166867408 seconds)
    (23/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.129936184 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.086910288 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.419353831 seconds)
    (26/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.17991953 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.08981379 seconds)
    (28/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.071953507 seconds)
    (29/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.140020578 seconds)
    (30/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.205234166 seconds)
    (31/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.161886202 seconds)
    (32/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.08640216 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.083222781 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.377620058 seconds)
    (35/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.397570037 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.484410556 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.304358379 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.162816544 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.304649773 seconds)
    (40/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.083692414 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.196344344 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.510859456 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.220930732 seconds)
    (44/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.072704021 seconds)
    (45/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.149562953 seconds)
    (46/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.190283727 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.404968588 seconds)
    (48/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.723637632 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.468317087 seconds)
    (50/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.964929545 seconds)
    (51/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.509110348 seconds)
    (52/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.083633172 seconds)
    (53/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.132511012 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.488393398 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.273182578 seconds)
    (56/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.192762735 seconds)
    (57/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.225263149 seconds)
    (58/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.398585843 seconds)
    (59/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.21424107 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.312389895 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.324932591 seconds)
    (62/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.133961433 seconds)
    (63/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.238869082 seconds)
    (64/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.439690787 seconds)
    (65/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.568922418 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.162164035 seconds)
    (67/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.247104259 seconds)
    (68/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.855810783 seconds)
    (69/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.489962798 seconds)
    (70/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.307621587 seconds)
    (71/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.088637123 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.464790797 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.397005851 seconds)
    (74/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.079236618 seconds)
    (75/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.088493385 seconds)
    (76/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.185154053 seconds)
    (77/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.084594401 seconds)
    (78/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.159019728 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.788973471 seconds)
    (80/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.148535551 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.949809703 seconds)
    (82/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.499499729 seconds)
    (83/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.073598269 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.086570652 seconds)
    (85/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.076667617 seconds)
    (86/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.612087228 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.084117577 seconds)
    (88/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.075705929 seconds)
    (89/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.075713527 seconds)
    (90/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 4.690437033 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.483423874 seconds)
    (92/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.726520011 seconds)
    (93/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.593622578 seconds)
    (94/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.369828025 seconds)
    (95/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.464398554 seconds)
    (96/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.493535134 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.07433788 seconds)
    (98/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.096536883 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.237599212 seconds)
    (100/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.161413751 seconds)
    (101/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.205338003 seconds)
    (102/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.199575875 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.096910089 seconds)
    (104/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.354404974 seconds)
    (105/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.075801105 seconds)
    (106/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 4.648786606 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.382520196 seconds)
    (108/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.380552149 seconds)
    (109/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.308521691 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.090565331 seconds)
    (111/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.074797368 seconds)
    (112/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.113159256 seconds)
    (113/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.382990105 seconds)
    (114/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.298082476 seconds)
    (115/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.936183853 seconds)
    (116/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.503577825 seconds)
    (117/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.380788775 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.794054069 seconds)
    (119/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.85560915 seconds)
    (120/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.086382486 seconds)
    (121/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.259849271 seconds)
    (122/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.333166221 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.393474121 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.354350404 seconds)
    (125/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.460481765 seconds)
    (126/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.078638448 seconds)
    (127/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.237741923 seconds)
    (128/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.077933696 seconds)
    (129/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.14803353 seconds)
    (130/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.36446177 seconds)
    (131/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.681284597 seconds)
    (132/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.190524094 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.279485346 seconds)
    (134/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.12985678 seconds)
    (135/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.176368811 seconds)
    (136/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.571689208 seconds)
    (137/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.291177374 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.095069242 seconds)
    (139/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.158859049 seconds)
    (140/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.078809778 seconds)
    (141/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.263057705 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.101727388 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.088653166 seconds)
    (144/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.294388517 seconds)
    (145/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.07973739 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 4.24472685 seconds)
    (147/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.197069397 seconds)
    (148/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.558052366 seconds)
    (149/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.227030951 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.177944875 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.178513741 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.307426478 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.100446359 seconds)
    (154/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.078353961 seconds)
    (155/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.362602056 seconds)
    (156/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.155753982 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.300303039 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.296404846 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.393780363 seconds)
    (160/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.171366853 seconds)
    (161/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.170735547 seconds)
    (162/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.65205799 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.979777425 seconds)
    (164/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.293256151 seconds)
    (165/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.33855653 seconds)
    (166/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.080606437 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.099364071 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.094812484 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.190649863 seconds)
    (170/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.208152435 seconds)
    (171/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.388751798 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 5.706744516 seconds)
    (173/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.875498392 seconds)
    (174/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.349185221 seconds)
    (175/341) benchmarking ("sort", Float64, false)...
    done (took 5.81008017 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.212135137 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.961127413 seconds)
    (178/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.088887019 seconds)
    (179/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.137921201 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.176061006 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.295267224 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.213165683 seconds)
    (183/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.491107031 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.986075079 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.328708753 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.101992573 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.379572255 seconds)
    (188/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.287278036 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.239074857 seconds)
    (190/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.093673577 seconds)
    (191/341) benchmarking ("sort", BigInt, false)...
    done (took 7.08218094 seconds)
    (192/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.854593967 seconds)
    (193/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.081889755 seconds)
    (194/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.828973614 seconds)
    (195/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.238965186 seconds)
    (196/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.297257265 seconds)
    (197/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.171827866 seconds)
    (198/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.001465113 seconds)
    (199/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.173443532 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.203222034 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.213267719 seconds)
    (202/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.274650498 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.085247116 seconds)
    (204/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.349560916 seconds)
    (205/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.086541305 seconds)
    (206/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 4.011365465 seconds)
    (207/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.169488884 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.08460556 seconds)
    (209/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.230119427 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.096265367 seconds)
    (211/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.35609048 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.283200201 seconds)
    (213/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.804643945 seconds)
    (214/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.484262533 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.244542999 seconds)
    (216/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.298261663 seconds)
    (217/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.103536669 seconds)
    (218/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.050627266 seconds)
    (219/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.310571314 seconds)
    (220/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.415414881 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.088988019 seconds)
    (222/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.330327737 seconds)
    (223/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.082425405 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.473057586 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.11795233 seconds)
    (226/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.079828275 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.497854614 seconds)
    (228/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.223867668 seconds)
    (229/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.428679685 seconds)
    (230/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.240590584 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.870721263 seconds)
    (232/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.417891657 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.085344017 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.728665835 seconds)
    (235/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.464694739 seconds)
    (236/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.36216751 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.69339101 seconds)
    (238/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.295122641 seconds)
    (239/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.266181298 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.38682939 seconds)
    (241/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.213827513 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.106601992 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.212491396 seconds)
    (244/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.183314205 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.103468516 seconds)
    (246/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.536329607 seconds)
    (247/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.219648101 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.949639419 seconds)
    (249/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.458744493 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.104429993 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.168517351 seconds)
    (252/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.368910734 seconds)
    (253/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.384421345 seconds)
    (254/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.16615886 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.792215386 seconds)
    (256/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.487663164 seconds)
    (257/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.481871402 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.174719081 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.198571644 seconds)
    (260/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.360774548 seconds)
    (261/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.424506638 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.091984295 seconds)
    (263/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.138961318 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.093512505 seconds)
    (265/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.218106933 seconds)
    (266/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.083284934 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.083501517 seconds)
    (268/341) benchmarking ("sort", Int8, false)...
    done (took 6.536171378 seconds)
    (269/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.858069133 seconds)
    (270/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.371230029 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.979096276 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.24350052 seconds)
    (273/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.686712286 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.3367425 seconds)
    (275/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.275366716 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.394725662 seconds)
    (277/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.104994591 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.394407083 seconds)
    (279/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.166101958 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.881941132 seconds)
    (281/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.59632323 seconds)
    (282/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.219117951 seconds)
    (283/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.498864176 seconds)
    (284/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.83121154 seconds)
    (285/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.220175753 seconds)
    (286/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.263506162 seconds)
    (287/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.126999971 seconds)
    (288/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.075526584 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.080927621 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.328494982 seconds)
    (291/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.174953277 seconds)
    (292/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.86303207 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.544557139 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.083073074 seconds)
    (295/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.378312076 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.107703175 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.038493544 seconds)
    (298/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.286823585 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.08919585 seconds)
    (300/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 8.602033689 seconds)
    (301/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.581620789 seconds)
    (302/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.083637867 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.177496317 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.767697945 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.288248795 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.347518378 seconds)
    (307/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.193926708 seconds)
    (308/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.095660059 seconds)
    (309/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.245135803 seconds)
    (310/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.533884071 seconds)
    (311/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.886342332 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.409476987 seconds)
    (313/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.095200852 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.425410458 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.168978758 seconds)
    (316/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.121131831 seconds)
    (317/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.206479974 seconds)
    (318/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.191123787 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.001832879 seconds)
    (320/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.092601709 seconds)
    (321/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.385003991 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.175984088 seconds)
    (323/341) benchmarking ("sort", Float32, false)...
    done (took 5.730685041 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.072988607 seconds)
    (325/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.188308343 seconds)
    (326/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.457669388 seconds)
    (327/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.091521451 seconds)
    (328/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.30868747 seconds)
    (329/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.424971745 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.081014908 seconds)
    (331/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.108458251 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.185509483 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.983450367 seconds)
    (334/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.572984624 seconds)
    (335/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.163038256 seconds)
    (336/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.325171854 seconds)
    (337/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.548124246 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.9966401 seconds)
    (339/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.196034062 seconds)
    (340/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.089745982 seconds)
    (341/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.21353982 seconds)
  done (took 1164.361062643 seconds)
done (took 1166.687754311 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.112089914 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.098816028 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.593954601 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.109945171 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.097193673 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.10069877 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.600725579 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.129040326 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.115266472 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.602545239 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.109964094 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.098981005 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.115597817 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.134388223 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.110204469 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.115554548 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.105325415 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.123842394 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.134098844 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.106835286 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.14461802 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.106576657 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.099330031 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.151350295 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.101154008 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.114006535 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.115962008 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.144343331 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.144588267 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.10359746 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.105776751 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.450291573 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.146315867 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.104204749 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.111392795 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.113269629 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.105680988 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.114543351 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.113873824 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.11382082 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.099496696 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.110375825 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.102850379 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.1035356 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.09983914 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.096999572 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.100884902 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.225028972 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.116364184 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.432589247 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.153939859 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.114748582 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.145589139 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.102600982 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.102054462 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.102748251 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.14395372 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.107767083 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.105352743 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.433178756 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.18467012 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.115396022 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.433436934 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.160422997 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.1122735 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.110577244 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.102033191 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115082221 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.45017053 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.637646608 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.130828007 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.122715839 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.103236105 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.104640453 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.115147022 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.599584957 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.114403371 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.671070117 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.12738839 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.117333568 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.10894598 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.103707029 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.103698848 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.118899717 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115846647 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.10101963 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.107086894 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.107387808 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.115838134 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.45166004 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.141229266 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.59216301 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.112403644 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.119841997 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.117073519 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.67312277 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.116427187 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.116022529 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.106024983 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.452963751 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.140105253 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.118372332 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.10669066 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.102020559 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.218578 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.118640539 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.118402817 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.104914556 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.127230598 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.111478374 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.104472523 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.118782685 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.124126729 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.139004607 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.120594464 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.103825749 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.112536667 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.10849675 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.116771073 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.111674227 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.110202276 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.116212416 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.104570649 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.155800475 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.117845415 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.119888558 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.219638986 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.111227794 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.229237599 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.119130264 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.111375187 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.104256465 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.438088401 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.146963291 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.12679789 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.115859663 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.129015021 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.127920807 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.121980508 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.102555631 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.127074488 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.110035345 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.156940537 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.106483251 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.131081173 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.161318611 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.120731309 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.111307328 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.118315799 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.144471078 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.128022949 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.110541622 seconds)
done (took 330.930149657 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.146181226 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.096182095 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.177625725 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.094107697 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.16423603 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.15198406 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.096344922 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.098662366 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.098165581 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.553884515 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.097688604 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.103642979 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.099050291 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.099224609 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.14711518 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.096747549 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.096707913 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.329744325 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.097314915 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.157958957 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.097151454 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.098489492 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.097707649 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.487626109 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.098608749 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.096195708 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.156877675 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.096973291 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.342628064 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.098229991 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.098694015 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.341341093 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.157529965 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.11149676 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.106165616 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.108398733 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.165437133 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.107432657 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.145583815 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.147666729 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.178995759 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.132837104 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.097311332 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.101013338 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.100198389 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.099584291 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.099507134 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.131687843 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.100136368 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.106506627 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.371164768 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.109422213 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.10408602 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.099860945 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.099062582 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.114013614 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.10186628 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.10109867 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.161622133 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.09920064 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.145856657 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.495155576 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.483731454 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.099202498 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.098466872 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.101767118 seconds)
  done (took 199.12082312 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.166725873 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.193624025 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.168103162 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.107315228 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.150643125 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.167757403 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.107023847 seconds)
  done (took 17.08732621 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.107723925 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.100465851 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.125413953 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.122335525 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.100257348 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.239684601 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.111332033 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.105492116 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.124950021 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.10169569 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.436921743 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.12576053 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.108776429 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.100253371 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.113042909 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.129374568 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.104166128 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.100822222 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.199141306 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.178932066 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.107497515 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.109022721 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.12858284 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.116081587 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.10076588 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.10164799 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.101359498 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.108047812 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.101518143 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.101239833 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.101042352 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.116228008 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.101609747 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.100562064 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.102058981 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.106071576 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.101223631 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10231938 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.10191794 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.103627088 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.104499201 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.101988759 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.10323487 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.102449349 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.10267586 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.125244513 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.102992188 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.102306617 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.104782705 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.102585335 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.132067982 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.104764854 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.101092445 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.108817152 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.14145541 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.109892739 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.103806644 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.102952609 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.10339054 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.103907871 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.103313377 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.183597881 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.126166135 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.10218475 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.125635067 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.140404544 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.103298729 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.103022942 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.104035487 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.128487316 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.105178303 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.127544557 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.103587932 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.201841238 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.103900551 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.247985096 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.128217902 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.108705036 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.108867815 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.104881 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.113992591 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.104467961 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.10723374 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.111984004 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.110058533 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.106148564 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.103855769 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.107635025 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.11242265 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.103580334 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.148326881 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.103890773 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.105933847 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.202495998 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.105318932 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.202311983 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.13266563 seconds)
  done (took 227.786620833 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.110728266 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.105208683 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.117330801 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.092727547 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.106621945 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.110377232 seconds)
  done (took 14.673709445 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.107120916 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.110046097 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.105837975 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.10589948 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.106415912 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.108384892 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.107164112 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.109397615 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.109565943 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.106309246 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.112169876 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.106833112 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.10811905 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.106339244 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.107463013 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.108418236 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.106447512 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.107671406 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.108043633 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.105473379 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.358835428 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.10690887 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.107321955 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.112174136 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.113011032 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.106942186 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.116339912 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.108363164 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.105849443 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.114425903 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.11039295 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.108205292 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.113028599 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.116783786 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.112473975 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.112208965 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.110901206 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.108293889 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.107294376 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.109869351 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.108438122 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.108638888 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.11016494 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.109768055 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.109558253 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.113576853 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.113431996 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.115783208 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.108575439 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.107579647 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.10859887 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.108699555 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.108409706 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.110593267 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.115203412 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.117517238 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.114460033 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.109504998 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.108984041 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.113583821 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.113980731 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.10967167 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.115036254 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.11339001 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.117703754 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.109805752 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.113934898 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.112666401 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.109957724 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.108620682 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.111182409 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.110601086 seconds)
  done (took 155.214530759 seconds)
done (took 615.904483789 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.19550049 seconds)
  done (took 9.229889411 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.331536295 seconds)
  done (took 9.474979887 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.271753873 seconds)
  done (took 12.312468452 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.138881854 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.113699827 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.116992538 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.108398427 seconds)
  done (took 30.528668049 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.4362013 seconds)
  done (took 9.472314668 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.119077755 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.104899267 seconds)
  done (took 16.33043645 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.154639394 seconds)
  done (took 9.196502104 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.13693772 seconds)
  done (took 9.197034706 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.134809618 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.117941126 seconds)
  done (took 16.309366139 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.114889861 seconds)
  done (took 9.153258233 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.91539404 seconds)
  done (took 10.045021731 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.125800107 seconds)
  done (took 9.183366574 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.191905388 seconds)
  done (took 9.230525911 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.982103275 seconds)
  done (took 10.021455696 seconds)
done (took 171.719112122 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.124028594 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.116128207 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.117415373 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.115948725 seconds)
  done (took 30.511660749 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.150403666 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.15008748 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.158189301 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.148512459 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.141890238 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.142552303 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.150021897 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.152708212 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.142394312 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.148334307 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.151559844 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.154425357 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.150201011 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.160545651 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.159025535 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.148640758 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.150413644 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.152887543 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.144112033 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.159946564 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.152870072 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.152239738 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.117921676 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.118257459 seconds)
  done (took 53.598572064 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.30788522 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.183880965 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.27279211 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.165080942 seconds)
  done (took 10.970653796 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.114187413 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.181309731 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.168853687 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.164665266 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.167827776 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.221523828 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.168692568 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.253267274 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.246725408 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.244921411 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.123550152 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.139898773 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.140690232 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.163345101 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.221586938 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.117427716 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.118533365 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.232076075 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.178806068 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.28779627 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.119342482 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.172958212 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.171478965 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.172145651 seconds)
  done (took 54.33249065 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.120169547 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.127951586 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.127228129 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.119761091 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.12126877 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.121600137 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.149200466 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.122235581 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.144697495 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.123007553 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.119549564 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.120684837 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.128291468 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.122117908 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.120359277 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.134504545 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.134979233 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.12047055 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.125200198 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.12632841 seconds)
  done (took 44.571922364 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.117929232 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.964794458 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.465379909 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.369665987 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.118924657 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.114751926 seconds)
  done (took 33.194449278 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.13126734 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.13703405 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.122899043 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.142292059 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.163930674 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.127612881 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.175981924 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.281997064 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.126633072 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.17341275 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.135773495 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.123642561 seconds)
  done (took 27.887919382 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.117509164 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.119761391 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.123362683 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.131957107 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.130374365 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.130287803 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.122794668 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.118574788 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.131624958 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.139897097 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.130120982 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.131817869 seconds)
  done (took 47.572226251 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.33328935 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.345071258 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331781039 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.608816518 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.441531047 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.090841923 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.404984731 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.33135282 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.890405104 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.923345908 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.419457862 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.104127359 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.064270402 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.044744639 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.03933232 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.363605288 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121725329 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.978552833 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379046104 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.167738279 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123031627 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.12077993 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.127406113 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.407958338 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453291108 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125815563 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.331429975 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134808495 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121374045 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.347321951 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.624005668 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.171091954 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.322653469 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.375971601 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.463857725 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.170385874 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.223292139 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.190919353 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.162033494 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.15463983 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129583187 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.132100609 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.649382114 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.134807195 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394156197 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123883678 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.127128801 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.229027548 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045751435 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.455873023 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.240804735 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.121495139 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.156220779 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.553492047 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241659635 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365114085 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124704106 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.189939566 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177015712 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.391632222 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.239590351 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225259077 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332636867 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047655929 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.534859913 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251796388 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.122947034 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124894399 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.821013068 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364696642 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.200473825 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.469114965 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.888320418 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.121672196 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12367293 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.165081188 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213157891 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.121421322 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.417808453 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.100558785 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.046272226 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220999893 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.52115246 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129807015 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.122160311 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129219395 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.969727143 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.047526018 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.219688857 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.394715323 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.452702037 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.123916336 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.123748274 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.145985884 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126111478 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069397538 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.573551865 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.190846369 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.049967601 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.689844443 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.638661406 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.091874921 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.558972519 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.168223428 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.407296352 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.277873073 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.528005631 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.33259505 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370819424 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.655757883 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130998948 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.683618486 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.205308481 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200429193 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124013466 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.68167265 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.204949928 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.438775022 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245602493 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.126536744 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.053022554 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.134362214 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327864576 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.645670399 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181162292 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124177749 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.131341594 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.126135207 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.128874538 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.2338805 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140831311 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.426938585 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.198573224 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.123620295 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063080805 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.127719581 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.415789465 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.6053659 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187257144 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383885027 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.393101145 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825760271 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.723494904 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.170358123 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.400977267 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.200578197 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199417075 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.696261194 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.262219248 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.221836647 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.126250055 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.266659732 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.132876226 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.127383688 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.341532169 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.539843642 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.553313825 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172660267 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.127703277 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.079540734 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204124944 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.368841798 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213717377 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.155097312 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13162236 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.212006421 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.353633563 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.126719108 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055444687 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38293064 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.372395721 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.427053607 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.538094295 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.213275022 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.206507113 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137929973 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.342110002 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.209177295 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.782386399 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.670762113 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342520284 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.608570322 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.094390073 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.768820617 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.409553159 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.514852245 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141686683 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.578860905 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.207487366 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.717711804 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.161788236 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.655714066 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.053463321 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13207081 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462185142 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.08538119 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.444105399 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.254350215 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143599667 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.130890014 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.131409979 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136659174 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.076773539 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.238915139 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197849276 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20463413 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053622706 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.67312757 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.170355005 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.132366645 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.129118026 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.500994222 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.998435773 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087507362 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.128581811 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207510526 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.878159816 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.679396589 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.133394068 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133829093 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.735318599 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.134791538 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.044598056 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.137085343 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.026076727 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163743098 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.40928441 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.838538539 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.415996998 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.20876772 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204846859 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.129416474 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130999341 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.829134477 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137945468 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.832425545 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42163475 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.410689362 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.580172251 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.196381072 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.339972519 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.143995216 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.126331698 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.669958083 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.164708898 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133486398 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.335356794 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.647072102 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.479595702 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.100267691 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.218340544 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130951139 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.406822164 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.140737236 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.639883692 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.83867766 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.140655562 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.13096923 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.399127309 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.81592827 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.135247906 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109098219 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138887807 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345784137 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.334646534 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.403709768 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.405481802 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.582667618 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.056726469 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133703311 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.186252509 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.374678557 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.120101296 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.167659924 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.579512431 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.223516781 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.56307596 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.425195064 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.549765143 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.774376055 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.400286207 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.201271728 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.144469737 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.802330292 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.266544989 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.067546957 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2501596 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.059007685 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.910770994 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428829151 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.14732845 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.406470379 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.114430515 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.492486751 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.431114033 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.40821352 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185277743 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.162095765 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.131673337 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.187941969 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.134342169 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.221478847 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.252107629 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.139691261 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.584284867 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175328209 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181150579 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140347924 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.668842919 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161529567 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134758937 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.831980982 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.157153621 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253126771 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207995632 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.92521319 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.673477257 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.177666528 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.011491591 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.781100789 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.411023614 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.192953066 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.591865647 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177665001 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.536765022 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134529923 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.349318251 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.140591121 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.604673014 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182966177 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41350848 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092645327 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.345756973 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334507245 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.163447146 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.140359255 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062000578 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.220582171 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.013120323 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.120635924 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.138249812 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.818622799 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.568835434 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.246174636 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.606443527 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.961814027 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.138328875 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.559446912 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.54249469 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.653022363 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173218548 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139977651 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.487635044 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.277633961 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.431675511 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.416522788 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.114498503 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.164621283 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351197295 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265895159 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.057506194 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.616009351 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.722172209 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.814160243 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.150215354 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.343594531 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.487127338 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.328116717 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175195921 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219909229 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.543633534 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.412364798 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.207925536 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.064684829 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138562712 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.538134691 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.538989027 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.235817206 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380603326 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.44951419 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.591396157 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.659850602 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.49599921 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.59999789 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.592857077 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.540864088 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.349642148 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.50719537 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.464405878 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.019623185 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.552753618 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.350640727 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.230921648 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414801302 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.012993093 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.84893874 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.384284302 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.145246227 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069521612 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.345937239 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.14174748 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.446804906 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.664695914 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.387027388 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.421283942 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.61347373 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677231084 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.227114251 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.166278389 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.10732027 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.16349501 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.16054656 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.141105945 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.621128195 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.433371874 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152418008 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081870942 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.813265384 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.069567831 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.354694135 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.241340986 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.180015102 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.700108592 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.425508276 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.255441955 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.432455261 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.283091264 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.178592872 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068260026 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.863737339 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.092765413 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.238760674 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.573427077 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156712054 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.145562654 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333786747 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.068911305 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185701776 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.146404237 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340186578 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.724763538 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420792137 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.273001341 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393023396 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.446203475 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.064045723 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180617985 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413989533 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.067503498 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.681965972 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.8436769 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.180850324 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213812535 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143343106 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144786347 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413944471 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.498207142 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.257519254 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.756123442 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.178837205 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.166156567 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.4825483 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.245816128 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.144514127 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.148855468 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.53788419 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.377115673 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.143997875 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.132503649 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.353542846 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224307819 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.341354543 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218211439 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.661619678 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.15165595 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.053514648 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.257737784 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.096741489 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142314811 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.947722046 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.21120305 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.143781948 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422876405 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.765582926 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347406775 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.543681648 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.094256133 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.231665785 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190048606 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.148308838 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.153121694 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.542293377 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.450565074 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.141462669 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420349025 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193679327 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.15171797 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.809604793 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.113936905 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.145968816 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.863403626 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.124996038 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.879496143 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.541345502 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.274591586 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151084026 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151208094 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.072292337 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.144063248 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.319735007 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.138134191 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.149890491 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.514948067 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.477586896 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245360656 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.150989673 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.148421635 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.153876914 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.358984124 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.6607428 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166404492 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.84907338 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352002775 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157571008 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.627947493 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.590671395 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.301948042 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.18770102 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.232998014 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387764867 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.688613218 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.248464897 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.124706395 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371742958 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.148690491 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420948495 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422363171 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.148716908 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.359588259 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.661231806 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.434604999 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497631441 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.46477457 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.215419004 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.242419013 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.128998995 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.156553318 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.150843945 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412974489 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206137858 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.146858771 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157083026 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.707226464 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.859217179 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.62095054 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298586755 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.473914389 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.02644091 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.903191909 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.149657631 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.072405854 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.147035071 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.17193774 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.151469009 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075130426 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.915020278 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.871290563 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362580924 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.460834776 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076166532 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.35118229 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.746793879 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.073733575 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.115995506 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.148015066 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.412871139 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075449963 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.150637488 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.103205052 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.434384612 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.799325635 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420309283 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.147862087 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09262335 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153429823 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.153448927 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.149139049 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.235961625 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.151104911 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269200499 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.417010607 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.536831189 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.258812918 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.789416186 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.85170633 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.089708087 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192020173 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.763675357 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.72011953 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.433220819 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.281131982 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.858409687 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.098047311 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.129186287 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165185585 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.397650171 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.149179157 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153697916 seconds)
  done (took 2239.719296441 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.189747965 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.249196954 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.358238673 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.168318523 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.227393958 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.318234719 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.238758188 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.16299247 seconds)
  done (took 59.988446511 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.150749424 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.13370637 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.158091664 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.152568607 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.148570526 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.183004463 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.338229435 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.181500734 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.150636099 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.178332986 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.150944648 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.154014942 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.154424859 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.166780981 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.155086364 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.438250437 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.184771186 seconds)
  done (took 81.294508942 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.205325382 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.086492766 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.152732023 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.975356295 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.17769992 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.443928983 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.15084619 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.15427237 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.484866012 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.449374137 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.153005486 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.15229679 seconds)
  done (took 95.664560522 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.15290497 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.152009717 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.154605565 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.154888016 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.152615364 seconds)
  done (took 12.844390938 seconds)
done (took 2794.251976626 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.404926967 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.247411606 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.220907129 seconds)
  done (took 6.544227464 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.297222202 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.348399716 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.463228333 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.466046102 seconds)
  done (took 11.658004959 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.434001851 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.535715474 seconds)
  done (took 7.048941303 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.52346569 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.178817414 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.553272607 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.154922996 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.157531804 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.157213104 seconds)
  done (took 23.554618266 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.151230353 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.152974709 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.155916108 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.15435735 seconds)
  done (took 10.692765939 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.151997246 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.960443057 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.154968768 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.165136963 seconds)
  done (took 22.487768334 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.364054955 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.60403766 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.924798914 seconds)
  done (took 13.971486179 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.774830134 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.606116511 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.762289411 seconds)
  done (took 10.222514559 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.984665988 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.164051959 seconds)
  done (took 8.227812221 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.298541824 seconds)
  done (took 4.377221059 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.982355655 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.466338667 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.675173878 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.667945764 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.752374822 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.371551505 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.461804366 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.410426198 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.548266855 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.550765026 seconds)
  done (took 27.967542284 seconds)
done (took 163.489777832 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.580771531 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.174861513 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.361855405 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.52528335 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.388864406 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.36451333 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.452498852 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.516091562 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.200786105 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.1836273 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.524501969 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.412367284 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.398665077 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.177385915 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.403614154 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.179181475 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.397665724 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.603844761 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.209842219 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.447655185 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.458353878 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.171311584 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.365288016 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.192649189 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.396419871 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.311780327 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.775875549 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.171896327 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.360880738 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.789177831 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.315979379 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.599019067 seconds)
  done (took 178.491517667 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.03066939 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.154766883 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.158711405 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.15446984 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.431409655 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.156721266 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.158020444 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.157098895 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.364936039 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.351040587 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.157609142 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.425961228 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.156159469 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.158354979 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.159929328 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.156487524 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.471526583 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.06575314 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.1573879 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.157334538 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.159621526 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.299763635 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.15803718 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.307543898 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.457485344 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.159668597 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.157553618 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.157207003 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.161216345 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.157813208 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.160495972 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.15812738 seconds)
  done (took 216.763268604 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.15880184 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.158979867 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.157493409 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.15793294 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.159445131 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.159724738 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.158939928 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.157969293 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.837223801 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.826301115 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.158495158 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.160519019 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.159311146 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.160105434 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.162122619 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.15914352 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.1591425 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.159358375 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.159092592 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.160477636 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.158585849 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.93044604 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.160325156 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.944732176 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.159962028 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.160860992 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159229638 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.16101077 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.158491733 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.160493712 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.160517479 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.160995178 seconds)
  done (took 230.09341158 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.402002757 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.162470782 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.163682927 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.17607066 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.165257746 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.163474329 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.168981685 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.409416216 seconds)
  done (took 21.898397276 seconds)
done (took 649.335465224 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.599592713 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.929864577 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.294620792 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.188376335 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.462890872 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.225339041 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.180219083 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.249337702 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.826113805 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.257078134 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.593412678 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.191072145 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.922660243 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.202939284 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.295291279 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.24577937 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.555118325 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.81214694 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.312093875 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.868787269 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.385205118 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.124877954 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.259324427 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.874156912 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.61358017 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.143512174 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.183492558 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.552271871 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.187930423 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.412408715 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.874687658 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.408789901 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.191230966 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.184504148 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.243687554 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.226619776 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.36578223 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.189772597 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.293795785 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.927743429 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.869028615 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.7166596 seconds)
  done (took 112.530072089 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.172352834 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.168592866 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.169132922 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.170313871 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.177257912 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.167159244 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.169029545 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.169073879 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.171659133 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.169441297 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.169423263 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.177432027 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.169597478 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.177809866 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.1682445 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.170039412 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.170771164 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.177450034 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.168200156 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.167901633 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.168336743 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.171701013 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.167842394 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.170123513 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.170094616 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.169031884 seconds)
  done (took 58.536108068 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.16595539 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.318832122 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.45718048 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.193135335 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.165191488 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.169557871 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.193920035 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.173525311 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.169676065 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.167756372 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.278281159 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.173853584 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.180722239 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.45427945 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.189899973 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.164095028 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.167119698 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.168478402 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.325787117 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.184023278 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.195866146 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.174288771 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.196245418 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.183045884 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.170166853 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.166448896 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.168732076 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.580696415 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.181344571 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.278987311 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.200434399 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.198902805 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.547637026 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.466378821 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.230470848 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.17277067 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.167369018 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3249358 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.183012811 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.168320551 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.194219608 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.178484768 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.45826964 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.675153681 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.181367902 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.166786517 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.582532858 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.336545537 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.216160415 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.179050251 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.463922639 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.192899306 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.168733426 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.169188923 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.203054706 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.177443728 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.168333106 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.444093078 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.186980426 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.195085703 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.177575749 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.168951483 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.332368569 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.179643317 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.320560487 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.180521803 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.16972803 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.169976129 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.455402828 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.194000526 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.674792897 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.185522151 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.168364406 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.284550429 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.333200417 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.607927 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.18324365 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.333238709 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.568130043 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.205999041 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.185094082 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.566548848 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.208625317 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.181503361 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.171045209 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.171134131 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.170645626 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.213945111 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.194949408 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.602188189 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.680087709 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.458489263 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.210663209 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.17977784 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.145560733 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.440996448 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.182506662 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.170965071 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.452712437 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.700066236 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.187859948 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.180280001 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.661240384 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.199135147 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.198806739 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.185415102 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.470930281 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.195279521 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.213930545 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.171905181 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.177807648 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.176332336 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.19867642 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.185697409 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.169688992 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.654345282 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.343188349 seconds)
  done (took 267.799187116 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.173657773 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.171055983 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.174341208 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.170216203 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.171300765 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.172677348 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.171361059 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.169208369 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.174308553 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.172424436 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.171729745 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.173808532 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.172311454 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.179952504 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.212401228 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.175094675 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.661046507 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.174022811 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.174963809 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.173127788 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.739437686 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.181254068 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.174303286 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.169817098 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.17477504 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.169757236 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.181761262 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.208908322 seconds)
  done (took 176.091812279 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.172841113 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.218834171 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.183232981 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.217897172 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.18416334 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.17506872 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.193037189 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.19034798 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.180622993 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.173806513 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.174117427 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.200600947 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.183354325 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.247118959 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.19763937 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.203952905 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.253108065 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.176691259 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.171810923 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.174387492 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.219468783 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.183194122 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.199071893 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.227995203 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.185346127 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.221736515 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.184560259 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.174703284 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.175465038 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.261291736 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.191089479 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.200813037 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.212150894 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.195011542 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.268413738 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.236910204 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.253160168 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.199977376 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.182843257 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.177689653 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.177302874 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.162959555 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.222897555 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.186784043 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.176254737 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.265271365 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.187395729 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.177083104 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.196808797 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.17809763 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.18610427 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.193800646 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.212027291 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.276843981 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.215220435 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.20671831 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.1983811 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.196273721 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.177840834 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.252042852 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.182307246 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.264668905 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.190144041 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.175520993 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.178126931 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.181504277 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.223963357 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.207330155 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.253735485 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.181328968 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.250540741 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.225797977 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.186725689 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.178138295 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.178249691 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.225120689 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.25950312 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.225581854 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.23159882 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.208252496 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.188838474 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.178230905 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.177772821 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.202443153 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.184146884 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.265185885 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.261706748 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.18053351 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.178053839 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.178308256 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.178247577 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.19973149 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.232622783 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.215283171 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.260084426 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.208154318 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.213849314 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.183714033 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.190941429 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.18519709 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.20993238 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.186215005 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.188689135 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.536883621 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.214534793 seconds)
  done (took 233.778628362 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.523531914 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.22347502 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.247410578 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.441014447 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.549060985 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.304026912 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.216241462 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.239546642 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.240762586 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.345136229 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.282088646 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.269108514 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.210933596 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.202426504 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.229984887 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.237108495 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.259540196 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.521503261 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.323936627 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.910534097 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.212118531 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.474402658 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.52079933 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.568351923 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.267308995 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.596117654 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.840596844 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.310342296 seconds)
  done (took 70.673136777 seconds)
done (took 921.492976805 seconds)
SAVING RESULT...
DONE!
