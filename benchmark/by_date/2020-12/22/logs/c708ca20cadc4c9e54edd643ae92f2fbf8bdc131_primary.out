cset: moving following pidspec: 16872
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.825615544 seconds)
loading group "shootout"... done (took 1.107694735 seconds)
loading group "string"... done (took 0.665848022 seconds)
loading group "linalg"... done (took 8.550527238 seconds)
loading group "parallel"... done (took 0.166434992 seconds)
loading group "find"... done (took 3.018256513 seconds)
loading group "tuple"... done (took 2.133235332 seconds)
loading group "union"... done (took 14.91090649 seconds)
loading group "dates"... done (took 1.450653907 seconds)
loading group "micro"... done (took 0.219100649 seconds)
loading group "simd"... done (took 4.791761246 seconds)
loading group "io"... done (took 1.095632127 seconds)
loading group "random"... done (took 9.584213821 seconds)
loading group "problem"... done (took 1.537392204 seconds)
loading group "array"... done (took 25.199294235 seconds)
loading group "misc"... done (took 1.900498591 seconds)
loading group "scalar"... done (took 43.706575059 seconds)
loading group "sort"... done (took 3.336198924 seconds)
loading group "sparse"... done (took 12.771174522 seconds)
loading group "collection"... done (took 18.779920843 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.419383323 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.112738053 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126125956 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111259856 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182435145 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.117052355 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127979701 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082122719 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.908079959 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.133495826 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112344993 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.419975936 seconds)
done (took 5.276309869 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166603734 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088756188 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081568999 seconds)
  done (took 1.375085391 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069208389 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060643909 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066276557 seconds)
  done (took 1.400390424 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064499156 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132817601 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064480561 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066238501 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066257483 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065987889 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065490335 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065571991 seconds)
  done (took 1.736085113 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070341537 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065939575 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063969453 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066991954 seconds)
  done (took 1.476718541 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063578074 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118922659 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06284799 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063189678 seconds)
  done (took 1.515115229 seconds)
done (took 8.96058121 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137321713 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.815056746 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.763221936 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120113196 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244554859 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.36506512 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.120788212 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.180349762 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086495613 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073053716 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121051339 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076963878 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.382486815 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.503877571 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070509297 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17067138 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650591931 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087002631 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134941389 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.446208726 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071589275 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08736114 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086708549 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071283532 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320375745 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151383678 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.662327805 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094141548 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067278178 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094458931 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069497633 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077938102 seconds)
  done (took 10.64759376 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09053487 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088205407 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066883557 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.121762813 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.091417004 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068257196 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073541461 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067235392 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088894895 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125164639 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090801239 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099465924 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066876931 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068516514 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074043948 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197267895 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078424537 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.07930554 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06551824 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079606921 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104641091 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076660618 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076351759 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076053468 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130902949 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169793516 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094823096 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096111091 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064296994 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077278282 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114789945 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126634591 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067351127 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065230675 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120520773 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095370035 seconds)
  done (took 4.593560296 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.880433154 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095517591 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08325734 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074371251 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106718928 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.114777905 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112039748 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121969887 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122976763 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100444336 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073446832 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152130535 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.666314594 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.166450704 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069947067 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118172056 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35308901 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.04791897 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068144119 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06608407 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071162959 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070339151 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113148553 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066230659 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177333135 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581676203 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068598046 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066931724 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096118557 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064795634 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141255521 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092524773 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069753296 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.543395794 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065147163 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063583932 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.199218897 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094831827 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067126933 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067863867 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079215277 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066207262 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108827452 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080585817 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513586543 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069756558 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.587555289 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22673974 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072944426 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072591677 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101085459 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063827672 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067227849 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.214022408 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145362021 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066086143 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.274673442 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068547944 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068067912 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068643941 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099615321 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066776728 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072081255 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072580127 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096481759 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.803580833 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088804351 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096250523 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067464382 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.407774745 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065658497 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072834752 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06901155 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069350281 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068670639 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.106837105 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066125512 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065744183 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112332391 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096049975 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089641649 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069491313 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067759486 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065918453 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.331893 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.162157738 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064455477 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065403859 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.476731333 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063429542 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066120105 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063184196 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067250129 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.092145345 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.184166866 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063508256 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065217233 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099671126 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068511997 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.335946476 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067465918 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.479597492 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069077234 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103852051 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119994838 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067695981 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064792231 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.101735412 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068053352 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064809144 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07354804 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065223563 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06417921 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069094685 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065316626 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066279898 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069255632 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068142093 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067119587 seconds)
  done (took 23.006412997 seconds)
done (took 40.339935032 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312609623 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078773601 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07812171 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078738898 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079433297 seconds)
  done (took 1.880069076 seconds)
done (took 3.227091295 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249206715 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073354378 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062345162 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205540667 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087802192 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.176839092 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.215553895 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.168405116 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089450991 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088969301 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089095062 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.224289349 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.229701225 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089516271 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.160214612 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.230940338 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.089197534 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063983622 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088900866 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088917485 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.08892013 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063862993 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088655477 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.08901665 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.15914935 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088775648 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06327299 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.158780044 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.088153152 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.158657509 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087949219 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087357294 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087515787 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.157920333 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087889416 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.156671656 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063609798 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087695144 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088095616 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087679902 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.087154322 seconds)
  done (took 6.196814032 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072549861 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.194361361 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084743282 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061766273 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071396255 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082100532 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061403822 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082055791 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090847441 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082450204 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082354538 seconds)
  done (took 2.302363974 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.06831245 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082368513 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084340162 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061234469 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072494062 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083269165 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061201839 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082532164 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086085193 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08315386 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083141334 seconds)
  done (took 2.131934206 seconds)
done (took 11.903326473 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.094838001 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063541849 seconds)
  done (took 1.4270012 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22566854 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.497983468 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.908331421 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090644997 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072329592 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085793974 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197886452 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066927181 seconds)
  done (took 7.60206209 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.100880498 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06711166 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071659167 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068234796 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068847359 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067332901 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066881544 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067819972 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068906005 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.06856773 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067082643 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.06931224 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068177983 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068137173 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067390147 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067594967 seconds)
  done (took 2.510895262 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103588589 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.068934052 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09942052 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061319467 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071938468 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061857276 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070670758 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072898828 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070259719 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071488118 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.0721224 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07114762 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071127242 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071455639 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072406651 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072911501 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073236228 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.07027593 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072963431 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073896333 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072429248 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072900787 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073170885 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071182689 seconds)
  done (took 3.164184438 seconds)
done (took 15.989998166 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171913438 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074748572 seconds)
  done (took 1.524485827 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.06576072 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068515212 seconds)
  done (took 1.430739466 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071025369 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059423498 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078029906 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069854055 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061320356 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061016342 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076870801 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061353392 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060928621 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060937484 seconds)
  done (took 1.955350101 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.060866289 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067753992 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066246917 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064362947 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066826822 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062399408 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064779451 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062376964 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068800486 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061448926 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06549805 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082795456 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064937016 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08377645 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06513139 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065693776 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067258893 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064996451 seconds)
  done (took 2.503978309 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059401639 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060659966 seconds)
  done (took 1.421570682 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062192725 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060905367 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063924935 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06384062 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060909394 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06096057 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061726997 seconds)
  done (took 1.730297247 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.425641373 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124906019 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348658705 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068733674 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077034333 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258027591 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063640438 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068719983 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068525173 seconds)
  done (took 2.845102396 seconds)
done (took 14.720697548 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080275612 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180858215 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087535914 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.383454268 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092253748 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.066644917 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112755287 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177538498 seconds)
done (took 2.50781842 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276193036 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.232894347 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.408196437 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125932361 seconds)
  done (took 3.075783131 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329190829 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078992282 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077418388 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067070471 seconds)
  done (took 1.872262929 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.062950065 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070703293 seconds)
  done (took 1.445834458 seconds)
done (took 7.991380709 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069127783 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060817488 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067184898 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.091730271 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063528404 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.063528851 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062654169 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06151096 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063594933 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061141781 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.063830048 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.063561239 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063736284 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063181585 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063394699 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062625434 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063622069 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063451231 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063249027 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062464516 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063513784 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063721592 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063004167 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06305515 seconds)
  done (took 2.893411272 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077202865 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064699794 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066301183 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065958428 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06673805 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066747913 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066656869 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064981903 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066183477 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064818049 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066285363 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066875796 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064972447 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066560027 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064605542 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066821305 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06640461 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06543934 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064895602 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067068806 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066253639 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065350438 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067107589 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066442009 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067004685 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066797481 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065435848 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065635695 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06629748 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067106858 seconds)
  done (took 3.323190135 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06444918 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057701363 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059484395 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069995907 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059161129 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060262411 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060180916 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059544406 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059954717 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060684905 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060328122 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059659772 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060443114 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059902533 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059615903 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06061843 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064794202 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079233464 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060353443 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059447833 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06401041 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059641827 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059722606 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059840786 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060056216 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059436806 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059760963 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060036479 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060003902 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06058143 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060291005 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063794014 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065074691 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059394307 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069621047 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064734444 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059669601 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064117576 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060640056 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059714725 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059847965 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059814738 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060047703 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060279961 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070215572 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060263184 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061031337 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060159609 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060115911 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059581236 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.059932642 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062123868 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068003291 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061293673 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060265122 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060785366 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060003612 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060428571 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059693205 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.05958646 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060056788 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063133393 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061238618 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060441484 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080021686 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061534737 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070315507 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059991218 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060822847 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063987166 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060367688 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078274498 seconds)
  done (took 5.793270444 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069427103 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070470423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081471466 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069793473 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063790305 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06094326 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06465246 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060503006 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070345522 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064918726 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06077291 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064355087 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070289261 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064758436 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062008723 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070671295 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06476225 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064041885 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060400363 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064847434 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062387921 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064581212 seconds)
  done (took 2.7881207 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136485697 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065560268 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.1058965 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070343365 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06853914 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07040989 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066244851 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066294788 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066462678 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067070783 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066784866 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06645315 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068399571 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06633143 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06687097 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06630351 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066113194 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066212315 seconds)
  done (took 2.64387725 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074097009 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063523548 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089220566 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065248535 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065320249 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065354733 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069055473 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069733444 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065461941 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065365931 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070892693 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06542403 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065440827 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066138 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065377805 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065823395 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065272531 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065948168 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069711545 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06924349 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069947499 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070717187 seconds)
  done (took 2.832553463 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075241655 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064005194 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080398413 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06607414 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059876684 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05972245 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065976466 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065196057 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065821114 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064611272 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065305967 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06025862 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067386437 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065503717 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067112666 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065418233 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065084339 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065199488 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064491331 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060150569 seconds)
  done (took 2.641819854 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069928926 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062145485 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062635092 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067885684 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062584867 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062844268 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06863894 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063271333 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063076622 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085017164 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063392734 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073190141 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068510784 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066584491 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062940326 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068486236 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068166151 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068243492 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063315752 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063193616 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085095395 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063597174 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068692383 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063058481 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063449832 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063142389 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063099575 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066516918 seconds)
  done (took 3.201954385 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062103438 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062394113 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063136445 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062867215 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063255735 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062601233 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063248833 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063437916 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062327347 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062907241 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062676963 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063284548 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065364257 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062477973 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063122035 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062978089 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062919857 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063111785 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063490195 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063768249 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06288994 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062810405 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062914121 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063237447 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063191104 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062605304 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062645156 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062731431 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063154308 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063355581 seconds)
  done (took 3.227593638 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070803584 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070545884 seconds)
  done (took 1.476952165 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059535111 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076685242 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059249965 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072290946 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068096712 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063098099 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068641485 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069961398 seconds)
  done (took 1.868467884 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064471373 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090460002 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061487689 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061709976 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064953322 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128376476 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074712593 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073459988 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075704841 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063959927 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062631957 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074192517 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061429635 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075190956 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063194175 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070781113 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06931813 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07946325 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074351412 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059735276 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075079535 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06249721 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060073291 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062406881 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061419666 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068170441 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077093865 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074105773 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070282847 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059493394 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080292339 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060100467 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061198651 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069843426 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065044872 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06128884 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09878012 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061428431 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066265979 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060526028 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073689223 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082447074 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075940737 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079188993 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062548344 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062695728 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059901559 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062445449 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064408636 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069788747 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06015286 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068660955 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060466426 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062887131 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071971314 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061601098 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066698749 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071080334 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075125856 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071688553 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070614758 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077071841 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069977636 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068695635 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061949103 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080620887 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062189618 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074213373 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075642892 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061513243 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073809301 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059740627 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058929865 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059866693 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094065408 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062208518 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061452601 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060286786 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060688524 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06176811 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070042155 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065775348 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068142429 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063872996 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077281448 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.06968672 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060637784 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066949952 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07841999 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.0641181 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060115107 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077074241 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063727245 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059630519 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078338677 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070121488 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062055057 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061228915 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063898361 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074314683 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061542522 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058920734 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068994267 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061895071 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062461243 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064679837 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068094859 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059933416 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070543134 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064871824 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061424394 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058673433 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064625669 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060506134 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058566448 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069789512 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059529103 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073925638 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066104778 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074458669 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07439781 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070358369 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075882711 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05939674 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.05798246 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077679604 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06952934 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061329032 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077409834 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059189109 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072447398 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058857683 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060428254 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.207467796 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060580098 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064243881 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062104828 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067691453 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063222626 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063185198 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067066343 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069622233 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072939341 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061903481 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069722994 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.0609526 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076809982 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07025236 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065280318 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063953018 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061224725 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072620079 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066946756 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069578085 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059843984 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061119382 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060735429 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071590524 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070317743 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061930815 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067309289 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064842168 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060886526 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060893026 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061626075 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063851958 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063488757 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061104491 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068161827 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069125342 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074661748 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067577591 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06950937 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059270486 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059699858 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061543948 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05924143 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064539383 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.06996288 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07541759 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072220519 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081351232 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060149014 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069754401 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061560457 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077279987 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073793171 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061157518 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065330708 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059099336 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061748032 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070024041 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072379979 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074821904 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075971992 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064914993 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064745434 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06023398 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075785833 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06078535 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069444871 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069824293 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065120071 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060453756 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061944968 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069646914 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064942307 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059933609 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076141661 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066604269 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059799893 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075089509 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060549814 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071256105 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060034675 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06424545 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065942374 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062193908 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070449641 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076400191 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059353236 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061432276 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075955158 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062731912 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062384993 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068455727 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075677049 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.0649148 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068291533 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071380322 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070591944 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065000319 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069927731 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061025966 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069677811 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063205378 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072016977 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060023756 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078575384 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058916052 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075751104 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06052319 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071605743 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060826555 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069733685 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061138564 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07739733 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062090342 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061065236 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072212635 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058503188 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069375979 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059762333 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065065226 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066614259 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068983638 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061367509 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069217635 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061368789 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068375104 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064108792 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067502606 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068998145 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063990232 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058914669 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068106576 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070447923 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067651063 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060483696 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060967748 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059668203 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.212149794 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061799169 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063366481 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070498728 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066251419 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067068447 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062744319 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062676472 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062304882 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069405277 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070524883 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.0787801 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069620023 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068545419 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071162122 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059826093 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076360404 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060354815 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070164309 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059244708 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066087718 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069895834 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060404261 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079650394 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061680874 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068702197 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072947579 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069277103 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06405998 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078400235 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063235394 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069071829 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068841954 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06464526 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067101595 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062257854 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068536397 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070061087 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071354261 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061171488 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068051195 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069818231 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062132398 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068070869 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062192044 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068911523 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061603103 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059589245 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06505947 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07224259 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065464907 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06544858 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061166397 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058888269 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060650755 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067048799 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065094431 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068897532 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076088121 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058989672 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061039408 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059975565 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063787973 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079071619 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0704022 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068843285 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065394509 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059492553 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061886336 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062222551 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060561614 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063857982 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05958612 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059847414 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071341667 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061958712 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064647079 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06054957 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061872722 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070074668 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064990704 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061112521 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066720387 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060395602 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065700009 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059503771 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061890256 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064824855 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059677185 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064120535 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070848236 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076890827 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066941775 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069528712 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061693594 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068271459 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075900149 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067817633 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061312355 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06989464 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059728031 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079624318 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069905054 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068858237 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070034066 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061139723 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077330863 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064667558 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070384666 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075845661 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061419998 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06657144 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059500407 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076073445 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064295157 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059563202 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068571126 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068248215 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066196897 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071991165 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060594063 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068009331 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065303156 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063286304 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060944759 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060722301 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068508209 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07578741 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059986233 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063313165 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067711961 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067770798 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064397373 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071531398 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068519038 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0605627 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061116709 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06325258 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.20726308 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072584547 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062530062 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066517745 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066268024 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.0604873 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067515333 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077715987 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070153549 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070283009 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060160671 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059565757 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078619548 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064111135 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064027806 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068843918 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070373778 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072830601 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069642588 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077749243 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060739086 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066195316 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072471611 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060992226 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060115908 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066617897 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06185699 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069566666 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070301675 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067702181 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062362264 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.06740875 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074899088 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061739305 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064701672 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064811793 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061047389 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071133114 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068413582 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071862986 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061544799 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059959776 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063637356 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069521141 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068034839 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069630003 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061276628 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066746753 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074363339 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06751687 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063496395 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059433728 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063232498 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069323192 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.064825497 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059570137 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065243152 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064284595 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067328916 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069869853 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064917458 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059712253 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077067683 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068384587 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069622709 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062501436 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062193468 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060627492 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059676768 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07158817 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059791209 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061822856 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065201202 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062266801 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078209181 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068624059 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077375757 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061252085 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065150243 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059661633 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070527259 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064762557 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060602714 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071086645 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059763229 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076133597 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072662702 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06598204 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060011987 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065528642 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068710701 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075708038 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070523113 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069830923 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064256082 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070511632 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062223989 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071811543 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.05993306 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058972694 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070830674 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069393479 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073486626 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060031519 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070974886 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062375393 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068736733 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068282517 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061879849 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062116806 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062142567 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069611016 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064535735 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.06973791 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065171175 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077168586 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060972653 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071637937 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069604757 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071288673 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074017262 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072571836 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06806252 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060856257 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067289832 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.06753991 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061005442 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064384868 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062488277 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081457132 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061307056 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060864068 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073686529 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.06534469 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059492705 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.06567788 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.208028424 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070342987 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061547446 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071918429 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065207784 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061949144 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06528485 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06544991 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059215376 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060114152 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060261307 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070534771 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064746063 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060433489 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079869886 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061821164 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069311556 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071433365 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066890377 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061882941 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058947501 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061539303 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073836624 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076203216 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063956745 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069647463 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061638703 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070015558 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059075646 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069256091 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068632695 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069403037 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059704412 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060824167 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075477746 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076394567 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065274654 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071081379 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069689465 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061824715 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082239373 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068872017 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06170891 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071755318 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06270026 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059495455 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05926775 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061826884 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071751611 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.05973344 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062459173 seconds)
  done (took 41.705472154 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096256256 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060705252 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059858979 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06000775 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068705821 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06131008 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060117075 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060888773 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06082649 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062583732 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05985176 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062317376 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066548172 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073682251 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068662208 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063993435 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059984132 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061389273 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060271322 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060867225 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066426703 seconds)
  done (took 2.802870138 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062132219 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063160273 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063862982 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064295692 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063677865 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059867383 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064418642 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060059668 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064737782 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060804723 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065167173 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060285268 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060407731 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060688538 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060671941 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061935649 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064607416 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063366643 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06014126 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.0640438 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06164038 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064347543 seconds)
  done (took 2.803169327 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060102093 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059448532 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068971077 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059476199 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059012932 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.0630004 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059171779 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064074057 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064147491 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064527796 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068684421 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060314678 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059213652 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065647014 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059596041 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060762986 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103221357 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060710173 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060862377 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059513894 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062864822 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068990468 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059516441 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059662146 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06391575 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063340705 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.0593218 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062330063 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060505028 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064070334 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06127947 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059524378 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070070213 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068321594 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064499718 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064581779 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061608314 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060850314 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059553031 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059994151 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068497932 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061046892 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059833305 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061388337 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069027966 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.05939074 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059481961 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06915325 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059582386 seconds)
  done (took 4.533906689 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.068650773 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112479534 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066408295 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093705675 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072710278 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066029963 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065856168 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095409954 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060825267 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061736478 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073870572 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074505464 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063190363 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064293201 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067244492 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062659885 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063527945 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06183906 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065708932 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062291379 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065415827 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067058707 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072769362 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073197728 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063953519 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062114585 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062311187 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064130599 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073042649 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066252305 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064480513 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064984074 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073406549 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067715341 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062451285 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062406496 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07429903 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063268986 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062538738 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061169193 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062447503 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064103023 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067885089 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.0746668 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062982916 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06787065 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06337791 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06114692 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073468857 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062653869 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066868126 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074486978 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064383547 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063151132 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064434778 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073731731 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063082406 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061896928 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063369204 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073271199 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061286827 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063934389 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076347813 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062395637 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066160846 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074895941 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068011949 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064214411 seconds)
  done (took 6.190418909 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067737891 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093222539 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076282498 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076220588 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070762446 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07116061 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071010342 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070868916 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070852223 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074192619 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07099832 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.105613295 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067843685 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072498793 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070762127 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07065096 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071227247 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074304426 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071075011 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071300711 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070936932 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076028817 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070660893 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07634699 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07308395 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067242115 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071161978 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070440948 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076260212 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070675102 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073250092 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070590109 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070552081 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076045222 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07325162 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070383484 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061037505 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070778367 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070602579 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070532743 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066862004 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076038588 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07048492 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066865206 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070659606 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071496392 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076577291 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073482977 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072498576 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074147608 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071252252 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076182855 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070749649 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07135071 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076468489 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078309186 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076603093 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076498557 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071123484 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076338146 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07623143 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07903998 seconds)
  done (took 6.006496224 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071364277 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066119139 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078865369 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059786542 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059725528 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069663174 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060168756 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060100434 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066813448 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.066880498 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068783069 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069491199 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071637855 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068497206 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069878137 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071304127 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069668503 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069404274 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066669327 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069360795 seconds)
  done (took 2.811410632 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073124697 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078043459 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065828146 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069299834 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065431536 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069028667 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065034326 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065830342 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065861969 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065742465 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070799704 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070428947 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06598416 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069575525 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070419978 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069636686 seconds)
  done (took 2.542922091 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062003021 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066687903 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066664551 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061152673 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063513251 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060628119 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061012036 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059729209 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062392215 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074539828 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060962423 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063628441 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061356291 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060262834 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060907411 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063514378 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062515298 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060878798 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061540709 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065630823 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069878792 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06183422 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063879313 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061083027 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063016934 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069439352 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062177396 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063277972 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060848945 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063931386 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063357346 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067430667 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063644491 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061512001 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059972087 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060589729 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061209259 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063390924 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063825353 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062649834 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05964496 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065650773 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061556838 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061872575 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062749159 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063860926 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062772009 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067273032 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061118951 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063404181 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061491793 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063205685 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061494227 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068269553 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063238343 seconds)
  done (took 4.91874571 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075495304 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063985271 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059953715 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059381168 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064991152 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065985077 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064874551 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065189837 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065806819 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059863406 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066174505 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064449599 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065791371 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065308569 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065965038 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065262669 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059670688 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065945626 seconds)
  done (took 2.623981417 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.064963196 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065751136 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064613988 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061971212 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061957164 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066952933 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06034256 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061407845 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061459514 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062258244 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062031318 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061034594 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061197598 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061618119 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065879062 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062021851 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061480145 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06030899 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061888419 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059792552 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066581114 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060240936 seconds)
  done (took 2.82697631 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086067551 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.083596686 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127795239 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079614862 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088623941 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.07120741 seconds)
  done (took 1.98841529 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091417867 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098052803 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064739908 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065242666 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069581365 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068113562 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067843899 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068257999 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071455161 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07227454 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068197572 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071800647 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071439144 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07373518 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069761727 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069910271 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068413465 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068107211 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065512338 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076092279 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068505226 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071822657 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068282387 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068101383 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06848279 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073718371 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071679524 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072275358 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06808205 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072161147 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070138112 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068283355 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072126951 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072244155 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065250991 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072146251 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068538298 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076038834 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070134838 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074087429 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064795609 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070331641 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071844008 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071245859 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07190946 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068520478 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072150682 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068402857 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068504244 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077386899 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070321248 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073861782 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07047834 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072757958 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07224681 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077781902 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072696517 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074438985 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070367324 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072521069 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074338999 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070424284 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074400973 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072693435 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07039686 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07465362 seconds)
  done (took 6.179318257 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101629927 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065371318 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06827013 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072182873 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074388121 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068571386 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068629722 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068501647 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06887344 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06583183 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104045631 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068815902 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07385815 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076489376 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068636279 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068681122 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068573581 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073591066 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066005079 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080444666 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068524819 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073902865 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073957962 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073757201 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072521605 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070224572 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068660528 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068484253 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068557476 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068481492 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071977475 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06868537 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073851003 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065683832 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073736441 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068778631 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068403585 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071887792 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068344469 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070040206 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074168955 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076343162 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068631294 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068769307 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072384163 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068515401 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0684699 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065568299 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06846596 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065539505 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072671103 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072510584 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072642441 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074166298 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0691016 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068940947 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068707864 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069019877 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06915926 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070646354 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074201876 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068765965 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078403232 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06858825 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068404295 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074011701 seconds)
  done (took 6.192311929 seconds)
done (took 128.13379273 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216925802 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187344278 seconds)
  done (took 1.841823171 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07250674 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166211669 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072414913 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073432852 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107865486 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.104593544 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073371984 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070526751 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073647844 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07102817 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138386316 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07361729 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070662567 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071459669 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071430759 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070902285 seconds)
  done (took 2.839011433 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105102162 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184211269 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100251873 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068676408 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.15088495 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075951504 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071208541 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075898465 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076476913 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069133886 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106132874 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082317131 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074886575 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076180768 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071127694 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074679409 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075480239 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075597352 seconds)
  done (took 3.078845772 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100294095 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089450186 seconds)
  done (took 1.657041306 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.153343147 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102388137 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141158821 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33907509 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132681896 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.134933476 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.138672566 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.135251522 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108209044 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130997786 seconds)
  done (took 2.975541895 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103019214 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104568054 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307286124 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102138389 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081331408 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076263024 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073986513 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078906423 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073883033 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075542297 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121569128 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074120478 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074877979 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12348641 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098099401 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105677751 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.06973573 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077050917 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078793996 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069752146 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074972167 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079220878 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177458357 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077555419 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099580016 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074624313 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076498253 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073155001 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073216956 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077828466 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078451777 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099013795 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077205698 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080976471 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075834483 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096509503 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070654817 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098120776 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073480209 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071010262 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073985929 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078304221 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070873242 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077227002 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074012294 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076795655 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079100001 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069497035 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073765152 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073257602 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071748749 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075270865 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075282558 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076318451 seconds)
  done (took 6.201014362 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103771682 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.104239439 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068368497 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11204059 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105092116 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068863462 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103205485 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.099455492 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108129137 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068711854 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067746138 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068145555 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074841594 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07980015 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113292593 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.104556787 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070487036 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068542792 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106304962 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.106721206 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067813959 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100519668 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098903705 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106569724 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067292619 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068690328 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067013178 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067728988 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073261847 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07346548 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068011567 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074916098 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08342758 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073921954 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067238863 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067093631 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067215529 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.074496763 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075524224 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075309301 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074149171 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067303923 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067129151 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067650044 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068414337 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066713913 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073792423 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075016687 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074018522 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067842846 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06814774 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067323856 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06799525 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074184418 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073928536 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07569506 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075153066 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067874458 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067614911 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069196952 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07598025 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076635188 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075275965 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068587057 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076468016 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069969603 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07691042 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080318503 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06824944 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067932475 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067541873 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067641702 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068328198 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07377855 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073946089 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068526946 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067791113 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067273446 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076227499 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073997262 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067317977 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073101083 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067430752 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067890359 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068146214 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068128421 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073171474 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075142178 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068913525 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067653706 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067769174 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067536461 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066967344 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073649214 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074647444 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074979781 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074718604 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068201332 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074054273 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073707197 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068131845 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073268287 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067141616 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067833104 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067500304 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073400693 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072127526 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074497455 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06663443 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066834204 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072849179 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073294963 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066212334 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072469639 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074789661 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.210635778 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066801161 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078517244 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069356724 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077171041 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068981088 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07694261 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068803162 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073983626 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067828342 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066976196 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067747496 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074240057 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068498637 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067876084 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067739128 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067663694 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074101708 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078062227 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068483097 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074000293 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074389508 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068328868 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073962568 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067997426 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074796905 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067796566 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067866403 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066764863 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076896554 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067866277 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067541534 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068014277 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076182833 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067894201 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076125419 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073417513 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066782399 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08037373 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076286351 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074282528 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07677029 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068462732 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067698706 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067305179 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069473967 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072859595 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074161169 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068093626 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067212894 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072753711 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075941317 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067452209 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073321473 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074012462 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073952132 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068298981 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068270711 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076899419 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076722653 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074423054 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074183472 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074802541 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068079847 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073561795 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074554747 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067791129 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079904865 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068308548 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078601123 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075012231 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073686851 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074874026 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076091576 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076725626 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.076846015 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079023591 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067788776 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067379907 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074052291 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067923464 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067600931 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073907993 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068254338 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067665575 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079956298 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067009273 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078298459 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06785859 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07545495 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067708477 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068249629 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079266079 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068771976 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068086819 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074092047 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067630189 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073941927 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077534649 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074582885 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067839475 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068140993 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074701753 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07527634 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067872367 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067232628 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068088038 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073307052 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072161967 seconds)
  done (took 18.113958786 seconds)
done (took 38.186214185 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.168523417 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113841427 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.2120647 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202224948 seconds)
  done (took 2.267955553 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097154168 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063609511 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.079908817 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089224811 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064304937 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.075244972 seconds)
  done (took 1.984990481 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.196826349 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176684433 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.248182496 seconds)
  done (took 2.129523912 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366373086 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149357365 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217115226 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500990543 seconds)
  done (took 2.844593681 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.108858267 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.099528757 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077294832 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111566807 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085105321 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061571001 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133180653 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068835677 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099141566 seconds)
  done (took 2.418456882 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139612115 seconds)
done (took 13.319338938 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.253842936 seconds)
    (2/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.256605567 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.434568313 seconds)
    (4/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.220646068 seconds)
    (5/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.103195356 seconds)
    (6/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.221537009 seconds)
    (7/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070634132 seconds)
    (8/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.081258168 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.120934342 seconds)
    (10/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073369686 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.094551671 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.09183875 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.240022611 seconds)
    (14/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.235424175 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.112341201 seconds)
    (16/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.194610677 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.090929609 seconds)
    (18/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073503723 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075056024 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.156233046 seconds)
    (21/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.211673045 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07810039 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076210204 seconds)
    (24/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118195335 seconds)
    (25/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.252155113 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077365425 seconds)
    (27/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.14395122 seconds)
    (28/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.16692112 seconds)
    (29/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064805458 seconds)
    (30/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.137322663 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08658276 seconds)
    (32/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.170695249 seconds)
    (33/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141467767 seconds)
    (34/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.235647722 seconds)
    (35/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073424382 seconds)
    (36/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081200193 seconds)
    (37/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07211189 seconds)
    (38/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07654718 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072856452 seconds)
    (40/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.221915262 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.141684195 seconds)
    (42/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.240595247 seconds)
    (43/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164318847 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077336684 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133765901 seconds)
    (46/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.142276982 seconds)
    (47/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.170742034 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.075692993 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072385712 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125285166 seconds)
    (51/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072161605 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088258431 seconds)
    (53/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072698191 seconds)
    (54/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.071722493 seconds)
    (55/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.173029501 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088283969 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064795922 seconds)
    (58/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082761425 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.091484625 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078072379 seconds)
    (61/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.146270973 seconds)
    (62/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.183609054 seconds)
    (63/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076020034 seconds)
    (64/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.143277873 seconds)
    (65/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064481903 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081554233 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125811499 seconds)
    (68/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.146576727 seconds)
    (69/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.217855811 seconds)
    (70/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.082148164 seconds)
    (71/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.215468369 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066512313 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.086604002 seconds)
    (74/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070864915 seconds)
    (75/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.179822409 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07215069 seconds)
    (77/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066282067 seconds)
    (78/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072368831 seconds)
    (79/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.196359812 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.229160769 seconds)
    (81/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074351429 seconds)
    (82/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067189373 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126816559 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087957681 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088079189 seconds)
    (86/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072790402 seconds)
    (87/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068304559 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151726908 seconds)
    (89/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081283885 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.198290971 seconds)
    (91/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078065189 seconds)
    (92/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064574711 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141899212 seconds)
    (94/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.174033582 seconds)
    (95/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067277112 seconds)
    (96/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161643473 seconds)
    (97/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065501381 seconds)
    (98/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.0700673 seconds)
    (99/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.083789901 seconds)
    (100/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164837753 seconds)
    (101/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065480186 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087307281 seconds)
    (103/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064453078 seconds)
    (104/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074130897 seconds)
    (105/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.188499933 seconds)
    (106/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.072171285 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072225145 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.087612578 seconds)
    (109/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.163607286 seconds)
    (110/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.140610134 seconds)
    (111/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068954192 seconds)
    (112/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.141917768 seconds)
    (113/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073322294 seconds)
    (114/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.152017109 seconds)
    (115/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083404136 seconds)
    (116/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.243754405 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068513747 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076537063 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074471915 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068335201 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129668237 seconds)
    (122/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17105894 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064971621 seconds)
    (124/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162986169 seconds)
    (125/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065867895 seconds)
    (126/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062912304 seconds)
    (127/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068792484 seconds)
    (128/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.06615768 seconds)
    (129/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073255408 seconds)
    (130/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073400569 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073398028 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07436869 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071405236 seconds)
    (134/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065459372 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152361257 seconds)
    (136/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072303775 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063683634 seconds)
    (138/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067318038 seconds)
    (139/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064738283 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072241044 seconds)
    (141/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074520021 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074501668 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064838116 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093870836 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074212251 seconds)
    (146/341) benchmarking ("sort", Bool, false)...
    done (took 0.142458763 seconds)
    (147/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074049648 seconds)
    (148/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067397908 seconds)
    (149/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197276353 seconds)
    (150/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.140135111 seconds)
    (151/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072024055 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.089663723 seconds)
    (153/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064837648 seconds)
    (154/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068911056 seconds)
    (155/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064911553 seconds)
    (156/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.080293508 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.0715736 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074288931 seconds)
    (159/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080869034 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 0.066162509 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064943908 seconds)
    (162/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.075913323 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.132855728 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065703489 seconds)
    (165/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073479617 seconds)
    (166/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087300854 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.122694336 seconds)
    (168/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064968706 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156502294 seconds)
    (170/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069053116 seconds)
    (171/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.091904848 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064343188 seconds)
    (173/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065023009 seconds)
    (174/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082361661 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064875812 seconds)
    (176/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193669009 seconds)
    (177/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.155730182 seconds)
    (178/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.063473467 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073301812 seconds)
    (180/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064713686 seconds)
    (181/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228254387 seconds)
    (182/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073308692 seconds)
    (183/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062893957 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063799994 seconds)
    (185/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06280205 seconds)
    (186/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.064445458 seconds)
    (187/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.090697907 seconds)
    (188/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072048048 seconds)
    (189/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068716006 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146279092 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169770141 seconds)
    (192/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065048226 seconds)
    (193/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141613674 seconds)
    (194/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068045436 seconds)
    (195/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.232916238 seconds)
    (196/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.18234882 seconds)
    (197/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071489952 seconds)
    (198/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067053431 seconds)
    (199/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068864899 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14893862 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066248338 seconds)
    (202/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070258308 seconds)
    (203/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.085241561 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090413513 seconds)
    (205/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181864207 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086573633 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064388931 seconds)
    (208/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072934429 seconds)
    (209/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073494274 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065940777 seconds)
    (211/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074421739 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131775184 seconds)
    (213/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064999992 seconds)
    (214/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067289763 seconds)
    (215/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190455696 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072641705 seconds)
    (217/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152260751 seconds)
    (218/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065424018 seconds)
    (219/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066677847 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071471267 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064310676 seconds)
    (222/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.066657435 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065732609 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065313848 seconds)
    (225/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065254447 seconds)
    (226/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064939893 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066443551 seconds)
    (228/341) benchmarking ("sort", BigInt, false)...
    done (took 0.261843781 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064978391 seconds)
    (230/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064800087 seconds)
    (231/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076313264 seconds)
    (232/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084058671 seconds)
    (233/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064621875 seconds)
    (234/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066200774 seconds)
    (235/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.081843806 seconds)
    (236/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064932125 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117649518 seconds)
    (238/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066034422 seconds)
    (239/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072872577 seconds)
    (240/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063286515 seconds)
    (241/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064415172 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065195421 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076603539 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074836409 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.149979259 seconds)
    (246/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065503519 seconds)
    (247/341) benchmarking ("sort", Float32, false)...
    done (took 0.137300483 seconds)
    (248/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065183099 seconds)
    (249/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.147059249 seconds)
    (250/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065433888 seconds)
    (251/341) benchmarking ("sort", Int8, false)...
    done (took 0.148780485 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071669295 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084580915 seconds)
    (254/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065362735 seconds)
    (255/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.079627396 seconds)
    (256/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071261438 seconds)
    (257/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064422316 seconds)
    (258/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063422759 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071849321 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068067759 seconds)
    (261/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.188860446 seconds)
    (262/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.236648771 seconds)
    (263/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078051931 seconds)
    (264/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064932406 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063029633 seconds)
    (266/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064109379 seconds)
    (267/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.06683833 seconds)
    (268/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06421904 seconds)
    (269/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066626587 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064291449 seconds)
    (271/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076638486 seconds)
    (272/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.200471845 seconds)
    (273/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06459393 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065545481 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066671011 seconds)
    (276/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065429912 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06453813 seconds)
    (278/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066910854 seconds)
    (279/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065188559 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084260819 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064739495 seconds)
    (282/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064382353 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064089901 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06531979 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064743466 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151270667 seconds)
    (287/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072150697 seconds)
    (288/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062963597 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168031623 seconds)
    (290/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065119868 seconds)
    (291/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064915551 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150675751 seconds)
    (293/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067150493 seconds)
    (294/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063313117 seconds)
    (295/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092142686 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064542728 seconds)
    (297/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065562849 seconds)
    (298/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.143874756 seconds)
    (299/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080626503 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149255156 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064846194 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142030208 seconds)
    (303/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065083817 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06386486 seconds)
    (305/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065079059 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089333379 seconds)
    (307/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064634572 seconds)
    (308/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.066684403 seconds)
    (309/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066669783 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068078125 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090120568 seconds)
    (312/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.16268187 seconds)
    (313/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064397767 seconds)
    (314/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089717842 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.08940978 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064007882 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.0670995 seconds)
    (318/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065807062 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064794765 seconds)
    (320/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.063985394 seconds)
    (321/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065690085 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109067623 seconds)
    (323/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.232182666 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065852705 seconds)
    (325/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.0724552 seconds)
    (326/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066453215 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077933984 seconds)
    (328/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068326966 seconds)
    (329/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091354213 seconds)
    (330/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065692522 seconds)
    (331/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064978052 seconds)
    (332/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064676277 seconds)
    (333/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066601369 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.06558851 seconds)
    (335/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173984172 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064436226 seconds)
    (337/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177187038 seconds)
    (338/341) benchmarking ("sort", Float64, false)...
    done (took 0.136767445 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065676258 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147204939 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152214519 seconds)
  done (took 36.669326641 seconds)
done (took 38.199908856 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089415944 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076941569 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076707547 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073799638 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077327116 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075789985 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077440189 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075240858 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076222265 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075646399 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075767653 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.0638752 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072719102 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079473283 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073318662 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079790969 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076596782 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079553712 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064845956 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078827601 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092461495 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076088842 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072892063 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078204059 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064803257 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073797977 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089157405 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086300266 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071553462 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074582141 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072218626 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082231479 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072025379 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070607428 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073963365 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070001147 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073800282 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071551554 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08842564 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070061225 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064775239 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076879534 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07205728 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072838129 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073196888 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076320861 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069735652 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07802632 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06375318 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076218596 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088115126 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069586832 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071068549 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072887545 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069426613 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073965049 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070907287 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075777123 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069277545 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075781195 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07585131 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072841037 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064063616 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073266827 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071796051 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071965018 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063002488 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069409263 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064235806 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064176871 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063546355 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073177219 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072153394 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.06932373 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064029748 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064421996 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063583653 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076832343 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070470235 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073890281 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06428564 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069368099 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068963848 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064639277 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069668097 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075580374 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062975677 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064090523 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063026349 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078411709 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070508542 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063739476 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075721383 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069216087 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069400215 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063832021 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063287062 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069198983 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07184283 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064009487 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063175658 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069858557 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069150936 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073151602 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06461007 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069264972 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069167153 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062860675 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073018724 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071603714 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.07384119 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077649001 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073293676 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076022914 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064137854 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063202055 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07394198 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064413212 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069485623 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071709413 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069527028 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072490928 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064690435 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063288238 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069993317 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070254166 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064403184 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.064722292 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064659315 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073866791 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071594792 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062674543 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06405419 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072955913 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073014165 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06367903 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063314666 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073274139 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064237027 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069437557 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069098416 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072085753 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062955105 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063465558 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062339532 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062848823 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066782754 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068845915 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068729667 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063964536 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072422908 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.216295522 seconds)
done (took 12.586355074 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064244058 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105058729 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.07702637 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079199499 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.075848216 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064430791 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.066833326 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.081832859 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066482931 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08733033 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088476989 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.084747061 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093642245 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062336333 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064573458 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066143355 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06327188 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077035773 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082183359 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088433686 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.101486783 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064664948 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.08068494 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084503852 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079050307 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083212179 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066237739 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065812624 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067704004 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08412888 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091212969 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064827905 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06608573 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083016475 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080457037 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073174727 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065913973 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07144852 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067913825 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064706405 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066934448 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08295291 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071890182 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071777131 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065916162 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066018688 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065372957 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072725472 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083218554 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070812527 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077290414 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084448751 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067224923 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065841589 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064221209 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07292039 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065162098 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066110449 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065918602 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064509631 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065459455 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067769416 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070705893 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071654377 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068892555 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072039891 seconds)
  done (took 6.462701277 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.078981362 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.088837962 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079686235 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080251632 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064950169 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065235826 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065373901 seconds)
  done (took 2.16275245 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064126471 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073085056 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.077841892 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077829664 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087479262 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075221825 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066030709 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097251392 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06450009 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073604033 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08121325 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079069298 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068731461 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077753958 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066023889 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.077518213 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065332935 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072247526 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073127901 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078880549 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069703757 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095790039 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079582636 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065828028 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.079206826 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073389765 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067481053 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066278743 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065654574 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064967399 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065142428 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087392162 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07210533 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078330532 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066010229 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064950496 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069533158 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065853312 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.06915772 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074624029 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068921116 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065120894 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065762458 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064897951 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066562158 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069892736 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066289978 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064936324 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064480299 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072772097 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064250355 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072060523 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067580049 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07041229 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069936309 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069704991 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072696027 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065108599 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073100224 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071426074 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064985836 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07775905 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07667705 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068656773 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077127906 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073688529 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071489762 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069216059 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064709969 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064445043 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065396948 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076731373 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06815145 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067441495 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065882898 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070172622 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.06932116 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.080558799 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.080491723 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078655645 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067870997 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065341392 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069339292 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.080372757 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070321726 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065028832 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066483682 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06462436 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069813186 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065383516 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069903561 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065111301 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071956867 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067841424 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068113639 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073461285 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065709952 seconds)
  done (took 8.523555515 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066608116 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.065956651 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065579678 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06629186 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066714297 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06652644 seconds)
  done (took 2.069436073 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.086738658 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064460022 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.07811517 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066049187 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088369409 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.072482335 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.072567492 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068163149 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082378678 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075982061 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072447374 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07505573 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07529748 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067860459 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072075685 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066895177 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072049062 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068893383 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076202248 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068083427 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081627071 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067632591 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068203137 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.077965034 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.06853848 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066799333 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067330686 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075637615 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.075513123 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067264811 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067217073 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068830447 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074299698 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067467315 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072274259 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074233181 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065729417 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070973721 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068150858 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068256765 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.074199838 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06786575 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067592488 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070901504 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067284005 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074026565 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071625701 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069589405 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072091329 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071508179 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071295225 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066173458 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068447819 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070858402 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074096583 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067399085 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071084718 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072138376 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067089866 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074413112 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065626885 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068960806 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067466108 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06810965 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070343352 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071198655 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07417531 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069281111 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067678887 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065211017 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070806046 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065677881 seconds)
  done (took 6.753819467 seconds)
done (took 27.591879948 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539922187 seconds)
  done (took 2.155917973 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.881016592 seconds)
  done (took 2.537673984 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.99056484 seconds)
  done (took 9.648633806 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.342426507 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.404804492 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.730496266 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129354822 seconds)
  done (took 3.304216107 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.74942926 seconds)
  done (took 2.416102724 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225125392 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220135722 seconds)
  done (took 2.123199826 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.330456013 seconds)
  done (took 1.990772484 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.143393733 seconds)
  done (took 2.799224784 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229196436 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163293627 seconds)
  done (took 2.062341423 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.535316599 seconds)
  done (took 2.20150054 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.230038894 seconds)
  done (took 5.90229816 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237610982 seconds)
  done (took 1.946290239 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.227741759 seconds)
  done (took 1.899620572 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.013051442 seconds)
  done (took 3.677095553 seconds)
done (took 46.328632791 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.080939397 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083372299 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08371962 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078759026 seconds)
  done (took 1.966878626 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071363517 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067548638 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072479152 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073205072 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.0704081 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07130634 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07191177 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068881399 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070327087 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069174953 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.06725169 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068862991 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.071732266 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069347275 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071601705 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072826173 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068973467 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068886732 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071439497 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069069705 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072153397 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068982597 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067165299 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068521364 seconds)
  done (took 3.346827253 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075787366 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071236242 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074380384 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070156507 seconds)
  done (took 1.964675696 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.073926407 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07371072 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084738045 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089427692 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075032953 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075556307 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.082831004 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083325305 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064803839 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086439369 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06690477 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065882959 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065720956 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085373843 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082598094 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061514753 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062949887 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076206415 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075480708 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078276549 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067731791 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064849985 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075286376 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076006692 seconds)
  done (took 3.468474236 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079629486 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063248401 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080304364 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090754362 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091261395 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06456735 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078808906 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091885538 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127040473 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064615258 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.070857423 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064324978 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104488486 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064676994 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080205795 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107745306 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111182561 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068706357 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098478301 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064849474 seconds)
  done (took 3.348973396 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073439426 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.066853898 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069138637 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064447812 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075557984 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073022315 seconds)
  done (took 2.105252915 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.065745048 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06574043 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067763001 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070321639 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066484302 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066564951 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066065659 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064746847 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064733337 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065528248 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065496758 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066153774 seconds)
  done (took 2.470228865 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145069925 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066221207 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068779671 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06328111 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065377664 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065708364 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080107731 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067614691 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084235934 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06565188 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06627928 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068624338 seconds)
  done (took 2.582708451 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102083055 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109024052 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142524141 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11655414 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117157407 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096038397 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125585774 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094838549 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160578058 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136847562 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116394611 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093144815 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086091181 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068763053 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098927952 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117945564 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13716613 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07200136 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112247135 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161267161 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129393024 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133130203 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147230162 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116639405 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090527543 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148394612 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097172995 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102294145 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12422178 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126017753 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119381569 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096923985 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070570518 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069910598 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148416362 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103225372 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12110464 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092218717 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105019005 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087579167 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107089869 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068354277 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084632028 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113372809 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084017628 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131447096 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087524129 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115304998 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080630503 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1367599 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120815114 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09612001 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083880671 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104746929 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.288551219 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112013772 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134427935 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107090036 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082360962 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118735292 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102684206 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100338174 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106975361 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079341957 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176522303 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088479481 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11071086 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110812299 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093816933 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09418847 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106753351 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134021427 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12237945 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.121671017 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133652429 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093128973 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12157417 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.099393463 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128186704 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103446276 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072109645 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121559476 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129065392 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098744737 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100545976 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129243133 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091464368 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076507291 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098787849 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118796768 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079606538 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.112144154 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080317294 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10870384 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133551065 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096527002 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111574067 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117212064 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077423209 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154477655 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108625605 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071799325 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116732301 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11263592 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154931562 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093232446 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07546552 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098519969 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.259081975 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145793239 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104762641 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078112388 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110611824 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139798173 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094461982 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.168850785 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094978487 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139698876 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111459748 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086801103 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074354495 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09082661 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11162167 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106424386 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111616602 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089402628 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.082946915 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086579667 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111098362 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091354762 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080401813 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11234339 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101105785 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074097866 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087986853 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078276675 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142386841 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077715068 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138476948 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12523749 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077825399 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105773006 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097230704 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108207657 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097705549 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116932966 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139621812 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11594852 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089880082 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.093953132 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108687996 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142906961 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12743015 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092824189 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076354658 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100785395 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112072109 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097495065 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126434281 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100010214 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108870709 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10286483 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140219784 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143103202 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098691849 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099946445 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10451057 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280660073 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076376105 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156345224 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103994782 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117612489 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084958507 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140283968 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114259316 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088772335 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087122619 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100308846 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10317189 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105470278 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142405256 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095056745 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071325491 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091977562 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143221426 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075270457 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109227354 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090087683 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092347315 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117504233 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.092591048 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080613667 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067539098 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127620416 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159229518 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068938006 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114794124 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110731279 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101328208 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121089061 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.06899593 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118946788 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138571118 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118000434 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140498778 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147268308 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116847255 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118777403 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114534104 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105562177 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079180187 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125371561 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134723556 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096681429 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092356229 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135907768 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117550068 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132960188 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113975412 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112295339 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102358863 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.264213551 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102701531 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102375776 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14491331 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120645369 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123996955 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085114702 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105558899 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117419794 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13442549 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080934525 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141463886 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08325765 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117216969 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076353404 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123319582 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078799646 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110053301 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078760305 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099528935 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068696481 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073059979 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140138419 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.111094189 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104977551 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099844516 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137240706 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136513049 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080563814 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107738918 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115640436 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100135813 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115679488 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109254881 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088583278 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095146568 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108566991 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084976114 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081275513 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114759475 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094433519 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127336675 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083734626 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074093909 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140581818 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104651539 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095691643 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077897656 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108364364 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121056005 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092844372 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086791591 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115535686 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104926166 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141138285 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089271438 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096604139 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122813807 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079290308 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090548014 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067946611 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084292154 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074071611 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285554107 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074410313 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116050135 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067979834 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12982398 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086436449 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092617481 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101843335 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110291388 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127287053 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094029054 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139197077 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08850059 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117364287 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106937799 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093685249 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087654883 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102739165 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100358147 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.121680988 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095442146 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12235271 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142436741 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104043412 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141584378 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091405102 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121893691 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106565431 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124347779 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112461514 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147293036 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138504778 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112576467 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11197117 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074464411 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094791641 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105052039 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111484916 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172962023 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126090108 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071380528 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107341843 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093809837 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108262143 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104762415 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082157371 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146889006 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102343365 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087434735 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112080358 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090124015 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102466448 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074803018 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09376126 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098361201 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.248709919 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096041281 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115734527 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127476426 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112872422 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142542278 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098615771 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092553539 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.117689635 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110406228 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109703509 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085448428 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085327961 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136419242 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117480995 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.127616353 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.099605628 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108821551 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110410114 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099654932 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123593498 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107068494 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.126011015 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079523518 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075585912 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067287805 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071372524 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122689391 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108016466 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112725458 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098183958 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071808646 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103295331 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106839405 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071187093 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088725504 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093904453 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098498514 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091518911 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106522515 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.113749495 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090576669 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103958879 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098964175 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147163509 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100078288 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088422812 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144480633 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151191861 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087878021 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09287222 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070748545 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078794798 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113685777 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149610381 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150286507 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07635731 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085010682 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084336674 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08453766 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069764565 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.243088848 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089070066 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105354812 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099410296 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112662736 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104176725 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07521115 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10284716 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098832897 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09148731 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103667974 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117790456 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124841066 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.140253112 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109628739 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106375435 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075086835 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079616162 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074431486 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078639557 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104293044 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079294489 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075313424 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141687458 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090723111 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103909549 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107149864 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087061387 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073620657 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130706166 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.066771693 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132423204 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069567047 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081816956 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081928454 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078467696 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093481817 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139208986 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109870485 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11297517 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106504506 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103966246 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14070009 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156208058 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080020409 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14371607 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075304829 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074665749 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075413735 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11318545 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08969462 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114643766 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141095729 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090723418 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104440151 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076903043 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142428612 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098393351 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102606953 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085440926 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077611589 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300256208 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079418522 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080011453 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089628162 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110957345 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071827631 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103566399 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084215459 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079001085 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141579819 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.629152267 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088826055 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075002514 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095239102 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.141277804 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126586362 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09355111 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10741775 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117881293 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099454941 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094832669 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106745353 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182801194 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073038111 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094408165 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.102713935 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097463668 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101637552 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098034416 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084684195 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092302373 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084230095 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078409018 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106416868 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086693303 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093823425 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103917779 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080168765 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08425242 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127415085 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101289066 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079426934 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088003133 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105550887 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088917429 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101404249 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068123416 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113778685 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09073766 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117402712 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094968289 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107923945 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128487149 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090015335 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139014489 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107537129 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123345107 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087377205 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077895594 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125243417 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.087427415 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077062932 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.304217012 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092793109 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.090664515 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10108562 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.093850493 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111146007 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11446376 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10829948 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094602112 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076784908 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099141607 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.101612522 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084406438 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077522163 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073716949 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075430661 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10600251 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084157267 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082962144 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114060456 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088431315 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102562352 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098988252 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121873838 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082543622 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100133946 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109188153 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091020747 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107613021 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097472464 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.124398991 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170094127 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12319043 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125556824 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130849592 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075005004 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073445782 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067516052 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114878669 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079032436 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08901268 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080712003 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133740529 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081130721 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111108212 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231872811 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079543091 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094069147 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096807815 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069055818 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082709851 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10766482 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087014897 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080051799 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119459954 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083249137 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128027017 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111193001 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099251376 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094774604 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080735378 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112705766 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102465974 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126529668 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092933277 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073489371 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.272797942 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102685499 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137795949 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072336425 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080559931 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129432305 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102981128 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131826248 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079380476 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148513011 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142499624 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099687452 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133084368 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070253612 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082349428 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088479826 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.125075922 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083772918 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109084367 seconds)
  done (took 67.485341035 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151066143 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140770927 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078777313 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101270437 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.183920899 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194628728 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.116931077 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.093766496 seconds)
  done (took 2.894594842 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.065362344 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.079957416 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078428138 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.2071335 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096397567 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.064939904 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072252856 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08128187 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067068528 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064454467 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101731977 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.064734571 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066321362 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366736085 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065912925 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071467355 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067024674 seconds)
  done (took 3.492847221 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330624827 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.946878121 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.23182844 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.174968451 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.143172256 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.552242524 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074069739 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082123971 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.692708906 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368145626 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140135537 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088190538 seconds)
  done (took 19.649878549 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.073783869 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076121509 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077455591 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074508087 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073718693 seconds)
  done (took 2.216306055 seconds)
done (took 118.691016633 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.0804395 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171734387 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067003036 seconds)
  done (took 2.09423296 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079325854 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078219124 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.078721266 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077424162 seconds)
  done (took 2.145569086 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.071848228 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.073685688 seconds)
  done (took 1.96744928 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.21826634 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175117559 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090169409 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.07916137 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.076879321 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078843668 seconds)
  done (took 2.06751147 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.068974909 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.068582116 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070771509 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071143768 seconds)
  done (took 2.098015414 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.065618672 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064123727 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067786851 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07036704 seconds)
  done (took 2.087920319 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082025615 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083306006 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112675 seconds)
  done (took 2.0984459 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.079931513 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.079737555 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075653887 seconds)
  done (took 2.05740453 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.105673004 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09366495 seconds)
  done (took 2.01486219 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077130823 seconds)
  done (took 1.903100739 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.0867252 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.094283636 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.135263161 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.103733863 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137239545 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122383943 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.073781992 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075398502 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072774591 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071389679 seconds)
  done (took 2.794070232 seconds)
done (took 25.714540727 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076202685 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.358218394 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358185419 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08433221 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668218535 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.35372111 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.979837785 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090499434 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101001153 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067797415 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084901551 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.648316054 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971333928 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.325917461 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.960501348 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.320275288 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651226591 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068232109 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067037944 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068088662 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.967715905 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067158488 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067420488 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067847265 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649706293 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374060205 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068831088 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328330153 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067070088 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.0714365 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356880908 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069012657 seconds)
  done (took 16.258409202 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067356537 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120222961 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072072899 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084059504 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070086963 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069048076 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070826151 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068364184 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112334325 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067951985 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085739386 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067246953 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071473611 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069494052 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088048536 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067441885 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070370411 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07062571 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067507231 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068614216 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086147387 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067575692 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068077507 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068087379 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067999664 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.0808667 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068832794 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067788696 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067620901 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071739909 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072533934 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069661062 seconds)
  done (took 4.226097055 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118387079 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126053167 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072367285 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.108540168 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117598835 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069556767 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150673861 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091361493 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115729419 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068177565 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086248187 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067981192 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103955458 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069337581 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088691116 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067817036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070504194 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068633397 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067646038 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068436868 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086627386 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068488269 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06812209 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068993937 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068492917 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083184174 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068930181 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067964947 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067687393 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072387232 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073166193 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069220498 seconds)
  done (took 4.501311045 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.06695104 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.068616269 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076493001 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080387164 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065665294 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067433943 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068378412 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065387478 seconds)
  done (took 2.401454739 seconds)
done (took 29.229854623 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076229223 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065660306 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069874971 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086536259 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073332981 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069096139 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063562717 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073772325 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070415243 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070709665 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072542918 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065878469 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06922124 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063863642 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071253996 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064995749 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071503233 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069056114 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069374265 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.070704347 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06703932 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070601099 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073473483 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069498252 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069785591 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.069840021 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073956373 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071119317 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065217539 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068091603 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067759175 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.080178125 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071393629 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071604042 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065021501 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064904307 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06947313 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067426641 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071306027 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074394332 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067004654 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074204368 seconds)
  done (took 4.75507126 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085564257 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093786178 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086046289 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080933307 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106986676 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080649756 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090879511 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078267777 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076721665 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09001175 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072904857 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078305124 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080079451 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.074317749 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077283846 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073471357 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078730155 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072039236 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076960449 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077373034 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090980195 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070963405 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078206965 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078603774 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072177028 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.07843042 seconds)
  done (took 3.953629741 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070393437 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086285643 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091856361 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140786421 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108749546 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081889323 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081302697 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093146941 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100050437 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066939649 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071932405 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094406822 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095657889 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074312976 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105244096 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085367048 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079633454 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068755496 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073680784 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101723954 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089662678 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086063692 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099328682 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087100495 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066253045 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076309739 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074290683 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083250374 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074036893 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079450063 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071116235 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070400224 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067679405 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079407732 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073591474 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065083503 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089328166 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080087336 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081744463 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10601947 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077103216 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068387187 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097668113 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132296362 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066192345 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069869295 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070878871 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079988019 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068246502 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09719748 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085688112 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066796333 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086892757 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068278621 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067999587 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083758324 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068593598 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.106621409 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079054846 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072849768 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087510238 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07207547 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088407757 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066873268 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078686718 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067969613 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068253055 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064977354 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103482329 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073672189 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119591157 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06707305 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064755575 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079411539 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078654413 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073725316 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066387997 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086529134 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07917388 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07016532 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078327526 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069598736 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070153479 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101889044 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065376261 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064665767 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064686979 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068909602 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070000385 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067173188 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08074556 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066065698 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069806688 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082269215 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066712515 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.0672781 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069326809 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067858846 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065942891 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077618679 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070603655 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06854666 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079399269 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067769476 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070005983 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081468004 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075974017 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066054024 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068125734 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069061109 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068204803 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070975616 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070079475 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068413696 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073503543 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074331323 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072888392 seconds)
  done (took 11.047731612 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.158757885 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.152375542 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067768626 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147577834 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07522803 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.071422521 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149332383 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087357929 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067339073 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068556202 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066709209 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096004594 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091133846 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104051049 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071591267 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06745438 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09258742 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.100654895 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150939858 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145165779 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090313605 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07524873 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069915602 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069360734 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068695925 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076475828 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08585396 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075992821 seconds)
  done (took 4.536167863 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072742047 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082062493 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071607223 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091475063 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085676935 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067098786 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069233595 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068548642 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084375266 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074413895 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068079825 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071741048 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071258597 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068608979 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069034539 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074550143 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074085693 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06609346 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070669447 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071549234 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077948443 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092508678 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071058519 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067227923 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070080878 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067683389 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074374948 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077178377 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067334529 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.097854219 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064531842 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071517229 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081575511 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068210147 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066846978 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067517784 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.06729916 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067436188 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067233392 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06516322 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065534346 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072845725 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065677364 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072851722 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081013449 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074971569 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068357368 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071766286 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069332774 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063823705 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070387483 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070463819 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069566712 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075598393 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070771538 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069940725 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068402622 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09855194 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073078781 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066631092 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066733143 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065137078 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068899402 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075629709 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083516943 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068736895 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065559749 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067051118 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072140659 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080862832 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066459865 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072538884 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064146041 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.06727994 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069683478 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070110499 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068782163 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065444598 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066795089 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06715636 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067401425 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066981017 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.06663137 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07001372 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06530857 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065454041 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067579872 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068948211 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073587893 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065891632 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069888053 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068755756 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065779293 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.06989769 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07299992 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070046068 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087112102 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076026709 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067789906 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064997945 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081772765 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069147079 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066528766 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072553406 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071581958 seconds)
  done (took 9.393573875 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.087886096 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06687026 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086284395 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093470743 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077464681 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072066934 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081587101 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.06823241 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083401965 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066947839 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076316192 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065412596 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080751877 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076307469 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068701706 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077748725 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069930003 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087540296 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081688971 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065492317 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076117272 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079708723 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079925664 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085213833 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085373506 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086056485 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079135674 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069701801 seconds)
  done (took 4.074623751 seconds)
done (took 39.595380067 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.920823045 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.0956527 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.919324584 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.187175805 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.081161622 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.037888401 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.044988255 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.910965232 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.994429035 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.972587805 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.244320118 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.249466873 seconds)
done (took 67.569643583 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.964908022 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.0553442 seconds)
    (2/2) benchmarking "String"...
    done (took 2.127396347 seconds)
  done (took 6.032104666 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.515797309 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.914500124 seconds)
    (3/3) benchmarking "different"...
    done (took 1.961587176 seconds)
  done (took 8.240817353 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.008640873 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.548211534 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.169098001 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.914339741 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.918702092 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.324552287 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.74132555 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.384583991 seconds)
  done (took 32.852846172 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.23349665 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.181521849 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.659084152 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.696315257 seconds)
  done (took 16.673020186 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.516416474 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.175804475 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.176237025 seconds)
    (4/4) benchmarking "different"...
    done (took 2.170109232 seconds)
  done (took 10.949733216 seconds)
done (took 86.672739376 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.915224161 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.519304149 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.92676269 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.069694955 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.941667633 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.948587255 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.923948375 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.914408419 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.915971012 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.919752024 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.315891728 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.915490569 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.916453479 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.953725235 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.939786532 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.917312817 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.292875907 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.91991239 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.971058754 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.614297112 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.425932811 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.917292376 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.921037285 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.968764544 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.059190907 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.947386677 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.454528635 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.921980158 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.521285919 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.937382546 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.08075503 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.919713155 seconds)
  done (took 209.678931226 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.915976374 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.732102881 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.867133448 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.95776841 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.224803857 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.123073646 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.059875605 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.305347591 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.920425863 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.93743807 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.064103589 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.92217533 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.075506156 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.922185652 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.91276765 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.013467067 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.066099182 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.101013597 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.914294815 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.104471609 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.931547512 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.915060766 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.863018335 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.038587525 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.958741762 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.961459906 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.943449872 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.947365321 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.111046287 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.051300655 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.963251127 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.929623835 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.110654597 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.791696859 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.943596581 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.944784652 seconds)
  done (took 174.397673105 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.095010484 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.926989095 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.979644703 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.054991495 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.662643847 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.923751229 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.638424396 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.921046579 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.922368628 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.917687519 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.925668537 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.918785745 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.985496273 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.265627928 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.936424486 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.917145971 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.919232827 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.133984058 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.923209223 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.919131516 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.919118195 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.982892981 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.290342946 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.056583728 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.92167713 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.928410445 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.054264599 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.928878113 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.920338414 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.056669183 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.922413419 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.996717388 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.054165828 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.929567392 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.999251749 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.924344997 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.399222712 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.919529538 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.919048867 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.920760616 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.981199623 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.918350465 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.016260298 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.009581301 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.918503813 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.934499456 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.002662297 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.575626904 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.921680975 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.921771284 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.921519353 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.92058449 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.921753939 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.108052398 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.922990231 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.947572941 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.517055143 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.924138884 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.924080745 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.920196416 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.919639008 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.923180493 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.92670501 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.955705314 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.727190861 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.357853916 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.308816817 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.719987936 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.924662593 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.136887082 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.92335844 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.97741133 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.920651697 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.002196499 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.918914287 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.92164845 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.921214125 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.920753325 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.006807068 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.999572381 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.92112295 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.058228967 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.924401945 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.920900281 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.0475538 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.286702599 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.928801603 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.933753674 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.975138291 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.920658712 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.922447411 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.921565972 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.929909234 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.001728704 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.921531465 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.923000376 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.921299239 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.023073364 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.92534352 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.944673255 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.141784563 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.993191542 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.162184526 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.145245712 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.922082557 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92196048 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.922522528 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.937225837 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.922763667 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.922027507 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.933291147 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.922850501 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.923468375 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.922783221 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.925499714 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.922116966 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.923072646 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.935404298 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.925917026 seconds)
  done (took 425.027611737 seconds)
done (took 813.103729244 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.649575983 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.709810449 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.557527484 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.598949134 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.566550722 seconds)
  done (took 14.940900967 seconds)
done (took 16.798298811 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.945890995 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.940251042 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.930035183 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.946745325 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.943883779 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.943064677 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.973738998 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.970793055 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.965980739 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.940802313 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.949077088 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.943177856 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.948958899 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.967295312 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.950255294 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.950006996 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.943606741 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.936547946 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.950709961 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.945963731 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.943105099 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.941221989 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.943398148 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.949019468 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.956318843 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.94650447 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.938407619 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.946252301 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.946068212 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.946791212 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.983112803 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.951500895 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.975306684 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.954166905 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.953686312 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.954617882 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.946136503 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.975018309 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.943969953 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.981748452 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.952759139 seconds)
  done (took 81.876646477 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.931930049 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.066600677 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.146690037 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.968011887 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.931486809 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.151651415 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.991987909 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.065174683 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.066331931 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.149608159 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.165588035 seconds)
  done (took 24.498285684 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.931316153 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.076530719 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.156081371 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.970639426 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.954223345 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.155211373 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.997787022 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.080161808 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.071341178 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.187495465 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.162315719 seconds)
  done (took 24.613262611 seconds)
done (took 132.845657258 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.322002544 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.955920581 seconds)
  done (took 6.139347701 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.928129262 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.942712196 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.074529411 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.927046366 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.926856921 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.928137793 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.929124499 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.927536192 seconds)
  done (took 17.446153972 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.928849682 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.929061945 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.928762681 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.928421264 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.928813017 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.927737876 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.928240955 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.92739834 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.928415102 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.928841862 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.929470156 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.928677461 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.927167523 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.926942356 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.926599876 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.927447948 seconds)
  done (took 32.714168053 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.927484265 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.928082978 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.927316299 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.928414678 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.928359888 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.928384482 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.929954149 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.928442642 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.928008755 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.928036464 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.92806349 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.928452076 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.928914581 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.928042823 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.928182787 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.928644924 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.929487362 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.928106576 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.930159022 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.92888032 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.929055109 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.929229635 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.93282153 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.92897226 seconds)
  done (took 48.151907908 seconds)
done (took 106.321415003 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.1139986 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.725363689 seconds)
  done (took 8.701763994 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.933052616 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.929602283 seconds)
  done (took 5.796054594 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.930957028 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.929907966 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.930030558 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.931222531 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.930883679 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.931369888 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.932718298 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.931053333 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.931720203 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.929886142 seconds)
  done (took 21.174061842 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.930774905 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.932141012 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.930175706 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.931228516 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.931091588 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.931334991 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.931821516 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.930256542 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.929795665 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.930025848 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.931175206 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.932009144 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.931231249 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.930857959 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.933381507 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.931009105 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.933069459 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.931657103 seconds)
  done (took 36.628634411 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.931847917 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.931976088 seconds)
  done (took 5.728948191 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.93445845 seconds)
    (2/7) benchmarking "second"...
    done (took 1.932504286 seconds)
    (3/7) benchmarking "month"...
    done (took 1.932442582 seconds)
    (4/7) benchmarking "year"...
    done (took 1.93165441 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.932508734 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.932063369 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.931276644 seconds)
  done (took 15.392453692 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.932274744 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.090176857 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.143277693 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.552637769 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.933186673 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.933340174 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.830820488 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.933561665 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.935930625 seconds)
  done (took 21.150646507 seconds)
done (took 116.434997372 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.783597224 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.932343369 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.237321171 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.082869999 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.942640101 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.230193912 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.950953923 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.481942889 seconds)
done (took 43.506623243 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.042527269 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.928926951 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.960016783 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.960746263 seconds)
  done (took 22.71608228 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.931582646 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.237554465 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.961241313 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.872698203 seconds)
  done (took 22.883275134 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.309916128 seconds)
    (2/2) benchmarking "read"...
    done (took 2.288382439 seconds)
  done (took 6.469426025 seconds)
done (took 60.978879304 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.933469428 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.933738312 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.933534799 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.933226936 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.934063972 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.934425129 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.932611283 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.933555145 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.932662704 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.933417176 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.93269639 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.935829324 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.936113406 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.934441719 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.93550062 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.935645798 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.935209468 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.934770066 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.935590276 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.937474021 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.934204429 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.934803795 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.935152507 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.935487009 seconds)
  done (took 48.295849114 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.93545806 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.935176298 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.935136188 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.935538177 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.936037919 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.93596144 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.936659893 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.935317564 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.935249736 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.936184026 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.935279169 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.936707472 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.935839285 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.935094804 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.935028382 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.937201007 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.935982768 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.935927721 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.936391298 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.935747803 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.937106778 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.933080991 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.936332419 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.936897965 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.936645787 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.938540163 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.936593326 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.937045063 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.936524615 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.936723216 seconds)
  done (took 59.953319992 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.935861092 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.936467738 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.936823494 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.936460609 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.93892358 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.938484291 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.93709535 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.93742979 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.938412224 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.939409535 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.937862017 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.937139118 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.938209148 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.937370171 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.938573473 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.939658488 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.938503362 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.938896594 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.938651296 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.937738741 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.939004151 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.938900236 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.939345556 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.938972913 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.938360873 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.938615472 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.93874568 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.938852276 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.937981556 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.939208332 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.940374111 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.939505423 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.940319707 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.939921888 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.93960538 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.941634849 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.938268988 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.940224131 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.940138963 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.940814514 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.928070517 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.940083195 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.940688262 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.940447079 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.939493168 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.939923055 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.939981874 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.939520284 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.939079513 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.939249636 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.940135636 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.940953709 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.938882891 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.94014787 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.938968064 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.939870355 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.940377056 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.939352845 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.93961998 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.940642964 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.940261474 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.940515391 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.939513664 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.940340109 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.939263926 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.940358677 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.941179808 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.940659825 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.940564578 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.942613531 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.941735502 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.940540436 seconds)
  done (took 141.495113251 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.941580819 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.940553024 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.940020859 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.940689673 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.940496188 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.915427545 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.941710695 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.940439852 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.940144882 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.94149916 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.942243899 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.940469239 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.942428846 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.942468122 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.941304081 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.942185531 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.9418241 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.941362815 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.941538781 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.94275161 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.942103481 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.942183108 seconds)
  done (took 44.560506807 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.941540354 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.941625968 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.941139308 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.942893089 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.942343827 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.941997239 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.940972338 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.941151028 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.941746189 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.941850973 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.941741244 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.943548976 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.942299637 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.942223826 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.942791821 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.940291992 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.943178486 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.943905674 seconds)
  done (took 36.832892343 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.943556084 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.943205779 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.943782239 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.943600842 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.943581904 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.940861134 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.943629888 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.940832923 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.944533908 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.944143048 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.943744414 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.943038906 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.942525212 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.943858455 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.943169273 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.943833375 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.942505738 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.941604144 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.944549229 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.943056723 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.943077293 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.943229395 seconds)
  done (took 44.626716848 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.944086637 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.942871757 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.943409805 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.9430911 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.943200716 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.943412651 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.943598251 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.94377908 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.943268636 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.942907069 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.942837235 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.944918418 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.943352308 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.933617586 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.944148664 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.943778778 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.9448957 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9443044 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.944157526 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.943540277 seconds)
  done (took 40.740768846 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.94549327 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.944018311 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.943946452 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.944193298 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.944757303 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.945067279 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.945378331 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.945349158 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.944540599 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.944788927 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.945063033 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.944976585 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945813953 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.945916698 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.945915814 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.946989415 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.944838122 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.945873095 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.945597113 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.946084669 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.945787601 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.945719105 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.945239235 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.946542653 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.945400825 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.945894186 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.945548866 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.945236541 seconds)
  done (took 56.348971276 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.945532659 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.945377332 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.946456363 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.945533283 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.945807881 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.946807577 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.94579377 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.947143974 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.945522432 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.947447394 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.946583933 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.947059865 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.947873503 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.94694901 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.946373178 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.946249993 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.946585194 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.947227946 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.946603098 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.947517417 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.946509472 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.947000053 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.945588241 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.946382943 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.922769866 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.948242494 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947137909 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.947965683 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.9476931 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.94692959 seconds)
  done (took 60.256974601 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.968120696 seconds)
    (2/2) benchmarking "in"...
    done (took 1.969169614 seconds)
  done (took 5.818017692 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.947955959 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.948141965 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.948777851 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.949233515 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.948328662 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.948766956 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.949666571 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.948376282 seconds)
  done (took 17.471169426 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.949376975 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.950256277 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.948219957 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.948060326 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.948033097 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.956787233 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.94860753 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.949119095 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.94909831 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.949489888 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.951595859 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.952343773 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.95545753 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.952364968 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.948921635 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.950420592 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.948901195 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.949925666 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.949080349 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.948924387 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.950989683 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.949762359 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.949398139 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.94929443 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.949041621 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.950844101 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.960171663 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.950421202 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.950005927 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.950543495 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.955146187 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.952276875 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.950587481 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.949967056 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.949515077 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.950402274 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.958055387 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.949288009 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.950015852 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.951117708 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.952210333 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.953172835 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.952674175 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.958844042 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.950159205 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.950955555 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.951948569 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.950606402 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.951879522 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.9531614 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.957704657 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.950276086 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.951275403 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.9519218 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.95352739 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.951039817 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.951783241 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.952228517 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957313916 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.958938217 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.955381503 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.970061265 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.958540149 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.95137841 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.951285692 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.961316787 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.97357368 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.95353887 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.953713439 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.952591336 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.959967582 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.953023 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.952353997 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.951812397 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.965219007 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.958995848 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.952112043 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.952313037 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.953147049 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.951867029 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.953755648 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.952887301 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.954119191 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.95300045 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.961043586 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.975497001 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.952671362 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.952859989 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.954480509 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.954913913 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.956740111 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.955065968 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.954463666 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.953489111 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.953706778 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.95572082 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.951778612 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.954102797 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.95339174 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.962279651 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.953317669 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.954319402 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.956980272 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.960683554 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.952794167 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.951744384 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.952621074 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.952993633 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.961496682 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.955241582 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.953756308 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.953212797 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.954784851 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.957475329 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.953154064 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.957138924 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.960876599 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.960519257 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.957309637 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.958603409 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.958164855 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.955635671 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.963242088 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.976011182 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.954009941 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.957340245 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.959183129 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.964322467 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.959160331 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.955165672 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.956391395 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.954879699 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.954166145 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.956082646 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.95514263 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.954663842 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.953843719 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.953310631 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.954836409 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.954376511 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.958181585 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.956671748 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.958032909 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.956891016 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.959627044 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.956556303 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.959809768 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.963794836 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.95760324 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.955984751 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.957175023 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.959097404 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.958703427 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.956419893 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.955714004 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.954758476 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.956269975 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.957421924 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.958810266 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.956284949 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.95714587 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.957572308 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.960602207 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.954849299 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.956448243 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.956384009 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.956184291 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.955848417 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.957723119 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.956452301 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.959853676 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.957721423 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.960123654 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.956973433 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.955518159 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.957013951 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.957879448 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.95803715 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.960634625 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.967720137 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.960188493 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.966571781 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.958435186 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.965839494 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.95831274 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.958571507 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.957473784 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.956590241 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.957234566 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.95712676 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.956558561 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.962053932 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.97784556 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.966305876 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.960007711 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.959854289 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.964461798 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.961382383 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.963100862 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.958505234 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.959252971 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.959114012 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.95820213 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.957943857 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.959122088 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.961631291 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.959738228 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.958592093 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.963207536 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.958911851 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.959141348 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.959581016 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.959024095 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.961635268 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.959470696 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.959230439 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.960055494 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.961785396 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.967719399 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.961423297 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.960791989 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.959517445 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.959498989 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.960604693 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.960301849 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.961946973 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.964440174 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.959681495 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.96130617 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.967870311 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.961289068 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.961510003 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.959971229 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.959042764 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.961637454 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.960078162 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.964604556 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.968197968 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.963212415 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.961302816 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.9659504 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.960939471 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.963064791 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.960663498 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.962467894 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.959785335 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.962229154 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.960727851 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.960419108 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.968561604 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.960485242 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.959959455 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.961459369 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.965116457 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.963118434 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.963680067 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.962107184 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.965006895 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.969203229 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.967207723 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.964113491 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.965885125 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.96329696 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.963610586 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.965559264 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.964086498 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.975286706 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.971516665 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.962715342 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.962328146 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.961967501 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.963937462 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.962365722 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.962395029 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.970174789 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.962875678 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.964050466 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.967325176 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.962018838 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.96178306 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.968944879 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.962498749 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.964219565 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.964463002 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.96269536 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.962964715 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.962562352 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.96346755 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.962372438 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.962848465 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.967282489 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.963780216 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.963009452 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.962910582 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.972743662 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.963808849 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.963689845 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.971117533 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.96401293 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.964292267 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.962967721 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.964847801 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.963758532 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.96273837 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.963404703 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.965878676 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.963446435 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.967050611 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.974307732 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.968026679 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.972378979 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.965426944 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.975138124 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.964189453 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.963585482 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.964948361 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.968696567 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.971879601 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.964222358 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.965567247 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.97198778 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.966715761 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.966212912 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.969217978 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.965073712 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.965025182 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.964604419 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.966122803 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.968736278 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.969116264 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.965899975 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.963716613 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.962998091 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.96478943 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.967971757 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.967338153 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.96652977 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.965897802 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.965301861 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.965980947 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.966238075 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.966396997 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.966333364 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.965429853 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.966831345 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.973558414 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.967477343 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.96902174 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.970694724 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.967934338 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.975836221 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.966365206 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.967962163 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.968977728 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.968585863 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.971103685 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.967869872 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.966361766 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.967896776 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.966588321 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.970325354 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.979168233 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.974158013 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.971672418 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.969100908 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.967445016 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.968591364 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.976807743 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.990190893 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.966734098 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.968140954 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.969532963 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.974085161 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.969515657 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.973339009 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.970646987 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.975241256 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.968369556 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.969151586 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.970985542 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.980028233 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.96954909 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.968217078 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.967369052 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.97213825 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.97110086 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.968279129 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.969940804 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.971375016 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.969587091 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.979155711 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.968173467 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.969805097 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.968121134 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.967918183 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.967658183 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.968729873 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.969358598 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.970925946 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.969539873 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.969040382 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.970204983 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.972656024 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.968900506 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.970666712 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.978031424 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.968868308 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.96832023 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.971213897 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.967315376 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.970356096 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.970275891 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.969007309 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.971655099 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.968508037 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.970098966 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.972100896 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.97655814 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.969893702 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.970138029 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.969011901 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.972114604 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.970383682 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.969926774 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.969833052 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.978638365 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.972946018 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.978896929 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.978668309 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.970118059 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.972620724 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.978052811 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.977874992 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.969735131 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.969672016 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.969597264 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.971198313 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.972069588 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.969570473 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.968283067 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.970260335 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.974363296 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.970225983 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.970466689 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.968791139 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.97095034 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.972716173 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.972944577 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.974311703 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.9706047 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.969331453 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.969949545 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.970897136 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.971109881 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.972449075 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.970740787 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.970310939 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.972106518 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.971494027 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.976099216 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.970327905 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.970533034 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.972050344 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.973102697 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.970343332 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.97123688 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.970632773 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.971955853 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.974063905 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.978700175 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.971094848 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.971529976 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.973145502 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.976045016 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.97122659 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.971398578 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.972596664 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.972887865 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.981085625 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.97293694 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.973738246 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.973544837 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.973856544 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.97842427 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.973320984 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.977130713 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.974062366 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.973766604 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.973043881 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.976268974 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.982011923 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.977135252 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.976613976 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.980596799 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.978727098 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.974541519 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.973829589 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.973729582 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.973349579 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.974795874 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.977058864 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.975171433 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.975092654 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.974109445 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.974931073 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.972476254 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.975767068 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.973694027 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.973484107 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.97587722 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.982509397 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.982454443 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.972981827 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.974108367 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.973188298 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.97782971 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.985699386 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.975104952 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.974742073 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.973754296 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.97537741 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.976210069 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.980240278 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.983021837 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.978478452 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.975977152 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.980117476 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.993291364 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.977286535 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.983919465 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.004624474 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.977649328 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.975394191 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.97596497 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.97610031 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.974691299 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.978378236 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.974838092 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.981543272 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.974002999 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.975603363 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.983607254 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.976150906 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.976023557 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.975925913 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.977277033 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.98108612 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.975450941 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.981523567 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.974996941 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.976179325 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.976236328 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.97717642 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.974809166 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.974975856 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.975884459 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.977174365 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.97501513 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.975282025 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.984556857 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.979799781 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.976218309 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.988686529 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.987129429 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.975307167 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.975790462 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.976195907 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.981612948 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.978859517 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.976772811 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.978175271 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.984482313 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.980437461 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.985127245 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.97744451 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.976356428 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.976669981 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.976415598 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.977007514 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.989135209 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.986362409 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.978104179 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.979081541 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.984011813 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.977148518 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.983427554 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.983885107 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.98004348 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.978313486 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.978671867 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.97765388 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.977289291 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.976899068 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.980381833 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.986151496 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.978858306 seconds)
  done (took 1173.436083434 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.977823688 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.979057255 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.977851607 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.977891939 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.977494703 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.977579817 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.978234041 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.978268203 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.978112009 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.978532049 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.977851724 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.978113089 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.979062307 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.978709121 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.978858814 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.979287986 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.978835578 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.978495572 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.977857853 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.978298779 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.979425487 seconds)
  done (took 43.456171673 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.977980333 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.978258874 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.978826394 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.978319488 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.979184301 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.979340503 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.979491416 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979418738 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.978454079 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979574217 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.978753092 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980340471 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.978814799 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.97944752 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.979723199 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981013553 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.980231007 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.979600298 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.980139527 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.980419967 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.980709185 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.980628579 seconds)
  done (took 45.459933454 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.981054306 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.980786064 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.980904038 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.981043824 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.980625806 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.980195219 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.980796617 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.983668324 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.981126027 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.982997065 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.987774742 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.98908904 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.980720044 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.984074688 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.981217537 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.981186551 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.126649453 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.981823306 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.982038905 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.982178263 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.982539238 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.98954415 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.982608429 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.981995402 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.980830016 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.982665825 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.981427873 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.98061836 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.981946564 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.983167288 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.984720135 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.981517457 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.982427549 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.984954605 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.981627635 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.982925095 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.9866455 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.982614405 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.982603867 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.980588534 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.989811689 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.005323931 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.981236027 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.981594869 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.990434091 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.981858458 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.983162868 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.98541855 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.990653388 seconds)
  done (took 99.250535639 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.982060811 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.98260673 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.982935952 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.982870584 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.983084669 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.982690967 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.982329474 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.981609587 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.982885363 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.981494445 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.981855211 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.983505348 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.982118619 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.982091321 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.982602698 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.981937017 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.983623055 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.982885022 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.982636897 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.982858763 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.982538572 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.984080033 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.983135987 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.983793066 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.983365418 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.984341282 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.98428534 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.983859483 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.984123341 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.98336646 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.982633529 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.984258492 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.983211306 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.984119847 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.98365512 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.983774721 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.983625292 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.984424628 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.984302382 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.984111396 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.985009111 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.984670413 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.985018881 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.984770882 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.984269972 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.98486017 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.98444881 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.984407593 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.985249606 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.984670555 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.984138626 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.985833766 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.985506502 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.98353168 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.984683276 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.98429342 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.98486461 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.985059221 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.985437135 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.984911195 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.984696108 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.984297541 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.984922542 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.985486733 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.984546939 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.984753752 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.984842145 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.985031582 seconds)
  done (took 136.815596903 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.985988753 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.984957131 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986038285 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.984940697 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.985223838 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.985476938 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.984611121 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.985569709 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.986365855 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.985890737 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986194738 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.986556168 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.985161046 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.986439966 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.986122226 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985334229 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.985645315 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985798284 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.985801533 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.985198204 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.985643708 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.985524529 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.986195409 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.985518571 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.986747236 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.985920513 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.985306208 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.985714974 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986855836 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.985287966 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.985574283 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.986481402 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.986973901 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.986838603 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.987510964 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.986946068 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.988172093 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986679791 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.988211706 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.987248854 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.98741959 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987318324 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.987912099 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.98635557 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.987317114 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.986802021 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.987142163 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.98639137 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.987168371 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.986526087 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.988896338 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.988157063 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.987084844 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.988082438 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.987350213 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.987989247 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.987170021 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.987474774 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987873129 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.988041674 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987712542 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.988083439 seconds)
  done (took 125.085829053 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988569153 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.987918953 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.988417627 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.98889554 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.988573309 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.989275077 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.988538396 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.988486869 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.98827716 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.989049988 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.989502311 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.989850546 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.991361612 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989941128 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.990138501 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990435942 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988739009 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.989196703 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.988936644 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.988416509 seconds)
  done (took 41.702767486 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.98842722 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.988403515 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.989145982 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.988485299 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.98967705 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.989951841 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.990576632 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99042072 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990557374 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.990525303 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.989905938 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.99061992 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990256025 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.990089802 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.989904025 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.989986535 seconds)
  done (took 33.758788651 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.991240509 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.989592442 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.990080062 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.990949778 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.99050157 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.990635587 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.990222197 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.990496273 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.990077882 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.990244709 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.990137572 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.989983955 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.989835322 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.989908846 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.988912857 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.990686203 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.99040013 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.989757596 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.98932149 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.989436847 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.991063911 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.990744614 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.989812696 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.979646884 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.991656903 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.991143797 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.991201001 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.991559987 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.991089879 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.992283375 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.992154961 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.991443947 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.991625995 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.992590344 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.990225772 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.991726938 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.99259207 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.992125277 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.991022862 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.991680642 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.991203045 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.992058702 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.992107182 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.991919463 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.992629204 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.992147327 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.992498251 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.993084259 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.992249354 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.992957096 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.992478259 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.991765427 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.991754114 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.992627135 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.99248257 seconds)
  done (took 111.426698032 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992010469 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.992393828 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.993178911 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.992880296 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.992286275 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.992572221 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.991732193 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.991441841 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993305968 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.99271051 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.993064138 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.992795341 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992768189 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.9924932 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.99305939 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993040102 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.993187512 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.993852702 seconds)
  done (took 37.793465636 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.993508857 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.993078537 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.994116326 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.994518539 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.993525912 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.994134899 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.99359206 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.993834612 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.993490753 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.993469197 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993976804 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.993028239 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992780073 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.992726242 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.993424865 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994225036 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.993876328 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.994680875 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.994320932 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.993260139 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.99387623 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.9942587 seconds)
  done (took 45.787579123 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.994448595 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.994568624 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.008755547 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.016494859 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.015499746 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.030614104 seconds)
  done (took 13.986811305 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995652893 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994219966 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.99700764 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994704796 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99453724 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.994851603 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99504166 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.994975837 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.994823716 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995807673 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995625097 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99644007 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994713696 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997047754 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995517161 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995925238 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995315667 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996151815 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99436746 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995297624 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996935623 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996157247 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995252819 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995756598 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996776809 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995983964 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995460633 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996798921 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995800297 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9966025 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995421398 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99625489 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995386255 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996646244 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995907053 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995835348 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995507591 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995501172 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995880869 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.997227067 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.995717576 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997182614 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996213343 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995745266 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996221277 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996803432 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996710306 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996554167 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996805473 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996867048 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997473345 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997465693 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997601926 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998025776 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996581201 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996889706 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.997252617 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996632354 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997325777 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998403841 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996721998 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997974122 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997534199 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9981481 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997357483 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997192219 seconds)
  done (took 133.681007329 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998458684 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.998531779 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997241096 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998990637 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998723118 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998056621 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998449914 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998902618 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998396541 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998331514 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998136074 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998329058 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998324756 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999016745 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999193317 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000042282 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998862021 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.999810153 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999271675 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999874644 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999981158 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973553676 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000679334 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000762121 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.00025847 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999060348 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.000504623 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999873394 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001154428 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.000541237 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999836118 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999576326 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.000701403 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.999690644 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000790737 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998751466 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999668169 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.000063553 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999990569 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999880571 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999868079 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999556844 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.000573208 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000139909 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.000834515 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999363949 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000215828 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000399116 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.000162098 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.000317706 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999687388 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000206416 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000125918 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001453296 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001436845 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001459816 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001806348 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001968148 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002329113 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001665082 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00192408 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001058254 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001985806 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000910359 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002224372 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002405458 seconds)
  done (took 133.90668359 seconds)
done (took 2733.821911972 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.043210461 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.079296716 seconds)
  done (took 16.054896849 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.166131904 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.065805091 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.185392252 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.119520215 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.01077843 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.007467999 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.002830815 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.004007567 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.095232737 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.003546219 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.022592552 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.002342089 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.003038826 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.002739119 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.001930199 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.002739593 seconds)
  done (took 54.642758963 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.004564411 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.007818875 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.004891092 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.005052826 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.014280892 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.07868368 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.025464313 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.006325432 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.017639169 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.039512332 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.023718904 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.013333987 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.012722268 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.009759005 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.093071489 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.054259125 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.066145664 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.084275448 seconds)
  done (took 38.497232179 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.084927782 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.015219414 seconds)
  done (took 11.04233702 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.02187883 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.038080962 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.030295542 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.022318631 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.003933948 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.030192636 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.043664639 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.034913254 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.015796842 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.037083968 seconds)
  done (took 72.238367582 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.008705438 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.008156814 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.264620078 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.017367166 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.012572817 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.02965852 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.007432153 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.035872551 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.014496297 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.004529512 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.017674514 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.270192537 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.018473415 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.00719373 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.349043154 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.019606622 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.012735634 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.038988497 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.041490739 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.016155083 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.013473174 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.009088068 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.169587105 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.696479054 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.008950283 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.011112168 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.01467445 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.005959205 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.005872713 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.007851909 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.009585456 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.007212638 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.01095926 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.012474064 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.015028032 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.012176764 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.489042417 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.026162771 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.014840136 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.083293982 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.057791046 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.016634631 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.786240784 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.010109553 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.00703072 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.013838084 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.689095094 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.088311528 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.010511065 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.178557673 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.367618271 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.028172545 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.171842656 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.14998529 seconds)
  done (took 140.332880826 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.005606307 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.245834108 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.160403028 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.010110083 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264444995 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.217925686 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.009464875 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.052921165 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.01032055 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.209735007 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.258692014 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.112116216 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.010125752 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.007515537 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.009629082 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.006381522 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.15935414 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.075440998 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.014141814 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.007607438 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.032516219 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210463084 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.132208137 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.012716009 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.034951907 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.215002107 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.130543265 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.113476536 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.786462431 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.007223425 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.070360642 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.011886587 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.01031372 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.007706065 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.162133228 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.101709935 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.095909107 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.010668638 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.008005041 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.008950774 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.682376304 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.208605989 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.104746394 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.132501831 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.255654958 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.223176321 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.623277446 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.008078141 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.635839708 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.174116571 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.214597254 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.218053274 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.128453535 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.011951795 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.567077185 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.009189506 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.009212726 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.230110932 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.228030184 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.108508346 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.011726015 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.007713919 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.009309693 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.248234002 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.012211027 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.10103054 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.01386071 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.010491883 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.102324959 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.111350521 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.2365156 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.230407667 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.041440204 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.338684321 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.495044684 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.212693027 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.075212848 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.230128444 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.012621474 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.010177491 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.08880888 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.848829659 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.261119466 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.251893977 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.209946921 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.040395909 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.662983782 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.009617945 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.197007048 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.201255258 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.244472268 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.254319501 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.246855529 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.372620134 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.010528712 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.010316427 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.311803857 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.127204217 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.964704147 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.36703877 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.240084645 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.496979104 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.036928668 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.295001469 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.14100999 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.01426577 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.657503856 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.010599682 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.217597602 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.056474955 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.017534768 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.013567766 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.20150678 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.917264281 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.013082062 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.952008979 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.072511442 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.015498031 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215860884 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.016702511 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256217582 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.015664833 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.243718851 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.654556086 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.04311557 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.245683325 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.257884868 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.641701288 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.306345829 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.253765841 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.126947271 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.283262701 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.014638899 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.01212044 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.27341411 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.015497802 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.012831086 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.182335179 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.021917283 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.622830879 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.018621676 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.278324803 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.034685018 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.243556755 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.017074951 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.249870807 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.045154105 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.067257386 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.01775403 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.140186045 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.022254551 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.939785395 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.170849947 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.020397774 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.014814362 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.743232194 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.014743042 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168028105 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.24381122 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.035512612 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.083160328 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.581594828 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.010246271 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.099861774 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.03600513 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.287601753 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.014012996 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.262524528 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.974196041 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.493087386 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.015257361 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.249182065 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.252389659 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.023716929 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.015193622 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.859482446 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.01399722 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.014335539 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.17134252 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.48685722 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.919400326 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.213629228 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.016700694 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.141953063 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.018272942 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.092608009 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.358928419 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.014448861 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.01591906 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.013906126 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.015466264 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.016761929 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.274518153 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.042496366 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.44972333 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.152102528 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.276274827 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.324467558 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.21207884 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.056419784 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.025844826 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.239040247 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.019436885 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.078442365 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.018974703 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.035412135 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.245321576 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.019598388 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.2212744 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.236719149 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.985423646 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.064223655 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.021868044 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.016325513 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.998861345 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.162019813 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.10307664 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.019871661 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.017867924 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.130450897 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.136654861 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.200444396 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.835157434 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.151801286 seconds)
  done (took 934.050877295 seconds)
done (took 1268.792900706 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.015622012 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.021386716 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.021528683 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.015652343 seconds)
  done (took 30.023612552 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.017954153 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.018809369 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.018329479 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.017798546 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.018669814 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.018941525 seconds)
  done (took 14.059260692 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.018514752 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.022064572 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.022987859 seconds)
  done (took 23.013459971 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.444536989 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.4227844 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.094522794 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.162491609 seconds)
  done (took 11.075246604 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.022925841 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.018609172 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.020325033 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.018980437 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.019543661 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.019290072 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.020533291 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.020296247 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.01911115 seconds)
  done (took 20.137784757 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.186236518 seconds)
done (took 104.444530696 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.367226848 seconds)
    (2/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.44841122 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.125948968 seconds)
    (4/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.804399911 seconds)
    (5/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.098799612 seconds)
    (6/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.338085171 seconds)
    (7/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.161266862 seconds)
    (8/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.021547496 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.192291849 seconds)
    (10/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.034082452 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.717244679 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.781397087 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.771997496 seconds)
    (14/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.418722761 seconds)
    (15/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.618064676 seconds)
    (16/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.224521484 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.420781405 seconds)
    (18/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.033873506 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.03477274 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.890815759 seconds)
    (21/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.389768568 seconds)
    (22/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.021517641 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.115614321 seconds)
    (24/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.033168879 seconds)
    (25/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.31041204 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.039195843 seconds)
    (27/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.095225241 seconds)
    (28/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.443868138 seconds)
    (29/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.793521176 seconds)
    (30/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.10539081 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.427754498 seconds)
    (32/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.238970403 seconds)
    (33/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.019521457 seconds)
    (34/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.957380705 seconds)
    (35/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.123247849 seconds)
    (36/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.822583474 seconds)
    (37/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.047642545 seconds)
    (38/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.179639386 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.031794794 seconds)
    (40/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.020591462 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.122046386 seconds)
    (42/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.282950747 seconds)
    (43/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.167843889 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.778812144 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.155862552 seconds)
    (46/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.286167068 seconds)
    (47/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.253041374 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.108525418 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.251825004 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.025018079 seconds)
    (51/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.159550816 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.415631368 seconds)
    (53/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.103428546 seconds)
    (54/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.413358702 seconds)
    (55/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.401565687 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.337499732 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.337600774 seconds)
    (58/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.826756964 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.143021487 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.441574616 seconds)
    (61/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.221364674 seconds)
    (62/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.246382456 seconds)
    (63/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.035483427 seconds)
    (64/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.19093226 seconds)
    (65/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.208657004 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.273024388 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.751376475 seconds)
    (68/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.309331327 seconds)
    (69/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.382355437 seconds)
    (70/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.215632887 seconds)
    (71/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.439388572 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.734506297 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.932536033 seconds)
    (74/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.045187043 seconds)
    (75/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.235246462 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.035408404 seconds)
    (77/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.787865025 seconds)
    (78/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.729097621 seconds)
    (79/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.407636934 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.041100352 seconds)
    (81/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.033725389 seconds)
    (82/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.828734139 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.119788075 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.975705409 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.90561015 seconds)
    (86/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.048695808 seconds)
    (87/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.083047427 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.045232808 seconds)
    (89/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.629904603 seconds)
    (90/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.446755607 seconds)
    (91/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.6846929 seconds)
    (92/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.837030731 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.148563731 seconds)
    (94/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.120327896 seconds)
    (95/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.107468747 seconds)
    (96/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.184722953 seconds)
    (97/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.450537863 seconds)
    (98/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.040391114 seconds)
    (99/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.500047378 seconds)
    (100/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.131058808 seconds)
    (101/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.15854568 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.928991723 seconds)
    (103/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.428685568 seconds)
    (104/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.036290959 seconds)
    (105/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.018748231 seconds)
    (106/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.275905787 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.038802296 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.377275622 seconds)
    (109/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.117100898 seconds)
    (110/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.106031788 seconds)
    (111/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.108625395 seconds)
    (112/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.286515511 seconds)
    (113/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.113157032 seconds)
    (114/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.989437703 seconds)
    (115/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.020649544 seconds)
    (116/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.027004771 seconds)
    (117/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.150082678 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.811403486 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.350771686 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.297277699 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.149789298 seconds)
    (122/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.47297941 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.421146172 seconds)
    (124/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.144863558 seconds)
    (125/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.429827572 seconds)
    (126/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.125264608 seconds)
    (127/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.104119335 seconds)
    (128/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.027871974 seconds)
    (129/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 3.711170868 seconds)
    (130/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.027818109 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.041115525 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.042968294 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.028344906 seconds)
    (134/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.227148233 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.057684927 seconds)
    (136/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.212066853 seconds)
    (137/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.330621441 seconds)
    (138/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.089549636 seconds)
    (139/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.335798964 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.119471347 seconds)
    (141/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.154732177 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.277890898 seconds)
    (143/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.346238965 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.131550661 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.257172265 seconds)
    (146/341) benchmarking ("sort", Bool, false)...
    done (took 2.244457125 seconds)
    (147/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.896036394 seconds)
    (148/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.215429499 seconds)
    (149/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.346691253 seconds)
    (150/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.499966452 seconds)
    (151/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.110975032 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.026898355 seconds)
    (153/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 4.097851946 seconds)
    (154/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.505997189 seconds)
    (155/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.300969185 seconds)
    (156/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.105075589 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.047304139 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.04209646 seconds)
    (159/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.130211856 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 5.673010725 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.377196969 seconds)
    (162/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.118181199 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.165218411 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.026854787 seconds)
    (165/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 3.894125485 seconds)
    (166/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.037481936 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.155503699 seconds)
    (168/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.788913883 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.006121324 seconds)
    (170/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.189479989 seconds)
    (171/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.061525952 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.243064619 seconds)
    (173/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.438894696 seconds)
    (174/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.157067127 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.222592072 seconds)
    (176/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.935888317 seconds)
    (177/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.749920784 seconds)
    (178/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.046197999 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.044043178 seconds)
    (180/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.442764404 seconds)
    (181/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.341508001 seconds)
    (182/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.9126459 seconds)
    (183/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.281121076 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.160092981 seconds)
    (185/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.106131901 seconds)
    (186/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.230452364 seconds)
    (187/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.069927026 seconds)
    (188/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.294969773 seconds)
    (189/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.159829991 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.028574183 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.033856973 seconds)
    (192/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.033044299 seconds)
    (193/341) benchmarking ("map", abs, Float32, false)...
    done (took 3.825841418 seconds)
    (194/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.165093494 seconds)
    (195/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.243490105 seconds)
    (196/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.206610015 seconds)
    (197/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.291926172 seconds)
    (198/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.345280611 seconds)
    (199/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.151072133 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.043133241 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.430626784 seconds)
    (202/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.309202119 seconds)
    (203/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.287688071 seconds)
    (204/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.919270718 seconds)
    (205/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.035063984 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.252344252 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.048406323 seconds)
    (208/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.264177894 seconds)
    (209/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.044755613 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.277103824 seconds)
    (211/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.159146426 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.127925156 seconds)
    (213/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.414037479 seconds)
    (214/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.034309301 seconds)
    (215/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.087939608 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 3.837057298 seconds)
    (217/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.000026019 seconds)
    (218/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.427099772 seconds)
    (219/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.028860373 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.064464609 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.367820962 seconds)
    (222/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.936687957 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.79747772 seconds)
    (224/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.078013268 seconds)
    (225/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.136837395 seconds)
    (226/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.340636137 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.348839587 seconds)
    (228/341) benchmarking ("sort", BigInt, false)...
    done (took 7.037530966 seconds)
    (229/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.667265282 seconds)
    (230/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.564862639 seconds)
    (231/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.714155419 seconds)
    (232/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.419038046 seconds)
    (233/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.139304781 seconds)
    (234/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.15738874 seconds)
    (235/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.334602668 seconds)
    (236/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.83424323 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.242912264 seconds)
    (238/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.029681202 seconds)
    (239/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 3.997298656 seconds)
    (240/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.121277035 seconds)
    (241/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.032910213 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.099712669 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.646520153 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.331079133 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.032387754 seconds)
    (246/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.166377782 seconds)
    (247/341) benchmarking ("sort", Float32, false)...
    done (took 5.720507408 seconds)
    (248/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.319414514 seconds)
    (249/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.03167254 seconds)
    (250/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.307465691 seconds)
    (251/341) benchmarking ("sort", Int8, false)...
    done (took 4.986978101 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.050719308 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.035477735 seconds)
    (254/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.238889962 seconds)
    (255/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.378020496 seconds)
    (256/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.039614364 seconds)
    (257/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.520987379 seconds)
    (258/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.133027893 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.047817117 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.10839303 seconds)
    (261/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.036212087 seconds)
    (262/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.032269757 seconds)
    (263/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.049997834 seconds)
    (264/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.303888033 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.124857813 seconds)
    (266/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.342844999 seconds)
    (267/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.034688915 seconds)
    (268/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.258671648 seconds)
    (269/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.129726811 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.348723971 seconds)
    (271/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.037145543 seconds)
    (272/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.292400073 seconds)
    (273/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.037866802 seconds)
    (274/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.325812386 seconds)
    (275/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.1848562 seconds)
    (276/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.557660832 seconds)
    (277/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.370133138 seconds)
    (278/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.934386775 seconds)
    (279/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.450418039 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.033676979 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.344978433 seconds)
    (282/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.147428526 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.170825209 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.269743171 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.296537064 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.037473744 seconds)
    (287/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.061093896 seconds)
    (288/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.047822473 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.033995319 seconds)
    (290/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.201057613 seconds)
    (291/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.322745141 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.036410007 seconds)
    (293/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.217712438 seconds)
    (294/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.208224321 seconds)
    (295/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.034990429 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.387175249 seconds)
    (297/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.345908194 seconds)
    (298/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.523777347 seconds)
    (299/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.601796003 seconds)
    (300/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.035950307 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.147049012 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.174062748 seconds)
    (303/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.342212216 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.178832598 seconds)
    (305/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.123231675 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.762815776 seconds)
    (307/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.180912364 seconds)
    (308/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.41938698 seconds)
    (309/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.422133424 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.273417388 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.751992781 seconds)
    (312/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.35164027 seconds)
    (313/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.152984979 seconds)
    (314/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.054628909 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.915633606 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.313081854 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.100788965 seconds)
    (318/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.034681806 seconds)
    (319/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.051458563 seconds)
    (320/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.437892409 seconds)
    (321/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.067543924 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.161458486 seconds)
    (323/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.165418765 seconds)
    (324/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.179660578 seconds)
    (325/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.051169693 seconds)
    (326/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.230373463 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.897404432 seconds)
    (328/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.874512546 seconds)
    (329/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.104024273 seconds)
    (330/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.455320712 seconds)
    (331/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.185397311 seconds)
    (332/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.25887394 seconds)
    (333/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.036092992 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.863400598 seconds)
    (335/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.04315743 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.154070362 seconds)
    (337/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.038628924 seconds)
    (338/341) benchmarking ("sort", Float64, false)...
    done (took 5.732012458 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.037965939 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.079912614 seconds)
    (341/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.03691816 seconds)
  done (took 1149.143443137 seconds)
done (took 1151.190027664 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.065204333 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.045045727 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.544982276 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.05537484 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.044444156 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.048666507 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.553464538 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.075827914 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.06156058 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.553855031 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.055660235 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.04540536 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.059977032 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.078714689 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.056103381 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.059211809 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.050575128 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.070507886 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.080375731 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.064596847 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.092296866 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.051281798 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.044021533 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.0971038 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.050920884 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.05902435 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.059245203 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.09139893 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.096401571 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.047698367 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.051705468 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.399033032 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.097758188 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.050850826 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.057424095 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.061538535 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.051701286 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.061169155 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.059016819 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.061151041 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.04617769 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.055331697 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.050920295 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.048787825 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.045870134 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.045397893 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.048757395 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.172244689 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.061110166 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.381676546 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101791049 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.059821008 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.093222012 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.049206038 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.048242004 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.048910792 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.093182565 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.052526899 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.050183805 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.38407956 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.140292924 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.060958763 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.381659239 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.10982007 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.057678019 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.05619556 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.046452368 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.060536413 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.399990497 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.596030572 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.079233181 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.069570589 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.0488011 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.049303849 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.06153343 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.552502308 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.062970094 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.61955966 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.076662261 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.06297901 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.053162925 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.046962891 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.049587291 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.064973087 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.063159503 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.046762134 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.053905225 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.053978663 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.061716961 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.40094131 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.09430721 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.544973293 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.057242822 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.063437149 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.062497803 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.62534339 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.079479521 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.061722048 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.052452148 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.401592849 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.092084062 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.064142224 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.051699359 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.060486058 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.163705197 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.063190746 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.063743803 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.048806737 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.070950245 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.055556307 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.050295042 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.063722933 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.069552061 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.084335515 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.068181045 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.049155877 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.058642216 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.054744725 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.062482821 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.05726698 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.056093614 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.06119571 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.04995173 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.101650127 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.063488059 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.064597154 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.165493995 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.055681049 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.175724636 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.06374242 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.057066924 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.050378496 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.385681286 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.096224871 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.072442019 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.056956298 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.07336897 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.074118426 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.067594025 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.052819382 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.065952332 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.054280729 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.102457384 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.051323455 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.076638763 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.103264797 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.06532255 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.057248697 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.064263031 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.086004125 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.071465473 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.056065997 seconds)
done (took 322.805841714 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.097796284 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.046565521 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.129229548 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.045516564 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.113874006 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.100279564 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.045447318 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.045700959 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.045003847 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.441750485 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.045595237 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.050424718 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.044770187 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.046271342 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.096944964 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.045414387 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.04611241 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.282478384 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.045807794 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.10561193 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.044966013 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.046016922 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.046248246 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.447189597 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.047996882 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.04526779 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.105300962 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.046772256 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.290545361 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.046000057 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.045611845 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.291034053 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.10697181 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.061746647 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.054458559 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.051786213 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.115065918 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.058576222 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.095042523 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.095109256 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.123913341 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.08025898 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.046141783 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.047708738 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.049704001 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.047010874 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.047846726 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.08028292 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.046529653 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.055033752 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.284512313 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.053085632 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.055500616 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.048152571 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.048604532 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.060955293 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.047544612 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.048483336 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.108231201 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.048260841 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.095794618 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.448552498 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.445402545 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.049271423 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.048044586 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.048097998 seconds)
  done (took 195.602313691 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.116893818 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.134489597 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.116933461 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.058090768 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.100203595 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.114253448 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.058169927 seconds)
  done (took 16.676879319 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.056222839 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.048723352 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.071663793 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.072480925 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.049050056 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.191632134 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.061455441 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.055056032 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.075881402 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.049262916 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.389427558 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.072762898 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.056063439 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.04360768 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.060943254 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.078088274 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.05111191 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.049731518 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.148222541 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.127249207 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.054827504 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.057908718 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.078566397 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.061671388 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.049968353 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.051318587 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.050103375 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.057006748 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.050194693 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.049357218 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.049868228 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.06381593 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.050313445 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.049709923 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.050650425 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.051040987 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.051739129 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.050687874 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.051126164 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.049173286 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.050436807 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.050237703 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.051089849 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.051035166 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.05027003 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.073463264 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.051724405 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.051219831 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.05158285 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.051501245 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.081472249 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.052322647 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.05210623 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.056701857 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.091773538 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.058844506 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.051649964 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.0516233 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.05183721 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.050106432 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.052629026 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.132152194 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.075245138 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.052710602 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.07504416 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.088997913 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.052186673 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.051533388 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.052955865 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.078853736 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.052679295 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.077040677 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.052589409 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.157554415 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.052911035 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.195670582 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.074765565 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.057019225 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.056134587 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.052281984 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.059704907 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.0527909 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.054234572 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.059780894 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.057640653 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.052998236 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.053058579 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.054197333 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.059752414 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.054386734 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.099155438 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.054064274 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.052614351 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.160675396 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.053704477 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.151916992 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.080591296 seconds)
  done (took 222.751691019 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.059509626 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.054501735 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.067254814 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.055005585 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.055005697 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.059427591 seconds)
  done (took 14.334170058 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.056984392 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.058393091 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.054196057 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.054540986 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.054081391 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.05426304 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.055747049 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.056728728 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.058087713 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.054831723 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.055753716 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.043336535 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.054796005 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.0536956 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.054591295 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.055537358 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.054483819 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.054971894 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.053952002 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.053812717 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.302103851 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.053811884 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.054257046 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.0579156 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.058933475 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.055852068 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.064618748 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.060343018 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.058598794 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.063569714 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.061544964 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.057869262 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.060895286 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.065391904 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.063086637 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.061430925 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.062744532 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.059249926 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.058252789 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.057942888 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.058405245 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.058148576 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.059323236 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.058924681 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.061255786 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.066535973 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.064222495 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.067968632 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.05902382 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.058769034 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.059225427 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.058825538 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.059285007 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.059876566 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.063434114 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.066688496 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.063741756 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.060130467 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.060164098 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.062322184 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.064133626 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.059368676 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.062196093 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.065060092 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.067600965 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.060322772 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.063272666 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.063736568 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.061174802 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.06130981 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.061317109 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.05982434 seconds)
  done (took 151.492692703 seconds)
done (took 602.833466273 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.15849452 seconds)
  done (took 9.14749921 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.192450765 seconds)
  done (took 9.274498996 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.371072633 seconds)
  done (took 12.365363991 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.084540065 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.127615621 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.063508311 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.061222288 seconds)
  done (took 30.340815036 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.422005386 seconds)
  done (took 9.412403137 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.072962648 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.056968749 seconds)
  done (took 16.190681906 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.123241895 seconds)
  done (took 9.112703157 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.236930745 seconds)
  done (took 9.255461027 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.08367969 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.077071785 seconds)
  done (took 16.169904035 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.061480273 seconds)
  done (took 9.050014699 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.835543575 seconds)
  done (took 9.908175458 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.07670946 seconds)
  done (took 9.087348766 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.076500078 seconds)
  done (took 9.066342548 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.04704665 seconds)
  done (took 10.036159956 seconds)
done (took 170.405094267 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.068338341 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.059336242 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.059058563 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.059335405 seconds)
  done (took 30.236257914 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.096208584 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.097534134 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.104964618 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.096846979 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.087089354 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.086705227 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.097281216 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.097050142 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.087385094 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.094076877 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.097440111 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.094325255 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.096439431 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.105020185 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.104986214 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.094890812 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.09669176 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.097203694 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.087503237 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.105829017 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.094911063 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.096382642 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.063173471 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.061984644 seconds)
  done (took 52.232864112 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.253516317 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.129314329 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.217028893 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.108899314 seconds)
  done (took 10.699884795 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.062996756 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.127114639 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.113707265 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.109065685 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.113033335 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.165392828 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.115240402 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.198525463 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.191258171 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.188895602 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.070686754 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.08493518 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.088838854 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.110610353 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.167220468 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.063119298 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.063580078 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.177912068 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.127231715 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.233785039 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.06365218 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.117973331 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.11475569 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.115268944 seconds)
  done (took 52.976795951 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.064633939 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.072393248 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.070560456 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.064658877 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.065730669 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.06473648 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.07097969 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.066919879 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.087038591 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.066703657 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.064768547 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.067460737 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.072389316 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.065399547 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.065360532 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.078597562 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.079659303 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.065208642 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.06964548 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.07227303 seconds)
  done (took 43.388310844 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.063345659 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.911169215 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.411708483 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.314847657 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.062541034 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.06799462 seconds)
  done (took 32.825128664 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.078228618 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.083903227 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.071551655 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.089216374 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.11321919 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.074071272 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.124339531 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.234058046 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.075349939 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.123558088 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.086878503 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.073429696 seconds)
  done (took 27.221918451 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.064834206 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.06801607 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.069643754 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.07935901 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.076575923 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.078423194 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.07412354 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.063846579 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.080979631 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.089526712 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.078271022 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.077659771 seconds)
  done (took 46.895733729 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.279137078 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.291161317 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288072973 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.619331313 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.391758861 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.054442314 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.350408472 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.277468342 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.764322607 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.794380272 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.365901341 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054192274 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013808632 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.99206478 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.963459095 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.309269575 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068334147 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.926116605 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325755135 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121847181 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070342615 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.068033057 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069450434 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359234676 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399997916 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073809248 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.279694468 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083044985 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.068591162 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.283840949 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.619047063 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.123449965 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.269916302 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.324156157 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411387731 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.225298307 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.075180584 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.186550687 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.115101988 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102633736 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077883899 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.078276397 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.608344564 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.078610803 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34156533 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068739959 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.173153037 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.081306744 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994730161 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.381278417 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187676897 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.066043672 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102387338 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.500188354 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189865825 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.310839365 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.073362224 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.190151561 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128447442 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.311830459 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.29304849 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077003686 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281387676 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994256882 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.470879354 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201142399 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.071722549 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073124157 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.768718084 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311233602 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.149890983 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.384173355 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.838095645 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.069823554 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.071663724 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.112656441 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1581759 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.068469883 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.360402383 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.066704851 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.996666244 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168797354 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.464137814 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075517444 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.069136345 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.078139321 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.915582593 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.995844163 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.166293782 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.320013962 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.397748111 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.070705448 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.071348022 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.091920336 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073080954 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018650252 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.580133319 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.136982778 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.996821468 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.635257458 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.629692718 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.039272054 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.508031806 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.115098965 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35387323 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.216427414 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.476025482 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.278083002 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316487727 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.602113916 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.075521963 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.685496111 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151774061 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146836343 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070538064 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.636071015 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.198956103 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.367425308 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.192522838 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.071424382 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.997216716 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.082118951 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274756105 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.629210076 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128529042 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.071720351 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.076918138 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.071443706 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.073821075 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.181638744 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087092992 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.371038323 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.149554705 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.072810839 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.011475221 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.077801739 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.378527203 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.662666409 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136545645 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.332284047 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.34515387 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.770677584 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.669556916 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.020293037 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.346214279 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.150647921 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147768254 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.658343537 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.212725366 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.170264278 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.072751796 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.211439283 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.081865615 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.075009893 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.384853176 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.490774498 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.499635029 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.115864902 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.073643381 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.023226377 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.201398095 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315755648 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158167179 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103558108 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078894025 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.156914659 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300701025 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.073693449 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.000424905 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332558773 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324199452 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.375933787 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.494054331 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14050769 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.14793005 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084533549 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.287746104 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.156651627 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.743738041 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.62162802 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.303976283 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.598458994 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.040150746 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.714061618 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.328860666 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464146233 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089305662 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.527526467 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.201333783 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.719739276 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.106969974 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.60271285 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.001181989 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079829482 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418128859 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.034650707 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.399757015 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.173467598 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096282303 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.076682241 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.075910069 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082333763 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.001846109 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183573065 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144691375 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1483898 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002057548 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.671089648 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.118607169 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.078766732 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.075536613 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.454161583 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.951430989 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031588312 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.061797391 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153237933 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.827085551 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.626268393 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.080256397 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079417393 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.678964882 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.082875824 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.983647662 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.203224252 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.847413471 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.105783655 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.318989138 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.782490003 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365645398 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.15732186 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152488151 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.078020941 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084839608 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.77781112 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085843435 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.780071222 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364106885 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.359263588 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.527232582 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.148460913 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.285561872 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.092471846 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.078455597 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.595460503 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.105835466 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079701161 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282842465 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.595661976 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.398203412 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.729114849 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.163312604 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.079003037 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350217814 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088369125 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.64300922 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.774003366 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.088442114 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.077199598 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.348809325 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.762351559 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.079968217 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.05936437 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085229825 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289980452 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282323656 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358403324 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.387342516 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.533601048 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.004795959 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08403117 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.099226542 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.322278399 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.078821477 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.114189354 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.526976827 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157423259 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.510172512 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.368465472 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.472697236 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.720889897 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.349332476 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.147718431 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.090731966 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.738808913 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215291434 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.01155095 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19802368 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.005612919 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.84630335 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.371781393 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.096846195 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.353436363 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064515649 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.424478362 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.385200207 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.337459357 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.13472367 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.10910662 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.08191443 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130749439 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.080746473 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.218183994 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.197621146 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.087262989 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.578875405 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119981594 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127189211 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085874467 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.618464607 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.104658323 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.083923427 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.773956214 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.105443432 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19984684 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152938783 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.877689425 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.670902054 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.174475952 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.960353227 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.734242951 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.353241787 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.140676911 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544864226 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123114458 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.486386301 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.082608845 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.293533616 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.086304885 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.603952515 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128491906 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358397073 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042090691 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.295330957 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29097974 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.112678344 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.088497938 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.008042467 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.245481717 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.964846411 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.062863591 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.085522572 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.764961856 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.505576543 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.23646051 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.539067845 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.918704186 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.085051171 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.439232166 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.488285681 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.662274751 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118492368 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085708885 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.40540131 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.224466584 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.379248684 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.384122189 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091797586 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.109426534 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.296477687 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20982091 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.002151527 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.565169106 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.668431692 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.784560666 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.094816698 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.28815489 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.409983194 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.326548165 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120266718 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15680188 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.488233792 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.356079043 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.156421026 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010823399 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084147242 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.479412702 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.484111744 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.182097744 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325354058 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.406616011 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.637898126 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.66173535 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.48329028 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.520699092 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.538157712 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.481880951 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.306134554 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463698144 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.412881298 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.676547957 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.497040699 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.298147517 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175178177 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.370484382 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.960448922 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.795703068 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329475245 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.0905618 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014647295 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.293223427 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.088307968 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.498015382 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.619307799 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.334226922 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.334925833 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.562218396 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.626113135 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.222765974 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.112884865 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.051181971 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110092863 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.107329491 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.086599437 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.566687047 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.375843554 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10037706 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025648416 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.759499252 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.013434737 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.298951868 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.218876443 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.124503724 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.645370516 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.351212018 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.201213824 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381780076 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.273448177 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.124185121 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.013801443 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.851969305 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.036315341 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.169086776 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.516024191 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103256907 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.090462578 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.291109821 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.016634466 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134011429 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.092685606 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295812441 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672125308 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363635119 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220249357 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339370307 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39672595 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.975250134 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130424793 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.360579213 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.015366321 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.659243437 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.771784651 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.129751415 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161092153 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089343352 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091750836 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.360380204 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408331572 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.20180567 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.76942907 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.122075298 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.112969178 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.411057148 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.193127101 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.09102226 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.094823369 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.542932188 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.323686569 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.090138774 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.080982837 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.30246792 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162722294 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.28620037 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.165683985 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.604902727 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.094678965 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.989530061 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.205907098 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.041949056 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089966526 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.820282444 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.153821487 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.090587747 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.367069678 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.753215296 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293758067 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.485180035 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.959362085 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.227971611 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135560203 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.093094023 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.100504867 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.491102363 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.400552983 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.090715286 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365117763 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.146610968 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.097026918 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.751780108 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.060894434 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.092312974 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.855446419 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.991454197 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.822128351 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.48729425 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.200710501 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099520634 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094531943 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.019150046 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.092221428 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.272806865 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.090537841 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.07272116 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.472778213 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.417892019 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191590422 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097713616 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.092534923 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.098290321 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.304656388 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.605985449 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108473894 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.792561261 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.29594254 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.099571847 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.573069321 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.545433783 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.304125137 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.133888551 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.232092045 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344315896 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.63997864 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.240402179 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.074088538 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320706629 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.094941849 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.364335471 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.367269845 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.094256634 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.305637844 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.664297205 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380810446 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.444692628 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.412193182 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.167868553 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.242672974 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.996515103 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.097823564 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.096409193 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.364256624 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156815192 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.093042907 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.103523557 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.650359031 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.804534783 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.572211537 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256516413 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.407178569 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.965149457 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.850605581 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.096272179 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.020136844 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094083946 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.120699814 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.097043786 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.021091124 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.858008139 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.819618363 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308143622 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.409293916 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.021235188 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.297725817 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.699778558 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.021855217 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.063868841 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.095535434 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.358563787 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023009875 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.098606167 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.049205906 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.368861924 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.797830491 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368966892 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.095970632 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04026281 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101298952 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.096697607 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.095256841 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181079616 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.096646107 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211441449 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.365021952 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.466320302 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.206215135 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.736403711 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.808411517 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.037817814 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140892838 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.710311052 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.666684937 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.369881262 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.230907336 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.804014118 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.044629553 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.098817921 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113271282 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.353521015 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.102217053 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.099149061 seconds)
  done (took 2208.188433635 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.164768822 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.138938555 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.156564266 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.128649429 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.256775736 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.238369402 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.145836858 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.172811762 seconds)
  done (took 59.427725075 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.108653842 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.093457519 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.106705099 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.098423386 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.097862495 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.100788387 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.28530488 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.111715236 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.08156383 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.102596282 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.097575993 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.100569037 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.098448816 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.09563083 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.102698 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.386343876 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.119467125 seconds)
  done (took 80.27717732 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.153234032 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.031085957 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.100569904 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.887172587 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.137293855 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.394818389 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.100825336 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.100011206 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.438477459 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.394826245 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.113581805 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.114515932 seconds)
  done (took 95.011490228 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.099764168 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.100345954 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.09916958 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.099967702 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.099824711 seconds)
  done (took 12.526140799 seconds)
done (took 2753.964369333 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.343953731 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.192493796 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.172607363 seconds)
  done (took 6.392562472 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.243572109 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.292205526 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.405112259 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.410902047 seconds)
  done (took 11.384367098 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.393461926 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.48948066 seconds)
  done (took 6.910766421 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.473288719 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.114315371 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.492379663 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.101544599 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.105477415 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.104362452 seconds)
  done (took 23.344075894 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.101302717 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.100866711 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.101623542 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.101765436 seconds)
  done (took 10.432489604 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.09833143 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.889241825 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.097947531 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.109584675 seconds)
  done (took 22.223596823 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.316723167 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.091519786 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.866322774 seconds)
  done (took 10.302904054 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.918598683 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.554154967 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.713097758 seconds)
  done (took 10.214762786 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.24062382 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.938198503 seconds)
  done (took 8.207972177 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.240928414 seconds)
  done (took 4.270213342 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.930443829 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.414124347 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.573377481 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.04874472 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.735568692 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.504197432 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.585738883 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.386668161 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.510733718 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.535158015 seconds)
  done (took 28.253273976 seconds)
done (took 158.387975438 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.724718041 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.13185412 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.332296801 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.497105648 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.360099892 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.335789391 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.378895423 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.492771848 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.193713135 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.180657524 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.484324954 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.348075896 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.342443143 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.134531906 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.345515042 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.131474874 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.352840343 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.581513264 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.170625211 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.410838448 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.400129222 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.125247294 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.323103083 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.150320347 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.350488786 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.279024567 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.753860495 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.132865166 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.324253551 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.778611928 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.282295569 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.551794136 seconds)
  done (took 177.414052125 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.105252298 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.105349734 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.107836487 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.104369515 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.394455883 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.107782062 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.105582295 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.106353983 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.420457889 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.401091083 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.106029026 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.347799466 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.108368633 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.106418478 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.106244851 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.106252383 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.538935637 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.106528711 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.106349996 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.106275884 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.106818142 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.226301097 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.106740859 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.239303818 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.506927583 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.106925279 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.106123491 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.107009311 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.108028738 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.089031603 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.108106886 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.107095131 seconds)
  done (took 215.650760074 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.106127093 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.1079848 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.106725351 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.108213007 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.109468164 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.109262614 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.110255596 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.108045709 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.981753585 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.975015855 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.108262853 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.107286889 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.108684504 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.108092327 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.108619516 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.10774273 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.108857965 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.108877975 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.111092242 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.113332787 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.108881292 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.769417982 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.109451968 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.806469329 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.109734961 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.114638046 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.108816175 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.114620356 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.114025358 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.114861009 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.117899078 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.109827997 seconds)
  done (took 228.648012054 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.348743448 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.108761004 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.109467996 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.112089352 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.109584077 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.108964277 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.115141885 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.35643006 seconds)
  done (took 21.412370611 seconds)
done (took 645.170033444 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.496516554 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.85112215 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.241304983 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.133675599 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.405237609 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.179427176 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.127636761 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.197518151 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.776032494 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.2084306 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.547522213 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.138189 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.869875475 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.159135573 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.243048275 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.18922742 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.513721292 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.759274707 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.266990617 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.79087889 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.338924095 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.078997962 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.21007853 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.814696782 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.566846478 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.110511858 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.187200598 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.514522162 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.133107311 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.370877833 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.808587721 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.39059993 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.146292892 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.132612343 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.182860518 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.17299494 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.363701494 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.14374738 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.244857674 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.867338934 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.794248657 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.662223768 seconds)
  done (took 110.368040473 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.117420208 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.115021377 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.115004803 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.115202678 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.123731549 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.115898099 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.114920643 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.115279005 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.11439631 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.115516327 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.115918409 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.124020453 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.116632647 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.123046946 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.115158792 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.116459093 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.115633923 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.122968546 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.116571379 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.116057881 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.115869416 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.115681863 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.113223166 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.116072401 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.116376851 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.116304721 seconds)
  done (took 57.087568657 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.11180502 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.266705633 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.402498263 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.147969763 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.114522244 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.11619987 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.144184556 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.12146171 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.115997328 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.116207801 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.229194336 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.119231579 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.126615995 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.398772618 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.146141715 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.113558232 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.113263724 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.114943881 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.276733869 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.131040558 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.144620065 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.121598777 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.144851967 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.130199348 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.117504339 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.116194635 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.118056514 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.528226175 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.127838511 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.229523066 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.174076081 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.153440082 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.504779838 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.410787855 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.18356039 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.126174345 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.114710407 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.276822796 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.129128739 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.115959579 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.144269949 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.124507855 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.402534753 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.643112433 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.131630819 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.114727982 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.526074174 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.288328162 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.16487333 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.129972779 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.411048257 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.151763233 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.11615511 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.117093715 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.152816933 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.129140721 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.117350184 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.395264684 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.132833779 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.145180402 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.124725338 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.11699217 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.279824042 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.12735488 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.270196154 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.127379226 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.123547017 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.120205499 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.404672348 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.149937166 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.635968632 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.132270044 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.116125857 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.233789344 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.27954545 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.554970938 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.132683398 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.282988927 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.527435208 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.156649179 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.129588125 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.517194398 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.160318208 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.129050011 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.11874347 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.11872002 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.118121172 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.161292707 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.145568124 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.552778161 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.642417765 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.418825883 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.160361922 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.13263918 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.120148744 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.397701411 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.12970903 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.118033993 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.398519973 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.669601976 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.135279298 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.12399321 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.619582271 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.137086439 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.148709831 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.130424287 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.416023782 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.152058195 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.16151321 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.119299199 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.125442518 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.121047096 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.148568752 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.130703902 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.118932847 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.612818717 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.296800767 seconds)
  done (took 261.911924866 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.122763304 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.119140834 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.118975553 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.118545007 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.117817725 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.11861891 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.118428736 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.118334072 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.119370249 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.117850893 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.118892731 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.120065731 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.122134719 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.12644736 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.16421176 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.120705436 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.611889342 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.119779751 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.118386829 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.121610871 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.689413902 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.125485706 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.119537872 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.121607608 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.121801333 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.119871375 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.126032114 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.160995517 seconds)
  done (took 174.570587754 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.120881015 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.168743871 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.134572285 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.169270278 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.133578618 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.120838409 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.141750577 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.137242376 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.127052896 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.120736534 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.120216462 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.149245229 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.129800539 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.194372788 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.156689995 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.152847402 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.19940579 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.133040493 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.120885491 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.121209623 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.169356044 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.134808359 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.148639934 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.17821359 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.135653023 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.1696779 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.134779075 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.121739579 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.121995853 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.212027618 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.146415887 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.150742883 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.158197744 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.141622335 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.216483886 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.216714067 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.207468282 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.155575264 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.127160154 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.121809175 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.121869161 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.122519789 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.170614816 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.139200915 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.124256697 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.213622864 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.147408791 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.123264379 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.145168864 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.123048154 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.135216188 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.140112406 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.156409287 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.224776607 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.176388981 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.150321939 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.145846958 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.140090859 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.123553621 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.195570183 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.134815813 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.213139683 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.150394649 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.122969535 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.124795727 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.128063279 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.171807414 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.161144133 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.201477633 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.135445156 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.19591257 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.183019877 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.142293313 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.12453537 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.124919116 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.171951488 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.212262043 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.18369627 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.189307072 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.155351356 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.132619761 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.125464147 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.124567869 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.152589145 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.133597172 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.214228461 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.22167723 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.13484583 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.123920827 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.124605122 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.125025027 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.148122489 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.186332459 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.171506001 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.207039985 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.165294812 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.1618676 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.134067712 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.138157229 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.130025308 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.155963781 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.133875465 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.138129977 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.457961842 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.164374121 seconds)
  done (took 228.42519714 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.473554149 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.175187582 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.184646315 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.410136855 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.488269267 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.244747211 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.165552936 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.179578823 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.185076802 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.288675078 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.23362383 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.215935918 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.163529113 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.149017054 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.173766904 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.182721349 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.203741604 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.47612203 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.275696468 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.863069909 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.168192641 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.420997368 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.474120313 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.512227664 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.216635362 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.56778767 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.78881994 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.261868206 seconds)
  done (took 69.199818219 seconds)
done (took 903.600848573 seconds)
SAVING RESULT...
DONE!
