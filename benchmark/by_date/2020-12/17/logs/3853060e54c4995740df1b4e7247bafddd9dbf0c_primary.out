cset: moving following pidspec: 7058
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.824908302 seconds)
loading group "shootout"... done (took 1.117758666 seconds)
loading group "string"... done (took 0.668168449 seconds)
loading group "linalg"... done (took 8.649296863 seconds)
loading group "parallel"... done (took 0.169763657 seconds)
loading group "find"... done (took 2.937714809 seconds)
loading group "tuple"... done (took 2.083192276 seconds)
loading group "union"... done (took 14.940803179 seconds)
loading group "dates"... done (took 1.448395151 seconds)
loading group "micro"... done (took 0.219626424 seconds)
loading group "simd"... done (took 4.772848587 seconds)
loading group "io"... done (took 1.091449535 seconds)
loading group "random"... done (took 9.555726651 seconds)
loading group "problem"... done (took 1.51544017 seconds)
loading group "array"... done (took 25.255311744 seconds)
loading group "misc"... done (took 1.886029508 seconds)
loading group "scalar"... done (took 43.432754093 seconds)
loading group "sort"... done (took 3.33340105 seconds)
loading group "sparse"... done (took 12.699965152 seconds)
loading group "collection"... done (took 18.355104188 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422060924 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.121454507 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126240987 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112347211 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184247763 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120417352 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128855178 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084138883 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.87314975 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134676897 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113354737 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.424509111 seconds)
done (took 5.276780499 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164328302 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.08913552 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082343483 seconds)
  done (took 1.380714031 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069746998 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061679309 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065334667 seconds)
  done (took 1.405806612 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063574068 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133187217 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064254198 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065267211 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065146844 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064992822 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064520354 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064870348 seconds)
  done (took 1.735779701 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07046646 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065918493 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063734685 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065963473 seconds)
  done (took 1.478181931 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063526516 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120278145 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063289977 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063021576 seconds)
  done (took 1.519346443 seconds)
done (took 8.977733215 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138294085 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.820469923 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.768062925 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12102667 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244433249 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367106424 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122992216 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181739347 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.087650589 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073682356 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119742772 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.076193198 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.386263175 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.39875939 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070057229 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172286598 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.64314368 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087394955 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133997669 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.436720679 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072022689 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086190623 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082815155 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069770432 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.328253717 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151509045 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.663350955 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.091607237 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066835034 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093171253 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068793745 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076653222 seconds)
  done (took 10.547058732 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090864333 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088295326 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067173102 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122237336 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092565435 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068360086 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073969798 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.065892989 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087247923 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.123056937 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089010374 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096825049 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06489932 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067413154 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072386914 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195392158 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078887865 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079739888 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06592936 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079960309 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10407668 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077023621 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077005508 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076637962 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.13052555 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167838348 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095106406 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096850795 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064443165 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07747051 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113571677 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123646193 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.064778248 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063602649 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118374907 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093821517 seconds)
  done (took 4.574893357 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.883682416 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094297645 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081522929 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072323337 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104605671 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112102785 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.118738658 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121477963 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098081585 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067172499 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156234987 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.664643452 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.192333706 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069779472 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118439162 seconds)
    (15/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.113890814 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.354527441 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063936988 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.060829261 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068357447 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066112555 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068874054 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068095883 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.110012032 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067398326 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174417915 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582836024 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068970757 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067746955 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094055853 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.062404908 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063756831 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137673721 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.090680618 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0686509 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.538725653 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063539601 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.176581201 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088062816 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092952596 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065122634 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066452764 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07725161 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06461278 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106722277 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07754535 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513193657 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067969265 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.581201871 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224887434 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070995701 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070649458 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100317563 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063084722 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066040938 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.907274275 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145839688 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.064920617 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270492046 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065950675 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066940077 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06781336 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101059877 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06535939 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066818318 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.0715357 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094710302 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.87983416 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089114427 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094672663 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06531801 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.404494083 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07328987 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067711173 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06786312 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.082405256 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10960821 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064879157 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064852992 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.10912751 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093358101 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087636358 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068373539 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066005948 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064403102 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.319461397 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.157673152 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065038522 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065356546 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.473257898 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062043048 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064349774 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066273979 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.061466827 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.210721977 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066022918 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063166252 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063988154 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09778335 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068976068 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.341339232 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067765173 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.475095149 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067072979 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100932959 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118063626 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06613383 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.099713905 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066950943 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063362826 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071635782 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064090113 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063031589 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06778293 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064039891 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065019321 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067835408 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066258805 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066109293 seconds)
  done (took 22.676700885 seconds)
done (took 39.89756754 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.322375418 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077557472 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077249218 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077352456 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077551169 seconds)
  done (took 1.892869769 seconds)
done (took 3.246972078 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.13085423 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073294345 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062400937 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.098582115 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.066919784 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099857191 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106335374 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.102078405 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.066920216 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.067127416 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.066721376 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102869864 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103350511 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.067137364 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096065111 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.102070929 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.066858481 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062471652 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.067124527 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067084131 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.06672707 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062652662 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.067442218 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.066858282 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.097510403 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067260754 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063046812 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.097245447 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.067547015 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.097286394 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.06744545 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.067186898 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.066990026 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.097495068 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.067491539 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097423869 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063137034 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.067681791 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.067197557 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067372007 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.066813799 seconds)
  done (took 4.532622276 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069453853 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079981958 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081381972 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0603063 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069426673 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080640485 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060265308 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079832969 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089127655 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08091022 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.199240676 seconds)
  done (took 2.259599319 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068060885 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081087966 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082360989 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060485395 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071016736 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081500464 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060204538 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080857148 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083992782 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081658691 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081574245 seconds)
  done (took 2.122627174 seconds)
done (took 10.195615523 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095710623 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063575066 seconds)
  done (took 1.433662576 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220886191 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.496480562 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.06045305 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092175365 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070513593 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084467698 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197959932 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065112115 seconds)
  done (took 7.750306338 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.09717188 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069456565 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067386538 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065565619 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065964445 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066205088 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068602871 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06632728 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066050517 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068025385 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067504419 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.067023311 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066256289 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067931153 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067059934 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066674695 seconds)
  done (took 2.494149091 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101660213 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067655983 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096990421 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060021713 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07003086 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060405287 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068922351 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071031486 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068218193 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068873738 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07053518 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069276013 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070080585 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069514384 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070950011 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071238444 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.070978184 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068490058 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070890944 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071665704 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070171429 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071166127 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071545204 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069647302 seconds)
  done (took 3.125376186 seconds)
done (took 16.094749635 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172353681 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072696319 seconds)
  done (took 1.53051715 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065922089 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066575694 seconds)
  done (took 1.432169061 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071063429 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058620051 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076109646 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067872846 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.05971678 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059387163 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075149661 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059379975 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059720152 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059868002 seconds)
  done (took 1.946152493 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.060640056 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066768235 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064471798 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063164937 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065169213 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060676806 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063267565 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06114057 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06753634 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060535576 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064656134 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081832676 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063952752 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.082248138 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063821177 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064445734 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06573471 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06314661 seconds)
  done (took 2.484694746 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059041194 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060107837 seconds)
  done (took 1.426867748 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063215808 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059678338 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062552767 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062347773 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060127733 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059797143 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060117966 seconds)
  done (took 1.729349574 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.418040547 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.120767646 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.338676351 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066720397 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07428674 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252316089 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062064203 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066472022 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066404271 seconds)
  done (took 2.811416498 seconds)
done (took 14.676829585 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080039622 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.177829624 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085558223 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.375509686 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089400774 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065563636 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.110797671 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175512973 seconds)
done (took 2.490820509 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.27439633 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.22656145 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.39833054 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.122596078 seconds)
  done (took 3.060938923 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330615125 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076440028 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074806238 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064639498 seconds)
  done (took 1.869739126 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.062876951 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069027377 seconds)
  done (took 1.448310433 seconds)
done (took 7.980653644 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069537942 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059757494 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065415082 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06218923 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.061485058 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061317049 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.090130938 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059986668 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062099135 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059978441 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062417098 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06206819 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062517063 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062035468 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062031495 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062170106 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061386984 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062234257 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062086436 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06130222 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061766701 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062118183 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061196181 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061903143 seconds)
  done (took 2.864166273 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077466053 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063842346 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064742513 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064411095 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065018025 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064723245 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065182791 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063893037 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064996042 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06340754 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065128238 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065083274 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063218482 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065150228 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063121265 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06534519 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064786637 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063781924 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063382624 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06525842 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064798231 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064092356 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065466164 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064696346 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065541401 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065529737 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063807967 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064199744 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064838627 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06537668 seconds)
  done (took 3.284547191 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064443152 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057815968 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058302025 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06768142 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057919893 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058213091 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059142324 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058316068 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058659976 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059471292 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059232698 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058178873 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059372777 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058051668 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057848939 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058847699 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062994788 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077317507 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058959674 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058076531 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062258791 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058555556 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058000846 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058434824 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059181613 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058137951 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.05808934 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058468215 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.057969385 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059501212 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05822296 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062306211 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063006692 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058354107 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068258477 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063251518 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.057895609 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.062070894 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059542399 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058184114 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.057834187 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058244153 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058329953 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058221972 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068397183 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058492822 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059222506 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059043612 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058553989 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058051661 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058067514 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060086537 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066983853 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060156022 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.057905935 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059255728 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058152484 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.0588631 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058471434 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058255019 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058212511 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.061946313 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059909003 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.058742984 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07794189 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059852806 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068041116 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058330332 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059377773 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.061935756 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059055958 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.075916161 seconds)
  done (took 5.68761263 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069541318 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069959691 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077333835 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068202569 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062330425 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059398713 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063256177 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059461459 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068564791 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06390406 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059416485 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063223939 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069109404 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063540669 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060876447 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068884985 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063322475 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062485291 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058960637 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063387646 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061035693 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06309115 seconds)
  done (took 2.764821269 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136266303 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064169271 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.102624184 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067759818 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066515591 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068102119 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063799819 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064049208 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06409782 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064693906 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064889263 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064646522 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066981501 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064880383 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064630639 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06472725 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064427538 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064635134 seconds)
  done (took 2.613235228 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074181172 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063948347 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.086990918 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063624702 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063849688 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063351387 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067713269 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067847354 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063880795 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064144494 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.068117504 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06400211 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063970748 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063873266 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063620758 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064292085 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063409508 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064077726 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068010693 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067516424 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067890112 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06766702 seconds)
  done (took 2.800883824 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075198263 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062590521 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078156214 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064350164 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058530689 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058239446 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064635094 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063380724 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064321121 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.0627251 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063425333 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058896842 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065120966 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063433339 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065164821 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0633631 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062680133 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063443405 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062871277 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058365429 seconds)
  done (took 2.618150435 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069747927 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061179182 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061224134 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066219971 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060764925 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061204792 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066387567 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061780598 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061312001 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.082638425 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061283749 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061321079 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065923482 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074878881 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061175956 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066529835 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066447467 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066399731 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061308976 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061104669 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.082230224 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061390832 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066385654 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061157513 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061085747 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061338931 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061189274 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064877876 seconds)
  done (took 3.159351748 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062094209 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061276102 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062060629 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061623273 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061262095 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061793938 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061553817 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061753508 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061226715 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062028707 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061403505 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061614122 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064193463 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061605989 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061708081 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061492547 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061328925 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061779002 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061701802 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061843534 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061794644 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061252273 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061272601 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061859151 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061733627 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061392829 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061811643 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061994347 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.060957655 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061741562 seconds)
  done (took 3.197835225 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070748033 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069013643 seconds)
  done (took 1.48530257 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059938411 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075126574 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057624744 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070305596 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066240386 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062477629 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06748946 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066668031 seconds)
  done (took 1.866426302 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064286655 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088084894 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059946978 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062054751 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06298533 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.124962856 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072456522 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071798973 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074171247 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062988128 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061019194 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.071886868 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059637162 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07320482 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061424492 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068762418 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067333053 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078283753 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07325078 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.0583448 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072603169 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06071839 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.058698117 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.060821807 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060059863 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06691156 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075504744 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072215098 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068477058 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057985498 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078807237 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059101657 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06005888 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068509442 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062708233 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058905928 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095805396 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059691399 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06452966 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058876178 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071342122 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080321504 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073482321 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.076892357 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060877542 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061050517 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058652256 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060748893 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062621123 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068311115 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.05883288 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066763576 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058361971 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060446927 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069930423 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059299367 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064143045 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068587792 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072384574 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069609243 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.067815467 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074574234 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.06812365 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066714727 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060124739 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078739057 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061286555 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072134023 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074099052 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060116033 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072473855 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058415923 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05792461 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059176256 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093315579 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060877779 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060463406 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059180442 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059329081 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060912286 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06931425 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065027149 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066833013 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062479848 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075289342 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068310644 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059332539 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065697042 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076918838 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062608406 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.05914939 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075627003 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062528673 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058365799 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076461354 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068685797 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060943656 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060101666 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06260563 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07266632 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060135402 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057578836 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067799183 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060885989 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061011246 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063227445 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06701529 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.05849848 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069186722 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063709622 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060571606 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057280899 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063242609 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.05983398 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056811627 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068206241 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058104749 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072087688 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064475836 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072659171 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073269594 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.06870812 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074006378 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058260628 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057001406 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075493718 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.066941329 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059233949 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075495689 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057154708 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070796874 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057251925 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.196284817 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070096871 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059356204 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062177542 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059832767 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065022971 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061112675 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06128 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065527377 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068172623 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071371166 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06015193 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068174503 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059673759 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075456588 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069118721 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063689609 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062818414 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059618411 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071177464 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065978281 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068506738 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.0583437 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059811664 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059302243 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.069892578 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068846723 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060823592 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066150959 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063420867 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059803758 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.05950426 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060137687 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06292596 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06205046 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059918224 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067628739 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.067998158 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072633224 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066198416 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068179971 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.057825483 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058774682 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060840126 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058809322 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063305548 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068535109 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074452163 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070381417 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.07973272 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059034793 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069085856 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060278513 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075694753 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.072461144 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060280016 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063618494 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058052014 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060540173 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068591599 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070747869 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072784982 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074214607 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063566855 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063455655 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058480143 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074211296 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059730863 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067900818 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068338266 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063560375 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059007616 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06118688 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068421262 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064076557 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059328377 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074815739 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065526039 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058714475 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073395435 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059686353 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069639824 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058916879 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.0630771 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064543642 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061160206 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.06855478 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07485465 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058001294 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059708265 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074742429 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061173255 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06084974 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067557238 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074416728 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063677988 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067414184 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070052701 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069264557 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063434795 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068545536 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060020484 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06852037 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062410923 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070394104 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.05867881 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07696037 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057731953 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074110899 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059560853 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070509993 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059524406 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068482076 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05994593 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075958898 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061068449 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.05971819 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070491225 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057851613 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067735043 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.05837767 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063809073 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064734635 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067397403 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059841509 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067454044 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059771063 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067232093 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062621344 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066198002 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067473478 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.062773966 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057479808 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066392818 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068679398 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066182102 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059289994 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.059287858 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.199072338 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070206752 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06197126 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06160539 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068995687 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064413297 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.06590608 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061015289 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061403004 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060914512 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067971776 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069153696 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077183081 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067770547 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067564402 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068620124 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058755058 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074923078 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059312963 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069801913 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058001545 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.065058407 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068766276 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059595148 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077868062 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06039326 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067140037 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071418664 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068069132 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063196048 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076574489 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06211942 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069672275 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067202024 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063484254 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065875331 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061358521 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067880258 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.068471359 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.069403364 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06054523 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066823393 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068255813 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060510856 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066946257 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060789544 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067664283 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06067934 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058096716 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063469918 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070576133 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063932609 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064064886 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059523789 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057932427 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.05985477 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066257842 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06430505 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067891069 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074839617 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.057809527 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060448783 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058643542 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062764065 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077140831 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069172679 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067342455 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063527868 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058495767 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060768429 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061303553 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059919032 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063018019 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058461968 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058986389 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070199026 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060935713 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06392096 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059744591 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060529836 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068795107 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064070539 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059773211 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065754243 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.05933726 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064710568 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.05902057 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06054677 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063691946 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058920537 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062710113 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069754613 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075635905 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066067279 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068736367 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060377287 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067339206 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074690165 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066301268 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060283368 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068798004 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058596976 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077464153 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068569352 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067517969 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06898966 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060241832 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075683788 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063050844 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068968559 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07447303 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060413788 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065695361 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058756877 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074543327 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063545851 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058166503 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066720166 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066563944 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064650072 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070362958 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059244389 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06647073 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063338381 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062199973 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059954283 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059544855 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067026415 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.073929122 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058712833 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061892923 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066073049 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066446936 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062763087 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07060455 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066328823 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059703153 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06028362 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.20740586 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061555248 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072482914 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060890282 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064179437 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064394332 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059097253 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066323544 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07623575 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068834446 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068979045 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058752957 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058304812 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076846689 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062653091 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062831269 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067098861 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068763037 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071523361 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068458644 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076296392 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.059852623 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065119601 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071423235 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.059884549 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058954685 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063140369 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060484845 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068229809 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069417108 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066973318 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06121743 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065711146 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072749143 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060594534 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06373312 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063866584 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060253242 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069897653 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067110408 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070486511 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060512272 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058798582 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062852101 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067987165 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067108279 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068177709 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059953042 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065792341 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072566888 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06679782 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062480607 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058540047 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061808593 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068567104 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063885347 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058822562 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063829686 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062865319 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065723492 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068415134 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06352583 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058666069 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075838942 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067493343 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.06816658 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061172486 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060867023 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059415074 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058646333 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070773816 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058679437 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060880397 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064277799 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061089507 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077497599 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067480138 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075018948 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060985281 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063963248 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059274562 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068857333 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064748197 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059805509 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070162021 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05866624 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074679963 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071083932 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064476287 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058740401 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064387216 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067437604 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074198781 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069081252 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068840415 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063199381 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069129819 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062045588 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070388915 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058731946 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058618909 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069644748 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068111987 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071654328 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058790378 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069512493 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061269351 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067473557 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067159342 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060878816 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060769812 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060468342 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068672429 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064197483 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068216821 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064088521 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075653592 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059824675 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070203014 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068091565 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069726411 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072705054 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071075512 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066639194 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059193916 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066139974 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066427379 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059294493 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063787668 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06125787 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079386068 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059929883 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059857699 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071659845 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.0638057 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057922698 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063903274 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.205840469 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070367005 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061091978 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070529067 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063923372 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060734214 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063954531 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06421522 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058419509 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058821965 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059390822 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069083951 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063623611 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059281166 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077941514 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060796233 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.067844051 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070607029 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065947016 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060682581 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057890545 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059887219 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072474277 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074878421 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.0625987 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068049821 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061159194 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068546666 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058158409 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068038607 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067080185 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068091929 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058700755 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060111438 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074100625 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075120528 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063809506 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068811487 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068304366 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060919132 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081156665 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067951131 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060191301 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070093305 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061340917 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058502425 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058458675 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060702072 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070787215 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058562846 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061465574 seconds)
  done (took 40.911827074 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096370567 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059391064 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058872969 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.05866147 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066953911 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059727526 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059074357 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.05987277 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059797953 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061791878 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05922847 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061809023 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065458321 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072070437 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067211905 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062790743 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059284912 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060017858 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059132346 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059722319 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065266326 seconds)
  done (took 2.784697962 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062513972 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.063057803 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062856049 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063338248 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062552892 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05935318 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063040322 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059268505 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063645609 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059659345 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064100861 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059076433 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059524849 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059660115 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05958212 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060252912 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063914034 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062849921 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059355951 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063070157 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060609914 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062750529 seconds)
  done (took 2.788788442 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060157736 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059432642 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06785146 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058478879 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058496177 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062321345 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.05867065 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063363163 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.062991182 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062897227 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067952583 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059774398 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058551664 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064599682 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058358356 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059487831 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101295546 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059659501 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059973216 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05834375 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061619636 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068341079 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058664754 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058948309 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063114348 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062324637 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058473581 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061165386 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059545227 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06379612 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059757435 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.05853164 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067956985 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067207173 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063636429 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063041 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060310572 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059543319 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05857262 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058600726 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067380111 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.059976571 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058731405 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060115634 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067664516 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058509807 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058258971 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067735931 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058422109 seconds)
  done (took 4.490842199 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069002826 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111061086 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064491238 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092218562 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071553774 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064936448 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064679209 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092906791 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059604636 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060235252 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072339529 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072605881 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061877651 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062993062 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065602293 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061780819 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06253715 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060707187 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063952998 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061048443 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064101398 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065660793 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071592762 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072079849 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062142962 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060814065 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061351938 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062702028 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07161802 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.065149532 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063325046 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063603624 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072106571 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066367261 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061100667 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061146775 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072323478 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062010812 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061712528 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060247284 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061317969 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063175032 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066008846 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072697016 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062190329 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066651448 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061801752 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059860676 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07222629 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061455427 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065537657 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072960994 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062487659 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.0620624 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063071343 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071885197 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061899846 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060316808 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061867897 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071526559 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059890175 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062725262 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075351691 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061647574 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065182393 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073179335 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066288867 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062726756 seconds)
  done (took 6.107445068 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067346772 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093415934 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074039967 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074277583 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069218992 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069372932 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069063692 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069545672 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069153265 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072675993 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069671024 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10391711 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065978417 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07091201 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069502329 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069122579 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069260302 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069422843 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069232265 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069159153 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069323974 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074440682 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069551174 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074032538 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071692398 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065985285 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069404409 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.06934175 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074471113 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.06950136 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071887 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069446109 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.06943867 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074303891 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072055667 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069348145 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059873187 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069072641 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069392558 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069103497 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065897978 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074463364 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069307893 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065841817 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069221969 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069320079 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.0748118 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071821405 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070811038 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072616453 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069494924 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074363188 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06930661 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069275559 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074503538 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076885372 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07450162 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074475896 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069704489 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075063714 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074569876 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07740804 seconds)
  done (took 5.91732052 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071822638 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065247232 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077862335 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058598327 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058583474 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06811435 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059349905 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059302785 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065773615 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065640141 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067425856 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068287963 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07009396 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067551445 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067844631 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070196888 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068311168 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068255922 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065316313 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067978973 seconds)
  done (took 2.802781965 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074041146 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077933338 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064446556 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068105001 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064107838 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06853915 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064114078 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064611494 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065120525 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064432918 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069636369 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069363521 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065090428 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069032203 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06940541 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068319838 seconds)
  done (took 2.543990924 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06240867 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066417804 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065420489 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059938158 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06164657 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059597284 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060752359 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058514588 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06166244 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073230745 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060130774 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062403809 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060415612 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059205426 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059248061 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06257806 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06197247 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059922492 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060641174 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06410805 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.06804715 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060773666 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062401199 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061164076 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061914258 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068207629 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061038818 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062161221 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059780329 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062471628 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061925328 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066172081 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061953351 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060358117 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058717709 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059790569 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06023241 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062396565 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062534123 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059976193 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058678812 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065171657 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060123471 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060378391 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061423214 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062323936 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061301757 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065533546 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059863874 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062145103 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060065142 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061605274 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060132077 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067138425 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062165174 seconds)
  done (took 4.868122837 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075582457 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06374914 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05838818 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058404544 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063565114 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064215274 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063747848 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064008658 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064547938 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05861747 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064457447 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063608869 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064545062 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063916932 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064781604 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064274271 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05851227 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064250437 seconds)
  done (took 2.617353563 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065625342 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064729813 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063202805 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060613035 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060544294 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06523002 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059091168 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060292056 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060487104 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060729872 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060872977 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060344792 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060480073 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060077026 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064738715 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060684878 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060527973 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059015247 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06073821 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058984715 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065369457 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059068759 seconds)
  done (took 2.816413321 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086074843 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082220556 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125487103 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078429939 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086396594 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070267462 seconds)
  done (took 1.995471034 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091720149 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095659757 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063634687 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063536203 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068184187 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066719663 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066518205 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066986852 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069986368 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070831886 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067422157 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070622019 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070452991 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072253687 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068836189 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0686543 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067036702 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066765736 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063791559 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074674423 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067196149 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070585772 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067577922 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067098318 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067058318 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072660569 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070849708 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070998872 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067046765 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070676567 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068838349 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067231875 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070763318 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070951875 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063853467 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070696931 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067231725 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07481029 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068921872 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072288563 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064057317 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068793661 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070533899 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070399938 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07061554 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06748864 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070505063 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067332391 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067470311 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076241773 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069467215 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072433359 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069070284 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071474765 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070983424 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076343115 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071434743 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072470119 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069043006 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07124459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072782016 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06886815 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072626505 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071280021 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069148585 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072616538 seconds)
  done (took 6.108626598 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10156444 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064114659 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066800957 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070894185 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072140158 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067675937 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067359934 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067694372 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067284819 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064889578 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102522259 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067581439 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072923424 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075280483 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067510327 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067370919 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067297016 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072428711 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064513615 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076048598 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066938934 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072156616 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072182521 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072519653 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07076887 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06902306 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067351011 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067732112 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067059478 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067286 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070682025 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067305432 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072333945 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064597071 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072424081 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06712062 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066879655 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070345797 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067254789 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068831901 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072768899 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074649483 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067166704 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067494659 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071050894 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067299527 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067347285 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064584718 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067266409 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064631156 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071340836 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070893725 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07111412 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072771603 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067252104 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067427827 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067593653 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067341655 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067347774 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068948816 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07248168 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067239932 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076472344 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067506678 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067249435 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073191802 seconds)
  done (took 6.116285247 seconds)
done (took 126.533015139 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216670278 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187748118 seconds)
  done (took 1.859283463 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072336023 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163818461 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07305657 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072940771 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.10609942 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105386818 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073809884 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069888774 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072845496 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069970642 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137073152 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073763754 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070676295 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070096808 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069983151 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070407327 seconds)
  done (took 2.84777653 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105323171 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.181926081 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.100592698 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067959693 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148975938 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074815745 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070276154 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074677005 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074277965 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068200081 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104887541 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081489622 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073693 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074688538 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069682996 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073127514 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074195446 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074266773 seconds)
  done (took 3.070557495 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100925352 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089674473 seconds)
  done (took 1.67296702 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15349662 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103053432 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14261907 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342676451 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134646729 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13682253 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.140207774 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.135138501 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108232368 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13147334 seconds)
  done (took 3.004775809 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103786391 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102998827 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.306077351 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100540129 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080681072 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075503477 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072903893 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077431808 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072818328 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073901326 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.11997003 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07317223 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070431735 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121938131 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09639669 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104142735 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069137991 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076309102 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077648403 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068611964 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073857842 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07756462 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176570856 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076092292 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097780933 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07310945 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075123646 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071986505 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072025863 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075866425 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076711872 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097421605 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076275673 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080137117 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074305938 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09458509 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069297891 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.096537678 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071943418 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07011221 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072761973 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076397353 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069892288 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076091769 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072851758 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075247367 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077965075 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069089983 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072860546 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072117294 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07043766 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074296554 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074008154 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075058676 seconds)
  done (took 6.141972089 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105122618 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10577902 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067937336 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11043215 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102871886 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06813755 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101959409 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098001656 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10578025 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067229124 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066879823 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067255616 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074327326 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076772847 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11442425 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105936319 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069337064 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067587024 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105195301 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104769514 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066688992 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.098669139 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098042778 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104270849 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066824688 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068156894 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066255809 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066746054 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071625112 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073121038 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067062929 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073499645 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078691201 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072912668 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066318392 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066454366 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066635792 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073198668 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074076368 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074229286 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072463148 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066098995 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066671212 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067216048 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067481852 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066122136 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072396173 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073404442 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072371433 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066339366 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067203849 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06613886 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066741198 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07307601 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072311684 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074054285 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073785832 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066393775 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066351289 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068062301 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074534043 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074368407 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073803494 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067480706 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074716214 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066625542 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075283611 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078546401 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066644823 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066910711 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066565872 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066325587 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067394495 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072447175 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072548012 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067267368 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066465407 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066371972 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07488141 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072549808 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066845711 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072019805 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066142168 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066599435 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067183307 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067014788 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071777328 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.073581383 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067248346 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066258365 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066728602 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066305677 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065876124 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071953045 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073214829 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073731985 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072899454 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066870032 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072971496 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072761555 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066869467 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071871345 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066124417 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066590416 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0665137 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071579516 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070757325 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073723286 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065874336 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06540915 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071360718 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073813013 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065633361 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070896937 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07350056 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.209835187 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067429597 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076442029 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068290577 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074796934 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067421278 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075417803 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067510525 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072742583 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066804253 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06611461 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06690044 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072612841 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067112899 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066665607 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066827328 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066872904 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072760121 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075797681 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067237578 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072665645 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072857353 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067156258 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072433671 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066663015 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073763431 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066730016 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067269761 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066610306 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075452243 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066558916 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066414854 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066456499 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074185989 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066416441 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075030693 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072085052 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06637966 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076178489 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074640255 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072403064 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07476708 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067170682 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066647318 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066469598 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069293587 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071730752 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073260399 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066971947 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066588364 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071912501 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075175823 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066094414 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072212074 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072596425 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072733085 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067032912 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066826431 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076062845 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075360358 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073229522 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.073017797 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073645864 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067225338 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072589189 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072694734 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066688933 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078152214 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066407996 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077001084 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073042315 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071917507 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07326989 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074501452 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074990809 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075335362 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077034785 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066358612 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066532706 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072589785 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067142381 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066628246 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072878379 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067202463 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067043227 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077569252 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067047304 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075161277 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066201907 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073717486 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066143432 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067311306 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077480746 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066846766 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067007971 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072520019 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066765096 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072770585 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074994097 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072542223 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066408793 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066900622 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073258165 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073838245 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066949351 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066126494 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067062716 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071589803 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071362925 seconds)
  done (took 17.84111822 seconds)
done (took 37.934688388 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166073039 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11263406 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206762109 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.195362193 seconds)
  done (took 2.262515373 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098032636 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063126909 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.078523426 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087732593 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063263648 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073310523 seconds)
  done (took 1.991052099 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.197725836 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173037998 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240497169 seconds)
  done (took 2.130540582 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364633698 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14590746 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212441119 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.498437744 seconds)
  done (took 2.842997788 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107573189 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097291635 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075231893 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.1093496 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082597575 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060507775 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130993189 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06721858 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097426051 seconds)
  done (took 2.412630852 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.136425626 seconds)
done (took 13.319780701 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.250882891 seconds)
    (2/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091277276 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.180955194 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.12540867 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234745277 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.090209405 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.117499538 seconds)
    (8/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.274204569 seconds)
    (9/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.41734015 seconds)
    (10/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.176071793 seconds)
    (11/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.104642339 seconds)
    (12/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.225200425 seconds)
    (13/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.072305437 seconds)
    (14/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.179656749 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074388581 seconds)
    (16/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.245503732 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064185288 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.0719073 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075742312 seconds)
    (20/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.143109522 seconds)
    (21/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.238759302 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076253204 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121025436 seconds)
    (24/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087921431 seconds)
    (25/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068062109 seconds)
    (26/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.124279486 seconds)
    (27/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074115566 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072066473 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093600629 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.151155235 seconds)
    (31/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.177868633 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.08144513 seconds)
    (33/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.179052093 seconds)
    (34/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.137074847 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073945967 seconds)
    (36/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.145995287 seconds)
    (37/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.193063724 seconds)
    (38/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068946129 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074919722 seconds)
    (40/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077300634 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.071171686 seconds)
    (42/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.180052728 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088054122 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.082543282 seconds)
    (45/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071413543 seconds)
    (46/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.092274418 seconds)
    (47/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.195808471 seconds)
    (48/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072181603 seconds)
    (49/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.175106357 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.07701334 seconds)
    (51/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062172043 seconds)
    (52/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.215037217 seconds)
    (53/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.144398667 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.238847982 seconds)
    (55/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.142755788 seconds)
    (56/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.070423021 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.230107305 seconds)
    (58/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.066896973 seconds)
    (59/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.141566455 seconds)
    (60/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066934985 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080102165 seconds)
    (62/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064375031 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.066164378 seconds)
    (64/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090206389 seconds)
    (65/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074476601 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064427235 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12126398 seconds)
    (68/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.154715302 seconds)
    (69/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07385036 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065505428 seconds)
    (71/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.195329782 seconds)
    (72/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063361023 seconds)
    (73/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.080405472 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.081501638 seconds)
    (75/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075716603 seconds)
    (76/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.166965171 seconds)
    (77/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064182777 seconds)
    (78/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070400803 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071226505 seconds)
    (80/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.062687671 seconds)
    (81/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.104275839 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.062652476 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070571804 seconds)
    (84/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.062670687 seconds)
    (85/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.065030251 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.230134166 seconds)
    (87/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.216150315 seconds)
    (88/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.177712729 seconds)
    (89/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.064710943 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.063721348 seconds)
    (91/341) benchmarking ("sort", Float32, false)...
    done (took 0.132424877 seconds)
    (92/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.132503608 seconds)
    (93/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.192881217 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.157979749 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.062202161 seconds)
    (96/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.065916944 seconds)
    (97/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.193896226 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090462663 seconds)
    (99/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.079183025 seconds)
    (100/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.157663166 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.129469118 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078490443 seconds)
    (103/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.073421804 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.17545229 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.191931913 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.1477392 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08220002 seconds)
    (108/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.062514346 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.165339867 seconds)
    (110/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.062388011 seconds)
    (111/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.065672812 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.069816004 seconds)
    (113/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.140305824 seconds)
    (114/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.069957682 seconds)
    (115/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.062052694 seconds)
    (116/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.061489151 seconds)
    (117/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07080104 seconds)
    (118/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.155424859 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.146700044 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.085872721 seconds)
    (121/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.134359116 seconds)
    (122/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.069532648 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068604535 seconds)
    (124/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.136843228 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078359449 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.065215879 seconds)
    (127/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.073632511 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.062693195 seconds)
    (129/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.072016262 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.062460367 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.187667006 seconds)
    (132/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.074445927 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.140590039 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.156206109 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.142873714 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.070884329 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.107897415 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.077612355 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087674583 seconds)
    (140/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.069789261 seconds)
    (141/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.062276021 seconds)
    (142/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.062177075 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.070311408 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076660287 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078318131 seconds)
    (146/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06101368 seconds)
    (147/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.063448703 seconds)
    (148/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.066037557 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077135685 seconds)
    (150/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.073412474 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.135203269 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.084409459 seconds)
    (153/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.078804377 seconds)
    (154/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.07819755 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062183599 seconds)
    (156/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.070309467 seconds)
    (157/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.062556344 seconds)
    (158/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.072759149 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.068843777 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.071162869 seconds)
    (161/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.062244788 seconds)
    (162/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.089362935 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 0.063690386 seconds)
    (164/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.062439828 seconds)
    (165/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.068591914 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.126536122 seconds)
    (167/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.066101736 seconds)
    (168/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.061788797 seconds)
    (169/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.059911792 seconds)
    (170/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.078927496 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.149827247 seconds)
    (172/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.077993011 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.064047292 seconds)
    (174/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.062128274 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.077060122 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.062624831 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.061437433 seconds)
    (178/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.062222119 seconds)
    (179/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.062054193 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.07771926 seconds)
    (181/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.153698707 seconds)
    (182/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.070403538 seconds)
    (183/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.061753295 seconds)
    (184/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.062081434 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.072449454 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.070391594 seconds)
    (187/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.061781985 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.163506496 seconds)
    (189/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.064220971 seconds)
    (190/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.169486454 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.060170313 seconds)
    (192/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.062832978 seconds)
    (193/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.065861548 seconds)
    (194/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.062297522 seconds)
    (195/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.069088858 seconds)
    (196/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.061932508 seconds)
    (197/341) benchmarking ("sort", Float64, false)...
    done (took 0.415973675 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.235083546 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067064403 seconds)
    (200/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.0694985 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06698901 seconds)
    (202/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.066939831 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.174111186 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.1520385 seconds)
    (205/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.148666842 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.185531311 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066964123 seconds)
    (208/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.06725778 seconds)
    (209/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06714476 seconds)
    (210/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.073790156 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.130065528 seconds)
    (212/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075213688 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152805094 seconds)
    (214/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.192836581 seconds)
    (215/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065641741 seconds)
    (216/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071981438 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063281113 seconds)
    (218/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142174166 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143130339 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.16314475 seconds)
    (221/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073672908 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072528751 seconds)
    (223/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068381233 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071933158 seconds)
    (225/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065284623 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082036132 seconds)
    (227/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066088247 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140750806 seconds)
    (229/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064538661 seconds)
    (230/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066656829 seconds)
    (231/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068262623 seconds)
    (232/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063812492 seconds)
    (233/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151859231 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065700419 seconds)
    (235/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070933565 seconds)
    (236/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063811926 seconds)
    (237/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071283607 seconds)
    (238/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072914225 seconds)
    (239/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066003421 seconds)
    (240/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.07939085 seconds)
    (241/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062802037 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074339472 seconds)
    (243/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065308562 seconds)
    (244/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075960068 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065114857 seconds)
    (246/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.082831276 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121833439 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.07938613 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071676414 seconds)
    (250/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.197755674 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129714305 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115604155 seconds)
    (253/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06647223 seconds)
    (254/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063863729 seconds)
    (255/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068122999 seconds)
    (256/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073638199 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071489454 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067841557 seconds)
    (259/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064837678 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132106269 seconds)
    (261/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130636043 seconds)
    (262/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.066450431 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.079476514 seconds)
    (264/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064729072 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062646888 seconds)
    (266/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064946423 seconds)
    (267/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262683419 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07503401 seconds)
    (269/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06447594 seconds)
    (270/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.071415028 seconds)
    (271/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168662799 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06438418 seconds)
    (273/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064691607 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064126508 seconds)
    (275/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064258148 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064023084 seconds)
    (277/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06511463 seconds)
    (278/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063907754 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088423505 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062536045 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064251502 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083562408 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064310154 seconds)
    (284/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064984056 seconds)
    (285/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062659577 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064667909 seconds)
    (287/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.15091579 seconds)
    (288/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.218461532 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064582876 seconds)
    (290/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064279338 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.082717593 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064505706 seconds)
    (293/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065251901 seconds)
    (294/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073087024 seconds)
    (295/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064609702 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149045241 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064219833 seconds)
    (298/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078143249 seconds)
    (299/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063297357 seconds)
    (300/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065443899 seconds)
    (301/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.14189275 seconds)
    (302/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.064183528 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089688657 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065233693 seconds)
    (305/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072166461 seconds)
    (306/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.189012365 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.063689737 seconds)
    (308/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065670187 seconds)
    (309/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.067764055 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088391088 seconds)
    (311/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065391639 seconds)
    (312/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.233700392 seconds)
    (313/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070959388 seconds)
    (314/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064716136 seconds)
    (315/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066871631 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095732603 seconds)
    (317/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064774501 seconds)
    (318/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084805721 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064712998 seconds)
    (320/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066293553 seconds)
    (321/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.249614263 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068966026 seconds)
    (323/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066336329 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065625282 seconds)
    (325/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066196158 seconds)
    (326/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066679946 seconds)
    (327/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06604193 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077724275 seconds)
    (329/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066505439 seconds)
    (330/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078976402 seconds)
    (331/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068020351 seconds)
    (332/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065675879 seconds)
    (333/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.192279224 seconds)
    (334/341) benchmarking ("sort", Int8, false)...
    done (took 0.149127633 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066564917 seconds)
    (336/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072623814 seconds)
    (337/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064044537 seconds)
    (338/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06699923 seconds)
    (339/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064162436 seconds)
    (340/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064211502 seconds)
    (341/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089890004 seconds)
  done (took 36.089366267 seconds)
done (took 37.630730653 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089806532 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078531434 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076823605 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073627404 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077553931 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075824825 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076892103 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075321486 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076454588 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075930756 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075475228 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063418252 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072239913 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079332877 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073036319 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079788713 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076451277 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.079378107 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064735461 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078369164 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091346814 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076069655 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072736143 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078057807 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064263664 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073783349 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087804908 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085535626 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071028953 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073353504 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071345907 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082367367 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072137073 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070457253 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074107905 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070149329 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073569411 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070972134 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.087693094 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070023368 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064308519 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07646896 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071202775 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071945313 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072290877 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076307441 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069870425 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07806829 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064368916 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075944926 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.087378523 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068939775 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070894161 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073289714 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069769259 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073705973 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070838536 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075800359 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069893503 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075677836 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075367903 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073335593 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064101781 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07287766 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071482032 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071374148 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063040293 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069035917 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063770632 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063809494 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063083859 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072621584 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070736212 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069183005 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063410561 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063857296 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063320323 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076145391 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070094932 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073562534 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064370255 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069543015 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068857654 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064450361 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069086653 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075347813 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06286711 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064684932 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063023726 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078639074 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070720081 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064183134 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075583638 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069179657 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068795085 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063814773 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06324789 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068873164 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072102274 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064082826 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062705135 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068850347 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068868426 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.072810785 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064271328 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068855109 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069390215 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062760082 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073032836 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070982903 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.072980105 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077272096 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072985684 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076031053 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064225159 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062963246 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07382463 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064181996 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069370081 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072025408 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068845562 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071797112 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064039631 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062958728 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068495691 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070528218 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064172486 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063937271 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064119361 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07315877 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070795531 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062685326 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064219328 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072641264 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072546245 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062839333 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.0627621 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073161217 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064427828 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069562182 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069732122 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072692657 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063191588 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064489965 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063490611 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063430405 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063199545 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069008802 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068903379 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064420778 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07315222 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.217137749 seconds)
done (took 12.648100049 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065697224 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106344698 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.078349459 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080193147 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077213303 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06560116 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068497104 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083173962 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068175598 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088933105 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092590607 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086205858 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09516624 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063534562 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064704918 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065305305 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062981305 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076349157 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081350531 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087943661 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.100282978 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064608667 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080280916 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083862058 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078605364 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082776249 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065972471 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065725556 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067344851 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083165248 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090454381 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064878291 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065775999 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082467941 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079901548 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072856305 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065424867 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070543891 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067972949 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06464771 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066805345 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082177467 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071153524 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07154491 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066004247 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065940556 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064728739 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071662867 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08221018 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070492922 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076709836 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083680674 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066443141 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065509117 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063880161 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072000221 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065285261 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065486642 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065214117 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065146443 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064967893 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067099734 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070284312 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070869747 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068204569 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071186602 seconds)
  done (took 6.538290172 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08084556 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09055823 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07924116 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079364884 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064309708 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064715316 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065266507 seconds)
  done (took 2.241624514 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065624275 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072815703 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.077082458 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077228503 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08702659 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.074646312 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065598344 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096977987 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063906279 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073496983 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080501737 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07833828 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068335059 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077367452 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065227643 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.077278764 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06556603 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071990722 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07265397 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078541901 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069176369 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09473871 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07863078 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066018712 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.078887754 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.072692412 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067221934 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065918923 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065692439 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064841084 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064685327 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08715632 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07157393 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077566038 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065816348 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064025825 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.069637572 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065810335 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.069030894 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073862161 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.068554428 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064947856 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.065145972 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065124349 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065754098 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069592309 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066135317 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064618431 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064554568 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072262016 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064305427 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.071498396 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.066834774 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07001892 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070003908 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069288117 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071930608 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065501451 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072205131 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.071512824 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065651888 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077410261 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076794568 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.068261333 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076575985 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073360173 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071413273 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.068513141 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064520784 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064549337 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065049048 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076236935 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067979273 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06690556 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066024815 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069871815 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.06851653 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079985126 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079983171 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078077776 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066872504 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064526808 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068595858 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.080642062 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069322231 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064600182 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065876329 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064143966 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069569982 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064606257 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069799945 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064594774 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.071464544 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067291886 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066748001 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073037767 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064629304 seconds)
  done (took 8.564329928 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067431345 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066965005 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065874284 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065819429 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066158147 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065520145 seconds)
  done (took 2.150979336 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088020347 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06509015 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076557368 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065201646 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08731882 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07185862 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071882498 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067569493 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081381866 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075708198 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071794285 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073815532 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074233533 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066772325 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071382423 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066105396 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072331723 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06831543 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07527069 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068036218 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081912053 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066930615 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067726474 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.077347075 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068347992 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066658761 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066472493 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.075297088 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.075256665 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066768001 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067060979 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067941092 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073477241 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066901043 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07138841 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07396821 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064909925 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07042157 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06747843 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068202089 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073493407 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067062926 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067317932 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070764422 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066882882 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073526385 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070774321 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068624147 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.071230577 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070449622 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070351314 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065376048 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067773625 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070644434 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073558272 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066844223 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070442477 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071272194 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.066893296 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073402809 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065347306 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067956378 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066666969 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067621521 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069901395 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070386293 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073538862 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066947126 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06727666 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065315746 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.0708857 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065067414 seconds)
  done (took 6.789850899 seconds)
done (took 27.985238541 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.536135233 seconds)
  done (took 2.233662268 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.608567301 seconds)
  done (took 2.344874384 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.146935361 seconds)
  done (took 9.884421929 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.332274865 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.400026586 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736075769 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.1311595 seconds)
  done (took 3.375237818 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.744115913 seconds)
  done (took 2.49258152 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227170274 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218060901 seconds)
  done (took 2.196939051 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.332781267 seconds)
  done (took 2.071859985 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.14488475 seconds)
  done (took 2.881444402 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228733932 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160131126 seconds)
  done (took 2.137100562 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.535053594 seconds)
  done (took 2.278504467 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.264533936 seconds)
  done (took 6.014111686 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229130299 seconds)
  done (took 2.015575649 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226099142 seconds)
  done (took 1.977008926 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.00586246 seconds)
  done (took 3.749606003 seconds)
done (took 47.399193763 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082166702 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084127317 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084253649 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079314303 seconds)
  done (took 2.051030391 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071858793 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068111296 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071357908 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071548015 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069556178 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070308782 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070915368 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067627363 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069492863 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068017998 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066616731 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067933416 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070716775 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068173872 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070979254 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071814741 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067971283 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068123712 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070655192 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067849872 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07110306 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068558888 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066365851 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067983824 seconds)
  done (took 3.409303392 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076245784 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069996935 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073030098 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069194598 seconds)
  done (took 2.042371719 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074022428 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074232512 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083125759 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088324237 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073797303 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075016924 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081615957 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08204807 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063453495 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084628449 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065973217 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064816285 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06478372 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083548092 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081094115 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060474696 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061818866 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075196237 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074189358 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077335129 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066626429 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063849413 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074023135 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075403007 seconds)
  done (took 3.523938901 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080170553 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.0632692 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079008596 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089310653 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089755839 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063304939 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076832065 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09058603 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125570728 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063842627 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069708992 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063574479 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102748587 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06325564 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078519397 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106754615 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109872177 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067724008 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097037277 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063867075 seconds)
  done (took 3.407311843 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073743268 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067593037 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.06826532 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063332905 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074739271 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07108368 seconds)
  done (took 2.185687106 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066403972 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065937735 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067945134 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070241922 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065946741 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065563184 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064928068 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064031852 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063986818 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064739613 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064875501 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065302924 seconds)
  done (took 2.549106765 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.150763067 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066838788 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067965935 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06399662 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068885923 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06449459 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079271563 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066494064 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082260806 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064858643 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064672425 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067113128 seconds)
  done (took 2.667354637 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102404465 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109100367 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14280341 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114786038 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114650553 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095420573 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123845567 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093418162 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157385358 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134604277 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115136658 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092006819 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084756439 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.06733731 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097566449 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116316391 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134936897 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07078904 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11151638 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.162995677 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129658562 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.132696643 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146021078 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115047847 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088238261 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145996474 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095077303 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10041888 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122672636 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124378016 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117627741 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095861056 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069772761 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068821703 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147087699 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100297947 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118395851 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090957967 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10270999 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086374045 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106080732 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067339853 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085253609 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111207517 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082813215 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129139564 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085863617 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113371913 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07910912 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136024823 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122334086 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097139676 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083607902 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102989601 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.28944684 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109901953 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131664263 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106064778 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080603377 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116891179 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10024184 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098355324 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105517071 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078068656 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.17409756 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086916427 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109359898 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110092651 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092347556 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093224224 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104921853 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133096902 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123082035 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.123656992 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135937205 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093417006 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120187121 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.097716009 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126877066 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103095761 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071099107 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.119438493 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126850891 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097287444 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099303824 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128269454 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089996456 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075447582 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097359589 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116364138 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078394151 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.110099209 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078795017 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106918985 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13150626 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095292867 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109722428 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114838417 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076028685 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15309877 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106538418 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070823109 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.115089449 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113074452 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156276153 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09323736 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074078224 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097407011 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.257158866 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14618326 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105936144 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078743639 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108571094 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138009158 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093383019 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166328085 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093816537 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137785799 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110990585 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085453562 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073327353 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087920885 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110320287 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105639817 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110783684 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088246812 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081826594 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085198337 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10978226 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090033904 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078711305 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111217505 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.100015407 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073029937 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087194279 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077584537 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140143559 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076046112 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135911637 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123115214 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076417249 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104341648 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095709721 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106034081 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095884556 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115144339 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138786843 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114434231 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088102335 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09178598 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107042635 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14199498 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125027214 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090820815 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074354037 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098007838 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109608571 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095600981 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124161248 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098313603 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107390743 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101304075 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140232309 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144329314 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099359854 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098195998 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104695844 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280688064 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074765418 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152918194 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102094365 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115867725 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082573645 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138235632 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.112480134 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087403363 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085509372 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098457331 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101889409 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103766927 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140831122 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.093568914 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070340679 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090397579 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141938569 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074447916 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108132906 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088551613 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090569165 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116209737 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091358915 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079177407 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066313395 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12635306 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156743756 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068163737 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111843268 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109234167 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100866563 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.119196104 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067428847 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117424387 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136602449 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116445554 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138875198 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145002031 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114910834 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116783318 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.112056866 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103410945 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077630372 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123147289 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.132476036 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094490933 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090749989 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133934495 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115973408 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134593121 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115620139 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112130603 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101473592 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.263613616 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101233312 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099589384 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141499453 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118387263 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121748617 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083788106 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104058994 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116274756 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132848371 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080247102 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139860203 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.081464305 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116881247 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075343123 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121135072 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07735566 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10908182 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077206896 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09771804 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067515739 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072324543 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138549045 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109481739 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103626757 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09830116 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135864036 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135095018 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078916483 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10586044 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113944157 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099341429 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114835743 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10759194 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087422119 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093830935 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107263633 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083411911 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080225066 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113068919 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093028639 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124796437 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081949243 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073412442 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139177059 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103058791 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09358744 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076311392 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106551162 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119019717 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091132563 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085867157 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113258806 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102696843 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13999368 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088667839 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096230653 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122489822 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078385044 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089594579 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067220111 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08255707 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.232183738 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125446774 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074650554 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114008201 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.06686647 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127253713 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084720977 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090422032 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100252343 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109995806 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124742337 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092288713 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137604694 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087823398 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115755984 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105117921 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092334602 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086056537 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100864309 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098446703 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11963593 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09348716 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120157182 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141471688 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102795805 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139162691 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089695511 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119785752 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104531978 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123109075 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11034485 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145578262 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135792971 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110088267 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109681228 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072865442 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092734236 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103372603 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109724549 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172570678 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123820144 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070093236 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104821526 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092641831 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106711266 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10316772 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080678826 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145038673 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100388055 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086207534 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111958454 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090039582 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102296637 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073904776 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093057575 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.255116343 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092652928 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096090385 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11300168 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125376792 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111024008 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140931491 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.096778073 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090700664 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.11623864 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107991329 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108076813 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083815037 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084221848 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135634634 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115873631 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126058476 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097495635 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107361429 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109027611 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098541246 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122803714 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105635088 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124067575 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078633621 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074089513 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06685314 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070128056 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120902611 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106517634 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109735076 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096464149 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070281601 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101297692 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103880219 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069886605 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086705006 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09207001 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09800054 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089201276 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104848459 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112245285 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089358112 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102169049 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097229342 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144881734 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098459805 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086560366 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141761929 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148517067 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086360018 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091412286 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069672402 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076731097 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111565971 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147484231 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150546068 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075910448 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084357277 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083152379 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084172633 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.227850665 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084036886 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.08735243 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102812111 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09700863 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110358757 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102048077 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073678963 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100766192 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096813446 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089942884 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101928115 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115849831 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122366894 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.138239529 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109420488 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105063461 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074634682 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.078779248 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073628782 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077236191 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099645486 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076930248 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074588597 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140717245 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089697825 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102125222 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10688794 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08652168 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073980894 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132092401 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067550873 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132622347 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069394931 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080647383 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080417844 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077222777 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091812426 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137836287 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108008452 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111965993 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104530679 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103234146 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139051944 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154020816 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078143368 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141559388 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073935363 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073638053 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07415625 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111719762 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088263583 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112963892 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139095608 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089159715 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101736227 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075664497 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141986919 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097107649 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102107888 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085007792 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076863648 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.299955069 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07770199 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078369846 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088462228 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109267353 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070295616 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101465267 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082660354 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077668398 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139982125 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628071323 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088178373 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07368433 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093178881 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138994068 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125337236 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093256424 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106090497 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116131008 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097553341 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093144768 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105260993 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181290226 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071884887 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092316017 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101440508 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09616637 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100472077 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096889752 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08304821 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09052521 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085134146 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07786107 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10610557 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08786707 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094880289 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105453007 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080868612 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085158202 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128471005 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101843447 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080473084 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086852635 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10383395 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087122535 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099698347 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067402313 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112368343 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0889316 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115513324 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092296386 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105472893 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125635324 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08811152 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136428371 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105710345 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120896791 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085385942 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076397035 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124372784 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.086159021 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076019 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.304588248 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092886257 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.090875138 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101843579 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094029318 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111209786 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115191621 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109240786 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095431892 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076897222 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09825581 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100877984 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083313197 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076184284 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072260727 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074310145 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105025396 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083727486 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081689472 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112647399 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086430216 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100812617 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097905553 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120233196 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081363511 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09893929 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107737101 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090106388 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107817782 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099161888 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126326056 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172399135 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123861425 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127189738 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131981775 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074670112 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073680725 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066614932 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113103127 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077263244 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087074122 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079015053 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131916155 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080184031 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109779354 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.227926761 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078314676 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092219578 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094618329 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068011894 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081051111 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105764006 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084897891 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078292911 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117430048 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082000727 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12628186 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109321535 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098331631 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092923486 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07906577 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112496782 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103052942 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.125880708 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092016876 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.234217351 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112361395 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101360335 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135536648 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.0712057 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079232747 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126942946 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102082313 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130359592 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078303922 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147207829 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141216493 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098107996 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13169767 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069236058 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081578891 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086993861 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123487724 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082653685 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109200422 seconds)
  done (took 66.780765104 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151528626 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139275501 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080052553 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10192204 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.184909367 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195263106 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117365753 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094220439 seconds)
  done (took 2.981379928 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06600494 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080633052 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078478518 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202915284 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093933521 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06544289 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070717669 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079210865 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06543127 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064509295 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.09962395 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065326696 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065584554 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366316723 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064597485 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.06994094 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065709648 seconds)
  done (took 3.56083034 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330229008 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.414760545 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.227094022 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.613722644 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.13510531 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485245775 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074376233 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.080434092 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.563698861 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.365875129 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.13111542 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086109707 seconds)
  done (took 18.412920376 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.074013671 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076452241 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.075736804 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072707345 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072761841 seconds)
  done (took 2.271254029 seconds)
done (took 117.612861103 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.080957745 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.168842723 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066204415 seconds)
  done (took 2.172672503 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079569489 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078522364 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.07838126 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.075846785 seconds)
  done (took 2.223626536 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072447426 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074373491 seconds)
  done (took 2.049353457 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.218828747 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174093017 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087944915 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08004612 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077399554 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077629933 seconds)
  done (took 2.150691494 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069216306 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069593724 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069414863 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07024807 seconds)
  done (took 2.180609402 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.06599616 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064503992 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066646345 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069168555 seconds)
  done (took 2.170257095 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082566663 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083971418 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113916021 seconds)
  done (took 2.184507167 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.080481331 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081164181 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075458203 seconds)
  done (took 2.145588278 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106190981 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094421466 seconds)
  done (took 2.109633845 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077472537 seconds)
  done (took 1.990979312 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087177832 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095636123 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137237376 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105403162 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.138039766 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124245284 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074955223 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076089676 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071987513 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070725958 seconds)
  done (took 2.892224913 seconds)
done (took 26.736007345 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076279611 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372024586 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357756523 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084580866 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.703921954 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354726887 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.014538433 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088677679 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.09893795 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066175563 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082764754 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647753265 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.006203904 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.323606512 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.990445773 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322414699 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649274233 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066744846 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065599676 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06622172 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.998760898 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065380371 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066161974 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066720125 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648889473 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372940377 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067428907 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.322834771 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06550005 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069820451 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355027404 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.066944369 seconds)
  done (took 16.486708177 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067500304 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120128846 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070830144 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082022898 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067983632 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067781584 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069362776 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066708581 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110081237 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066411607 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08393404 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065843754 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069900628 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067583694 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085865899 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066063204 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068488517 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069999355 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066208963 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066983361 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084688299 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06574514 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066780297 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066879958 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06636157 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079343885 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067657258 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06617166 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066540921 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070186071 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070788887 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067409846 seconds)
  done (took 4.262499114 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118584075 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123408693 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071156353 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106382166 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115504325 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068128874 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148774226 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08917735 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11307416 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066409295 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08373837 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066073629 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.1016267 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067593288 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086510682 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066194731 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068976172 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066802181 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066203897 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066566299 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085076263 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066199034 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066927645 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067202557 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066954496 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081015147 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067563379 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066246735 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065988644 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070627153 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071553175 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067418879 seconds)
  done (took 4.53165772 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067159222 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.068741473 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077594872 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078244688 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064810071 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066367381 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067842187 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064545424 seconds)
  done (took 2.482364575 seconds)
done (took 29.688050111 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076904188 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065772747 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06847755 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.08480859 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071349945 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.067738194 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062384974 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072106441 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069402982 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069426968 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070975751 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065290521 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06809078 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062608032 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069737839 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063428904 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.069630059 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068021946 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068443851 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.06958727 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066338823 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069216172 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072227006 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068694293 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068669856 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.068385092 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073317843 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069623439 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064291456 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067231755 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.066137198 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078587336 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.069981773 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070284034 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063745137 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064008507 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068348736 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066136635 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070556008 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.072779536 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066128263 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073506587 seconds)
  done (took 4.791825787 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086228956 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091723255 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084212417 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079788608 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10503637 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079595072 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088696042 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077243037 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075074187 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088539364 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071641038 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076672211 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078303978 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073583666 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076446963 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072356697 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077267544 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07136958 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076342284 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075949498 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089033491 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068887925 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.077031482 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07706844 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071660913 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077093528 seconds)
  done (took 4.003018081 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070585323 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086311476 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090181649 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138212472 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106852617 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080429946 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.079822971 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.095217969 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098530512 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065989908 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070160021 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091741321 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094370378 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072572281 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104065664 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.083967264 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078360535 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067663704 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072513643 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.099897248 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088246935 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084718626 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098529065 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086160901 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065167179 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075708965 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07316246 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08182135 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073887302 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078476516 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.069991289 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069580199 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066714137 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078594763 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072940124 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063900282 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087749436 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079482665 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081586936 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103859524 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075968624 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067106023 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096587458 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13167793 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065664003 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.06874536 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069891012 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078674692 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067333302 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.0961026 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084289872 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065630636 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084744426 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.066869962 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067131264 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082808132 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067267581 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.067839425 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.077664784 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.112596317 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086541191 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071168524 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086634775 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.065485396 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077082087 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067066402 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067102382 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.064560482 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101536041 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073005771 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117600635 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066374889 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063615405 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078101631 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.076959282 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072237569 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065393197 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08492343 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077610175 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069699057 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077771943 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068353862 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.06887431 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101099968 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064630486 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063498484 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063694906 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067940782 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069498673 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066261463 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.07908836 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065064039 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068892752 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081021474 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065375642 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066089525 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068550795 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.0669003 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06522339 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076233733 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070209831 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067301158 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078617544 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067056987 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069492526 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080308989 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075264047 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065274628 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066876692 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067728135 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067325934 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070131563 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.068653621 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067580068 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072582395 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072960292 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071624924 seconds)
  done (took 11.006277546 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160055025 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.15093475 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066839765 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145374433 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07375182 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070108435 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147379458 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085486111 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066305375 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067259876 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06555386 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094535866 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089874066 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101424995 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070518621 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066684894 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092225483 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099441935 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150028639 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144126529 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089741952 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07415245 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068431828 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067545786 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067598256 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075293272 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08251344 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.074461953 seconds)
  done (took 4.580737216 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07331539 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08154287 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070341082 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089750342 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084027673 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066481863 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068108215 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.06785229 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083110273 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072928685 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066187249 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070949661 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070048297 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066708151 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067065385 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072639128 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072895047 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065246383 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069784329 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07083411 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076979438 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091902749 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070834465 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066505617 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.06914369 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066262606 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073259394 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076050999 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066102958 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096906233 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063071159 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070346886 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080546111 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067626091 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065878793 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067210455 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066398544 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.065937888 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066597249 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.063952146 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.063913834 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071461399 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06484569 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071744305 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080017471 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073773482 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067408158 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07167266 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069085537 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063246427 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069571802 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069231425 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.068937885 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074483852 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069721281 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.068655535 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067738806 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096363131 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07222036 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065445033 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06569172 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.064019822 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067782566 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.0741882 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082973293 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.06786741 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064617946 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066128556 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071134266 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080440185 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065282487 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071507027 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06323126 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066421645 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068360819 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069073931 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067495534 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064794512 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065959519 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.066368151 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066837174 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065988425 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066115675 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068679919 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064122135 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06427123 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06653498 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067516228 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072095355 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065090316 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.068945342 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067382337 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.064915337 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.06865957 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071846276 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.068803848 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085851824 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074526274 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06667821 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064215404 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080462128 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06809998 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065057588 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071747686 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070531271 seconds)
  done (took 9.366136958 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088464828 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06764261 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085731715 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092126386 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076162303 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071330923 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.079869997 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.06689589 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082697517 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065236532 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075389576 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064366217 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079909419 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075016179 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067933718 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076646881 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069200181 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086715817 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.0813237 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064687793 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07536959 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078483066 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079012603 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084201089 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083852883 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084662021 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078383561 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068517361 seconds)
  done (took 4.131152088 seconds)
done (took 39.798138006 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.998039842 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.169717131 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.998172579 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.256643974 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.25754062 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.026322105 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.202053882 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.996092414 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.150293902 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.026682888 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.327824757 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.388792964 seconds)
done (took 69.796659806 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.059429038 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.145936031 seconds)
    (2/2) benchmarking "String"...
    done (took 2.225074148 seconds)
  done (took 6.292343426 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.607148088 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.012279504 seconds)
    (3/3) benchmarking "different"...
    done (took 2.062257839 seconds)
  done (took 8.613514942 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.094708051 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.649662211 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.265480284 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.011252277 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.017393829 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.424406093 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.814570963 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.488313988 seconds)
  done (took 33.605610261 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.350380275 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.273636098 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.75710643 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.794747343 seconds)
  done (took 17.16004028 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.617378702 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.274436134 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.274492323 seconds)
    (4/4) benchmarking "different"...
    done (took 2.266936114 seconds)
  done (took 11.428892766 seconds)
done (took 89.290616708 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.999761579 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.333446277 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.012551148 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.155544598 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.038193725 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.030239822 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.008158411 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.042376067 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.001713204 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.002534561 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.417152224 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.003908941 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.009959563 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.040303367 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.000840701 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.037500288 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.3964978 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.015344077 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.013101954 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.669451171 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.50715224 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.013796475 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.009232813 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.051042207 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.104319206 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.038362719 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.53796441 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.003268001 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.617435895 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.016240033 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.004372637 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.0011127 seconds)
  done (took 212.067171046 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.013745156 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.918284255 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.930492112 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.026815691 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.483661409 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.206671181 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.158440336 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.529914001 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.018321444 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.021450844 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.112457731 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.015076521 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.130205299 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.036028037 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.000313048 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.115067915 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.219712668 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.135390304 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.004287787 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.203004479 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.0423312 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.933337391 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.908236017 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.088751961 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.042210252 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.098123186 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.899319215 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.886590429 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.066835099 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.05701479 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.883217121 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.918047888 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.000040576 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.747196987 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.897846705 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.894759857 seconds)
  done (took 176.579043935 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.029773558 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.897972996 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.936567361 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.07455221 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.590570847 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.561404136 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.879501085 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.879884381 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.880195934 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.887157378 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.870349114 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.94715553 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.634730934 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.892081147 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.86901258 seconds)
    (15/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.878734613 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.881320774 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.879964332 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.550420709 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.870448776 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.880862062 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.881162267 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.94338193 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.252301486 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.003971483 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.881641719 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.877304717 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.003323658 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.88952315 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.881182799 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.879550709 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.002973799 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.881845984 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.956894996 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.005173017 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.875495035 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.962410807 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.888428454 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.342742515 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.884228752 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.882159401 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.883621941 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.939447489 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.88240165 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.941353556 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.970936908 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.880977064 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.893964635 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.077951158 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.555481351 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.884889265 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.881749817 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.881069393 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.882264922 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.883412925 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.786758315 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.882300381 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.909621317 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.404694292 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.884908974 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.881959557 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.871675879 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.882216028 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.883424583 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.888268398 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.907835927 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.589377597 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.490473021 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.258726964 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.609148931 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.884165744 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.884838963 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.927858458 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.871519704 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.959309332 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.882940516 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.883090465 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.882826369 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.881417137 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.950741914 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.019992735 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.891614919 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.010879481 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.888352105 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.885180479 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.904980058 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.588855756 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.890453691 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.89678262 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.928740119 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.886936036 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.886762459 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.89323046 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.886826792 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.972191961 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.889920724 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.885082883 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.885493163 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.920845071 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.88829378 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.921951191 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.111335278 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.960745823 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.134488096 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.054437879 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.875842948 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.886289312 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.900783233 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.888259961 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.886374745 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.88294766 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.886666415 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.885863477 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.875854644 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.88780206 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.886228733 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.8752491 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.900310607 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.888271855 seconds)
  done (took 421.950452157 seconds)
done (took 814.61217518 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.517240541 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.590746505 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.488400744 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.524052945 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.496180709 seconds)
  done (took 14.428128558 seconds)
done (took 16.240617582 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.920401645 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.902974814 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.892364859 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.955517553 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.914371017 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.899614809 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.935101272 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.922791421 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.918857509 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.899759862 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.950289123 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.903626167 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.924570363 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.922362599 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.975522011 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.928634756 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.903498879 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.897585019 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.956025599 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.904227765 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.904810912 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.901339201 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.901834229 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.952259857 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.985393303 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.91196639 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.900241235 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.949750046 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.911311334 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.947129575 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.960434402 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.923567736 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.935376224 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.975811144 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.964362895 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.9812421 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.910699534 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.969377944 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.907781997 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.999219619 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.957473766 seconds)
  done (took 80.992608693 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.887347822 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.019696974 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.096687262 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.917783028 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.887202852 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.096532201 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.94259868 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.011497927 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.013872088 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.09917227 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.107076691 seconds)
  done (took 23.897618855 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.88648023 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.021515882 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.097807907 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.921324443 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.888643635 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.096558352 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.949049103 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.02613158 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.023092893 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.105837068 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.11113711 seconds)
  done (took 23.949705916 seconds)
done (took 130.652888147 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.251419102 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.907372955 seconds)
  done (took 5.974637168 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.880697771 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.902044194 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.041786602 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.879297655 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.881425465 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.882646839 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.88195906 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.882303245 seconds)
  done (took 17.048106493 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.892546816 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.858458632 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.892356663 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.892333494 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.893244152 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.893768031 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.892561031 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.893848894 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.893368468 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.892109361 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.893286019 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.893415919 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.893083186 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.888858256 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.870940302 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.882405214 seconds)
  done (took 32.033240482 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.893868703 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.893982754 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.891120951 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.892750399 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.892823851 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.892999936 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.895289023 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.893583531 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.892868002 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.893418222 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.893798565 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.89373618 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.892893183 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.893846146 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.893925877 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.893014892 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.894152394 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.894375112 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.895220904 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.893970569 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.893782122 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.894689895 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.899818904 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.894692446 seconds)
  done (took 47.272249134 seconds)
done (took 104.150918516 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.066298487 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.390567106 seconds)
  done (took 8.274320469 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.8982454 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.895026367 seconds)
  done (took 5.669030404 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.895629018 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.895073938 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.894651789 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.895237288 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.894892612 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.894706278 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.894478102 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.895305894 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.895542474 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.895007104 seconds)
  done (took 20.768527037 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.895375009 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.895620281 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.895900187 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.895875702 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.896241676 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.895599025 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.896303503 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.895750038 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.897045256 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.895483091 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.895789329 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.895893863 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.894889791 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.895121429 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.896443814 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.896691514 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.896086823 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.896180879 seconds)
  done (took 35.94496959 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.896375283 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.896906806 seconds)
  done (took 5.612591911 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.896627943 seconds)
    (2/7) benchmarking "second"...
    done (took 1.896489814 seconds)
    (3/7) benchmarking "month"...
    done (took 1.89654386 seconds)
    (4/7) benchmarking "year"...
    done (took 1.896552112 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.896352313 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.896312414 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.897052468 seconds)
  done (took 15.095424537 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.896553555 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.032695939 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.081639526 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.49631461 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.897486695 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.899395646 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.77188654 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.899417224 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.9007835 seconds)
  done (took 20.695507602 seconds)
done (took 113.878644869 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.707253937 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.882571732 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.140618173 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.937541074 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.889335109 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.175671407 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.884324839 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.430932115 seconds)
done (took 42.867790165 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.987660399 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.882565596 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.913319051 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.913959962 seconds)
  done (took 22.528140951 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.881342767 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.164517449 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.906232867 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.862953225 seconds)
  done (took 22.657580909 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.272528755 seconds)
    (2/2) benchmarking "read"...
    done (took 2.239852756 seconds)
  done (took 6.335627899 seconds)
done (took 60.329325785 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.896619788 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.89608586 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.896884922 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.896023205 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.89626715 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.897379093 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.896866757 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.897099969 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.896714486 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.896714629 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.89597019 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.896350632 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.897612708 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.89678376 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.896846157 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.897334493 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.896450128 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.896997767 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.896901788 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.896927089 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.897695532 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.897194048 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.897286281 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.897073448 seconds)
  done (took 47.343902486 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.897389951 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.897348113 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.897873046 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.898009117 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.89879744 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.897957738 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.898737659 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.898355587 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.899034315 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.898323058 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.897832596 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.898060584 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.898232045 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.897777007 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.898880914 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.899413358 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.898962784 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.898129594 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.898965482 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.899072451 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.898897204 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.897834222 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.899127317 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.89815419 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.898446772 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.899001664 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.89819342 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.89911108 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.897905084 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.898851776 seconds)
  done (took 58.774515072 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.89895753 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.899608783 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.8996931 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.899202844 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.899107003 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.899922017 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.89849233 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.899299622 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.899246546 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.899186862 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.899376695 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.899910279 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.900201778 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.899767068 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.898885311 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.900781444 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.900752323 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.89964924 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.899491788 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.899973787 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.899164789 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.899290553 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.900290911 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.900356885 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.90064065 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.901116164 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.900273324 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.901006755 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.900740626 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.900570752 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.900070078 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.899977057 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.901331733 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.901363762 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.90035275 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.900351327 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.901070798 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.900126622 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.900738149 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.901889778 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.901250506 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.900571767 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.90090181 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.901617154 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.901443147 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.9009694 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.901035759 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.901111813 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.901967672 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.901555591 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.902126591 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.901557836 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.901437097 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.901464896 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.901740285 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.901708849 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.90220915 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.901353188 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.902163194 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.902229058 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.902062778 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.901765739 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.902529253 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.902385468 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.903016211 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.902546455 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.902847835 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.902041428 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.903480698 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.905499096 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.90202322 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.90267662 seconds)
  done (took 138.688942755 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.902468007 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.902012095 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.902761994 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.902600547 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.902296191 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.901699005 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.902742315 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.903373289 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903273455 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.903422435 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.873511035 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.890331595 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.902412064 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.902048645 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903327218 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.903428356 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.90385283 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.903656169 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.90341223 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.903304923 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.903364008 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.903808979 seconds)
  done (took 43.648778393 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.903791215 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.903994275 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.90331136 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.903552937 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.903607576 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.904672122 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.904408565 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.903109544 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.903772808 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.904192152 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.904479322 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.904747106 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.903718833 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.903870292 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.903864001 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.905128185 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.903694534 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.904403722 seconds)
  done (took 36.098760895 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.903967254 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.904213097 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.904344769 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.904842289 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.904252227 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.905240415 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.904334089 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.904669218 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.905622354 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.904049904 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.904123773 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.904023359 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.90485695 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.905827862 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.905215505 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.905711183 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.904947757 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.904988735 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.905256703 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.905036504 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.894548336 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.882388837 seconds)
  done (took 43.699397977 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.905691138 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.906108141 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.906085883 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.906144983 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.905446296 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.905922043 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.906411878 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.905927197 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.906197948 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.905853913 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.905641462 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.906445877 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.905217321 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.906128682 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.906565244 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.906002933 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.906910947 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.906343344 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.906461046 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.906963787 seconds)
  done (took 39.950585587 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.895256336 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.895597359 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.894868368 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.894938363 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.89440004 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.894699876 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.89467656 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.895442037 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.895083751 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.895035963 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.895402374 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.89500585 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.895835094 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.895135031 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.89526595 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.895146618 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.896102998 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.895704587 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.895131387 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.895758523 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.896057819 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.895972157 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.896504556 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.896148126 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.896363682 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.896438433 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.897169354 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.896153259 seconds)
  done (took 54.904443091 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.907266156 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.908341877 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.90718506 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.909105714 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.907829741 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.907328339 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.907445472 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.908798802 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.907735375 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.908485991 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.909367091 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.908434907 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.90798298 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.90831425 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.908709417 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.908487018 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.908106738 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.908090306 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908860335 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.908069406 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.908662792 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908563475 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.909188798 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.908684346 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908027392 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.908758595 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.908712663 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.909586708 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.908831705 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.908649523 seconds)
  done (took 59.08196351 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.926978714 seconds)
    (2/2) benchmarking "in"...
    done (took 1.927859625 seconds)
  done (took 5.686443456 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.909229063 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.909669752 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.909139308 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.910061833 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.910293853 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.909381459 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.908414225 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.909573835 seconds)
  done (took 17.107045389 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.91020435 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.900976054 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.910470722 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.910408811 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.898920211 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.905301953 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.911608511 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.899163573 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.90042198 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.911744066 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.9036581 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.903171781 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.907665371 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.902916106 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.910719543 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.91152957 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.900533277 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.900176612 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.900440497 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.91061874 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.90210814 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.899452165 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.911588656 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.898941248 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.911287025 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.901800913 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.908517698 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.900633279 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.900817683 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.910898685 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.905603486 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.911787553 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.899442723 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.900816934 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.900086356 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.911996877 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.906022207 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.900393686 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.900567214 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.886690523 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.89386503 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.883127781 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.890875687 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.907446291 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.888137553 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.911479529 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.91228845 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.900057275 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.912783012 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.902144249 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.890172909 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.900876502 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.912765209 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.912594659 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.902653369 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.887371494 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.901442437 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.903905606 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.90772231 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.907199772 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.905049714 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.921847718 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.910227132 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.901579642 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.901349285 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.911060963 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.925488814 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.902499193 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.903483482 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.913583355 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.908179435 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.91329189 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.914104166 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.913648295 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.913719261 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.910203813 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.902424118 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.914052147 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.913535431 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.90246885 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.904285466 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.902790812 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.90261504 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.901438976 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.912259595 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.927073625 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.902410984 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.902712534 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.903897345 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.915181438 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.908193859 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.905006081 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.91489667 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.91457944 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.904252398 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.917121304 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.90368076 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.903261177 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.914333716 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.911221396 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.915086403 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.914980204 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.907807826 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.91123922 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.914293791 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.903322326 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.903971764 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.904108339 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.910440273 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.902982216 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.904465002 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.915036824 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.917683011 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.908442839 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.915804296 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.907739207 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.912190822 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.910861918 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.91783559 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.908480355 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.907150467 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.906548347 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.914105053 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.929082345 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.915321995 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.908135053 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.909561153 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.916634691 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.908151426 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.915563723 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.906653551 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.916782869 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.916397169 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.906750659 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.916422275 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.90469554 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.916318257 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.905016873 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.917158121 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.905986462 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.91922068 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.906667563 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.907057135 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.905812459 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.910090559 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.905840797 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.907250487 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.912059243 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.917878836 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.904993562 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.916601118 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.907480639 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.919517484 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.905946724 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.917048531 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.917163505 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.905575104 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.91879163 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.907481709 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.90590711 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.917905783 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.919603392 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.92213642 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.906138035 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.905846475 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.918038129 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.905883117 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.907000031 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.907349996 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.907084573 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.908683261 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.906470765 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.91103081 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.91759962 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.918201445 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.906537232 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.918639851 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.917521095 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.910362906 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.917636628 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.911889809 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.916284286 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.918972185 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.913766753 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.91899767 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.909273751 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.908195908 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.907554192 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.908053763 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.919784679 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.920135816 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.911399143 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.928430889 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.918018986 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.909680047 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.921466545 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.924880196 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.924272496 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.913705645 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.919607554 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.908846743 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.910081863 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.908437679 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.908710151 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.920909193 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.912332385 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.921251978 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.919832321 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.912270342 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.909439262 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.919934954 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.908950975 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.920284672 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.911144105 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.919757925 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.920164763 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.920930138 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.923678787 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.916254324 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.911197544 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.92014676 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.909266855 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.911329427 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.909600123 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.920728369 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.911166403 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.912760703 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.92019895 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.909942928 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.916426521 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.922573042 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.92124708 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.921163421 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.921608585 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.911922541 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.921084874 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.913981117 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.929956937 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.912058904 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.922103946 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.915256983 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.922443946 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.912470417 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.910456134 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.910227658 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.91039729 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.911706867 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.911034657 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.921962318 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.916855238 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.922153292 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.910800236 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.921950139 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.91961287 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.91581146 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.912122506 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.898932601 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.913991012 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.919133308 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.880928532 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.923204605 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.92139071 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.912654921 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.924120457 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.9269737 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.912418675 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.923988168 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.921166466 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.923233391 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.922706156 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.911120483 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.914371341 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.923487372 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.912045562 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.918636474 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.92442912 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.924211569 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.927985716 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.911599549 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.914617745 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.917577987 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.913137207 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.914398324 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.912878124 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.913362112 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.912794766 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.92279677 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.914414834 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.91291273 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.914657444 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.927899973 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.92462358 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.913303629 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.924430674 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.920363985 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.924710699 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.913938495 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.919572429 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.914513443 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.925236039 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.913528745 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.924482881 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.913294682 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.914137181 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.925290318 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.926531856 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.913181023 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.916690442 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.924559589 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.916671171 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.921993572 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.916088491 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923681622 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.913320742 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.925379182 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.913711769 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.91796103 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.921807316 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.9249576 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.924689445 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.921152591 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.9261019 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.926262769 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.918608794 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.9256198 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.914639503 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.914510686 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.927821185 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.920440015 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.917371403 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.925670825 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.914008955 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.926367116 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.925530209 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.917136335 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.916089106 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.915400224 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.926993158 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.927658096 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.914679785 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.915382889 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.915218334 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.91471861 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.926169763 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.926297465 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.921521696 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.915454079 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.928279678 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.919942111 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.927054638 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.924307741 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.916263793 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.915788267 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.928194966 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.927576035 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.929943863 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.927534603 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.915917438 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.928321611 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.927452212 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.929106545 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.927717673 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.922786829 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.930595966 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.917230323 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.915852327 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.917706696 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.925719773 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.952285774 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.916760226 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.919133378 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.932246944 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.922596944 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.918741965 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.922374836 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.919988032 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.92409104 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.91797489 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.927637467 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.920329901 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.929344565 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.917439074 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.928645923 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.927939156 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.920951918 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.930729966 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.928987365 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.930532488 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.920239166 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.930892935 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.927967309 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.928655196 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.930623069 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.917876054 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.928160458 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.91772075 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.929607486 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.919586416 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.919025161 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.917893943 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.918122696 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.919791046 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.922379948 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.928778754 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.921559814 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.927816978 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.918028847 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.917985089 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.931443993 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.918443673 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.920561235 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.918566769 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.929479719 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.93267357 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.929905648 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.931323385 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.922271077 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.927761129 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.920236517 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.930032207 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.929800645 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.922484038 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.93113886 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.918695741 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.920135032 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.927463639 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.922361396 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.930701879 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.928693827 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.91917733 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.932746625 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.926756718 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.928180058 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.919338064 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.931135537 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.920652051 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.921720247 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.921577514 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.920510588 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.91962215 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.932500108 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.925921585 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.932047795 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.932301759 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.920008961 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.931529553 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.9215421 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.922109256 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.925134152 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.932346173 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.931790689 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.93164854 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.920859682 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.922096453 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.922812043 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.920274923 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.932104284 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.922255394 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.922713332 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.936533613 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.932126239 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.931814363 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.922889159 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.93330906 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.932086844 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.933186802 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.932678356 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.932631796 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.925437158 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.941678934 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.932568816 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.922503335 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.933959694 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.925964688 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.92204673 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.92314485 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.920943007 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.933492654 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.928403662 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.933287185 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.921743342 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.933353783 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.934041864 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.927184867 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.923788188 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.9260979 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.922086378 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.934533604 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.93278745 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.92631248 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.942467538 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.92675936 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.926041382 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.941907512 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.926484638 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.924116593 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.934762995 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.933311728 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.934607009 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.935511397 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.926193229 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.924765753 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.925289633 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.923671466 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.924398717 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.922719694 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.924526633 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.934066014 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.934528478 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.927160272 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.931949298 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.931223947 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.935399425 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.925635414 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.923048195 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.927909755 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.947734491 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.923589017 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923734742 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.923665199 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.924987656 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.93720832 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.931656459 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.943790566 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.927539701 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.923492013 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.929998433 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.941643979 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.926476062 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.934047275 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.954575162 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.936986164 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.924298617 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.924644394 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.937627404 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.924517974 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.939089675 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.907669997 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.915885498 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.924344788 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.936592318 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.931535007 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.936674717 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.936089542 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.925318779 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.938088905 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.930726154 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.92451783 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.931706553 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.925423186 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.93664891 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.937067932 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.939296314 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.936161268 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.936762619 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.93762653 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.927015458 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.937609714 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.925536372 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.933966537 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.925693482 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.927275722 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.938082608 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.948898511 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.925743333 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.937747321 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.92589369 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.93030832 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.928605183 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.937262772 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.929913432 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.946038605 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.929650706 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.946207885 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.928072353 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.92667246 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.927481729 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.937643918 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.926344492 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.939291347 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.937071448 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.939240495 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.939359285 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.933929804 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.938540414 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.93245205 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.933382361 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.929563722 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.928132003 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.927123218 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.939031107 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.938315984 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.938921193 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.930494106 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.935178215 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.927059509 seconds)
  done (took 1145.746942583 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.938786661 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.93897961 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.938440438 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.938623306 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.938191755 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.938537166 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.939467721 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.938817782 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.938921276 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.939418784 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.939255467 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.93980044 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.939474304 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.939751805 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.939416643 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.939094258 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.939961335 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.940300539 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.9390155 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.939550661 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.939486575 seconds)
  done (took 42.583690414 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.938946926 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.94011604 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.939371878 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.940348226 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.939526664 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.940220458 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.927933854 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.939672029 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.940023989 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.940240785 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.939466467 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.939444403 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.929870354 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.939630373 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.940447608 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.940853228 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.940581022 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.940796125 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.021372868 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.074826214 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.074111921 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.074650174 seconds)
  done (took 45.004290686 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.063231869 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.060762105 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.061010499 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.074056254 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.073000479 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.063556381 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.074061457 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.076686565 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.075364497 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.077314543 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.069318282 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.084478332 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.074207047 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.077905612 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.076117355 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.06147662 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.21960942 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.060820466 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.060926119 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.075712758 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.062311966 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.06812913 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.07553037 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.075850051 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.075631355 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.062816644 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.074687174 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.075991031 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.075793118 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.079071697 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.065794971 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.074677067 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.061771973 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.063883503 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.076686116 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.074778234 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.065006803 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.05947627 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.075754287 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.071888649 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.070243257 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.096882368 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.073336603 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.062777367 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.063568119 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.06970461 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.06960056 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.059847739 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.077432494 seconds)
  done (took 103.6118325 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.06473494 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.065547475 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.065372468 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.067835149 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.066613444 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.065115101 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.064913396 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.065594077 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.068292547 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.064824345 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.064688536 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.064774003 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.064815459 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.067343985 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.064245056 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.064150666 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.064573531 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.065191995 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.064866855 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.065084765 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.065276769 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.064345245 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.065644923 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.063945411 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.063642016 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.065392659 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.064583431 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.065030434 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.063912768 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.063893338 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.06426041 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.065034333 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.065934636 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.063981824 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.064460562 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.06498679 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.064645906 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.065459171 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.063806136 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.062901487 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.063621058 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.063433459 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.066705596 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.061505459 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.062462594 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.061191214 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.062031283 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.063447079 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.060608086 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.061666136 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.061555673 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.063285162 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.059963832 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.060983456 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.060830086 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.06011255 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.063693421 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.061015052 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.060549666 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.062378893 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.061645371 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.061641497 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.061958541 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.0614564 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.057831216 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.033884874 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.063274456 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.061015632 seconds)
  done (took 142.287600137 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.023281402 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.047846304 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047580109 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.048184584 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.04769465 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.048110326 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047218398 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.047891688 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.048681535 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.048407008 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.048231822 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.061750815 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.036744046 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.062513589 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.049218437 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.048615679 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.049114026 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.026705201 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.047624013 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.049688046 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.049853433 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.049101919 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.048857935 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.049425502 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.049656502 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.048749879 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.052043405 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.04994412 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.048955406 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.050378121 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.04990922 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.05283454 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.049465014 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.050143329 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.038532634 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.049789552 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.053795797 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.04892042 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.049654458 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.04995817 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.050717691 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.052691941 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.049660888 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.049496395 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.049977866 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.049532817 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.055269723 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.051516459 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.064326408 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.051309974 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.04974886 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.053165802 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.050347086 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.050154348 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.050451968 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.064095436 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.052574208 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.050488097 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.051048908 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.05099982 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.053290819 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.064122911 seconds)
  done (took 129.062791824 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064247609 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.063438378 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.068742045 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.057217083 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.056702446 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.056978933 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.056107859 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.058508841 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.0554868 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.056130752 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.055905574 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.057101702 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.057658429 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.054347321 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.054959033 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055907582 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.054422001 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.057514632 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.054723703 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.052825997 seconds)
  done (took 43.129954618 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.053051356 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.055372051 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.052365738 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.052378732 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.053445919 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.053550117 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.054718548 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.051830384 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.052832231 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051836678 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.052249257 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.052341296 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050931111 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.050531131 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.052367045 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.051727028 seconds)
  done (took 34.812359269 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.051082375 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.050650091 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.037598114 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.039659015 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.050138039 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.049963261 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.050135713 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.050475928 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.051595219 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.048850474 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.049012663 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.048690649 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.048654149 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.03806626 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.048170618 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.048297163 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.048422302 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.048629658 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.0484805 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034618264 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.048196519 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.047361293 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.048070091 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.049673951 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.047783812 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.045706001 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.048383199 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.04776087 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.050173416 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.047227824 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.046791375 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.046608495 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.046893647 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.04720924 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.033484521 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.046871047 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.047449232 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.047199186 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.047530406 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.045742926 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.045789534 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.04588772 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.046359374 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.046056512 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.044146679 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.045276295 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.045870182 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.047558561 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.044524601 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.044271448 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.044752719 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.031993805 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.048444525 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.04367404 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.04463169 seconds)
  done (took 114.514974524 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.044592151 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.046507741 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.043078812 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.042517554 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.043335805 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.043371412 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.045005922 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.04336967 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043641199 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.042832066 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.044011425 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.045941322 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.043608316 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.043288059 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.043489216 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043766235 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.047313481 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.043551169 seconds)
  done (took 38.753593678 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.044466157 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.044951071 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.045611666 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.044312058 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.043863863 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.044078077 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.043761026 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.044987186 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043470514 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.043033506 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042971802 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.043125121 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.046134369 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.044004489 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.043748208 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.043287247 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.044613906 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.044021777 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.042967721 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.043973793 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.043547741 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.047518866 seconds)
  done (took 46.933924257 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.04401368 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.044422599 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.057779904 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.065646042 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.063954583 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.076723064 seconds)
  done (took 14.312328203 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043420466 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046859796 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047340279 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043879639 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0439234 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043996628 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046131434 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043729747 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044312949 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045024279 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044118929 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047361278 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043703131 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043597548 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043776475 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043494306 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047040025 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043719841 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043018139 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043643348 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04346422 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044485958 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043063347 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043716363 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043730316 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043618217 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044091401 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043752434 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04286475 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043117597 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042736124 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045984012 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043973483 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044304485 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043817808 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045341374 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043616478 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04309363 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043344281 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042987313 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.045041452 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04325168 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043117932 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043261076 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042229085 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043183806 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042271055 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04234297 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041961181 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042179142 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044023527 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041535715 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041767825 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042078744 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042405881 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044279292 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042936606 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043272249 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043096105 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042118662 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044804403 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043013188 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042256919 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042383953 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042454005 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044208203 seconds)
  done (took 136.844919115 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042386578 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.042460319 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042837556 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044591974 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043590493 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043511889 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042693414 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042755382 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04532372 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041776295 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042351075 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042775779 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041471801 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044724199 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041711573 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042577156 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042446622 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043795662 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042436623 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042313705 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042037363 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042748439 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044110437 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042531151 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042976976 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042544091 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04216125 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044933979 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04339613 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042986016 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044012093 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04274786 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045256595 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.042148525 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043073316 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043144054 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042982173 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043956848 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043222123 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042769586 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04270695 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043573277 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045114658 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043278675 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043238343 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043700227 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043667527 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046559589 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04308391 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042701872 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042880947 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042692186 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045270323 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043815286 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043189187 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043776187 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04318286 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046608475 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04340899 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043188453 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043635688 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043500052 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044589475 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043108119 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041978749 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042920099 seconds)
  done (took 136.818914091 seconds)
done (took 2721.229719975 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.065599787 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.084514589 seconds)
  done (took 16.109431478 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.195751805 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.074057783 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.221607218 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.149753203 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.034286017 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.065952139 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.034550688 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.034489488 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.126549796 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.033647658 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.040330946 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.034736212 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.03476677 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.036445086 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.034649608 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.035427639 seconds)
  done (took 55.160429347 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.037204986 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.03973717 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.03564987 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.037146305 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.046323301 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.11803947 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.05717942 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.039044475 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.049902437 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.070631456 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.053233755 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.040797806 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.043709182 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.041125328 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.126754479 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.080787801 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.094098873 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.110890513 seconds)
  done (took 39.086168404 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.115446932 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.049776596 seconds)
  done (took 11.136135333 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.073495388 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.054166212 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.053841386 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.067105286 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.069313353 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.079528625 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.087653669 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.085964387 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.061048862 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.058929663 seconds)
  done (took 72.659042796 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.039679464 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.042063872 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.288198333 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.047998106 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.04454968 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.060847122 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.052521286 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.068048534 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.054211061 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.036384183 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.047775789 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.261771233 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.048094401 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.039816358 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.454806206 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.050893524 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.044177406 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.068182828 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.071025296 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.042108921 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.045046105 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.040892966 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.198387342 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.719825247 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.038406272 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.044005766 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.045514475 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.049166768 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.049183598 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.038614195 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.041780802 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.03724881 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.043049216 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.037862277 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.045341953 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.035836017 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.536402928 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.056283788 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.045762874 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.128087054 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.08073819 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.044092659 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.866837793 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.041635693 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.050335968 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.044672692 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.714452344 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.105381087 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.052720853 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.198106626 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.368511309 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.044692158 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.204966557 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.196809181 seconds)
  done (took 142.120710679 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.051590734 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.285002244 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.20403771 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049747964 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.307471479 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.258826251 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.052540076 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.096875834 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.052404684 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.253481953 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.300990276 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.153435818 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.053256434 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.05034841 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.050712179 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.050016745 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.200177921 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.117503141 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.05395795 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.051390045 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075737158 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.250488344 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.169269303 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.052610326 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.076865508 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.256821012 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.173174029 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.152448964 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.854929411 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.051165437 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.112524685 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.056076062 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.054915179 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.05070398 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.205052947 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.143813712 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.137809882 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.054181823 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.052178011 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.052044303 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.726864501 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.226243214 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.145598008 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.175541213 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.296032998 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.239786108 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.654932159 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.052221004 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.681134279 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.214798487 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.256729913 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.258311563 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.172193106 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.054159884 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.608070709 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.051811763 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051574846 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.274513082 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268772265 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.150241139 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058003584 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.053302463 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.052998642 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291062297 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.056986251 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.142709561 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.057990535 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.052232397 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.144716406 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.153159513 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.278204256 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.271834154 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.082693399 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.390844391 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.540430558 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.255190464 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.11723323 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273132969 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.057387842 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.053022227 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.131304798 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.896792001 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305911543 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.295177723 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.250138837 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082311177 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.702643189 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.053073893 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.240509889 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.243283202 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.286345042 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.292792566 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.289861929 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.423689078 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.053757397 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.053239377 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.389482836 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.169785128 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.000792426 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.405444885 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.281615627 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.589352554 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.079689566 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.380809254 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181393666 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.057088772 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.701436488 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.054232177 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.259405928 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093018078 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.056772878 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055079301 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.244968544 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.961060855 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.055817954 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.747228857 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.116356332 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.056908031 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258668674 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.056839572 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.29911468 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.057953691 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.287035392 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.675190223 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.085701846 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.281123891 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.294404158 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.686130201 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.34780036 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.295813565 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.167694313 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.276905658 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.868673464 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.057231657 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.316740803 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.057946814 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.05593422 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.224820903 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.059599009 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.198256092 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.059986 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.321208243 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.076419499 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.285504329 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05898061 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.294109204 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.0875668 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106104107 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.058980107 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.184319928 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.05923083 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.009334539 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.215075997 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060687177 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.056133729 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.893548107 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.056522804 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.211151817 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.281424157 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.077571934 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.125240545 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.619993886 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.049737245 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.137763907 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.078373247 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.343440688 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.058987157 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.305485966 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.032269814 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.529982063 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.057489181 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.289398315 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.670500952 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.061508128 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.058984092 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.899950425 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.057439052 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.056958979 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.213312912 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.487984516 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.958930377 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259423645 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.059771084 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184332835 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.060948979 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.140340547 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.401717497 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.057078033 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.05687103 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.057575121 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.05789078 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.058430941 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.318358763 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.085283177 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.490542468 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.194184838 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.314464236 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.365689232 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.254151224 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.097632853 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.059783667 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.281123872 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.061673278 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.122315969 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.060770874 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.078455392 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.288681412 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.063038037 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.264539105 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291774914 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.948326658 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.10560074 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.061479195 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05932323 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.049308956 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.203280139 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.145742648 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.062285783 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.059317565 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.173114576 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178889006 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239443367 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.873199136 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.216096917 seconds)
  done (took 943.102346584 seconds)
done (took 1281.337545913 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.060761266 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.065005058 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.063296919 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.048253282 seconds)
  done (took 30.214641456 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.062523096 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.062681448 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.04786939 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.049672332 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.06231985 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.049808921 seconds)
  done (took 14.312241459 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.061911663 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.063394642 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.06521108 seconds)
  done (took 23.167659026 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.474055845 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.453049673 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.120353098 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.18760972 seconds)
  done (took 11.212587406 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.053294412 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.04885059 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.049148456 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.049207097 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.048193293 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.048645765 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.050225808 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.047968011 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.051024796 seconds)
  done (took 20.431112674 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.521927807 seconds)
done (took 105.838377712 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.463429648 seconds)
    (2/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.077138491 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 3.667404667 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.063239754 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.212722306 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.526058384 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.071858254 seconds)
    (8/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.068160815 seconds)
    (9/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.192182765 seconds)
    (10/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.080941214 seconds)
    (11/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.101188415 seconds)
    (12/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.614797062 seconds)
    (13/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.151540117 seconds)
    (14/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.33031682 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.090329536 seconds)
    (16/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.332414271 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.461692991 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.145605528 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.087811692 seconds)
    (20/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.134109427 seconds)
    (21/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.371445777 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.072270314 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.190372194 seconds)
    (24/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.987964741 seconds)
    (25/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.220811454 seconds)
    (26/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.072928182 seconds)
    (27/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.237794477 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.090149446 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.072768727 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.106055427 seconds)
    (31/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.215665994 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.165262825 seconds)
    (33/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.334312842 seconds)
    (34/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.211458245 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.757996551 seconds)
    (36/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.539277572 seconds)
    (37/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.456598592 seconds)
    (38/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.220531489 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.298318148 seconds)
    (40/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.081264971 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.157507215 seconds)
    (42/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.342254847 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.089725569 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.067022573 seconds)
    (45/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.290877918 seconds)
    (46/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.722613901 seconds)
    (47/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.466018547 seconds)
    (48/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.176236921 seconds)
    (49/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.059556926 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.538624928 seconds)
    (51/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.152532153 seconds)
    (52/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.259423959 seconds)
    (53/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.284449048 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.929114901 seconds)
    (55/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.138869103 seconds)
    (56/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.209880082 seconds)
    (57/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.396365274 seconds)
    (58/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.303686254 seconds)
    (59/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.321763822 seconds)
    (60/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140414672 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.293532505 seconds)
    (62/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.470469285 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.137613147 seconds)
    (64/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.087792609 seconds)
    (65/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.078292298 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.075207451 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 8.679903806 seconds)
    (68/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.304139012 seconds)
    (69/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.277947002 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.77830465 seconds)
    (71/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.286823586 seconds)
    (72/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.167105387 seconds)
    (73/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.337655636 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.965863139 seconds)
    (75/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.084751795 seconds)
    (76/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.618021131 seconds)
    (77/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.485520018 seconds)
    (78/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.373731255 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.091738539 seconds)
    (80/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.274902813 seconds)
    (81/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.870710737 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.421910683 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.092127442 seconds)
    (84/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.242157986 seconds)
    (85/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.781439568 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.039966752 seconds)
    (87/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.166450583 seconds)
    (88/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.258559061 seconds)
    (89/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.968429303 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.069444115 seconds)
    (91/341) benchmarking ("sort", Float32, false)...
    done (took 7.374290595 seconds)
    (92/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.145457582 seconds)
    (93/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.375567755 seconds)
    (94/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.189415762 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.180393924 seconds)
    (96/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.141568513 seconds)
    (97/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.83674696 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.789570059 seconds)
    (99/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.454269159 seconds)
    (100/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.345721497 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.19060152 seconds)
    (102/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.887861484 seconds)
    (103/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.085392842 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.306527459 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.25715457 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.080294204 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.173343341 seconds)
    (108/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.06747901 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.152121705 seconds)
    (110/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.170066748 seconds)
    (111/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.170263253 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.093076604 seconds)
    (113/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.544461827 seconds)
    (114/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.091039692 seconds)
    (115/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.777350618 seconds)
    (116/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.326829535 seconds)
    (117/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.094827705 seconds)
    (118/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.260303205 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.089527737 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.953079677 seconds)
    (121/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.523603669 seconds)
    (122/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.101614266 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.151622298 seconds)
    (124/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.26614468 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.393094773 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.339189702 seconds)
    (127/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.227334935 seconds)
    (128/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.451636622 seconds)
    (129/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.200646484 seconds)
    (130/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.151721863 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.285984811 seconds)
    (132/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.082319464 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.150294893 seconds)
    (134/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.211138596 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.105713316 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.094599179 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.184595055 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.397303035 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.007952885 seconds)
    (140/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.104582517 seconds)
    (141/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.079638695 seconds)
    (142/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.259635187 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.179699831 seconds)
    (144/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.680702425 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.345136452 seconds)
    (146/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.157296194 seconds)
    (147/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.979483722 seconds)
    (148/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.200076398 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.323666906 seconds)
    (150/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.846592556 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.311728365 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.514816351 seconds)
    (153/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.26856499 seconds)
    (154/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.207483718 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.389366646 seconds)
    (156/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.872207087 seconds)
    (157/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.189957016 seconds)
    (158/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.743988968 seconds)
    (159/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.109062472 seconds)
    (160/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.095547709 seconds)
    (161/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.271213338 seconds)
    (162/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.106323873 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 5.701391158 seconds)
    (164/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.878161203 seconds)
    (165/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.448279547 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.181954905 seconds)
    (167/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.194658203 seconds)
    (168/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.501170088 seconds)
    (169/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.163593659 seconds)
    (170/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.302603556 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.955866781 seconds)
    (172/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.551499303 seconds)
    (173/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.970243786 seconds)
    (174/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.401324063 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.429816148 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.118547763 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.295689145 seconds)
    (178/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.06970637 seconds)
    (179/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.534350314 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.201464086 seconds)
    (181/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.235744775 seconds)
    (182/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.197844577 seconds)
    (183/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.198713294 seconds)
    (184/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.278045424 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.805429228 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.242878572 seconds)
    (187/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.778395142 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.037673708 seconds)
    (189/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.8458195 seconds)
    (190/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.093315692 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.238941066 seconds)
    (192/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.347970407 seconds)
    (193/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.218614317 seconds)
    (194/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.416577827 seconds)
    (195/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.104542421 seconds)
    (196/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.215579432 seconds)
    (197/341) benchmarking ("sort", Float64, false)...
    done (took 5.817745031 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.475412366 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.381623601 seconds)
    (200/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.16672309 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.482465339 seconds)
    (202/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.085587927 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.567314084 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.084438594 seconds)
    (205/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.343350197 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.085762904 seconds)
    (207/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.437929034 seconds)
    (208/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.442024331 seconds)
    (209/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.285796735 seconds)
    (210/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.166414382 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.943118126 seconds)
    (212/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.00760283 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.191992274 seconds)
    (214/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.14755476 seconds)
    (215/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.387922714 seconds)
    (216/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.104589166 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.098149343 seconds)
    (218/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.336602018 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.205169565 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.262436691 seconds)
    (221/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.105276943 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.227003872 seconds)
    (223/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.453207826 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.099436488 seconds)
    (225/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.858654855 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.98056272 seconds)
    (227/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.074535723 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.207240955 seconds)
    (229/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.285557452 seconds)
    (230/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.367431564 seconds)
    (231/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.161092383 seconds)
    (232/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.239639693 seconds)
    (233/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.086527978 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.086221955 seconds)
    (235/341) benchmarking ("perf_sum", Int8, true)...
    done (took 3.693705034 seconds)
    (236/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.31475103 seconds)
    (237/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.098145972 seconds)
    (238/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.094057138 seconds)
    (239/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.066720424 seconds)
    (240/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.935975151 seconds)
    (241/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.231619072 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.392611112 seconds)
    (243/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.482916859 seconds)
    (244/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.747071943 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.166173716 seconds)
    (246/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.279096172 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.945028953 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.524112718 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.105331953 seconds)
    (250/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.489353443 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.197078642 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.201280861 seconds)
    (253/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.161994248 seconds)
    (254/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.22313175 seconds)
    (255/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.554920012 seconds)
    (256/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.08812345 seconds)
    (257/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.100755416 seconds)
    (258/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.150458554 seconds)
    (259/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.193481542 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.219948813 seconds)
    (261/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.084031642 seconds)
    (262/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.173405885 seconds)
    (263/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.430090496 seconds)
    (264/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.182581314 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.170783461 seconds)
    (266/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.963627403 seconds)
    (267/341) benchmarking ("sort", BigInt, false)...
    done (took 7.186302632 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.090528269 seconds)
    (269/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.503649732 seconds)
    (270/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.495959516 seconds)
    (271/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.070977455 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.40342939 seconds)
    (273/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.206299096 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.495515246 seconds)
    (275/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.334839056 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.3920107 seconds)
    (277/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.36772145 seconds)
    (278/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.211171887 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.987123771 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.093113352 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.47997358 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.285592986 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.38701809 seconds)
    (284/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.505151758 seconds)
    (285/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.062980108 seconds)
    (286/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.170049486 seconds)
    (287/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.98480618 seconds)
    (288/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.078129203 seconds)
    (289/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 8.70665797 seconds)
    (290/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.190806115 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.306882371 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.371533499 seconds)
    (293/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.417640399 seconds)
    (294/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.214491781 seconds)
    (295/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.203913597 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.092632618 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.4174047 seconds)
    (298/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.800106516 seconds)
    (299/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.185664481 seconds)
    (300/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.315393041 seconds)
    (301/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.166504712 seconds)
    (302/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.214447434 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.796868398 seconds)
    (304/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.03198878 seconds)
    (305/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.200701746 seconds)
    (306/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.071702825 seconds)
    (307/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 3.753540775 seconds)
    (308/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.200735982 seconds)
    (309/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.253430617 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.868012479 seconds)
    (311/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.084329676 seconds)
    (312/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 8.828837948 seconds)
    (313/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.170990451 seconds)
    (314/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.398503538 seconds)
    (315/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.157516021 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.191135979 seconds)
    (317/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.84760751 seconds)
    (318/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.098740248 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.071041688 seconds)
    (320/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.962531181 seconds)
    (321/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.629259982 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.347885724 seconds)
    (323/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.274153337 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.358475769 seconds)
    (325/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.158203469 seconds)
    (326/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.260104159 seconds)
    (327/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.34550977 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.976824724 seconds)
    (329/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.072404314 seconds)
    (330/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.091613807 seconds)
    (331/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.116393171 seconds)
    (332/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.466447716 seconds)
    (333/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.093153968 seconds)
    (334/341) benchmarking ("sort", Int8, false)...
    done (took 5.039739206 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.074235771 seconds)
    (336/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.113560184 seconds)
    (337/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.463797635 seconds)
    (338/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.275591337 seconds)
    (339/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.383410014 seconds)
    (340/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.196381 seconds)
    (341/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.049303521 seconds)
  done (took 1164.441678607 seconds)
done (took 1166.759646387 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.133173628 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.075728058 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.572063388 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.089025656 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.076098119 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.079983757 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.580991904 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.108800405 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.092740254 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.580923141 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.087609012 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.076590336 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.090892481 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.110511073 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.086644852 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.090144541 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.081672144 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.101355657 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.111673905 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.082378099 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.127239013 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.082530228 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.074562433 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.127488252 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.076577177 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.091007913 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.096436271 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.128105492 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.127744595 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.079832267 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.08303739 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.427694139 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.12732855 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.07168977 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.08735462 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.080995232 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.06786683 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.081132833 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.095651038 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.093070234 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.076216458 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.075495835 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.081568568 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.080843773 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.077385174 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.07819738 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.052045833 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.202628738 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.091485555 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.413225707 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.137616068 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.095974918 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.128556818 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.08041954 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.080279293 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.080860344 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.128604092 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.08395936 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.082737658 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.414122383 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.172449153 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.092491279 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.41196366 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.142609052 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.087856486 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.086638733 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.077624651 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.096447119 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.429272701 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.622841866 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.111888981 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.099337146 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.080108779 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.080768207 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.092468904 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.582142358 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.095851654 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.650879792 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.108660735 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.061078539 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.084920425 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.083850783 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.080622696 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.093729526 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.089100719 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.078316961 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.086169814 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.086552468 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.082953124 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.411619366 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.12382538 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.573506277 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.089607488 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.085853176 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.098492013 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.652922493 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.094503772 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.097259626 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.070715985 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.431156027 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.121618857 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.100208114 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.082121555 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.091589837 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.196447305 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.09754068 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100091053 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.079991305 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.102415555 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.087459115 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.080862899 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.094036533 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.100704413 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.115582245 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.09804933 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.079424899 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.089251013 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.086144014 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.097796988 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.091086375 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.087675432 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.092609756 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.081291877 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.133476047 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.099592798 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.096721425 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.195198306 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.088227073 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.208182272 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.096081491 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.087851011 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.080771492 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.415285361 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.126166223 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.103238181 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.088799724 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.105756904 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.103879957 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.098183831 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.084320317 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.097047238 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.084772495 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.134214885 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.081475124 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.107299798 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.133452898 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.095778143 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.088725285 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100361541 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.118336371 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.101358334 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.087205113 seconds)
done (took 327.528819194 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.121742784 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.090246104 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.173919498 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.098296965 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.166198935 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.15288382 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.098035875 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.098580962 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.098164557 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.485922461 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.099303304 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.103825037 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.098501663 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.098023979 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.14798021 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.098862646 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.098893216 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.334158096 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.085261143 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.158122018 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.09671655 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.099284942 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.099474007 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.491934796 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.097964096 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.097814095 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.159541251 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.099333888 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.339966649 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.100082383 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.10244522 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.339098752 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.159555584 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.115514568 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.106872291 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.107882305 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.167142197 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.109612199 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.14723231 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.14619065 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.176013852 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.11963373 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.100772699 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.098707717 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.102454935 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.086175688 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.100602062 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.131933173 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.100603768 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.10672792 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.334269545 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.108499098 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.106101333 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.101049971 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.100912576 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.101843319 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.100648806 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.087006932 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.161173311 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.087650619 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.146665722 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.493686747 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.486690031 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.1036842 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.100680326 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.10355223 seconds)
  done (took 198.95153909 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.167321142 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.187933199 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.170827035 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.106772858 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.153133019 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.16896944 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.107421773 seconds)
  done (took 17.07650884 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.10801915 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.100554644 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.123736992 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.123686691 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.087645003 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.239086536 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.112942916 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.105793349 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.12669725 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.089538504 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.43809547 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.123509045 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.1096872 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.100781102 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.11311467 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.130322284 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.103437658 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.088127048 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.200035552 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.178642306 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.106106914 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.108437777 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.130972971 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.113446346 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.101818306 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.089713373 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.089293735 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.108203444 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10190458 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.101692038 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102389495 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.115289027 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.101689849 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.100801098 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10199716 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.102623585 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.088668924 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10583044 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.10172117 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.101257943 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.102493496 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.102179128 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.102411165 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.102980964 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.102530852 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.125251234 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.102327005 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.103164857 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.103071094 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.103671886 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.131457351 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.103603989 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.102987375 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.108660506 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.146027644 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.110233959 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.090417796 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.102627663 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.103172787 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.104937316 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102960424 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.184787156 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.126890142 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.10403543 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.127387714 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.140564045 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.104106824 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.103208893 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.103784424 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.12845748 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.102978856 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.127659725 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.104056543 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.202948678 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.104378461 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.245246018 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.126943472 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.107814474 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.109380842 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.102655681 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.113901072 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.104233267 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.106532842 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.11059864 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.112223973 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.107536047 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.104701166 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.105736248 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.112576259 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.106433992 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.149923971 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.10437287 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.092201244 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.203187573 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.1070692 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.203338348 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.13043245 seconds)
  done (took 227.684377689 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.110859898 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.108100843 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.118422879 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.109804096 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.10709926 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.110828636 seconds)
  done (took 14.683964062 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.107391578 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.10963171 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.10528162 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.105679467 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.091922321 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.093031357 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.105828846 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.108299883 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.096906371 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.105955153 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.092881822 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.093310762 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.092591637 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.093200095 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.106052747 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.106019546 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.106041523 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.105667957 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.106835077 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.093116529 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.356048436 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.093482865 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.093415493 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.096294473 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.08495527 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.106582653 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.115910479 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.107369905 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.094877819 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.112946971 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.098433413 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.095338325 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.097005764 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.111400227 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.101776935 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.096667205 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.11187644 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.094764164 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.106151876 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.09476089 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.077640752 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.084987282 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.106995565 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.083886558 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.110668928 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.098027217 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.101499357 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.116024823 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.108052972 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.094651376 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.100042864 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.107403857 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.095592923 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.09582536 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.094643648 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108816185 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.099784591 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.108039975 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.096076975 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.084289816 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.089352387 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.09514893 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.110696082 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.112515723 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.11359152 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.097940697 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.098311926 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.099543613 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.096027081 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.110353237 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.096293543 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.108954037 seconds)
  done (took 154.51973254 seconds)
done (took 614.929114286 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.212311267 seconds)
  done (took 9.234697842 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.143924128 seconds)
  done (took 9.27377943 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.379788714 seconds)
  done (took 12.405028943 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.142436975 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.190063331 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.101162944 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.107030416 seconds)
  done (took 30.579325546 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.465867117 seconds)
  done (took 9.489674422 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.108968072 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.094403471 seconds)
  done (took 16.299919718 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.22452511 seconds)
  done (took 9.248750006 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.590825008 seconds)
  done (took 9.63123164 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.118391204 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.122334013 seconds)
  done (took 16.286199083 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.099522783 seconds)
  done (took 9.123321793 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.932978721 seconds)
  done (took 10.048102841 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.121948971 seconds)
  done (took 9.166818864 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.112834567 seconds)
  done (took 9.137634085 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.050905194 seconds)
  done (took 10.074589676 seconds)
done (took 172.023104003 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.11885547 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.099208653 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.110962141 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.109685468 seconds)
  done (took 30.462098664 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.146314585 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.146977821 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.15490789 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.145286892 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.136916038 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.136298026 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.147016204 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.146190918 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.137354705 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.143890799 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.147604515 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.143568661 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.145697015 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.156003134 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.15546346 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.143658132 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.146550847 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.146981735 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.13743541 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.155407225 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.144552815 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.146046294 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.111941876 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.111930793 seconds)
  done (took 53.459500272 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.303415109 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.178543397 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.266521267 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.157536096 seconds)
  done (took 10.930809802 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.112367366 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.17723266 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.164185528 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.157574885 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.162690764 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.215504924 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.165208714 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.248419392 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.241330543 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.241538148 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.119602594 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.135117387 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.133866325 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.158925639 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.21518565 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.112774197 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.113711326 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.23374026 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.176445279 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.372712688 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.114183242 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.167793503 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.164582191 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.165694495 seconds)
  done (took 54.296022245 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.113293955 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.122280364 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.12045736 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.114376761 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.115739831 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.11542734 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.12087548 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.116147606 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.135650789 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.116871666 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.113755833 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.115552209 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.120787868 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.115483426 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.115157777 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.128433416 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.129933346 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.114830734 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.118430331 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.123135734 seconds)
  done (took 44.413631467 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.114095365 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.960530548 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.46066283 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.366267722 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.114033809 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.116795083 seconds)
  done (took 33.159581165 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.126429249 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.134373358 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.120730404 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.140316014 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.162798627 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.123891773 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.175776438 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.278365111 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.124241215 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.173254875 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.13664179 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.12110645 seconds)
  done (took 27.845830135 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.112291418 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.118345137 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.117437944 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.128409274 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.127486777 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.123659262 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.12182632 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.114307769 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.128919415 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.13429216 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.123412577 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.125814809 seconds)
  done (took 47.504230482 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.328881173 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.340392858 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330525144 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.686716009 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.440811484 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.098783579 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.399515157 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.301395071 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.832737383 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.860528699 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412065263 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096970295 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061954693 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.040310945 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.012971813 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.35696332 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116948578 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.971586156 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374511396 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.165240188 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119044782 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.11617532 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120733733 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.403391008 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445081534 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.12275247 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.32817032 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13168085 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115671607 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.330883532 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.680199574 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.171949561 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.318119702 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.372099153 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456522892 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.292521212 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.119204462 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.256159293 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.164694362 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.151618384 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.125839155 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.126998992 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.636108636 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.114811638 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.388234695 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116917649 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.247747899 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.100701114 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042169503 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.433026748 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237660999 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11632752 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.150980204 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.5506129 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236582722 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.359829423 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121592832 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.253821175 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17784275 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.371046148 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.233016077 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228769359 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328944347 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043160319 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.521098411 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248917057 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.119339075 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122661014 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.817238065 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.359736009 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.19832557 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.450203512 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.883170754 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.118770047 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120386496 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.160329198 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211054711 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.117084351 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.411704894 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.097529133 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.044057382 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.216967197 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.514363806 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12321602 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.117058703 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126218071 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.964308789 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.04419378 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.214997367 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.373140629 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.449551066 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.119443509 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.118961845 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.140946497 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12144017 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.063708161 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.64347363 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.187314502 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.04494466 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.682433486 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.687530497 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.095558573 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.563748168 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.167839573 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39792941 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.277185497 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.527705485 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.329924876 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.367262496 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.64065577 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127218547 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.680849565 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202026232 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198441814 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121670122 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.680042559 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.26278724 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.426851928 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244505165 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.121245591 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047947535 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.132896653 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326026388 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.690829709 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.180597481 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121616479 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.127598012 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.121622042 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124973729 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.229097161 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138247714 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.417456446 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.185798114 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.125013649 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.059463725 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.128547136 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406502438 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.719776837 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185629956 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381182693 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.378862593 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825874127 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.721133432 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.069977938 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.395355368 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.197283709 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192940626 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.65047697 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.252889326 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.215764057 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110723857 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2266867 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.134762352 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.126707287 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.415999265 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.544933134 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.537238007 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.15647493 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.124828773 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.077112299 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.26567439 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340358469 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.209042554 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.152880695 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.128287405 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.207351522 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351264744 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.111666655 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050270237 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.374072853 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368646275 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.418193245 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.53576428 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.22041866 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.190564566 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13600377 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.337751294 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207357324 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.781967565 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.670730505 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347209925 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.668045417 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.091902918 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.765759573 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.389226178 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.513613642 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141897407 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.577575494 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.268459453 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.774864435 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.158864024 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.652534345 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.051787013 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131402701 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462676484 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.083520306 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.441330565 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.18288104 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227400799 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.128844351 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.127506185 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134745221 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.091049424 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.235892489 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194823869 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199203725 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053199347 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.735412749 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.168397179 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.129178753 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.127210852 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.500918068 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.966636888 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082745332 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.127525623 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204109561 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.877031918 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.67616685 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.132229109 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130418805 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.735919645 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.133747195 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.717424559 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.128968316 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.027086959 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159913235 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.38890135 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.835426703 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.414751706 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.205933095 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204257617 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.107399628 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135697625 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.829202399 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13713514 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.828379099 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.413436807 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.392035165 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.571282147 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.165856753 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.339404228 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.144649303 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.129834977 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.670233648 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.156285114 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130348998 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332317246 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.64643775 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.467284484 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.76826883 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.213990025 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.129102339 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.400340667 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.141101732 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.692984888 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.809133969 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.139197966 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.129623215 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.396973456 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.814512366 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.131543961 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.041369309 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137664123 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34275463 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.333593607 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40194071 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.42754719 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.582624551 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.058740016 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135526602 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.155479333 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.372872086 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.130781285 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.165820153 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.575387987 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.237671906 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.562904093 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.420602437 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.522497406 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.771939181 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.397380441 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.197269383 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.142818426 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.79287857 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267365725 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.063722689 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249077433 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.057443813 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.847159624 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426124505 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.148493465 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.401772298 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11511481 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.474083064 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.430982137 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.392179988 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.1839186 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159631616 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.130883262 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179038069 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.132011128 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.280651032 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.250490396 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.139130149 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.639259539 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172884172 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178198001 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13719379 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.658162908 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.155418488 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134920127 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.828256529 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.157191567 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250485887 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202793979 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.921800278 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.730381797 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.227444413 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.008841723 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.779877309 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.403402576 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.19102011 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.582942679 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17287002 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.537145505 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.132319521 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345316354 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.138356338 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.66748397 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182147754 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410515032 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088303719 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.345558686 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334951941 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.157922168 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.138885128 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.059932002 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.241702458 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.013726885 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.118098327 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.13665753 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.815597966 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.566713177 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.297625324 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.602621598 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.945091282 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.13607615 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.537716722 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.537643171 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.719092864 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160533442 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133154589 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.464510039 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.274057326 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.433360649 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.434733876 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143352612 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.159751247 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.347792323 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248014976 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.052209553 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.61434923 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.723812468 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.836204191 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.146216643 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.338812312 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.469042174 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.387398979 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172617406 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.214635589 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.538787977 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.406791451 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.206667018 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.061661711 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.134997466 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.533693849 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.532718012 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.232459316 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377144881 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.442474162 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.686924068 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.715701054 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.543392339 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.58831566 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.557598015 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.530602542 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361496508 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.501767066 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.462619647 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.019537722 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.548216099 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.349610119 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225194048 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.415536366 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.985950996 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.848059817 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.381077588 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.143281022 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065711425 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.345277284 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.148533306 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.550583761 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.667797067 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.385848993 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.408480596 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621385215 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677630527 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.272663833 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.165773332 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.104111378 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162656114 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.160045303 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.138364557 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.6167574 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.431044455 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151694003 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080163988 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.810852602 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.064516444 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.352588929 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.282895902 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.176887447 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.69467317 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.415664075 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.253372888 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429549364 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.342624892 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.176640286 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066079121 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862367449 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.089499055 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.254403105 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.567584758 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156271331 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.141755289 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342613404 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.06715529 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185241968 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.144605447 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314370109 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.72337508 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414239858 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269776944 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385302371 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44288877 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.052137787 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17859221 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413914871 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.066095368 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.743157662 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.847492342 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.181366247 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212912874 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138863111 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.142799437 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410959663 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.483883491 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.254624625 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.825312293 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.175406898 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164768258 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.476427066 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.245383873 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.143253814 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.147254499 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.596545967 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.374057715 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.142299031 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.128939034 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.354178505 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223216126 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.336278609 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.214393501 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.655090575 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.147139696 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.054076325 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255439596 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.094765212 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141235811 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.947880129 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.205213033 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.142168378 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416987181 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.781153166 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345483888 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.53928701 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.020681443 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.288267803 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185337254 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.145453387 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.147108122 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.537190887 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.447730223 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143527949 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.414727034 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193675981 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.147488983 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.804159457 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.111866401 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.143580188 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.874049744 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.054731482 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.876011677 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.538926661 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.1400463 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.220705234 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145964313 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.069481542 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.14322012 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.320449886 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131634988 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.146441851 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.520711708 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.462750158 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245169544 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148541261 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.144640303 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.150085525 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.356993353 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.659069404 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161310267 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.844171221 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.34707878 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.152676576 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.623347049 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.584329604 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.363461577 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.185916636 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.292651361 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.391703257 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.682901786 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.297019518 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11612475 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371331858 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.146553233 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.416228441 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.418368595 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.145557201 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.357407405 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.719410933 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433293634 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497908094 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.458045057 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.213170154 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.302710645 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.059829886 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.143323721 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.148605028 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412216874 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201788378 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.145592705 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15335637 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.699122871 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.867680123 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.610410229 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299539548 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.456799583 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.025328201 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.903725563 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.148394845 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.072268879 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.144763899 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172097281 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.147975597 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.072061451 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.919410126 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.859054554 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358055867 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.443109892 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.072257333 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349489912 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.746286561 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.073721496 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.115232178 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.146789467 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.40367595 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073952616 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.148898215 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.101058937 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.418657204 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.847141869 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.418905016 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.146631352 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091279372 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151916705 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.136813642 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.146991179 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.231734505 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.14764595 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265044914 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.411917569 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.521888255 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.257658298 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.786786033 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.866270078 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.087142067 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190558039 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.763117065 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.717766835 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.422941405 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.286528772 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.865242529 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.094227571 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.15115555 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164611053 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.387893135 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.152096371 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.150981121 seconds)
  done (took 2238.79737794 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.176940617 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.191124701 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.225813432 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.181876795 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.246840005 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.286120685 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.232857899 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.238256684 seconds)
  done (took 59.841626687 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.14798437 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.136717411 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.157507795 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.167962059 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.162577499 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.152853705 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.335034327 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.17790113 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.148360627 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.153844366 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.154546332 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.15268333 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.149338749 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.13420876 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.161839334 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.446172193 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.169443126 seconds)
  done (took 81.229676457 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.186557754 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.948156943 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.135317552 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.802713271 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.169848015 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.511232057 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.137977757 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.137981504 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.245054363 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.431569003 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.1853532 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.154829277 seconds)
  done (took 93.145999611 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.149862135 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.151355575 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.150272197 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.149836489 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.150657634 seconds)
  done (took 12.81628577 seconds)
done (took 2789.994789206 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.491856466 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.227064276 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.207976054 seconds)
  done (took 6.497944166 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.294894554 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.342808493 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.456091996 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.478468541 seconds)
  done (took 11.640455039 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.44942129 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.51802208 seconds)
  done (took 7.030843981 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.499816467 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.148935528 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.523506021 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.154632972 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.152805898 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.15655986 seconds)
  done (took 23.53340446 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.15222021 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.151805425 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.151193044 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.150967133 seconds)
  done (took 10.670483988 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.134932428 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.936505316 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.137184817 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.147876103 seconds)
  done (took 22.420444553 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.298521966 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.147730837 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.917598141 seconds)
  done (took 10.428925321 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.763862161 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.599033313 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.76507942 seconds)
  done (took 10.192902015 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.291987721 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.98916981 seconds)
  done (took 8.345693373 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.297304761 seconds)
  done (took 4.361805155 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.991291124 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.465147849 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.630800023 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.673648385 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.904900139 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.375904839 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.468843949 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.414346018 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.546614971 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.55357579 seconds)
  done (took 28.089238407 seconds)
done (took 159.939561856 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.572487123 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.165803308 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.358180052 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.517035478 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.505730856 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.359211016 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.449016644 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.507052821 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.186817614 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.175487584 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.519331297 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.490527652 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.395536296 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.171914229 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.399917363 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.170523937 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.386205417 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.592179223 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.202842927 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.443568171 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.452748369 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.164602695 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.358897216 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.180079135 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.386872014 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.310294464 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.768883439 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.171250357 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.353921142 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.784070768 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.310869846 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.594787026 seconds)
  done (took 178.47232464 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.018916508 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.155328214 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.155898491 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.155044488 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.460148867 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.15381594 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.156159729 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.153875675 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.455796026 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.435321152 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.155114915 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.444654251 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.156276332 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.155162544 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.15683927 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.154336928 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.564733551 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.070054441 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.15707078 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.155684513 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.156672217 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.295546677 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.158364935 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.323657049 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.5592177 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.15679184 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159093897 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.157329438 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.15747745 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.150952961 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.153341517 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.157177526 seconds)
  done (took 217.125232992 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.156927447 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.157302313 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.157372431 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.157435539 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.157233128 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.156771882 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.159665861 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.156831144 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.882829188 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.890498877 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.159446399 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.162669326 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.167637441 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.15767549 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.170268505 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.157798935 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.15780645 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.158316882 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.158704439 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.160977469 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.159419259 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.914137963 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.158151092 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.940410152 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.15786527 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.160664335 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.158472846 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.160211273 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.15828276 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.15888192 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.15888908 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.159329531 seconds)
  done (took 230.159787647 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.397564964 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.15920986 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.160809122 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.174275324 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.159654299 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.159761669 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.168606081 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.407368444 seconds)
  done (took 21.859010031 seconds)
done (took 649.692281246 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.545050036 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.891778605 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.278742333 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.170923334 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.438456614 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.226749726 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.165314559 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.228389979 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.810307873 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.241576431 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.579097705 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.18751834 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.900247936 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.192962432 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.280284003 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.225310119 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.523134382 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.771967735 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.3141551 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.948201444 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.366493152 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.080122926 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.245920228 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.857354783 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.603139175 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.117818255 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.165696396 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.514194914 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.170235269 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.396493941 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.805329913 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.402718349 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.193617965 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.181917918 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.223085107 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.209093924 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.352686459 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.190205298 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.29024991 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.874550475 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.837795273 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.694711968 seconds)
  done (took 111.766207614 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.153653335 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.152273749 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.152966295 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.153785405 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.162336474 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.153023135 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.15298811 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.153917914 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.153747063 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.153026021 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.153156839 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.160911658 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.152242378 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.161572628 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.153083878 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.154219969 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.15351277 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.162722727 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.153262889 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.154245344 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.154411476 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.154195563 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.149466841 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.153911815 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.154423293 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.154694013 seconds)
  done (took 58.104418862 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.163014537 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.314280112 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.450359343 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.194274495 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.162948453 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.166011965 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.191321814 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.169887094 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.165740448 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.165380708 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.277890302 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.168553648 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.176781959 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.446587135 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.192911521 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.162985025 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.164993613 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.164315811 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.32229186 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.177953832 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.193154798 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.169790307 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.19408921 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.178267095 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.165839528 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.164313219 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.168046782 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.578049599 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.175999203 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.277821643 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.207644937 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.198780069 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.550891425 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.458460027 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.23087156 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.170437204 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.163933173 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.322469344 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.177605617 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.164194348 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.192636545 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.172687401 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.45182637 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.67892549 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.178990923 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.165682213 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.575264974 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.333726329 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.212572594 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.17804737 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.461834135 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.194410812 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.164713036 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.166014775 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.202570831 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.17812078 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.166978497 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.440136047 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.181274707 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.194264851 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.17257258 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.167517299 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.330104418 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.174214509 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.318597126 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.174856759 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.170928127 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.166940359 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.454885932 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.194664449 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.669920733 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.181388472 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.165383062 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.28025118 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.325533971 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.601326281 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.180862246 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.330585215 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.565662309 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.203798544 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.177946694 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.566482444 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.206432022 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.176881466 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.166661745 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.165927495 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.166446881 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.210957273 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.193201999 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.593276626 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.67110846 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.458524824 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.207456229 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.180909791 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.168259141 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.44289154 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.178310418 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.167284994 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.448307333 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.696666561 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.182353355 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.173715516 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.653828609 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.183950906 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.197363012 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.178806598 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.466548222 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.195900684 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.211633879 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.167826197 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.174402258 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.171256225 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.197819157 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.179838672 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.168690455 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.647469968 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.339929693 seconds)
  done (took 267.444651124 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.171966333 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.168190268 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.167281922 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.141393272 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.167508212 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.168770579 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.166706745 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.166526742 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.168625583 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.154384357 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.155419341 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.170408245 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.170189014 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.162554096 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.206271836 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.16969297 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.656155005 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.16852668 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.168157646 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.169699554 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.746575593 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.177085913 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.16789032 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.170788526 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.168883792 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.171018954 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.176859325 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.204862228 seconds)
  done (took 175.909204537 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.169271145 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.217537079 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.168134684 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.215000498 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.182081296 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.169008571 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.191228259 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.186002807 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.175440965 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.169585055 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.170967713 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.197857331 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.178170739 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.244540363 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.19802266 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.199343118 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.248921503 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.175016349 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.170529731 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.170411449 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.216567224 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.168898934 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.198340905 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.225568249 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.184020681 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.218461972 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.169848641 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.169948327 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.171096241 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.259007579 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.18855163 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.198553516 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.205280858 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.188879504 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.263405032 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.260307258 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.251038791 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.187907694 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.173204421 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.171817032 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.171110897 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.157809369 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.218071193 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.185425061 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.17294732 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.245729737 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.187692718 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.172177129 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.191162042 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.171878688 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.183131389 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.188014012 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.205264955 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.239557702 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.216969241 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.171591774 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.193448708 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.178391829 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.159228517 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.246231052 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.162987717 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.260427903 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.190770503 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.158516358 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.174692327 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.177516419 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.219785954 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.206943469 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.249379635 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.17930737 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.246926921 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.225064163 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.185129181 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.143327104 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.171308222 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.220797901 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.259542396 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.226065496 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.222810194 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.188489623 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.166907722 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.17434893 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.15948745 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.19963277 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.180651091 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.248512279 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.260383639 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.169549714 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.174318401 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.174113681 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.174926214 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.197369208 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.228856121 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.212486374 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.242658494 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.207221327 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.207760238 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.181799696 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.186312693 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.178964034 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.204145152 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.181924653 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.184033044 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.548357124 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.209431227 seconds)
  done (took 233.133189338 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.522711062 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.207810567 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.242736425 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.443002084 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.547259886 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.282575837 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.214778693 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.213344632 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.233190942 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.327219908 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.265299321 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.252679237 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.208462557 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.19607251 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.20763334 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.232803478 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.2366287 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.546418668 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.326231849 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.911445288 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.209498284 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.459546276 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.510336027 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.550336256 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.260828378 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.597024295 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.839203073 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.298764412 seconds)
  done (took 70.433870022 seconds)
done (took 918.863774496 seconds)
SAVING RESULT...
DONE!
