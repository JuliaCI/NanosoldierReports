cset: moving following pidspec: 28774
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.976675827 seconds)
loading group "shootout"... done (took 1.055879691 seconds)
loading group "string"... done (took 0.663727658 seconds)
loading group "linalg"... done (took 8.621540824 seconds)
loading group "parallel"... done (took 0.169979886 seconds)
loading group "find"... done (took 2.941112911 seconds)
loading group "tuple"... done (took 2.20170585 seconds)
loading group "union"... done (took 14.878155526 seconds)
loading group "dates"... done (took 1.472627868 seconds)
loading group "micro"... done (took 0.219338338 seconds)
loading group "simd"... done (took 4.785109861 seconds)
loading group "io"... done (took 1.075786355 seconds)
loading group "random"... done (took 9.513531105 seconds)
loading group "problem"... done (took 1.524579634 seconds)
loading group "array"... done (took 25.158608705 seconds)
loading group "misc"... done (took 1.886705054 seconds)
loading group "scalar"... done (took 43.445771733 seconds)
loading group "sort"... done (took 3.338514404 seconds)
loading group "sparse"... done (took 12.717307407 seconds)
loading group "collection"... done (took 18.491431763 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424503595 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124098813 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128214077 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.113824689 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.179652089 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121298339 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130154303 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085813214 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.858142086 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138127469 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115604208 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.427636043 seconds)
done (took 5.276802307 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166530338 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092600782 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082483176 seconds)
  done (took 1.385451678 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071720564 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060569736 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068079391 seconds)
  done (took 1.411106758 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066726602 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134351005 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066421728 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067025348 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070494865 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06648616 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066355486 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066327261 seconds)
  done (took 1.752646803 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07204988 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067579535 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065755507 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068042936 seconds)
  done (took 1.487109221 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065440141 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122001903 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065415119 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064856338 seconds)
  done (took 1.529118482 seconds)
done (took 9.029920155 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140216905 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.81980008 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.755243869 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124837578 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.25078576 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449426833 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124022552 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18307559 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088897194 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07512729 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.12108882 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078444211 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.397319944 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.400528498 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071210411 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175710895 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.655223624 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08763463 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132969823 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45559441 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073681297 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087642859 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084886173 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07155549 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.345915718 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151531225 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665080807 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100041309 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069885868 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095380388 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070610826 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078374498 seconds)
  done (took 10.728778116 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092850473 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090275987 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068781169 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124022306 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094192381 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070167574 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07582075 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068189202 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088763665 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130051835 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089787587 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098744005 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066723516 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070001801 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074731008 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196740202 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080077655 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081202093 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067640549 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081055675 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105565155 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077978411 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078546935 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078217925 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130916213 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172539685 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096370492 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09807407 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066469915 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078737982 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118417362 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124878298 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066732321 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06550352 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119777092 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095234014 seconds)
  done (took 4.650293917 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.885643375 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09576427 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082733369 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074410663 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106162216 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113670677 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121130487 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122831637 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099993473 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069110825 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152035416 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.644397886 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.147693896 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071678893 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119610023 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361724568 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.088586496 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07028783 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068477742 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071142753 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069794425 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112540695 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.0662712 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17561865 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.579833397 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070790729 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069518722 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096200001 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065990978 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139953174 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095936645 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069899249 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.548020087 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065626923 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064809794 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089959748 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092123356 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065506697 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067061028 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077624481 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.176699272 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110554287 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08004657 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.491535523 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070769776 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.573792912 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226587394 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075768272 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074273664 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104062605 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065499023 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069018253 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.024374831 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.120350456 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067003226 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271238325 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06779665 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070337427 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070902581 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102410686 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069434637 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070729384 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074887418 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098639629 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.805003259 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089985039 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098006883 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070128495 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.402569144 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074193609 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069590555 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069728834 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.113021489 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110647182 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066542657 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066089744 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106810906 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.088985913 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088720573 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069545964 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067387412 seconds)
    (81/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066418439 seconds)
    (82/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.340615483 seconds)
    (83/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.17987167 seconds)
    (84/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066836485 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083409235 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06777079 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.477723077 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063964828 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065600452 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068007843 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063394625 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088799478 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066167596 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063287347 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064456266 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098953969 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067031305 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.454018585 seconds)
    (99/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.070486027 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068176389 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.449576073 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068723463 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103062822 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122087784 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067691682 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095017123 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068418924 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065092436 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07325391 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06613191 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064544796 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069664184 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065805433 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064613812 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066525726 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069387764 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068424687 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067276869 seconds)
  done (took 22.813940653 seconds)
done (took 40.295064754 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.331425584 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.07827819 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078678722 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078439412 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07859212 seconds)
  done (took 1.911442181 seconds)
done (took 3.268462624 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132140111 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075523112 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06493736 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100584099 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068404906 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101467237 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.10837339 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104180174 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068926938 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068610615 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.06856032 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102243528 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105025421 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068827566 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098559549 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103611005 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069062407 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068041442 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068989908 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.06920287 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069054857 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064836974 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069021425 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069209009 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.09889541 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068912159 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064712363 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09893244 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068865402 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098851058 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068908714 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069004207 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069090274 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099651622 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069216215 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0989838 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064878433 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.068816844 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068664797 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068783882 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06883441 seconds)
  done (took 4.613073761 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071348465 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082072669 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.0836703 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062430443 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071961971 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082317409 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062314392 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082136052 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088225279 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08237434 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082285553 seconds)
  done (took 2.163180666 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070473789 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083054463 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086965877 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062500957 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073425774 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083350423 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062130564 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083433569 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087933718 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084684724 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083997582 seconds)
  done (took 2.155750159 seconds)
done (took 10.217554682 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096284035 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.0660085 seconds)
  done (took 1.439628106 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.2236474 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.62455987 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.315604177 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093288302 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072119885 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085812489 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201361515 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067137446 seconds)
  done (took 8.147061285 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.101510753 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070076438 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068636011 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067421971 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069745134 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068843457 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068342399 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068099701 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069554187 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067298687 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068105655 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069188395 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067794646 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068694034 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069355255 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067701936 seconds)
  done (took 2.522856859 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103331276 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06911611 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099068852 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062155916 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07181701 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062587562 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070773281 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072585881 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070209672 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071155108 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072109715 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071371549 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071090738 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071732406 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072470911 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.07273094 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072767488 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070076154 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072758041 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073939305 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072487862 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072728296 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073210827 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071374888 seconds)
  done (took 3.172290192 seconds)
done (took 16.577356203 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174352987 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074556324 seconds)
  done (took 1.537618299 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067866441 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068377576 seconds)
  done (took 1.441981419 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073131449 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060711585 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078048729 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070531225 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06146039 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.06126137 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077112364 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061234082 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061275772 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061460746 seconds)
  done (took 1.971499577 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062842515 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068857295 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066520211 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065309599 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067225404 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.0626292 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065386073 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062953078 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069770678 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062281052 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066384722 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083050272 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066142829 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083535799 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06514868 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066293771 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068006618 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065174964 seconds)
  done (took 2.525163135 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061139756 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061993546 seconds)
  done (took 1.435709221 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064718441 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062039896 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06409086 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06448468 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062091944 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061236091 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061680452 seconds)
  done (took 1.747140912 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419443439 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121610651 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339064491 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06862241 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076443028 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254656763 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064143608 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068536466 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068856693 seconds)
  done (took 2.832779348 seconds)
done (took 14.810738746 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08200686 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181374072 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.086960613 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405668096 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091671426 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067420879 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112792113 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.173954472 seconds)
done (took 2.531293019 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.221666397 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.248258142 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.392977317 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12535671 seconds)
  done (took 3.080938604 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336124783 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077835978 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076898863 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066818415 seconds)
  done (took 1.885569288 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066445877 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071327923 seconds)
  done (took 1.459135606 seconds)
done (took 7.977938175 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.099313837 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064225769 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.072548847 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.067395604 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064402795 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064025108 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063380669 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064288375 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062000753 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064039985 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.064318781 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064059006 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063790657 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063834033 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064456364 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063215167 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063997511 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063924572 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063834824 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063964546 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063227547 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063680245 seconds)
    (23/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063429713 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06198502 seconds)
  done (took 2.926431358 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.07895012 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065838486 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066727514 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066887386 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067214111 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066968472 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066558701 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065729176 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067174981 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065042857 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066770315 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066927175 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065252393 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067522181 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065288346 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067282488 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066706408 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065826015 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065495226 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067333003 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067045368 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065764428 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06700606 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066654802 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066985688 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067089086 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065425182 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066384986 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066976464 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067388087 seconds)
  done (took 3.346998085 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066406478 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05972307 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060878393 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069815457 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060110417 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060656638 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.0603835 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060105267 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060786094 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061519758 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060893381 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059825576 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061025956 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060038504 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060236092 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060777062 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064870235 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079620005 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060628475 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060205107 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06456512 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060295649 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060897844 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060309542 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060962821 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060602079 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060141862 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060730239 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060938241 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061126116 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06015009 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064321313 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06561646 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06144179 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071350431 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065805202 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060207421 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.063744833 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061772493 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059755414 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06028187 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060146295 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06019106 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060087311 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070099294 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060799532 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061393303 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060767048 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060836814 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06025056 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060545454 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062171853 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068782612 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061560275 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059932651 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061100748 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059828833 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060955248 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060189625 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059988988 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059765867 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063661286 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061373583 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060794235 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079346825 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061753778 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070011585 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059897215 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060849547 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064087485 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060720624 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077867679 seconds)
  done (took 5.837874932 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071303051 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072019866 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078897036 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070415129 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064359691 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061576302 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065181746 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061451453 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070720607 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065299181 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061416317 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065075583 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070672713 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065385971 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062698394 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069964317 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065484802 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06500876 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06134407 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065326934 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062565564 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064756564 seconds)
  done (took 2.808896547 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134786541 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066272387 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105219016 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074472888 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068530155 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074413184 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065777559 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065961077 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066610553 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066849395 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066495721 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066300982 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068570085 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066637687 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067076129 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066576481 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066092151 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066690471 seconds)
  done (took 2.660825684 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076553684 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065915317 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089118942 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065821165 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066048893 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065392215 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06956797 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069734146 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065546694 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066060184 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069828536 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065638391 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065891979 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065880496 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06575699 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066008526 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065452619 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065926979 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069885606 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069302556 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069255377 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069550379 seconds)
  done (took 2.848930246 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076703205 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064841268 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079675042 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066048808 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060616715 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060464668 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065858222 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06523047 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065695015 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064860332 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06499128 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060794917 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066725243 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064999949 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066911748 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065483679 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064855338 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065452719 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064894325 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060619563 seconds)
  done (took 2.658707409 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086198962 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063964482 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063266994 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082259795 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06349431 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063948297 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082676534 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064204742 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063709741 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084825543 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063525151 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063218235 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082592112 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082382002 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063331978 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082921496 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082669894 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082652219 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064097477 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063605602 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085159145 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063750516 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082509813 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063305716 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063218238 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063198028 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063102599 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082714495 seconds)
  done (took 3.359552935 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064108555 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063376849 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063621088 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063836818 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06409344 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064047276 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064464422 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064043612 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064103573 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064336159 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063932596 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063883655 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066795095 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063639998 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063817364 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063889903 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063776758 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064310761 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064126695 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064415336 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063601721 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063794863 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063978951 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064580688 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064443767 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063723829 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063995742 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064240819 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063618559 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064327235 seconds)
  done (took 3.27228842 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072793208 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070959053 seconds)
  done (took 1.493311114 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061834488 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077133211 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060117962 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072381605 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068802047 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064193571 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069242278 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068912423 seconds)
  done (took 1.887155546 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066664538 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08988736 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062130835 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062774698 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06550758 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131739557 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074490433 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073906957 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07584531 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064536855 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062724691 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074830839 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061783694 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075617041 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063980446 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071238952 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069600883 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079966342 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075200796 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060714333 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07485107 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062891697 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060989551 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062906463 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062088412 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068931374 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077752447 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074222793 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070395102 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060164356 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080570491 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060871657 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06205783 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070386308 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065060712 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061044084 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097452141 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061623499 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066255401 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060864057 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073552534 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081999971 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075710181 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081195238 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064646911 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065016431 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062501637 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06482296 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064922954 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070845709 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061171483 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068953665 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060308499 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062322375 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071474753 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061344102 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066309791 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070171789 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074530374 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071754899 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070210505 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076090204 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069812644 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068569267 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06199573 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08042782 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063245689 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073956458 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075687475 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06242852 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074278547 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060716434 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059716281 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060607509 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094122111 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062887885 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062027576 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061258387 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061402195 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063946425 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072097686 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067853877 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069701002 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065876368 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077558713 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069924184 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060759414 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066988166 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078558789 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063927678 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060646627 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077088731 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064515405 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060125087 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078062055 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070209936 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062252854 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061337445 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063834003 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073584345 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061776903 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059134232 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068872769 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062203075 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062507045 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065019404 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068538763 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060196947 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070197057 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064591848 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061617442 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059123134 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064434562 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061224449 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059304956 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06898914 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06006168 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073774423 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066378363 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074257873 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074398698 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07023376 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075641893 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05972293 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058491191 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077067095 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069311583 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.197102785 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080470712 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061776126 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075497018 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061770032 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063414499 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071004282 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060996245 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063634365 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060975607 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06599352 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062308465 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063245157 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066494915 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069599915 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073555693 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062418625 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069907779 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061510587 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076735217 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071172229 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065612468 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064674267 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062073986 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073087565 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067761175 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070232581 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060559884 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061743868 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060921132 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071669928 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070688413 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062910412 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068230239 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065165574 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061846474 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061225348 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062002765 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064756886 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064977014 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062020534 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069342109 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070068405 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07537582 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068413571 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069959506 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060511607 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060967267 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062864814 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060832043 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065456831 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070662735 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076372127 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073187774 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082074904 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06154679 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070910729 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062663631 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077744606 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074324444 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062202557 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066136782 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059926271 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062883476 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07026954 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072977108 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074486209 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076145234 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065552445 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065514586 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061016942 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076217115 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061502432 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070027352 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070859555 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066250827 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.0612306 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062578446 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07039403 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06569828 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061111667 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077204182 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.06724564 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060777737 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075433657 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06155011 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071721949 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060553543 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064941793 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066489891 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062842203 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070556815 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076374118 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059794828 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062122552 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076621278 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063019727 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062558972 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069594457 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076081489 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065550824 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069285474 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071652678 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07096124 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065365478 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070378152 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062140155 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069917886 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063419267 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072043578 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060403638 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077904845 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059500669 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075144744 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06034475 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070571067 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060866749 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069300467 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061215041 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076782153 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06183194 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060535275 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071410986 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059126327 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068974471 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059513274 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065035594 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066853145 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069771627 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061822744 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069558234 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.06192671 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.210346336 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067382262 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070897329 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071784692 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066553404 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061404972 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070168398 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07281415 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070099839 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062676619 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.06284489 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061846813 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070771255 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06307334 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062723635 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06983788 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066148127 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067306471 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062482412 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063242693 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062900727 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069931531 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070841703 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079314257 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069953175 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068719206 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070373382 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061209615 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076591819 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061081961 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071363362 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060094528 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066924025 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070255844 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061332169 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079794683 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062582005 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069048805 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073790128 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070386271 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066370709 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07887973 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06452751 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069531206 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069434793 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065778707 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067751579 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063263396 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069999828 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071040797 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071809645 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062228522 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068933968 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070280122 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063002871 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068876244 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063067947 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069820246 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063135404 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.0604603 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066073371 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073156621 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066123184 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066439798 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061487918 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060347468 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06177199 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067855389 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065738511 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070590093 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076766796 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060248356 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062283546 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060829282 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064770153 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078965564 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07103761 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069265225 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066019031 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060343304 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062696412 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063248036 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062014306 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064774837 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060251831 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061038197 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071802879 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063419241 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065612793 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061804156 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062413529 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07095818 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066324481 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062090089 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067969631 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061364001 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066135097 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061392891 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063499155 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066272583 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061250914 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066440327 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072799612 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07786253 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06734749 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069978416 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062200199 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069067755 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075874769 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067487413 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061941189 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070332556 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060070371 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078941696 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070260804 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069209747 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069643841 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06157289 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076588203 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064326226 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069820358 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075290588 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061360145 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065867205 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059116564 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074849277 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064314223 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05952632 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067783485 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067776769 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065492602 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071605353 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.205542561 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070144847 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067293408 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065631716 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063391474 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063158494 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070431431 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077523197 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062054656 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065379831 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069411208 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070039126 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065812984 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073505586 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069571072 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062621815 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063625785 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064857365 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061933752 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073260149 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061908177 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065476564 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065581462 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060880784 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06771028 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078110643 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070815925 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07109622 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060831454 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060586211 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078803801 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064988034 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064658897 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069400081 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071278332 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073693178 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070812797 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077919953 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06186959 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066729309 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073392513 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062515069 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061519107 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065270438 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063143082 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071004927 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071457907 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068862798 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06347009 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068038368 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074798756 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062650105 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065844244 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066089681 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062011011 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07190478 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.06920821 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073060503 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06301087 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06101831 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064511864 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.0705727 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069813647 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072159524 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064218494 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069700384 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077281756 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070566066 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065538937 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062299529 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066226264 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071607799 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067178143 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062216773 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066593 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065575828 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068861225 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070968244 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065817063 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061187958 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078360284 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069217552 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070513426 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063518974 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063467015 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061913046 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060796749 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072417221 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060966328 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063129212 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065961299 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063163907 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07837875 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069471208 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076817414 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062614405 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065642292 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061106586 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071117142 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065804395 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061603359 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.091575558 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060126104 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076078202 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07286582 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066376637 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060747365 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066001162 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069046155 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076263704 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070461391 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069637048 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064373151 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070424345 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062719242 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072064054 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060540443 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059416886 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070462579 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069239076 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072765667 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06024084 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070158583 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061790649 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068299903 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067885428 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061903023 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061602507 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061977074 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069571731 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06451276 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069964645 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06478396 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07645715 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061444711 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071314517 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069309992 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07126963 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074328162 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072434524 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067792274 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060858633 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067846231 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068075633 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061439876 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065264686 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063292642 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080614243 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061431642 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061710726 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074076356 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065863912 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059891015 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065554594 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065046738 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070387874 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060604088 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069976914 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063680468 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060785086 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064472001 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064569634 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058945386 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059490395 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.05973103 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069438903 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063917191 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060479616 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078013788 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061858271 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068362323 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070253748 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06591619 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060589396 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.05868357 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060460692 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072316671 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073904668 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063069547 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068082903 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060582349 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068834257 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.05880579 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068020107 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067753069 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068071912 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058587414 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05962819 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074023043 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074114451 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064050105 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068585845 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068571785 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060795977 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079755813 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068318147 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060671675 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070267576 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061521337 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059460801 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058616573 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060934124 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071239595 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059152766 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061806093 seconds)
  done (took 41.891120094 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.108207282 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064901991 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064131641 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064420677 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075546716 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065960798 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065062886 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065712221 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065484794 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066474869 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063951494 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066912938 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075014756 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076665738 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074232448 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067308664 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063784953 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064658826 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063783142 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064866853 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073879406 seconds)
  done (took 3.066269061 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066975482 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066842961 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066965283 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067197605 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066458563 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063254809 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066539282 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062787637 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066929516 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062931082 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06702472 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062405278 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063177756 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062859441 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062979081 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064587648 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066818617 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065930478 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062214049 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066041265 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064045792 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066688957 seconds)
  done (took 2.906890637 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063650376 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062851938 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071459874 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061678379 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061733961 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065411602 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062040052 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066615368 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066656666 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067079327 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071736013 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062903929 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062821872 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067992048 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061532448 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063270534 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105470686 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063542795 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063051575 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061986064 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064759386 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071462179 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062141421 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062296237 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066575443 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065210889 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061883275 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064775155 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062757754 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066260914 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063078643 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06147979 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071067444 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070797314 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066261487 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066197246 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063411872 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063243515 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06224826 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061912767 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070697198 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063119982 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06204115 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063547406 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071300287 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061591927 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061153081 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071111059 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061812537 seconds)
  done (took 4.696208663 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072348604 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114397335 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068047931 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095549521 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074378471 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067876865 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067436318 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096392836 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063260109 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063589311 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075310967 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075516804 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064695074 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066151698 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069156031 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064578637 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065332699 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064088219 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067391539 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064968796 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068030903 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069308615 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075006184 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075401431 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065870063 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064387962 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064599319 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066191864 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07468901 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067967874 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066209836 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066544961 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075040566 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069719217 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064568875 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06422727 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07474324 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064425705 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064470185 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062751421 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064594798 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065414487 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069004343 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075309608 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064870953 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069088906 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064527391 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062323605 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074547699 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064135003 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068474049 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.076103106 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06547028 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065207476 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066158854 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07480555 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064999664 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063383353 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064822594 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074706446 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062862507 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065271688 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078069343 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065199919 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068074197 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075844815 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069185571 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065820754 seconds)
  done (took 6.354535396 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070857255 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09712966 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072780831 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072605733 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072162365 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072364326 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072136168 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072486517 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072084903 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072569052 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072513807 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112809377 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068904317 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076612531 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072684049 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072388883 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072332028 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072340052 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072385074 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072130174 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072632138 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073236624 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072390147 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072880955 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074759053 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068637003 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071684403 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072124098 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072829962 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072545613 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074785429 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071927617 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072279443 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07264279 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074819735 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072203173 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062815806 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072119679 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07235722 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072109075 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068972938 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073125471 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072110401 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068829404 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072298579 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072382858 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072312903 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074701627 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078951121 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072815182 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072233815 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073194634 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07222418 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072539359 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072914574 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079313091 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073024726 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072894223 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072469395 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072867358 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072715387 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079001311 seconds)
  done (took 6.050463467 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074861947 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068041699 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080503613 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061733261 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061836883 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070993388 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061792826 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061868238 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068993023 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068619226 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070282656 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070845103 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072830886 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073033128 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070911817 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073252908 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070946281 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071090143 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068541733 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070774657 seconds)
  done (took 2.902013472 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076604344 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080350657 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067342336 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070666605 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067689643 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071499124 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066674832 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067714325 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068085751 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067797224 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072294408 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073236187 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067890995 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071271066 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072124637 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.07132439 seconds)
  done (took 2.631412551 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065513095 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069594151 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068748378 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063313137 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065404502 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062172329 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06323545 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061924279 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064652299 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075933628 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062986371 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065733513 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063073344 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062127482 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06240387 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066001156 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064354589 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062961613 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063584251 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066957742 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071156766 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063560291 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065368018 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062540545 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065192361 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071581642 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064326112 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064980541 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062583052 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065286095 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06493595 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069552196 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065011238 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063209913 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06201144 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062614409 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063336425 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065412426 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065294396 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063276886 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061338161 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067712013 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063060188 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063752584 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064273576 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065493028 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064866361 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068380975 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063035457 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064818877 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063205796 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064461048 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063302258 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069746533 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064834355 seconds)
  done (took 5.074457575 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078644891 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067015045 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061473385 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061694926 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06675306 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067159281 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067062057 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067371213 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067563025 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062009924 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067218065 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066531328 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067005671 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067128046 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067364051 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067254368 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061465913 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067063404 seconds)
  done (took 2.713441602 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068553311 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067134224 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066321155 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063549699 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06339627 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068261496 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061855061 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063291798 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063233158 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063688923 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063894967 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063360437 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063006487 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063264628 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067660369 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063592309 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063183971 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06186439 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063703996 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06175918 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068003589 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062129597 seconds)
  done (took 2.921116536 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089189547 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085560659 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128246185 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081418475 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089726654 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072444048 seconds)
  done (took 2.055693135 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094580366 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105295622 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066502813 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066313236 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074908517 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069945264 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069951728 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069829748 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075350089 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073480836 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069566158 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075267274 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075358605 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071603576 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074908683 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077388272 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070050877 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069921713 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066924517 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077366356 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069901689 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07524719 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070002979 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069613543 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069945917 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071672293 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078027651 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073727291 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070097838 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075290443 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077868401 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070018213 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075329955 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073785008 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067141194 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075601574 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070041736 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077582987 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075273693 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07185912 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066862716 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075326379 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075569763 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071598449 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077729463 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070041662 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071536421 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069774048 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07038708 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080302572 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075730856 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072093132 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075528639 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078801058 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077964355 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079778523 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073830781 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071494075 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075612649 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074061086 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071919013 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075829904 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071715247 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074218388 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077776022 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071581164 seconds)
  done (took 6.392907332 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101501778 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067073894 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069945076 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073716673 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071332725 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07044932 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070364337 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070035508 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070375292 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067479474 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106304144 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070574478 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071900007 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074543117 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071508244 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070875041 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070471992 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071522752 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067589561 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079819726 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070179088 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071925973 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071639953 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071728961 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074152693 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077890704 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070107864 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070057092 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070105217 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069818594 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071637869 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070037074 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071437635 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067025704 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071708419 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069722358 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069914187 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071262999 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069931874 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075326086 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071459106 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077421687 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069463893 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069597193 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073963516 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069713302 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069767398 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06695011 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069879539 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067277139 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07366716 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073945666 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073957991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071611637 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070443026 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070472199 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070001479 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070779857 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070078974 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078025007 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071507525 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069775997 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079719033 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070147209 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070432241 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07165465 seconds)
  done (took 6.310433814 seconds)
done (took 130.394204287 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220509736 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.193868767 seconds)
  done (took 1.913330821 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075608009 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166937349 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075940567 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075897037 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109004896 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108646796 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076739485 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073389555 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07584497 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073174839 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14126687 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077153224 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073051414 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072878601 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072970164 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07302186 seconds)
  done (took 2.942471553 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108185036 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18554713 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082753533 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070732199 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114950998 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077627635 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072994141 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076083375 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077486639 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070892548 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107913855 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082346312 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074601607 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077774621 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073330804 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074910184 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075868038 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077331342 seconds)
  done (took 3.107089904 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098192816 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087252523 seconds)
  done (took 1.715666785 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160462685 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107407386 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14798966 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329365716 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130633474 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.128979987 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133528006 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129598141 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114450375 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12412385 seconds)
  done (took 3.029546209 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106501818 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106041764 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307931179 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103336333 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083602234 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078213795 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076223031 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080395025 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076391117 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077105784 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122656627 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076032242 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073489299 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125057183 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099993767 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107497549 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071753453 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078465328 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080525113 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071631298 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07684771 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080336555 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178349495 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078996603 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099990398 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075774337 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077951371 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075217896 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075134162 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07842306 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07962881 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099850151 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078905386 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082922187 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077082981 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097595088 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072083677 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099404301 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075450215 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073367959 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075500737 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079624422 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072843837 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078917724 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076172212 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077910356 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080516263 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071405907 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076314657 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075138766 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073554959 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076881163 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076849386 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077469439 seconds)
  done (took 6.345543014 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107880843 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108791066 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071312874 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113790401 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106321836 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071045247 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105395139 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100790491 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109426115 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07058507 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070080175 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070202139 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077092198 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080093818 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117018261 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108643243 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.0723137 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070918016 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108033403 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107904152 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070071546 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102530603 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100232328 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106883705 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068926085 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070611369 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069092813 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06949953 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074624858 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075330447 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069273905 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076153232 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081189265 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075727005 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068993375 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069017507 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069713537 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076439531 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076484954 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076476922 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075103398 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068783438 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069122316 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069283028 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069982008 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068731738 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074973916 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07596579 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075245117 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069557821 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069607858 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068957579 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070174044 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07596928 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074859338 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076448479 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076272428 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069339994 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06930202 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071438733 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077334418 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077259329 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076841174 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070769785 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077905931 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069378216 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078096807 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081541023 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069664496 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070211264 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069587418 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069611581 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070100276 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075088072 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075411925 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069968823 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069512329 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069813833 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077403586 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075750345 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06943323 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0745196 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068925921 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069753822 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069892381 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069661361 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075143468 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076170057 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07004271 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069310688 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069710287 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069461263 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068868949 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075139257 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076395106 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076844655 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075393425 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069576907 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075366663 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075438958 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069933865 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074909469 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069244193 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069801803 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069571086 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075035144 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074081749 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076151529 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069174611 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069048279 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074828127 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077195095 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.208510073 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076509577 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078817728 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076524995 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069785564 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079157789 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06997148 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077486231 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070178032 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078187845 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070150749 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075526351 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069566005 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068793452 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069635269 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075436803 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070013358 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06969012 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070042123 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069850479 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075631703 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079151081 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070048323 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075732353 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075563881 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069854012 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075935734 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069829716 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076333307 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06945747 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069720185 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068654564 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077821832 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069269755 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070016418 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069986093 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077260124 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069738016 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077682708 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074367463 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068656844 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079140829 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077535829 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075127305 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077732381 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070208269 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069553954 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0695748 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072608698 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075176847 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07626766 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070094285 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069511913 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074731126 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077341668 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069027304 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075391482 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075557563 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.07528965 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069599982 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070004472 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078717679 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077522475 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.312977775 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074892084 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075700953 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069258449 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074522586 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07521553 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069556646 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080943868 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06895475 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079713485 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075831113 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074207062 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075387857 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07717084 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077533227 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077588953 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079683568 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068869324 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069457523 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075659562 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069153011 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069422478 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075452739 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069962038 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070347269 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080638502 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069654935 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07760799 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069080133 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076077541 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068870575 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069871464 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080275643 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069350558 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06931715 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075200441 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069299453 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074756849 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077625094 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074497714 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068570022 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069205755 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0750139 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074965421 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068721893 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068286169 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068945055 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073649403 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073904356 seconds)
  done (took 18.761218796 seconds)
done (took 39.349119246 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169074186 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115227982 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207830467 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199451911 seconds)
  done (took 2.327494896 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101012099 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066145397 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080898377 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09093227 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065961958 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076632786 seconds)
  done (took 2.059872214 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198475548 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17447663 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240683842 seconds)
  done (took 2.186005683 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365181545 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149105957 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215993109 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.502029326 seconds)
  done (took 2.908861291 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110650812 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100757337 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078308567 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112210104 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085590163 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063554353 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134523439 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070515627 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100438265 seconds)
  done (took 2.497203459 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129472453 seconds)
done (took 13.71017619 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.12324765 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.159119157 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.238044169 seconds)
    (4/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.216051439 seconds)
    (5/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.107527825 seconds)
    (6/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.113644899 seconds)
    (7/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.123227055 seconds)
    (8/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072217275 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066711366 seconds)
    (10/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066870562 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.120070366 seconds)
    (12/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07715994 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121661592 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.097492971 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.07735815 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078354184 seconds)
    (17/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078819095 seconds)
    (18/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078942723 seconds)
    (19/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074991784 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.212884055 seconds)
    (21/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.261935542 seconds)
    (22/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.190161326 seconds)
    (23/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.084691042 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092688943 seconds)
    (25/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078281556 seconds)
    (26/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.258837793 seconds)
    (27/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.200491553 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076209102 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.186937653 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.130261997 seconds)
    (31/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078376257 seconds)
    (32/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.201662537 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181030877 seconds)
    (34/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.143754999 seconds)
    (35/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075230153 seconds)
    (36/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080556694 seconds)
    (37/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074294456 seconds)
    (38/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083068583 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077394486 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076762495 seconds)
    (41/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.17744147 seconds)
    (42/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.222067654 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142082579 seconds)
    (44/341) benchmarking ("sort", Float64, false)...
    done (took 0.138161767 seconds)
    (45/341) benchmarking ("sort", Int8, false)...
    done (took 0.153265579 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.248153628 seconds)
    (47/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.200728788 seconds)
    (48/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.21721855 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086415616 seconds)
    (50/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068110945 seconds)
    (51/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.154509015 seconds)
    (52/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.199403563 seconds)
    (53/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.139241246 seconds)
    (54/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072811531 seconds)
    (55/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078298034 seconds)
    (56/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.181694001 seconds)
    (57/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074080771 seconds)
    (58/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.216737207 seconds)
    (59/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075253761 seconds)
    (60/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143407193 seconds)
    (61/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073558542 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09108869 seconds)
    (63/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069716796 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077551995 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15011339 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06752461 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.076337307 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.08319438 seconds)
    (69/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.076381328 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074040892 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.088295998 seconds)
    (72/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066690396 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 0.136962952 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075494621 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065875761 seconds)
    (76/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07431506 seconds)
    (77/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.161947904 seconds)
    (78/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.141742464 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066767864 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094107035 seconds)
    (81/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077499289 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065499748 seconds)
    (83/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.180973972 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.088707794 seconds)
    (85/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141310785 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090853402 seconds)
    (87/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191604273 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07857828 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064876896 seconds)
    (90/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077678508 seconds)
    (91/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083037064 seconds)
    (92/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.161959402 seconds)
    (93/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064769424 seconds)
    (94/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064724202 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130909562 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065392306 seconds)
    (97/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.141598262 seconds)
    (98/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.193725005 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066345625 seconds)
    (100/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072798092 seconds)
    (101/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.223375952 seconds)
    (102/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.13553828 seconds)
    (103/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06584539 seconds)
    (104/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151507202 seconds)
    (105/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.083183356 seconds)
    (106/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066098979 seconds)
    (107/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.083366075 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072993972 seconds)
    (109/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065068503 seconds)
    (110/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073307326 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.150181019 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.072039218 seconds)
    (113/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.213547832 seconds)
    (114/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.195113644 seconds)
    (115/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.167731686 seconds)
    (116/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06995594 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093307704 seconds)
    (118/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.07876333 seconds)
    (119/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.082094912 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065399793 seconds)
    (121/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.072942787 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08171706 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068608632 seconds)
    (124/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076753079 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.087399671 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065714258 seconds)
    (127/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065615584 seconds)
    (128/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080216124 seconds)
    (129/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065735266 seconds)
    (130/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065715806 seconds)
    (131/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.196201613 seconds)
    (132/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259872567 seconds)
    (133/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.161299128 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074721629 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141325737 seconds)
    (136/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.155007903 seconds)
    (137/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.068885926 seconds)
    (138/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.153784565 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.079175031 seconds)
    (140/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065143973 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064354903 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072326161 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073885179 seconds)
    (144/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064306287 seconds)
    (145/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.183377877 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.147776149 seconds)
    (147/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.213177714 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073401621 seconds)
    (149/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071282782 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 0.141380641 seconds)
    (151/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068329749 seconds)
    (152/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073740681 seconds)
    (153/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068541517 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087477656 seconds)
    (155/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065073496 seconds)
    (156/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065168856 seconds)
    (157/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066990039 seconds)
    (158/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068099775 seconds)
    (159/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.065132899 seconds)
    (160/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067804097 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071970916 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074002962 seconds)
    (163/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064503286 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.065440947 seconds)
    (165/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19107174 seconds)
    (166/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065399438 seconds)
    (167/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064749081 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113944902 seconds)
    (169/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.158656128 seconds)
    (170/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073187783 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153277438 seconds)
    (172/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.176265598 seconds)
    (173/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072962769 seconds)
    (174/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.190710864 seconds)
    (175/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.143742474 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064490706 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081127295 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120095313 seconds)
    (179/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.162123672 seconds)
    (180/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074452889 seconds)
    (181/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073479377 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084033336 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.422872832 seconds)
    (184/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069220178 seconds)
    (185/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.071759475 seconds)
    (186/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069842808 seconds)
    (187/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.14716446 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067419248 seconds)
    (189/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.070048892 seconds)
    (190/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.079804673 seconds)
    (191/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072105155 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095453142 seconds)
    (193/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071792505 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177851448 seconds)
    (195/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.068400638 seconds)
    (196/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.20526704 seconds)
    (197/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070536734 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087724941 seconds)
    (199/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.079991966 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149774587 seconds)
    (201/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067647678 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07497527 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155670192 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068255773 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.154260877 seconds)
    (206/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.148385873 seconds)
    (207/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068325255 seconds)
    (208/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07650973 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06707993 seconds)
    (210/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069774563 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065495992 seconds)
    (212/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173175499 seconds)
    (213/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06769944 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087915576 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075052317 seconds)
    (216/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.08600582 seconds)
    (217/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069542183 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074424439 seconds)
    (219/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067057433 seconds)
    (220/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067453258 seconds)
    (221/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065372873 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069412839 seconds)
    (223/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071859013 seconds)
    (224/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066771739 seconds)
    (225/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078601734 seconds)
    (226/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067168124 seconds)
    (227/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070539399 seconds)
    (228/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075498434 seconds)
    (229/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068426456 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066846687 seconds)
    (231/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068430324 seconds)
    (232/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06900348 seconds)
    (233/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067755438 seconds)
    (234/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067308455 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079156732 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077546314 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074329806 seconds)
    (238/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068341391 seconds)
    (239/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067519229 seconds)
    (240/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067187155 seconds)
    (241/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080408323 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074718796 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134588652 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132599677 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068483379 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.0689107 seconds)
    (247/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069077799 seconds)
    (248/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066251163 seconds)
    (249/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165010944 seconds)
    (250/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165363637 seconds)
    (251/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070232903 seconds)
    (252/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075550289 seconds)
    (253/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070231073 seconds)
    (254/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.229569844 seconds)
    (255/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.179110141 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073944004 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070384076 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192542235 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074050536 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148912081 seconds)
    (261/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067664342 seconds)
    (262/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075465906 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065592554 seconds)
    (264/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067271519 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09223054 seconds)
    (266/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06731852 seconds)
    (267/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069429945 seconds)
    (268/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.0671058 seconds)
    (269/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066748584 seconds)
    (270/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067672842 seconds)
    (271/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07401849 seconds)
    (272/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067473813 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126506203 seconds)
    (274/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067116745 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092616019 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086583662 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066646708 seconds)
    (278/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069619519 seconds)
    (279/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.083262937 seconds)
    (280/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071686836 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065491984 seconds)
    (282/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067374683 seconds)
    (283/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066772221 seconds)
    (284/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067317417 seconds)
    (285/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065747606 seconds)
    (286/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.162912105 seconds)
    (287/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066931077 seconds)
    (288/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067224927 seconds)
    (289/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149494112 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068006004 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151367595 seconds)
    (292/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067668671 seconds)
    (293/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066017348 seconds)
    (294/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093882787 seconds)
    (295/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066994555 seconds)
    (296/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074467442 seconds)
    (297/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220825449 seconds)
    (298/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066722234 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.0669233 seconds)
    (300/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074852375 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067937244 seconds)
    (302/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067293054 seconds)
    (303/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066755166 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068924853 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084234836 seconds)
    (306/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074985351 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.066174927 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089872802 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066671657 seconds)
    (310/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066510313 seconds)
    (311/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067739831 seconds)
    (312/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067199395 seconds)
    (313/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065827725 seconds)
    (314/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067421221 seconds)
    (315/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.0668922 seconds)
    (316/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066103841 seconds)
    (317/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06766108 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178790179 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151801617 seconds)
    (320/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066861615 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077965326 seconds)
    (322/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066498153 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168662175 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067803329 seconds)
    (325/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068066879 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.065849483 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086481119 seconds)
    (328/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067851742 seconds)
    (329/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066213864 seconds)
    (330/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088036366 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066933825 seconds)
    (332/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.144865821 seconds)
    (333/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.066649263 seconds)
    (334/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090604443 seconds)
    (335/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.06590917 seconds)
    (336/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066358053 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110023187 seconds)
    (338/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064569285 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085101948 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086044486 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066061248 seconds)
  done (took 36.64846822 seconds)
done (took 38.239097902 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09931363 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082195692 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080805069 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07742348 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080601537 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079749814 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081503699 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079679752 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.081162749 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080811181 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.08078379 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068779408 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.077571146 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084837898 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.078071469 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08476507 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081021275 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.083948027 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068807312 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082459974 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.094826281 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080089142 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076275174 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081669176 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067459481 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076446771 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091003843 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088556993 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073851985 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076693139 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07442208 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085106591 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074789055 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07314436 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076499975 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073143108 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07625732 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073980291 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089869067 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072964298 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067454736 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079116724 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074624726 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074740405 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075550005 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078438389 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072512604 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082291924 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069283858 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080433816 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093819803 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074523786 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075651531 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075817056 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072522572 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076729796 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072958611 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077791853 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071684541 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07786419 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077821482 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075236984 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06674829 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075459755 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074217992 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074014904 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065782904 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071572975 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066467165 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066693651 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065704961 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075109861 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073768221 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071878365 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065990844 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066648452 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065934428 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078413467 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072616809 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076057393 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066652168 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071991934 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071501758 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066893179 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071837978 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078410855 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065583594 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.0671213 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06597395 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080997163 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072917417 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066834471 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078718153 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071771745 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071402718 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066867605 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065796203 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07119337 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074393303 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066782118 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065617712 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071053001 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071420809 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075427217 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066560591 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071279483 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071726671 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065075933 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075078965 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07412872 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074843542 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079471808 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075084536 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078022253 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066588638 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065541124 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075744246 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066406367 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071353483 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073849361 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071801455 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074639415 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066456554 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065482338 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070956367 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072830507 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066876387 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066897729 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067004931 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075794801 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073576025 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065298757 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066076986 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074923126 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074992165 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065864293 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065877633 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075811674 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066815641 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072346037 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071966644 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07481307 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065790874 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066605456 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.21154008 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06633002 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065974204 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071807004 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071253447 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067080113 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075622546 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072895048 seconds)
done (took 13.224699022 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067522712 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105542739 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073754577 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082859289 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078229035 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067897846 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.0709342 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083026881 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070683101 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086498156 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094546603 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088729556 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093510738 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065887233 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067163314 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068039878 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065742593 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074675165 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081516415 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090477433 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095064226 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066836645 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075997777 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083661811 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.119226245 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083203013 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068187115 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068219095 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069880387 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084147537 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093034991 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067215404 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068479298 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080622536 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080792803 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073848338 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067831498 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070812449 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071023354 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067169263 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069126854 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081113852 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070607393 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070446852 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068109632 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067968368 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067277025 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069816227 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079959617 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070583254 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075213716 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078944511 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068649278 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067252399 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065324343 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07141057 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067202203 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067898828 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067360403 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066557288 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067357853 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069619421 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068007542 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067620186 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070779367 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069603718 seconds)
  done (took 6.680988314 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082861618 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093068524 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084169101 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.0846963 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068990193 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069702768 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070123651 seconds)
  done (took 2.335109641 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067618443 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075132502 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.08073174 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082239196 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.090628533 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.078902594 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070227915 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102342282 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069124999 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078581402 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086065328 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083918675 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073355452 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081629469 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070756035 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082190324 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070511397 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076689646 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076688617 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.082115028 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072290229 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097494768 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080922777 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06818477 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081239094 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075326142 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06964439 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067831225 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068196009 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067255334 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067275511 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08949911 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074232211 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079412028 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06846949 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066651853 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071943393 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068291197 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071567509 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076183506 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070958263 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067382736 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068074511 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067494858 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068426442 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071761917 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068010628 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067187069 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067259675 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074758273 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066958255 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073952302 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069811269 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072373418 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071891743 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071869795 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074387458 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068065058 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074637399 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073378825 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067238505 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079614234 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078963314 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071029921 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078684039 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076114749 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07342835 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.07176372 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06677631 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066601066 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068038844 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07880309 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070551434 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069347639 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068722257 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07232523 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071068877 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082462155 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082347584 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080829261 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070138908 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067707357 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071656795 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082745426 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072166374 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067332511 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068402438 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066879139 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072265427 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06756247 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072312644 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067842692 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074345167 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069551761 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069717731 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075571013 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067349902 seconds)
  done (took 8.911717988 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070035767 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069256645 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06803094 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068527858 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068945707 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068472718 seconds)
  done (took 2.226772087 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090735753 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068019307 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079768179 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068201288 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089915328 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07412909 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074453804 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069565459 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083844598 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078191105 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074592199 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077108529 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073762113 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069720915 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074038269 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.0688946 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073953002 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070626521 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077758312 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070014952 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084147556 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06947739 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069897533 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079742897 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070664198 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068664875 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068922417 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078055871 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077622898 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069877321 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069323679 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070803341 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076247522 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.070155765 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07421633 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076371569 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067916389 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073313778 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070540715 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070480216 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076242037 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070068524 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069894162 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073140324 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.06935506 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07607578 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073350291 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070975384 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073732429 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073281742 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07327546 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068291385 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070712259 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073450159 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075914348 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069735244 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073028429 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073698608 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069102485 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076181698 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067799587 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070795211 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06919893 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070731191 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072476231 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073707601 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075910465 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069272067 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06980547 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06768943 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073232134 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06796712 seconds)
  done (took 7.039994152 seconds)
done (took 28.956123271 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542395049 seconds)
  done (took 2.298988403 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.588380517 seconds)
  done (took 2.387004284 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.434365062 seconds)
  done (took 10.234853536 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.291617967 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.316253811 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.725721963 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133207494 seconds)
  done (took 3.299450408 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.741961141 seconds)
  done (took 2.552551103 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225205941 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21652985 seconds)
  done (took 2.256516414 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.333991997 seconds)
  done (took 2.134873892 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.148829193 seconds)
  done (took 2.947863746 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.227392163 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159468314 seconds)
  done (took 2.200094517 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.534142308 seconds)
  done (took 2.340785252 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.280772666 seconds)
  done (took 6.093372517 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.231693382 seconds)
  done (took 2.075650596 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.22888145 seconds)
  done (took 2.039978278 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.052319548 seconds)
  done (took 3.856312392 seconds)
done (took 48.526467832 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084111353 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.085969905 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086333031 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081530134 seconds)
  done (took 2.118231851 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074986249 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071096647 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074166818 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074266157 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07191424 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072765733 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073447554 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070482986 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072418685 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07081556 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069928646 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07125004 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073426867 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07103745 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073307403 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074493053 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071171503 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070973234 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.07324572 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070629034 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073504492 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071242429 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06928188 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070820233 seconds)
  done (took 3.539586483 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078594244 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07240235 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075777579 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071589414 seconds)
  done (took 2.11578289 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076990913 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077179044 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085772422 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090843109 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076919381 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077335661 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084212742 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084500479 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066407644 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087647031 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068852874 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067525121 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067740018 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086154182 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083789613 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063036466 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065082078 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077456709 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076567654 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079753586 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069623949 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066573013 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076887308 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077485223 seconds)
  done (took 3.653034127 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079213972 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066009017 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078785454 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091443287 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092209206 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066246039 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079553493 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093393194 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128060623 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066573378 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072398761 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066014105 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104735081 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066479306 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081317668 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.10924251 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112335456 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070138315 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099598806 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066573549 seconds)
  done (took 3.515450677 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077232193 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070246872 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071176629 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066206769 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077280942 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073909181 seconds)
  done (took 2.265540368 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068744323 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068680843 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070889397 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073019289 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06842444 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068435746 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067807495 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067755808 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067018093 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067623612 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067517172 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068592106 seconds)
  done (took 2.647774172 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.154208585 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07020083 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07085461 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06689913 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071763182 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06730969 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081743832 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069225538 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084972225 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067864847 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067915738 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070083973 seconds)
  done (took 2.768926821 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10025832 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100920558 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145696232 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117423786 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116873865 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097040765 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119253662 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095590883 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160549416 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137447938 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11720835 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094469348 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087403893 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070630385 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100771134 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102487294 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136869464 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073401046 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113867382 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165055213 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114724204 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112955744 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122544548 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117247256 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081830017 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12196409 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094772041 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102774268 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124730302 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10947124 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119356619 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098199265 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072524176 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071956574 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150023158 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100579915 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107677343 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093497941 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100849927 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088976658 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10825852 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070203596 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087648246 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107841929 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085165798 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117146382 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088923659 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10403324 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081480014 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131000019 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107343959 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1003645 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086315965 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104775494 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130733062 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095736796 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111274033 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107703847 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083576305 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119555826 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102523187 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253005151 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094625799 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081439075 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159030753 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089747047 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112245367 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112465758 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083136087 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090356854 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103105422 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130413979 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107769764 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107514678 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114977926 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096217688 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110778387 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092859193 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128979837 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093369582 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073570095 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105454507 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129029913 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086028085 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101033284 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129602962 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092701423 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078167611 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092984991 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118576204 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081225572 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097027216 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070376346 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098091654 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107596865 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097861542 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111953958 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107223317 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078975989 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125131921 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109487697 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073606378 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117883913 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099795111 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153254103 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096400821 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076832317 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100673561 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09441862 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149490627 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085687625 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081222306 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099211672 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141386132 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095159391 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169736403 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096640333 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128592501 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097727525 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088130935 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075858874 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090611696 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102535179 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108171728 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102710619 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090093733 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.07769445 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087589488 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097387807 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.251274419 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081909781 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114463851 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101424673 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075916698 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088861999 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079779749 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125253051 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078690305 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108901176 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125335678 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079781126 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105967926 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098394905 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108139309 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098006703 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107547915 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140046054 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116421025 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080353309 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084533137 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108633709 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141730521 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113859833 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085616444 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077031263 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100069369 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111059219 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09784703 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107386769 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100872517 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109377623 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098069486 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140343798 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118184573 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091182938 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096012337 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096807974 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124021384 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077101005 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155720343 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094611946 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11868631 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086228472 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140967429 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11452533 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090492307 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085668471 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096435555 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104701384 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106343247 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143864611 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096328222 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073803626 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094088998 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131655529 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077600481 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100913532 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.0907967 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093978564 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118872473 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084307144 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082361327 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069045224 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102650756 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136785186 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07055402 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115062114 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.27717231 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102867889 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105302523 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070618025 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100037758 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138019749 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105908789 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140553845 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117086003 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100802542 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119067676 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.099360997 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10599629 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080780253 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125722448 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134533803 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09648987 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090996581 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135039844 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117986425 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134476441 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.096853737 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115153741 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105556819 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101805712 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104478296 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100743781 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144294504 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122301099 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124831109 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087279191 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107657582 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109764033 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137148109 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083364101 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117946972 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076250483 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112330215 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078230661 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108322566 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.08038963 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111778095 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08043201 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100617858 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070656871 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07561525 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142201998 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112903304 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089806987 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087024736 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13702277 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131659346 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081667844 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102703671 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105554964 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.1021215 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103122501 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110458535 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087018479 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095921528 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.271790495 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080097004 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082636439 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099892563 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095023305 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108095786 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085094163 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07598044 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13629908 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105126259 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095960765 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078431954 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095706352 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122739307 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090591962 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08817451 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105813216 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104141869 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140052083 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090913078 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098373173 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118055064 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081342852 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092711611 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070450976 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085929585 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076642638 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109249333 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077075754 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109110546 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070001869 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130489601 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087776932 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093862518 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103427133 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101255842 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128473967 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092737504 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129125982 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090873532 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102660564 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109310703 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095325816 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080950471 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104140415 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096655399 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110039332 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096548553 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106113461 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110707506 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094914596 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142083829 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091043048 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120986257 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106466936 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10815576 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104617755 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117360755 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137946146 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112983826 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113014739 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076018328 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083848366 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106331096 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100455781 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146518848 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103649937 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073297128 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087520994 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091782135 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097038729 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.260135956 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083662359 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141931557 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08767542 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087981256 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113378902 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089795045 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097864835 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077080878 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096211944 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100613147 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09491265 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095241162 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108607622 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117852303 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113849771 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132595068 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099909952 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093726551 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119182649 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110996073 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111540532 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086806474 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087230612 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123723784 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103283799 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128919614 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101208566 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0955188 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102913153 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091084176 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100097986 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097107972 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110371983 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081628917 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076972614 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069422006 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073250152 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118684934 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109571647 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099380331 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099924721 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073403263 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104829276 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100958582 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072857774 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088535926 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095283542 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100131172 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084753679 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093090256 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114681382 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092118952 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104253721 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100321121 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129035706 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101025043 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089737417 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143916017 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128797834 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089149505 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093797826 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073008405 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079909534 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102705753 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146183455 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119530558 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078733493 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085117233 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.239059539 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087956645 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072760078 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087777376 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090469173 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104484093 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093249181 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112603066 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104684127 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076613051 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103808203 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098033989 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092951509 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096941991 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103207247 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106328511 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124683527 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101274845 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09877272 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077100379 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081434643 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076618857 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080318849 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102900303 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078449778 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077821751 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130101357 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09230839 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10600038 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109436278 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085976446 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076452202 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133537048 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070799029 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134936477 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072852977 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083169854 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082575281 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080545654 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095001867 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106371347 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097551461 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11454309 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106546023 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105701442 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11137967 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156638428 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07231601 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145001518 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077280406 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076900764 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076874352 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115174506 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0908688 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105909726 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141081657 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090701717 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093539174 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077928052 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128648016 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099362103 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104095116 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083590533 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079749856 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128915008 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080700899 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072724326 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087558681 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112236686 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07329808 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105595783 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.247396503 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08107486 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113865642 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631335376 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091033249 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076363787 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089581955 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142165493 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128376172 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084589827 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109250661 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119501632 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091088599 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084839806 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108632711 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181412598 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075359067 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09534099 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104590137 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099195333 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092980466 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092780364 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087160575 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093306244 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087073048 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081392353 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108129494 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088836159 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092621852 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09840484 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084062207 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081015716 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131320105 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104599775 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08315148 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090119448 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102168123 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089203222 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092094525 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070581421 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114817348 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092228405 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10193743 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092398279 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108642704 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121320899 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090038457 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113253815 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089622566 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11019812 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085655425 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078939459 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10253578 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.0786049 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078582957 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117636575 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.084853817 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093069319 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104319452 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096189379 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114427457 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117942055 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111964347 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098792952 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079922377 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086812038 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088939998 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076797557 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07933802 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075414175 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077506953 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.271913329 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086770402 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085220156 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115313253 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083258889 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104351991 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101030888 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110346869 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08400783 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102145959 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10964485 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091150384 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104165698 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101455136 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128677145 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146199429 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100621657 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12391903 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133227203 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077740859 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076537235 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070457768 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115745716 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080121093 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081754243 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0821621 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132894641 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083532765 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09596529 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231726231 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081461172 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083291875 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097370262 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070846259 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084254611 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109050913 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085380593 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081909079 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099932696 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085086581 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118111876 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112751977 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090382131 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084039243 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082231591 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094928031 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104988553 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128980918 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091130161 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076251509 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107252029 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104531585 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124663908 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073964463 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081871611 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130693491 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092943047 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104308988 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081171892 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12095713 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133302641 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090864892 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134366795 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072252743 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084351896 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090248536 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126559008 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075643412 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089380007 seconds)
  done (took 65.25937148 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153231222 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144524712 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083488017 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098486149 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187670697 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198096757 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.119826346 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097466767 seconds)
  done (took 3.094836785 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069030815 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.0835305 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081534702 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20627151 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.10925963 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068290669 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074083621 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082957489 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068579756 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068026054 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10730273 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06872099 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068787015 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.368428767 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067451386 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.07300187 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068378578 seconds)
  done (took 3.699034682 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.321049924 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.406613638 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.210569639 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.642850188 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137954063 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485700158 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077275778 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083322895 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.651241109 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369375496 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133158147 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088430124 seconds)
  done (took 18.584629078 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078367711 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080277904 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080509169 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077085042 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076860704 seconds)
  done (took 2.4176908 seconds)
done (took 117.509510768 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085165132 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173912496 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069445385 seconds)
  done (took 2.251944884 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083790547 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082459639 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083185965 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.0800552 seconds)
  done (took 2.311096951 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076734108 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078290518 seconds)
  done (took 2.126913759 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224687531 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178232742 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092651173 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083884985 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081484643 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082110621 seconds)
  done (took 2.232322914 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073880817 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073613159 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074073672 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074138137 seconds)
  done (took 2.266368005 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069417376 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067705407 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070276357 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072545969 seconds)
  done (took 2.251628585 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086625396 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084521105 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114039004 seconds)
  done (took 2.257604603 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084618072 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084861661 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079837887 seconds)
  done (took 2.225978846 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111023195 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098420644 seconds)
  done (took 2.182668497 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082013334 seconds)
  done (took 2.059617384 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091065097 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099106201 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14103425 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108680101 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142241663 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128243742 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079050384 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079970875 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075860689 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074806604 seconds)
  done (took 2.994238934 seconds)
done (took 27.713909983 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080912848 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375562124 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361947164 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089023072 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675387133 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359466845 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002718565 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092505653 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101627613 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069969089 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086818194 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653295412 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.993852391 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.333677394 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.976172231 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.33212081 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655133952 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070511919 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070355013 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070250163 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.985134571 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070253782 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070621795 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070795228 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652717817 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376592789 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070953065 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.332308243 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069939212 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07295909 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359229082 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071073842 seconds)
  done (took 16.602731155 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07220966 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125214827 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074372014 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08591648 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072535978 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071631086 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073134195 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070838358 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113314863 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070156335 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087734902 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069881646 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074087943 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071667777 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090379685 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.0700591 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07170986 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074688675 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070574292 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071247417 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088966299 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070281366 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070729827 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071328319 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070565874 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083456643 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071367193 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070323313 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07067118 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072817852 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07382221 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07188856 seconds)
  done (took 4.462814561 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123774249 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128724916 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075399866 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111876596 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120372962 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072107233 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153948535 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093879941 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116484351 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070740522 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088067564 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070342125 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106071836 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071644663 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090713111 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07063798 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072081605 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070943953 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070735564 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071157524 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089413136 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070210919 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070937133 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071029371 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071280399 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085370535 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07144499 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070560864 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070547418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072695173 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074763348 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071788478 seconds)
  done (took 4.735957181 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072208031 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073588687 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081918608 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082828356 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068722902 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070780705 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071995864 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068491255 seconds)
  done (took 2.593069677 seconds)
done (took 30.390811013 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081122275 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070139386 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073244003 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090065025 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076713974 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072402706 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066620877 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076438671 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.074019355 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.0734517 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07554591 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069289699 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071986226 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066931086 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074366255 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067914055 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07458167 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072086541 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072786461 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074859924 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071117416 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074217365 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077466809 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072839878 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072833719 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.07280412 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077218977 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074454734 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068793607 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071488368 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070667839 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.083170257 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07480969 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074624065 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068257552 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068117254 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072793172 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070844153 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074625212 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07738674 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.0703988 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077657 seconds)
  done (took 5.052070381 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090172578 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095754473 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088468322 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084314492 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109127319 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.0838633 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092720274 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081557729 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080200379 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092450033 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075921375 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081457217 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082720862 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077840286 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.08095945 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077139864 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082161184 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076090011 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081023749 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.08054214 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092936278 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.074733894 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081163739 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082074906 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.0764496 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081870224 seconds)
  done (took 4.195594146 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075139121 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090673868 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094777388 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144291519 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111946755 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085073412 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084182984 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099977718 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103997793 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070129514 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074223015 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097012116 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099229179 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077112244 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108756701 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088459828 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083036502 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07233881 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076636142 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104919276 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09330976 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08926401 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103247546 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090413648 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069622208 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079625615 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076902351 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08571594 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077700323 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082591375 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07452773 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073754014 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071062646 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082467225 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077185393 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068661298 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092741164 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082788644 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.086198608 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108929957 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080611307 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072244895 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100184208 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136245257 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069605168 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072558548 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07384149 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08200102 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071248047 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099415363 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088520997 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070015004 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088945538 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071732449 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071270542 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086879483 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071332858 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071865408 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08224002 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075871493 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091449887 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07534329 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091262971 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069727 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081246648 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071769099 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071824252 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068948673 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106214029 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077489979 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123183581 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.0709877 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068321258 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082269219 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081233981 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076473111 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070048194 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088844461 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082466734 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073868707 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081852818 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072470529 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072880717 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105997744 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06890808 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067868126 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068153878 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072270043 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073089755 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070057758 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083162199 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069186374 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073066009 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085750703 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.07011493 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070317577 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072016766 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071153519 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069256342 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08040855 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074039296 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071569362 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082442318 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071116677 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073298053 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084978244 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079342668 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069181601 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071176081 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072354832 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071326061 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074168151 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072953444 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071654262 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076646219 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077284204 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075356469 seconds)
  done (took 11.547429091 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166321824 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156877957 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071667686 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151447936 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07857555 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074577375 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152989693 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090124281 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070818927 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07200021 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069974039 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098687197 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093804398 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105769795 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074445491 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071446947 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096618942 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104058993 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155306493 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149797738 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094328139 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078366211 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073056829 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072067971 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072063199 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080142254 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087516177 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078403486 seconds)
  done (took 4.791973071 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077273352 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085757314 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.0747219 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094153889 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088829184 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070677339 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072413416 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072077212 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087852675 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077380537 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071130456 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074908985 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074393251 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071396426 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071158864 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077413054 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077093191 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069790604 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07412663 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074889537 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081045097 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09588801 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075029406 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070957315 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073562551 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070488546 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07698925 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.08042761 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070340326 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100630822 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067592154 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074834626 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085057474 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071730455 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070661109 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071474315 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070940243 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07089898 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071223068 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068984904 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068654297 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075208612 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069528347 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076593105 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08482408 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078153301 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072090727 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076085334 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073163524 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06731084 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07392594 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073716962 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073102573 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079270192 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074194622 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073285413 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072062464 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100487454 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07688088 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069863033 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069693882 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068958166 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072314 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078214645 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087584181 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072391988 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069025255 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070434151 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075640744 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084668463 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069980789 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075927749 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067539513 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070852303 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072955217 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073628694 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071900494 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068837218 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069949845 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070480178 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070600491 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070516808 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069498015 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07348551 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068213303 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069037747 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071465299 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071827927 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076863572 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069429959 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073578927 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072104106 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069320549 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073154657 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075745412 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073072784 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089949282 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079254387 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070840403 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068534498 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084947674 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072717554 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069950862 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076019477 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07473956 seconds)
  done (took 9.908004421 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094000865 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072405384 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090631842 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09710283 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080607074 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075672533 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084816379 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.0715354 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087669049 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069725242 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079450973 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069221403 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083581667 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07982297 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071831758 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080815181 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072608159 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090801069 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085339564 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06924776 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079827084 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082936317 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083414304 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088638507 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088188706 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089198995 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083187198 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072982798 seconds)
  done (took 4.337841603 seconds)
done (took 41.827162171 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.064727025 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.250416725 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.080745152 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.328145908 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.134335803 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.171954823 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.190138059 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.073370763 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.229150774 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.105634772 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.403834276 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.437675526 seconds)
done (took 70.547337208 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.130978614 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.218551925 seconds)
    (2/2) benchmarking "String"...
    done (took 2.312413697 seconds)
  done (took 6.540247933 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.680894081 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.081149846 seconds)
    (3/3) benchmarking "different"...
    done (took 2.092491949 seconds)
  done (took 8.862041143 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.252247249 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.715325493 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.332497623 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.067558629 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.085264598 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.487997636 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.891375853 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.545749895 seconds)
  done (took 34.13595887 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.279459158 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.273414316 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.849143452 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.889909816 seconds)
  done (took 17.349143499 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.689812226 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.342939855 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.343130946 seconds)
    (4/4) benchmarking "different"...
    done (took 2.3359218 seconds)
  done (took 11.778545574 seconds)
done (took 91.153843523 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.081549486 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.218993696 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.092092069 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.235218146 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.123089004 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.119770074 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.094640755 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.107540664 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.081616483 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.082592683 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.51551746 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.082652413 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.089345398 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.118426165 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.100323987 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.116544306 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.138282169 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.095507988 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.128346744 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.754690527 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.603752685 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.084070992 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.086108622 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.31697314 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.152501888 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.102727573 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.661121316 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.097692667 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.790111519 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.085201945 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.095006621 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.081429738 seconds)
  done (took 214.542885753 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.08321867 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.279248071 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.33733059 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.094348433 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.797833969 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.274821555 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.218777399 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.832972155 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.085581583 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.105234402 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.216190038 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.085095629 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.238698219 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.029748704 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.078589834 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.089270897 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.358180259 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.246529085 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.08202755 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.263075964 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.054660048 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.045638413 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.019387972 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.203119022 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.087922315 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.091035987 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.100151819 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.088380989 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.270879005 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.342912732 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.094786229 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.105791041 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.290163327 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.948056754 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.088311051 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.105428144 seconds)
  done (took 181.746066013 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.255576487 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.092463256 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.145611769 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.222323559 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.837808784 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.806507408 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.083752554 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.08079231 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.081675197 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.089153116 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.082716622 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.151358973 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.712491258 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.100237082 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.082455123 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.08120195 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.604858975 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.086103398 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.082761382 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.073575901 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.14579749 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.456202259 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.218882552 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.084927215 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.091725144 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.21863898 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.091171051 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081614042 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.203824134 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.08584107 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.159144969 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.218733081 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.092225289 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.16310681 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.088696125 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.571776813 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.080721541 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081733992 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.07776865 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.143288663 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.080463309 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.166972163 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.165657487 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.075537938 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.087347451 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.158644667 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.75355331 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.078019424 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.075147676 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.076443412 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.074569923 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.075777472 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.726729216 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.07636738 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.101403064 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.678267236 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.07391603 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.074522022 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.077951925 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.075474885 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.074491085 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.08143659 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.11191623 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.880408683 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.47396386 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.46211126 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.872599143 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.070673661 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.891865319 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.126692677 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.073544575 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.147292046 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.064460664 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.039847214 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.061966454 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.066264844 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.163517465 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.155782644 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.072697833 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.206237536 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.073680441 seconds)
    (81/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.070688406 seconds)
    (82/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.266757365 seconds)
    (83/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.647885414 seconds)
    (84/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.268901413 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.070507645 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.083556085 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.131614136 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.071676988 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.070474722 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.088525662 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.071518499 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.233629126 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.073339379 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.070707324 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.070528029 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.240942764 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.072427046 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.209022938 seconds)
    (99/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.059436563 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.296542326 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.146123939 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.322344368 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.299522225 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.072910321 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.0712543 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.08548512 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.081468809 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.062345239 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.073221414 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.06224288 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.062333263 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.064068923 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.061488995 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.059705029 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.060861186 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.062501084 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.073274011 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.059682038 seconds)
  done (took 444.761530225 seconds)
done (took 845.364752657 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.785833914 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.857745468 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.699643046 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.732823266 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.699469262 seconds)
  done (took 15.763577958 seconds)
done (took 17.751476195 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.089849181 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.074980475 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.064206081 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.127348689 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.082360126 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.064597436 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.07443599 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.09958284 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.087861445 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.06816779 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.106335868 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.074008931 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.089619917 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.091101235 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.145440769 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.074519277 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.073743164 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.065857741 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.128850405 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.07379446 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.074587185 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.071041353 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.070987741 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.12142696 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.151872579 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.08201594 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.068610729 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.118309868 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.07919757 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.114472703 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.130169619 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.091194396 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.103083622 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.142923682 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.128791228 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.149171682 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.077675965 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.13864748 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.074264964 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.156230831 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.126122064 seconds)
  done (took 88.014482909 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.06704827 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.201318295 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.275413309 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.097647215 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.064563282 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.288114959 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.122338257 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.190990784 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.196545347 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.281426508 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.285929115 seconds)
  done (took 26.059826424 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.063921384 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.199329912 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.28401191 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.100970906 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.067624343 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.289034691 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.127038367 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.19523134 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.203036183 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.288944452 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.292294729 seconds)
  done (took 26.104605443 seconds)
done (took 142.165082555 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.433786796 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.085575299 seconds)
  done (took 6.501809635 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.056146348 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.070839808 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.203743348 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.056201561 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.055784449 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.056259977 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.056000762 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.056844424 seconds)
  done (took 18.593009741 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.054626476 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.055162497 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.056501324 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.056174659 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.055704725 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.05566405 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.054782935 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.0549776 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.054608658 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.055134454 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.055272638 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.054220767 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.054938097 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.055840375 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.05548256 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.054382476 seconds)
  done (took 34.865341643 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.057260221 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.052609786 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.053997928 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.05345137 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.054309135 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.055998522 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.055474886 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.053350614 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.052328759 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.053382438 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.054282622 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.053032269 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.05227084 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.052262936 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.052510013 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.053849977 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.053150125 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.053192179 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.053154364 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.053364817 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.054204717 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.053099547 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.058128538 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.052816686 seconds)
  done (took 51.272956889 seconds)
done (took 113.225232513 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.290341034 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.678181564 seconds)
  done (took 8.949442097 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.055292056 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.052594295 seconds)
  done (took 6.154562125 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.05210302 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.054336034 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.05207114 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.052629193 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.052513495 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.052682499 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.053958665 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.051370986 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.052209948 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.051760777 seconds)
  done (took 22.504195407 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.035262795 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.052355767 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.052231107 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.05190084 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.05245107 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.053672558 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.052218021 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.052769237 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.052429312 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.053106728 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.053043937 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.05194515 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.051956839 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.052198258 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.052573705 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.053496264 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.052611837 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.053250948 seconds)
  done (took 38.892319832 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.053137091 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.052730513 seconds)
  done (took 6.083626223 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.052109818 seconds)
    (2/7) benchmarking "second"...
    done (took 2.053041473 seconds)
    (3/7) benchmarking "month"...
    done (took 2.052864032 seconds)
    (4/7) benchmarking "year"...
    done (took 2.05349743 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.051577221 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.052878535 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.052029526 seconds)
  done (took 16.345731042 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.052510674 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.20178002 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.249369666 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.653684495 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.053592802 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.054100883 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.953578941 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.053795272 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.056004814 seconds)
  done (took 22.308031271 seconds)
done (took 123.218418767 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.897001958 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.049588541 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.284989556 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.152456471 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.070455499 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.386742585 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.085778249 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.601613403 seconds)
done (took 44.507056626 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.062175794 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.050516175 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.082118979 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.082124288 seconds)
  done (took 23.195046156 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.052663168 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.375705213 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.075016318 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.023226531 seconds)
  done (took 23.520746902 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.431167021 seconds)
    (2/2) benchmarking "read"...
    done (took 2.407816763 seconds)
  done (took 6.821320663 seconds)
done (took 62.580258383 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.05335971 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.052857431 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.052788757 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.038723141 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.053800284 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.05246712 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.054231765 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.053085402 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.054773648 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.053196688 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.05431271 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.054868236 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.054132746 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.055117264 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05366078 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.053953454 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.054361175 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.054285965 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.054880722 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.054131729 seconds)
    (21/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.054735988 seconds)
    (22/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.054800999 seconds)
    (23/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.053602626 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.054964539 seconds)
  done (took 51.261530159 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.054700011 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.0538779 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.053068432 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.055815164 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.055020229 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.054711129 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.05529849 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.053723249 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.055454005 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.054421661 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.054034091 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.05470847 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.054676463 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.056596777 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.054868515 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.056283629 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.055734322 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.055463268 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.055175402 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.05488869 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.055240775 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055511305 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.057626506 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.056064229 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.055724841 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.052896587 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.056034594 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.05714186 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.055737627 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.055037027 seconds)
  done (took 63.637281101 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.056726861 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.05641538 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.056731328 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.056276422 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.056889141 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.056038903 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.05646684 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.056717372 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.056445113 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.056709541 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.056749751 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.057742694 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.056138947 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.056855503 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.056454209 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.057042717 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.058253256 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.057050203 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.056376961 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.057038327 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.057269494 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.057954812 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.057208204 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.056694606 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.057603196 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.058010746 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.057601149 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.057100963 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.057713944 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.057255928 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.058793188 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.057360189 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.057408143 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.05804204 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.057570961 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.059313844 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.057815884 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.05872387 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.057896607 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.059274008 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.0589887 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.057978308 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.058126081 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.058322132 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.058717146 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.059891274 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.058985815 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.058472887 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.058113866 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.059275673 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.060169888 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.059267862 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.059350483 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.058974471 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.060252042 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.059894868 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.059143725 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.058939381 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.059055139 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.059347951 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.059795188 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.059736588 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.059365332 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.060322799 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.061710592 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.060518334 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.059529639 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.060428681 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.059720449 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.063296348 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.060038303 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.060044551 seconds)
  done (took 150.181407139 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.06033265 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.06221502 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.060932772 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.060585184 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060442165 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.060488678 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.061025456 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.060356236 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.061142955 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.060216933 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061300259 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.062689292 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.061837093 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.060510341 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.060757124 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.061632829 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.062838453 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.061290391 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.061453995 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.061464907 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061505828 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.063511244 seconds)
  done (took 47.335437459 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.061139859 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.061172121 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.062284615 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.061258145 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.061736287 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.062431254 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.061056688 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.063796524 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.06165154 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.060701898 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.062348992 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.048937788 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.062922209 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.061561368 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.062031225 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.062040472 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.041375212 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.052195619 seconds)
  done (took 39.058685523 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.063208436 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.063053852 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.048844015 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.063051596 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.062968347 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.062250687 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.062322334 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.06234333 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.062697576 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.062434667 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.062585465 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062332715 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.047791187 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063097124 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.06195349 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.064201211 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.062959506 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063260818 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.062148063 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.029420139 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.063001811 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.062869961 seconds)
  done (took 47.308743078 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.063651494 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.062167933 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.063279236 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.063314331 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.064616775 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.063639202 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.063571852 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.063244345 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.063680719 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.064716817 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.062901863 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.063753691 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.064509653 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.063809872 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.065096402 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.063800274 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.063640812 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.065072663 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.064350515 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.065595539 seconds)
  done (took 43.269018706 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06434785 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.064464377 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.065476168 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066075469 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.064637616 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.064479469 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.064887561 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.067150582 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.06540412 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.064634028 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.064879106 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.065556245 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.066781816 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.065324025 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.06538041 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.065837687 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.065729358 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.066203573 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.064962583 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.066372741 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.065347879 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06580899 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.067331716 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.065293274 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.065641112 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.066176295 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.066396888 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.066138891 seconds)
  done (took 59.827568235 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066322545 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.065435799 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.065431882 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.066137957 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.066060842 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.065793379 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.066352032 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.066550034 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.067273508 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.066837915 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.066484493 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.067315728 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.062922673 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.066100297 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.066868954 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.066616196 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067403923 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.067112826 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.067145313 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066467901 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.066956031 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.049189944 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.052076723 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067884462 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066862167 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.067066714 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.067276717 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.06767556 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068314945 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.067503099 seconds)
  done (took 63.960605622 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.090520568 seconds)
    (2/2) benchmarking "in"...
    done (took 2.086308663 seconds)
  done (took 6.170544119 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.06742072 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.067448077 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.068807338 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.067924167 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.068242993 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.067795509 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.068157084 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.068260716 seconds)
  done (took 18.53770508 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.068640671 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.073623993 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.069736282 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.069488424 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.06829472 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078492102 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.06975963 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.071519299 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.072240493 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.069895342 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.072300989 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.074447453 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.076606481 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.077909947 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.070374959 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.070276559 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.072298924 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074216212 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.069614775 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.068909695 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.074055872 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.068748537 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.069707338 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.069535091 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.069621036 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.073010508 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.080522563 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.073125526 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.07338045 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.069782247 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.078709952 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.069939822 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.069963523 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.073068184 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.071255129 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.071225817 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.078894192 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.07093067 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.070813554 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.070983706 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.074615025 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.075064158 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.075964487 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.080266503 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.071359474 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.071683246 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.071027376 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.072070257 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.071408668 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.075434433 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.077552993 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.0739357 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.070904627 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.071467591 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.075897328 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.071856197 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.073713767 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.07495742 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.079005214 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.080382182 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.076608409 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.093795041 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.080444887 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.072224658 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.072390083 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.082067241 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.091709814 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.074751491 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.075875831 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.073285096 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.081454966 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.073053749 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.072182861 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.073412061 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.075445436 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.078600132 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.073712085 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.073053278 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.072447752 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.072977459 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.077698999 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.073083506 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.061954681 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.068957831 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.074324884 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.095772171 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.073313686 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.073851355 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.076595894 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.060055231 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.078158487 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.07831797 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.073849657 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.073444667 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.076612496 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.077365949 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.073219946 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.073811632 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.073660564 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.084439739 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.075336125 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.073945702 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.078786683 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.080295629 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.074526466 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.075636017 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.076841098 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.074079995 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.083782333 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.0755491 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.075979641 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.074291755 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.075168488 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.078538048 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.075612404 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.077660201 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.0810271 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.084830078 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.077382343 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.081520015 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.081115385 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.079447514 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.085345106 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.094116138 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.078162073 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.080227599 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.082107505 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.084196094 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.080877736 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.077767896 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.080218677 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.075445255 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.075365188 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.081479504 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.075846616 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076717172 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.077479105 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.076317006 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.077517125 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.075827239 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.078088398 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.079727652 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.080491035 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.079399586 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.082378542 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.076182386 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.080322496 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.085910133 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.078293312 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.076812141 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.077940752 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.080529538 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.077935211 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.080578877 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.077111663 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.073290855 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.07693147 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.078129901 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.081374784 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.077849415 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.077929339 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.07827391 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.083505619 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.076478466 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.078654466 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.077781604 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.077766881 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.077838577 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.080143294 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.080498104 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.08180096 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.078833621 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.084946258 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.078243491 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.078005245 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.07871137 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.078847909 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.079766686 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.083401618 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.089918442 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.084223034 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.088288621 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.07992347 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.087977361 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.079623465 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.082025358 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.083446731 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.078955575 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.079536703 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.079171979 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.078749338 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.08478285 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099580745 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.088636618 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.083047844 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.080440088 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.085522219 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.081904733 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.087504471 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.080025996 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.082781959 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.072870439 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.080179575 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.079946104 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.080070906 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.084730954 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.08007555 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.08021779 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.085592083 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.081129182 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.081316038 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.08263418 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.080341482 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.084696753 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.080754028 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.081853226 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.081613881 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.083368267 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.090291043 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.084962947 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.081981544 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.08082323 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.084798754 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.081379108 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.080871993 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.085047105 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.085671356 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.081170527 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.084599738 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.091314881 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.084071022 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.082171348 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.081471878 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.081017209 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.085625005 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.082344249 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.086154514 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.087870927 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.087035379 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.083992359 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.088540579 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.082776862 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.086588493 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.082597856 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.086864911 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.082983239 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.085648645 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.08229333 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.082658921 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.079822186 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.083285943 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.08485018 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.082744546 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.071735078 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.086032409 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.087132547 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.083769453 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.086860087 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.090193042 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.091052777 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.083900025 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.08598035 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.087650855 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.084572963 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.085792948 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.087153747 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.098143003 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.092925851 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.084588846 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.083767021 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.083767876 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.087486937 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.087651459 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.084188627 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.093557134 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.085429233 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.084457704 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.087246216 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.084334976 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.083478826 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.092468294 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.087322059 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.090788515 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.087623907 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.086495285 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.086454258 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.084771392 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.089781864 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.085144008 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.087502819 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.088422727 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.085812008 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.088603835 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.084926734 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.09508397 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.084847302 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.087318298 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.094931792 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.088940232 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.070861013 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.088448431 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.073529664 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.088516608 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.088848531 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.08475024 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.08630879 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.085104196 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.090136535 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.095861271 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.090246542 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.09183665 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.091046208 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.096914782 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.08617303 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.085856034 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.086507842 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.091031342 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.092731453 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.086761031 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.085755729 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.096043155 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.087780096 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.08724641 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.089404383 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.087017983 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.087787659 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.086845428 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.087289207 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.092386166 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.091581235 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.088819959 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.087261037 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.08680328 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.087152228 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.092300844 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.091293718 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.090215627 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.087478968 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.087374943 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.0869888 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.088497291 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.087471069 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.087964046 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.088276262 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.088245916 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.098906037 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.087583043 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.075912973 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.084818207 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.08225035 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.098350477 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.088672289 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.088026134 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.089272009 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.090191024 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.090903505 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.087546871 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.087784568 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.088995254 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.089935457 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.089710192 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.100952987 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.098468507 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.092436814 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.093867063 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.089548063 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.093502859 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099146773 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.109179763 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.088274327 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.09277548 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.091148433 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.098073406 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.094114248 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.096448805 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.094959599 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.095172428 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.093418226 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.090480631 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.094140493 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101457062 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.089066071 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.090609269 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.091156289 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.096566702 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.091945534 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.090245117 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.091606538 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.094409575 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.091617791 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.102878894 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.090899303 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.092729418 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.091315013 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.090361161 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.091150962 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.090975848 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.094936463 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.094078001 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.091815757 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.090744049 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.094403239 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.09812492 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.091036384 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.096159065 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.100225976 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.088554642 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.094154299 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.093433747 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.09202919 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.095697224 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.092390402 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.091456187 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.09483703 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.09169439 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.09330776 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098107137 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.101403103 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.095609673 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.092542521 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.091892929 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.098100858 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.091789247 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.092218424 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.095000354 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.102780564 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.098427152 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.102440948 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.101784677 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.093229511 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.093964175 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102854106 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.098381 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.092248476 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.092943499 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.096010607 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.097916469 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.097160023 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.0958494 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.091967674 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.094984186 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.099308937 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.093933649 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.093702776 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.09308973 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.095317084 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.097520911 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.096709579 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.099100429 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.094417901 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.094415057 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.093389389 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.097232224 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.095774414 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.099402123 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.094624093 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.09399999 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.098618439 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.097059549 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.099273641 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.094316399 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.093901586 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.097153097 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.095234354 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.096211183 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.094081067 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.095014466 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.093788179 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.09945706 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.101553324 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.095697359 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.098386518 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.096101972 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.101471148 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.094906155 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.09544934 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.094938072 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.094423047 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.104939398 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.095017367 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.096478078 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.096483852 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.09599932 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.102530853 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.098961819 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.102898376 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.096648965 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.096106024 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.095067098 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.100657807 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.103421181 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.099799864 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.100836005 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.102478055 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.102605405 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.09990417 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.097098438 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.085548697 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.0943481 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.098351781 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.102450192 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.10061593 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.10114855 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.096514971 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.100377178 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.097522975 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.070600336 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.09334191 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.097581686 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.10135216 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.105994102 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.107926998 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.097619327 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.099576566 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.097994323 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.101988618 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.106996431 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.098085094 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.097760828 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.09766987 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.100236614 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.098665972 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.105376069 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.104906159 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.104039464 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.098537047 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.104275528 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.115408181 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.102834364 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.10849687 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.126177981 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.099019509 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.098010397 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.101072884 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.098921577 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.099567972 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.10179486 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.098971327 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.106718768 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.097805248 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.098904196 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.107448187 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.099060505 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.099007529 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.098418704 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.099907788 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.105979292 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.099226127 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.108540182 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.099587726 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.095496402 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.099275435 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.102191799 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.099767602 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.099307038 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.099730555 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.103127688 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.09961249 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.099271122 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.110483459 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.100155273 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.103070005 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.114639601 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.550644636 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.100030632 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.099845095 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.100649776 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.106972332 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.104605148 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.099817711 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.105618114 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.107420517 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.105023393 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.108001873 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.103912143 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.103294181 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.103084405 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.100944908 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.100620236 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.115404457 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.111145432 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.101922866 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.10192849 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.108489532 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.101439984 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.109223707 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.10908167 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.103761071 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.104988479 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.101956604 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.100625176 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.101806032 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.101575519 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.105756698 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.107254502 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.101372704 seconds)
  done (took 1246.897501199 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.102122749 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.102437517 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.102101389 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.102402684 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.101823596 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.101201435 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.102042813 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.102148251 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.10185216 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.102947032 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.101448821 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.102431818 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.102160028 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.102459903 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.102871176 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.102746144 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.103523949 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.102558141 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.103152346 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.102373728 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.102816912 seconds)
  done (took 46.176878876 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.102790647 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.102637284 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.103784699 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.102336716 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.103878993 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.103111011 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.102844196 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.104268462 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.102711858 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104383646 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.103721762 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.10306699 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.103883514 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.103896603 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.104026697 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.104746111 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.103367886 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.103291459 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.104278415 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.103519228 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.104739152 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.104870212 seconds)
  done (took 48.308532439 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.105399849 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.105611371 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.107293216 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.105291906 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.104530343 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.104958883 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.103900295 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.10693811 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.106302662 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.1057974 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.113037057 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.111781295 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.105505731 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.108140479 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.105772676 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.105183862 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.251655088 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.105600807 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.10553386 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.105869328 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.104837878 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.11379234 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.104581168 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.105689635 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.104368729 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.106201004 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.106028021 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.107362976 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.106251549 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.107118957 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.109233295 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.105983075 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.108576967 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.110650158 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.10618639 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.106654125 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.109975251 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.106732348 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.106671979 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.106780493 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.117433276 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.125811637 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.103221002 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.076568236 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.116327165 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.10751158 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.106986646 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.111257998 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.113530805 seconds)
  done (took 105.426891001 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.106414526 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.107266804 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.106988707 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.107408148 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.107933108 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.108081814 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.107329723 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.108101077 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.109614235 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.107423666 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.10897784 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.107741298 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.108456251 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.108923156 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.108609758 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.109058083 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.108605001 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.108256783 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.1095388 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.109316528 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.109820218 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.110107793 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.10961347 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.110295264 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.109823372 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.110837247 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.110205697 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.110867677 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.110593138 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.110981684 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.110187647 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.11030657 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.110358841 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.109371987 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.110067695 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.110231705 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.11003626 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.110049915 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.110635336 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.10989141 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.079555051 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.106467315 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.110779449 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.110064517 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.111605005 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.109903127 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.112602221 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.110750705 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.110776534 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.110686871 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.110355734 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.109558469 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.109500102 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.109137277 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.109804559 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.109350946 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.111498041 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.110256158 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.110815019 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.110977801 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.109702573 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.109988675 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.110815504 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.11060115 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.111489042 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.111688378 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.110800395 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.110478816 seconds)
  done (took 145.462169723 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.111653596 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.111248464 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112078574 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.110941922 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.111326801 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.111089764 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.111377591 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.111551025 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.111226503 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.110608393 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.111610679 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112201651 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.111004895 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.11266797 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.107418093 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.111753948 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.112278106 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.112654209 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.112292501 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.112574126 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.112293595 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.112332899 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.112606257 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113105465 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.112883994 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.112706672 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.11295148 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.112195679 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.112716654 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113335843 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.112704381 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.113700484 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.114623817 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.113150178 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.113904823 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.113071166 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.113804566 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113739317 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.113740829 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.113242408 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.113241708 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.11370655 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.114129654 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.113848621 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114037405 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.114176608 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.114699063 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.114106205 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.113804739 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.113918344 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.113480471 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114740981 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.114067649 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.114341844 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.114655398 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.114035893 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.114661347 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.113969444 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115442634 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.11448942 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.114153274 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.114384641 seconds)
  done (took 133.041534572 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.11495943 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.115165712 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.099445713 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.115342831 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.114471051 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.116108779 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.114719053 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.114617446 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.114683942 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.11469301 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.115897332 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.114958347 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.116091608 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.115818498 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.114997023 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117309716 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.115958715 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.115988695 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.115188949 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.116355144 seconds)
  done (took 44.331792487 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.115998108 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.115889497 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.116611336 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.116171171 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.116019294 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.116059209 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.116075302 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116604214 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.116916423 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.116262064 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.116161286 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.115951975 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.116487374 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.116462855 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.115778827 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.116876063 seconds)
  done (took 35.900995571 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.116145053 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.116940613 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.117339848 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.11726691 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.117051925 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.117156603 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.117391482 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.11714512 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.117502907 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.117267768 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.117831491 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.117203211 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.117203864 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.11761618 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.117946819 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.117432846 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.117569509 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.116980493 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.11754175 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.117048257 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.118120817 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.117490268 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.118397454 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.118249808 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.119274301 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.11878088 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.118923901 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.118169203 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.118949966 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.118459907 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.119181319 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.118708355 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.119366249 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.118401494 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.120143682 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.119456814 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.119117048 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.118855732 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.119590838 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.118393258 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.119259605 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.119444835 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.119657715 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.119122522 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.120100839 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.119160549 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.119736415 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.118753355 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.120102771 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.118597121 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.11948188 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.119914167 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.118898726 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.119486043 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.119038229 seconds)
  done (took 118.554451084 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.119746585 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.118977976 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.119077269 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.119133515 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.120363496 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.119636392 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.119477841 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.1195707 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.119465658 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.120252736 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.119596596 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.1200693 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.120258396 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.12116673 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120195226 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.119822753 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.12069255 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.121038313 seconds)
  done (took 40.20230173 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.120896786 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.120942071 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.121432143 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.120823398 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.121142696 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.120926413 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.121707677 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.120682392 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.120627491 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.120519208 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.120997889 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.122662798 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121748783 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.120996834 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.121115008 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122544645 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.120694421 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.121356097 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.121492855 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.121579664 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.120849644 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.12165324 seconds)
  done (took 48.712678142 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.122096782 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.121885625 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.136270876 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.138561947 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.1407325 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.150903063 seconds)
  done (took 14.855594518 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121771016 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121878217 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.12405417 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121293079 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122512988 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122087368 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123137529 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122572038 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123121093 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12342088 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123530903 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123264625 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12278662 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088544157 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123368419 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.123014435 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122550345 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123237449 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123455812 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123050987 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.124207049 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122524331 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.107622441 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.105074464 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123807862 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123645351 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123362994 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12394691 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122801461 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124227478 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124028164 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123108624 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088476322 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123430729 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124138655 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123941783 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.123293842 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124305379 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124130781 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12424329 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.124978246 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124084184 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124622403 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124192422 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124796566 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124339907 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.1256467 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125329314 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.124346622 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124902066 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.1252581 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124938047 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123788433 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125535009 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124239295 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125411401 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125502472 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12629242 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125592185 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125970863 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121752279 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125074348 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125770341 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126139852 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125033173 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126133806 seconds)
  done (took 142.124886749 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126198583 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.12629288 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126338535 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125664782 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126430591 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125730514 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126172212 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125815465 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127083359 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127093415 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126654065 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126632144 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12760922 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126727969 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126649824 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126949612 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127097988 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127321224 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128289946 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126396769 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127307176 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127729496 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127499745 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127846346 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127206948 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127983909 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128742752 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127203921 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127790236 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127802812 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12792369 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127812355 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12857501 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.126959876 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128406097 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127785255 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12860747 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128342275 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128481064 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128676392 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128244799 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129055766 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128700295 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127782886 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129474604 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129291659 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.1292487 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128270854 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128897819 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12826636 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12892789 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129526137 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129259354 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128820718 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12941159 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128906388 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129119019 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129535369 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12883519 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128464966 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129187549 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129589292 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129449433 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12929515 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129254177 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.1297053 seconds)
  done (took 142.498282529 seconds)
done (took 2905.030964924 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.188046912 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.213496755 seconds)
  done (took 16.455254391 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.294720073 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.173994334 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.316197981 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.245330322 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.140143387 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.145971002 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.133596305 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.131642744 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.224521555 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.132512221 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.164373555 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.13276066 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.132899208 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.132556906 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.133108228 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.132863957 seconds)
  done (took 56.825648186 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.133744113 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.136299939 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.133466775 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.133022373 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.144523867 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.205319902 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.152055992 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.137300761 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.146564167 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.167008106 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.151469761 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.138085187 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.141192057 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.138542536 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.223134201 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.176316078 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.188196649 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.204222945 seconds)
  done (took 40.904943316 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.210735462 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.137893695 seconds)
  done (took 11.408391947 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.145248301 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.160730819 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.163436886 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.139327972 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.159818759 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.169763342 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.15035794 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.138995 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.169904105 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.154751828 seconds)
  done (took 73.608258898 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.13685084 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.137654279 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.393321463 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.142409924 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.141877882 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.158659375 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.135874292 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.164626183 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.136402002 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.132290245 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.145282388 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.397461829 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.144767309 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.137259238 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.490275471 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.146684544 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.141474505 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.165369052 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.163399441 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.13892807 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.141229362 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.137924269 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.298899965 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.827380048 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.134866516 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.139996919 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.142437042 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.133971075 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.134037229 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.137525663 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.138687315 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.135177341 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.139076899 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.137271586 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.143887245 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.139986218 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.630148319 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.152395984 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.143785256 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.215448159 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.178710422 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.141503713 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.947566579 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.138424198 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.134588191 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.143957176 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.809851799 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.218886732 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.136770859 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.321480729 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.484170605 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.150881213 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.297151103 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.277877834 seconds)
  done (took 147.395521378 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.136693783 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.370735436 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.287655812 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.134186501 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.392502259 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.343543218 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.136475014 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.180850299 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.138339656 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.337552032 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.384517199 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.238830876 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.13709959 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.136208757 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.135087339 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.134933283 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.280363433 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.201796744 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.138068463 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.135140175 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.161417493 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.335268768 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.255969992 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.139776299 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.162649906 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.341634568 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.256090551 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.238009616 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.90593134 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.135978156 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.197977291 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.138896989 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.1373689 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.136209567 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.288738901 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.228585936 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221937817 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.138678363 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.136658911 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.137375031 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.810666379 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.335393343 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.233179175 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.260621312 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.386050468 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.350393709 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.748605756 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.135932036 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.764399098 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.30184289 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.341362115 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.344187918 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.255964113 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.139855063 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.427564076 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.13737375 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.138277893 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.360902486 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.357249177 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.235288295 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.141091717 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.140117812 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.138744144 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.377085532 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.143131531 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.229970421 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.142466019 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.139895039 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.231428955 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.238527431 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.36960168 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.358668613 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.169611 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.459927931 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.635773144 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.342464424 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.202964538 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.359376016 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.140227749 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.1405106 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.21738874 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.979445078 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.389805236 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.379144955 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.337075678 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.168450458 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.788781139 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.139175287 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.326620956 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.315895354 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.370724778 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.383233969 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.373303296 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.505421406 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.140557763 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.139388232 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.478766525 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.25682102 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.093085641 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.483985699 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.368552132 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.628252095 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.166408297 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.423857463 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267801965 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.143165937 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.787999771 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.142952019 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.346568487 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.179531167 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.143072122 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.142257327 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.330870222 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.047141818 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.142640285 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.860839647 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.201755387 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.144345635 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.345769997 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.145129005 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385179673 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.133492673 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.374582229 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.820677899 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.171912476 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.315859632 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.386182594 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.777589546 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.408384577 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.382323898 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.25467627 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.362503254 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.945671609 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.142264161 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.403804157 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.144380259 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.142780941 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.311543012 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.145076671 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.285127866 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.144563142 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.407441484 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.162820898 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.368683151 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.14190727 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.379834433 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.174140994 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.191246252 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.122556259 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.260353299 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.144231802 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.091498528 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.300207177 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.146909059 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.144536779 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.733544246 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.145335964 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.296947475 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.366889351 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.163292574 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.211300458 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.708407066 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.139479355 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.225942016 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.165029446 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.428014554 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.143869419 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.392381706 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.109839969 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.617823693 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.145182754 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.379474621 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.329528239 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.148978796 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.144186192 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.990663339 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.144920378 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.145170709 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.29965438 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.541641503 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.063792857 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.343193444 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.147676497 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.272061163 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.150844316 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.225720428 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.487874471 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.145115651 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.146590093 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.143930576 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.147167473 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.147729123 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.352881076 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.171141834 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.577667414 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.281170303 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.400243673 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.451106279 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.343707331 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.185539538 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.150026024 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.367998015 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.147853812 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.207252483 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.149422305 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.166064686 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.377855121 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.151960923 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.352844406 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.3809478 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.027556454 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.192738543 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.150233701 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147401502 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.057860936 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.294896379 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.23158615 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.15020774 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.1477239 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.260991268 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.264903166 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.329880431 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.968370141 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.293055966 seconds)
  done (took 961.283405136 seconds)
done (took 1309.936823748 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.147819621 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.14917512 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.149962442 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.149034295 seconds)
  done (took 30.668239294 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.148500978 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.148929386 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.149529015 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.150118562 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.149179513 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.15073673 seconds)
  done (took 14.967486123 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.148337327 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.150182421 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.150940141 seconds)
  done (took 23.521273234 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.568397342 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.548217903 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.221149801 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.288553116 seconds)
  done (took 11.697772578 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.15340234 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.150197491 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.150607548 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.151114359 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.15118381 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.151359981 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.150599777 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.152594963 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.150728768 seconds)
  done (took 21.440163714 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.328372925 seconds)
done (took 108.695471603 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.414623999 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.088015056 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.329574306 seconds)
    (4/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.245543548 seconds)
    (5/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.546506022 seconds)
    (6/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.935193458 seconds)
    (7/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.99427366 seconds)
    (8/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.319056906 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.464886916 seconds)
    (10/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.327239017 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.147000536 seconds)
    (12/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.17541532 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.281359564 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.231106772 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.291400987 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.169050088 seconds)
    (17/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.165805425 seconds)
    (18/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.836951728 seconds)
    (19/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.521825309 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.406699749 seconds)
    (21/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.167149017 seconds)
    (22/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.77976466 seconds)
    (23/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.452568661 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.549931208 seconds)
    (25/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.1667567 seconds)
    (26/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.183893036 seconds)
    (27/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.076654912 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.176246181 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.162918781 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.169265109 seconds)
    (31/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.207788604 seconds)
    (32/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.326487838 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.270852374 seconds)
    (34/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.167416316 seconds)
    (35/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.243008495 seconds)
    (36/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.841647746 seconds)
    (37/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.329495692 seconds)
    (38/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.262751067 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.391708248 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.250682204 seconds)
    (41/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.31736533 seconds)
    (42/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.221657703 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.293586134 seconds)
    (44/341) benchmarking ("sort", Float64, false)...
    done (took 5.874181471 seconds)
    (45/341) benchmarking ("sort", Int8, false)...
    done (took 5.113685736 seconds)
    (46/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.943685508 seconds)
    (47/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.511790526 seconds)
    (48/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.170113794 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 4.194700216 seconds)
    (50/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.130368685 seconds)
    (51/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.945136129 seconds)
    (52/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.373185006 seconds)
    (53/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.330531369 seconds)
    (54/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.252314923 seconds)
    (55/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.410423739 seconds)
    (56/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.44091905 seconds)
    (57/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.278711263 seconds)
    (58/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.584135176 seconds)
    (59/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.9309815 seconds)
    (60/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.408807383 seconds)
    (61/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.185920089 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.044625888 seconds)
    (63/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.239712571 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.928303605 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.201120278 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.876570767 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.426602345 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.868880456 seconds)
    (69/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.296993321 seconds)
    (70/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.17621017 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.491563227 seconds)
    (72/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.513139434 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 5.861827942 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.184206414 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.497060459 seconds)
    (76/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.180702213 seconds)
    (77/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.281859123 seconds)
    (78/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.422295997 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.168211035 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.17066995 seconds)
    (81/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.340977892 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.168201176 seconds)
    (83/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.29357349 seconds)
    (84/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.172001953 seconds)
    (85/341) benchmarking ("map", abs, Int64, true)...
    done (took 4.062699216 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.934548331 seconds)
    (87/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.17214472 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.171371419 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.557375461 seconds)
    (90/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.76985396 seconds)
    (91/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.171624944 seconds)
    (92/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.433211033 seconds)
    (93/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.571728905 seconds)
    (94/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.463365141 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.29635391 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.283631742 seconds)
    (97/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.537721778 seconds)
    (98/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.370901063 seconds)
    (99/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.207562577 seconds)
    (100/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.482495106 seconds)
    (101/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.576878308 seconds)
    (102/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.246100282 seconds)
    (103/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.921336854 seconds)
    (104/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.099885403 seconds)
    (105/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.439746604 seconds)
    (106/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.564840896 seconds)
    (107/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.406435811 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.183699625 seconds)
    (109/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.552162274 seconds)
    (110/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.182595695 seconds)
    (111/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.086115036 seconds)
    (112/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.264924125 seconds)
    (113/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.49525461 seconds)
    (114/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.511413412 seconds)
    (115/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.403366727 seconds)
    (116/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.183492339 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.270080796 seconds)
    (118/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.173905629 seconds)
    (119/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.386051167 seconds)
    (120/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.50543738 seconds)
    (121/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.248699015 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.432233918 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.447908666 seconds)
    (124/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.172218269 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.502379498 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.51107909 seconds)
    (127/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.28087007 seconds)
    (128/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.98723179 seconds)
    (129/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.258737782 seconds)
    (130/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.953478814 seconds)
    (131/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.41640404 seconds)
    (132/341) benchmarking ("sort", BigInt, false)...
    done (took 7.171962063 seconds)
    (133/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.318774669 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.190803538 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.302535591 seconds)
    (136/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.387219629 seconds)
    (137/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.268374035 seconds)
    (138/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.655292292 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.461149562 seconds)
    (140/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.275497175 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.521500164 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.263723539 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.411555346 seconds)
    (144/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.350265499 seconds)
    (145/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.173452578 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.18324555 seconds)
    (147/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.435815129 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.410166693 seconds)
    (149/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.173598809 seconds)
    (150/341) benchmarking ("sort", Bool, false)...
    done (took 2.387996094 seconds)
    (151/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.234669249 seconds)
    (152/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.960145392 seconds)
    (153/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.362759387 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.07996849 seconds)
    (155/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.956099308 seconds)
    (156/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.969439983 seconds)
    (157/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.347031204 seconds)
    (158/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.556544793 seconds)
    (159/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.172157549 seconds)
    (160/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.332832842 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.178216493 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.185974156 seconds)
    (163/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.171865582 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.847367207 seconds)
    (165/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.091702092 seconds)
    (166/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.321129657 seconds)
    (167/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.382689777 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.313942756 seconds)
    (169/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.320145911 seconds)
    (170/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.179555606 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.066527886 seconds)
    (172/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.401125309 seconds)
    (173/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.184727544 seconds)
    (174/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.386914542 seconds)
    (175/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.640704283 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.383148806 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.326748864 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.07383458 seconds)
    (179/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.739053692 seconds)
    (180/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.192605614 seconds)
    (181/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.187930222 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.384965207 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.278231579 seconds)
    (184/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.459341757 seconds)
    (185/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.174377868 seconds)
    (186/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 4.063098989 seconds)
    (187/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.379643056 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.331202078 seconds)
    (189/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.596237002 seconds)
    (190/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.175328981 seconds)
    (191/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.264848478 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.881381143 seconds)
    (193/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.325843698 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.252087822 seconds)
    (195/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.38708417 seconds)
    (196/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.48426794 seconds)
    (197/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.18026119 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.114217056 seconds)
    (199/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.192540584 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.173369571 seconds)
    (201/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.498986161 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.182909852 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.199688434 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.47642434 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.17543312 seconds)
    (206/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.174824201 seconds)
    (207/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 4.523276642 seconds)
    (208/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.286383685 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.57286773 seconds)
    (210/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.842479172 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.336471737 seconds)
    (212/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.119257011 seconds)
    (213/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.838001928 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.175882108 seconds)
    (215/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.338156735 seconds)
    (216/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.643060005 seconds)
    (217/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.952522933 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.210049818 seconds)
    (219/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.569290051 seconds)
    (220/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.16315269 seconds)
    (221/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.306841665 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.501907255 seconds)
    (223/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.315901706 seconds)
    (224/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.389535055 seconds)
    (225/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.984539645 seconds)
    (226/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.466645165 seconds)
    (227/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.38945368 seconds)
    (228/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.186993163 seconds)
    (229/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.249274506 seconds)
    (230/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.706723287 seconds)
    (231/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.354599605 seconds)
    (232/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.653759395 seconds)
    (233/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.266886327 seconds)
    (234/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.592800527 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.845089725 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.470047108 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.410278638 seconds)
    (238/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.64812247 seconds)
    (239/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.500570725 seconds)
    (240/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.43102583 seconds)
    (241/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.783768751 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.205219645 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.30727849 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.30191572 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.17716106 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 4.853691522 seconds)
    (247/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.195799246 seconds)
    (248/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.30780502 seconds)
    (249/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.468029705 seconds)
    (250/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.376667038 seconds)
    (251/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.271196141 seconds)
    (252/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.090797218 seconds)
    (253/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.64913387 seconds)
    (254/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.5659022 seconds)
    (255/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.178020257 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.197588315 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.255091197 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.182474784 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.190461041 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.202305462 seconds)
    (261/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.499385421 seconds)
    (262/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.199173532 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.256252344 seconds)
    (264/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.375253287 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.904304971 seconds)
    (266/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.476322638 seconds)
    (267/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.314402415 seconds)
    (268/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.288104527 seconds)
    (269/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.398310945 seconds)
    (270/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.485482054 seconds)
    (271/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.207466612 seconds)
    (272/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.419385319 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.187387057 seconds)
    (274/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.657037859 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.053131274 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.415052259 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.297574862 seconds)
    (278/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.321145672 seconds)
    (279/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.260792415 seconds)
    (280/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.276113188 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.194570682 seconds)
    (282/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.465399263 seconds)
    (283/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.313037513 seconds)
    (284/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.298319978 seconds)
    (285/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.322980729 seconds)
    (286/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.334857176 seconds)
    (287/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.484739167 seconds)
    (288/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.183712303 seconds)
    (289/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.227413758 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.432491278 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.182672387 seconds)
    (292/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.61098211 seconds)
    (293/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.26194493 seconds)
    (294/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.219321754 seconds)
    (295/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.603146349 seconds)
    (296/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.262309512 seconds)
    (297/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.179420186 seconds)
    (298/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 4.178508111 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.507141373 seconds)
    (300/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.198139965 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.716820638 seconds)
    (302/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.843058361 seconds)
    (303/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.302784299 seconds)
    (304/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.184198037 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.166267504 seconds)
    (306/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.209091672 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.180990534 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.098291776 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.545400924 seconds)
    (310/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.460261072 seconds)
    (311/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.432559839 seconds)
    (312/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.390147647 seconds)
    (313/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.288540701 seconds)
    (314/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.181171684 seconds)
    (315/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.137643293 seconds)
    (316/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.447588564 seconds)
    (317/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.188360008 seconds)
    (318/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.190457073 seconds)
    (319/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.183759045 seconds)
    (320/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.617613947 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.075738979 seconds)
    (322/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.520692329 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.189389173 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.383265532 seconds)
    (325/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.293470379 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.460986851 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.620905708 seconds)
    (328/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.677533333 seconds)
    (329/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.420552335 seconds)
    (330/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.200681801 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.181364006 seconds)
    (332/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.18845742 seconds)
    (333/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.187421618 seconds)
    (334/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.232332538 seconds)
    (335/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.366024446 seconds)
    (336/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.129243157 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.425218346 seconds)
    (338/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.261468483 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.2950962 seconds)
    (340/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.203300609 seconds)
    (341/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.813696592 seconds)
  done (took 1199.506094221 seconds)
done (took 1201.677637387 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.201990278 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.182216754 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.700321547 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.196549252 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.182938099 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.186085173 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.706754407 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.215496974 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.200783304 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.710789017 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.195575057 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.182948384 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.198570477 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.217814868 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.195367103 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.198164754 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.189298331 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.208839552 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.21902215 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.190287247 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.236064262 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.189685557 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.183773261 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.236262211 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.183596438 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.197034113 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.203325656 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.236218796 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.235594508 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.187185262 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.191106609 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.55259232 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.240097315 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.190069717 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.195547179 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.200123071 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.190621679 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.199439487 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.202989927 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.199676473 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.185037615 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.195427327 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.189689338 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.188685532 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.185834218 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.184141232 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.18710653 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.309967893 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.199684353 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.536484723 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.249096365 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.20440158 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.236388893 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.18839193 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.184644331 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.189475647 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.23650874 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.191090664 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.190301004 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.535059081 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.283597357 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.201458294 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.538405676 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.253541262 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.19724705 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.194705129 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.185843725 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.205272519 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.554283775 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.760240098 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.222689452 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.207327263 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.187381484 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.188494123 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.200719774 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.714180046 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.20420988 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.782626955 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.216542259 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.20129599 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.194085342 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.190920063 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.18804863 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.20471271 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.206337589 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.188406073 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.195253577 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.194960562 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.202832218 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.557210558 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.236106757 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.705278583 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.199491798 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.208605031 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.20842668 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.784968453 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.221671047 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.206196331 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.193438663 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.556801498 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.23453856 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206865769 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.190144772 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.200056475 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.303598119 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.207075384 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.20797886 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.188571915 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.211230774 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.194910384 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.188951294 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.203218356 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.209803829 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.224810776 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.205298387 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.188490907 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.197853824 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.195573335 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206637565 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.198377774 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.196092161 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.200254854 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.189513213 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.241546906 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.208184613 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.205710581 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.304517704 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.196402471 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.318042686 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.208691708 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.197356434 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.188651857 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.538976192 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.236406753 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.211036451 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.196126886 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.213806731 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.212178381 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.208096497 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.193681027 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.206562523 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.193817105 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.242531617 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.161032806 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.213187631 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.243280984 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.20533193 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.197407242 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.207996087 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.227085169 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.211358074 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.195888805 seconds)
done (took 344.487771059 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.240962995 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.193773315 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.272565524 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.194478253 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.260280206 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.247530582 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.193094336 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.162452318 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.194407549 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.577413012 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.196962177 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.199956294 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.193297874 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.194489764 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.243242363 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.195198203 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.195262162 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.426559374 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.194796367 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.254216892 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.195467505 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.194155975 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.195188367 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.583835095 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.194668132 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.193846055 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.254904446 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.195128118 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.435948583 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.194734034 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.181761091 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.437664796 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.256212255 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.210508576 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.203600166 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.201614983 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.263353482 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.207619531 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.24342363 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.243549012 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.273190452 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.230087949 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.196774485 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.175017202 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.200724352 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.197988842 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.196205085 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.229902806 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.195626764 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.201849809 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.42968172 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.205255753 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.203778333 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.198811051 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.197585634 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.210525478 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.197123642 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.198069556 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.256737212 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.198056891 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.243839546 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.587863392 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.580129185 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.198505918 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.196377466 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.184312362 seconds)
  done (took 205.417621239 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.250121103 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.28550969 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.267293396 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.203902959 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.246019041 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.233793638 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.204834434 seconds)
  done (took 17.807108302 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.204398284 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.185280411 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.22294472 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.223346997 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.200104932 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.343740518 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.180851201 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.204165103 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.224632943 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.198497644 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.517384703 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.221805662 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.205295051 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.199014329 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.212410367 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.231456806 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.202053624 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.200839195 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.298843835 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.277468441 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.203956114 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.206182584 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.22983246 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.211780859 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.200394816 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.201708022 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.200683932 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.209223523 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.200381449 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.200671792 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.200623319 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.213394568 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.19893808 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.195064663 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.200001285 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.20029898 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.200504123 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.20090004 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.200674122 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.200646921 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.200621462 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.200705401 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.201153127 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.200282053 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.200790027 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.223249964 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.201390442 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.202408259 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.201117785 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.202074775 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.230576231 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.202727804 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.201972707 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.206346106 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.242064096 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.208828207 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.202097733 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.201980419 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.202278472 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.202148132 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.203101481 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.282366514 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.225503892 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.203796788 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.224998489 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.240150639 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.202624906 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.202999641 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.20284721 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.226632252 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.202612191 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.226877435 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.20295495 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.303004486 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.202427158 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.338361548 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.222830463 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.206098094 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.20562484 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.204188046 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.211360969 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.20303895 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.205134901 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.209912821 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.208964504 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.203832624 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.204299602 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.20445295 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.211375346 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.204691159 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.249350481 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.204257563 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.204730743 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.302089248 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.204257912 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.300555161 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.22888432 seconds)
  done (took 237.37680262 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.207924751 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.20622347 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.21744131 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.205915286 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.204756939 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.209878426 seconds)
  done (took 15.372628877 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.207480758 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.209637359 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.204592695 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.204513854 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.203927465 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.206723351 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.204633465 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.206727544 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.210007786 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.206308519 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.20632066 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.205981815 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.207438922 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.196083144 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.20336931 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.205771237 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.206025753 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.206020613 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.173000914 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.2037132 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.418178497 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.205997834 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.192103056 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.210374243 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.211078973 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.206890202 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.20859772 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.179620028 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.207811853 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.21204783 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.211748319 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.193826879 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.210583405 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.213148183 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.212393669 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.20899895 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.179435439 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.207129075 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.207994985 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.207789079 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.207691963 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.207625833 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.207646626 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.207679544 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.209863086 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.215249974 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.212608708 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.216502953 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.209273299 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.207547459 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.208296688 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.207715117 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.208166398 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.206805173 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.211916059 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.215476487 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.212841319 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.208809385 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.207624525 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.211618855 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.21218783 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.20931069 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.210522142 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.213699109 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.215416133 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.209237374 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.210995845 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.213409058 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.20973086 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.20790981 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.209295117 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.208724383 seconds)
  done (took 162.241400961 seconds)
done (took 640.329933748 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.302886854 seconds)
  done (took 9.430571865 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.252216419 seconds)
  done (took 9.469271928 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.939689455 seconds)
  done (took 13.049472409 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.215855319 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.198537061 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.226017549 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.21066604 seconds)
  done (took 30.991744143 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.449541751 seconds)
  done (took 9.577214229 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.222178858 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.207253945 seconds)
  done (took 16.620829988 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.212485766 seconds)
  done (took 9.341292657 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.307268682 seconds)
  done (took 9.449859201 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.221494015 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.212932647 seconds)
  done (took 16.581090049 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.212826505 seconds)
  done (took 9.341309779 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.003413389 seconds)
  done (took 10.214244451 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.214755007 seconds)
  done (took 9.361463385 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.215078206 seconds)
  done (took 9.34338782 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.384501982 seconds)
  done (took 10.512153926 seconds)
done (took 175.412836209 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.218665533 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.211019762 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.211310599 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.212690199 seconds)
  done (took 30.982288352 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.249509764 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.247288143 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.255543134 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.24675558 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.237121135 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.237804511 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.248336681 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.247762176 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.239025025 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.244948253 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.248904606 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.244624013 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.236883163 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.257317097 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.256863399 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.240135087 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.240927861 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.245336489 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.238312224 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.257801206 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.246632814 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.248105609 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.213671672 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.21500583 seconds)
  done (took 55.973913962 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.402735245 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.282456079 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.36818354 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.260544476 seconds)
  done (took 11.443661614 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.216169658 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.280257617 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.2673932 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.262317136 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.267759707 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.319514487 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.268887391 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.353217629 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.345501627 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.342401786 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.223203058 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.237984432 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.237627429 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.26200301 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.317329453 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.215202935 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.21611152 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.331036314 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.280097637 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.387705256 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.217594383 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.271608154 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.257802221 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.269914015 seconds)
  done (took 56.781382347 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.21850987 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.22559298 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.224608345 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.220116481 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.219381235 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.219428171 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.225292128 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.221252283 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.241637961 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.22033737 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.219070967 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.219225283 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.225381699 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.219195772 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.218771712 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.233036033 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.234000549 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.219061961 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.2235132 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.22683416 seconds)
  done (took 46.607618278 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.214918421 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.062447773 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.562870012 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.46780563 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.214981412 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.216022954 seconds)
  done (took 33.873174892 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.230382228 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.235665811 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.224474717 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.243284379 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.266373304 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.225535156 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.278100483 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.383316208 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.226698394 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.275273722 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.239023729 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.226227698 seconds)
  done (took 29.189102393 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.215577543 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.218187089 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.216771771 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.228006225 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.226743222 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.223605196 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.222892755 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.216211083 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.230341712 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.237513626 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.226876357 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.229915045 seconds)
  done (took 48.827512825 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.432181752 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.444165419 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.433682613 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.888050342 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.546113079 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.198390852 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.503758529 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.43247461 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.962264548 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.928843491 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.513285762 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.196237462 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.172893959 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.14411346 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.138930147 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.460841507 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219960182 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.075891003 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.48443529 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.263697663 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222552133 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.218437904 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.222872379 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.5119383 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.544497234 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219308714 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.432658331 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236273025 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.218527976 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.482070443 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.875937638 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.277277161 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.423038884 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.476576146 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.567254679 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.394948386 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.223316497 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.466570599 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269244797 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.254998623 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229257372 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.230304137 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.76579703 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.233282742 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.492923452 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221566998 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.338451375 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.197691269 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146542504 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.50702534 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333598766 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.221408657 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.255536038 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.653862747 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.341566614 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.464645334 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225811514 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.46995883 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282751599 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.441663436 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.433350559 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.22660224 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.43317411 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146568447 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.600679053 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.345563506 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.222576248 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226079911 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.922484405 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.464258919 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.302935039 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.521436627 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.985130226 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.222612059 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225189965 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.268334186 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.312028916 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.222050432 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.507530503 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.200863425 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.149105455 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.321624321 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.617913117 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.228300788 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.222436998 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.231127577 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.0712702 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131713437 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.319874041 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.448329939 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.546343201 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.223387442 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.223741505 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.245729523 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226716059 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.172527351 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.86101116 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.293348986 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.150071525 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.788930442 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.878647547 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.194480038 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.753218885 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.270621699 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.501281439 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.364215935 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.630463607 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.433240715 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.470484388 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.759255008 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.228060693 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.842424922 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308086925 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299783374 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223479552 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.783597259 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.472489591 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.500339404 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339230596 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.224190455 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.151632535 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.235909301 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427859137 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.883661306 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28316135 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.211218219 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.230193523 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.224794016 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.227200416 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.388748011 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241456105 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.513669589 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.297401738 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.226262144 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163528997 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.230607539 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.506122011 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.986954554 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28572859 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.486564319 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.491726554 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.927179006 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.824793552 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.179218624 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.504099729 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.295967114 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301545978 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.814693736 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.355225777 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.322783051 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226151398 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.348147998 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.234813177 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.205262385 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.712788301 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.646324721 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.617502001 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.242307748 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.223576656 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.180992999 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.475882469 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.473660808 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.304894973 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.254888053 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.23232725 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.310021162 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.454137811 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.227965234 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139324682 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.47842051 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.467528803 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.513809616 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.622488619 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.309554779 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.301650623 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.238970675 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.441060862 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.310603525 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.890297942 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.776188501 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450477426 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.859768456 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.19785584 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.869168398 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.454316219 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.609835504 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.243955507 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.681195405 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.478254797 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.981048305 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.2629483 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.756709813 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.15565152 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233822951 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.558499844 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.181479865 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.540740957 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.288947866 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26782392 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.23104488 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.231310554 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237909471 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.161175997 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.336932493 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299109737 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301515108 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157643496 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.93404728 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.273423049 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.233243477 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.231563661 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.572436739 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.099927371 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.182984854 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.230564588 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307668112 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.975679085 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.784731179 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.236719727 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233765803 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.841206552 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.237750267 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137911578 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.233196609 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.107388165 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260258444 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.458811119 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.930332957 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520707206 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.306220391 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309245778 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.232993022 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239411147 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.931055321 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.243193118 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.936449561 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.515958669 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.504310941 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.675791437 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.291838693 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.442980192 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.246929998 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.233439838 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.747237284 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.256393954 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.232200243 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435214433 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.754107221 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.531450555 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.87915064 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.319791068 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.234164377 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.507271304 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.235511255 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.894717014 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.922629703 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.237174439 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.234055718 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.484089067 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.919611806 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.235332051 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.209061383 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.240232045 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.445263373 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.438265279 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.509763698 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.530164361 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683605177 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.16179616 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.23720503 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.270749509 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.477467477 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.234877573 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277130976 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684794038 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.302806181 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.66150673 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.514923239 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.601381405 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.873114788 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.489949526 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.298265341 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.245568094 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.883993474 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361121431 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.168880088 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354318362 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.163499622 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.937678148 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.529293427 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.251867002 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.509191855 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.214423763 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.580530333 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.532413034 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.478297084 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.282549273 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.263975442 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233637931 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266702884 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.237396973 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.496603981 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.353160024 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.240578446 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.852348841 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27981178 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284746092 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.241716847 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.7289223 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.255240873 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240715536 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.934396569 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.263742485 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.357287586 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30931579 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.997199675 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.926080018 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.267021131 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.191985084 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.067713651 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.511918618 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.290279943 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688261558 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271848918 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.642018597 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.238514126 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.450676752 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.232125655 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.852213695 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286245169 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505528699 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192463367 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.451672066 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447239472 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.26287417 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.243006243 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162548727 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.341213136 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.109505044 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.222488485 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.242974538 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.923047775 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.648591028 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.516421362 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.681709067 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.058523374 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.240585002 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.594809475 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.653618217 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.9370496 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.274086943 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239194043 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.534266918 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.374244607 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.535985098 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.535105779 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249063018 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.26459063 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449743982 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363584658 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157717195 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.723315514 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.827683825 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.942046494 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.250641152 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.441589633 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.541310036 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.600825263 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280450224 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319973606 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.646340857 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.516540135 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.306482243 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.164335421 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239115824 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.639497007 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.643778964 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.330561547 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.480780586 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.549252195 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.967877079 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.906974599 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.748460753 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.659154369 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.657130206 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.640598745 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450888511 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.608266362 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.565316117 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.831681114 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.652590232 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454972038 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.332161562 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.524999887 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.108772538 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.953066521 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483711271 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.232179422 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170120412 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.448215633 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.249576779 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.755379309 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82158122 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.470754136 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.473909302 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.708972011 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.783299589 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.501521994 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.270249448 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.212640533 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.267297524 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.263636742 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.244499282 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.720415801 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.53575097 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255810364 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.186325092 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.917279828 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.17253818 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.456916967 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.494923821 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.280014299 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.800127711 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.479005037 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.345462765 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.553700482 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.538595946 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.280576249 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168430867 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.005036173 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.19207219 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.318951349 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.67016403 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261749773 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.248553658 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44931596 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.142142753 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288766549 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.248526179 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.437497933 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825576506 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.530931101 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.369342094 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.485233694 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.543402117 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.114613106 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.26790115 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518783133 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.173273836 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.940950623 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.945412833 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.284065488 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314558055 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244813314 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.247931603 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.504543025 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.527731355 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.339193634 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.990764573 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.281619553 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.255424061 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.546936445 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.335234745 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.24780769 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.251907464 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.787878233 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.48313235 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.232478759 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.210537044 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.460921262 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331004146 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.445929495 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319649139 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.759504365 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.2495134 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.115905849 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346900784 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196852628 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.283910611 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.951805094 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.306787358 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.245742531 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.528352784 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.872645012 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.453415158 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628931177 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.106030744 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.506030748 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294935607 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.25115323 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.253534443 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.631578175 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.548884752 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.237291788 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.523304569 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.296307625 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.253615419 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.907188554 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.215289857 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.246387561 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.946483407 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.211310755 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.980256616 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.643064545 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.263068606 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260213624 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.252909749 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.173500988 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.247936703 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.413798555 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.238563656 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.250659953 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.6267393 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.549140669 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.338057499 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.258060587 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.251343314 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.255554708 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.461169545 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.764022448 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267833228 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.951844645 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.453842176 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.256505338 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.72944573 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.708560421 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.589967299 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.294715697 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.523679471 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.489203128 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.782638653 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.516779294 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.23020706 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.47426299 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.253156522 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517559635 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518182018 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.243949959 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.457330789 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.923379331 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.533446293 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.604043378 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.558778221 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.315606159 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.518302119 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.162345068 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.260023935 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.251329497 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.52159899 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.303768804 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.247416871 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.257535006 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.806032473 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.956960235 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.723944842 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40268253 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.568327302 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150177186 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.008596069 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.254639818 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.176689695 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.249655488 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.279804065 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.25650581 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.180222376 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026395221 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.979677062 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.46768729 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.566313972 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.181784821 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.455330149 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850471789 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.17785889 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.223383531 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.319892063 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.498353982 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17913525 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.254112532 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.206252232 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.526475598 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.081433796 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.523677563 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.252154259 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.198380649 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260183272 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.258462234 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.253096558 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.337984511 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.254784625 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.372830706 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.527755157 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.623775578 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.361649758 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.892805306 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.972886264 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.191684675 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298639397 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.814751767 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.825767385 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.516975321 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.385074646 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.033103569 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.204339283 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.259564254 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273207187 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.513951403 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.258977167 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.257109128 seconds)
  done (took 2305.963469056 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.27068626 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.335990368 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.296195654 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.308283184 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.289527593 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.308123528 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.324913423 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.29773821 seconds)
  done (took 60.601466047 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.254203003 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.249865634 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.266820239 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.256693681 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.256968434 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.256707528 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.455719052 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.286120711 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.25570202 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.260786704 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.257644404 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.256073895 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.253839624 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.254556041 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.261030531 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.558731606 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.275203621 seconds)
  done (took 83.138966838 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.276242229 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.080729216 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.255997049 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.973009867 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.304183466 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.599490493 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.264693063 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.259199946 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.369155391 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.558057134 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.305560664 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.271872859 seconds)
  done (took 94.714303266 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.258464759 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.257571863 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.258220611 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.259007414 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.257824289 seconds)
  done (took 13.464944346 seconds)
done (took 2873.753275633 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.511717573 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.349560653 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.331669943 seconds)
  done (took 6.852802165 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.400823008 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.448984718 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.562081016 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.583086087 seconds)
  done (took 12.176374072 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.55856084 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.636467838 seconds)
  done (took 7.36811727 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.632823213 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.268181864 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.646146562 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.250172729 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.259304326 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.246993631 seconds)
  done (took 23.92263313 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.257584173 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.256767356 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.257460158 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.257656731 seconds)
  done (took 11.204666849 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.258232256 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.041670727 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.255976799 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.264976681 seconds)
  done (took 22.996520279 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.398485773 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.291209893 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.030706734 seconds)
  done (took 10.896499838 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.882648337 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.711356652 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.864658534 seconds)
  done (took 10.634539489 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.436373297 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.244710746 seconds)
  done (took 8.855300048 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.406253789 seconds)
  done (took 4.583380761 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.090914422 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.570340205 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.727827853 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.787129857 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.818128642 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.480981071 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.595101538 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.537767973 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.655591758 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.700365598 seconds)
  done (took 29.140521161 seconds)
done (took 165.863514463 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.669314771 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.282547486 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.450740851 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.633760692 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.497369487 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.467416275 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.561645975 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.623474041 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.312027046 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.29544366 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.637427563 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.494816463 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.508835777 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.278703182 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.51643711 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.273393982 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.49673604 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.711856223 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.316451199 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.552788748 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.575348948 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.280842816 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.477222357 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.295337002 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.492727781 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.418167455 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.885333927 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.276929893 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.466916078 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.899848519 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.422062238 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.696218706 seconds)
  done (took 181.945135141 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.135441563 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.252616237 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.264437595 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.26284432 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.519901622 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.263622189 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.263319881 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.262138558 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.592359328 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.576783497 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.264314269 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.504675878 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.263290355 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.263961725 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.267018427 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.26257013 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.704870792 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.177185419 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.262276402 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.24854288 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.264496249 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.379001506 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.262764932 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.401048259 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.697574127 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.264406418 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.263116072 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.264886495 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.266781878 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.264814286 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.265145981 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.265439613 seconds)
  done (took 220.653583779 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.26300944 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.264750028 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.266270302 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.265556779 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.263552599 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.268018379 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.267199863 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.249328727 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.133454738 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.125712382 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.264719286 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.265022577 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.269749549 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.263778986 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.266206184 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.267731227 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.265449759 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.263800712 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.267902131 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.26696887 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.266472586 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.932523103 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.26828325 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.941000225 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.266930722 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.269846763 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.265431735 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.264161364 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.268385971 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.266110394 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.264098022 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.26829178 seconds)
  done (took 233.754398257 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.504079519 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.264779809 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.267184416 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.282926295 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.268916712 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.268306102 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.2751714 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.517327995 seconds)
  done (took 22.832912416 seconds)
done (took 661.376215135 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.655946294 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.051563623 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.405310553 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.295166941 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.559622402 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.339474066 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.288065293 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.357446177 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.937107739 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.36746238 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.685468366 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.295995283 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.991449994 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.320962892 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.405609051 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.354501466 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.639656909 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.913200731 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.424393692 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.965567952 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.497445379 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.246307996 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.375168464 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.988982761 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.700396918 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.260493387 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.314196374 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.64625494 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.293345846 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.534392769 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.946593352 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.562565424 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.306948237 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.291741116 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.3476878 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.33261412 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.477075761 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.300669871 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.400696398 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.04106974 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.963180895 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.824174339 seconds)
  done (took 117.080604942 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.279841204 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.276404545 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.274215197 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.275199638 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.283658197 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.277455178 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.278947837 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.278456234 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.277804251 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.278958213 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.278891909 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.285170657 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.276422047 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.284475224 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.276668766 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.276281101 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.278021409 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.287853717 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.278913304 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.280105209 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.27807925 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.278715888 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.272284733 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.275957951 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.275709157 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.276644247 seconds)
  done (took 61.44026761 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.273006672 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.453722923 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.564752217 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.309340127 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.274055351 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.2750526 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.300311602 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.245388311 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.272888472 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.274311078 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.386077481 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.279012089 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.286074074 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.562068511 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.305343217 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.272712076 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.271837918 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.272484708 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.457918028 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.289217447 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.305230203 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.27030263 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.30569954 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.290682363 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.276686894 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.274435139 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.276236261 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.676623385 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.286711637 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.38719465 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.320051764 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.308218112 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.614089659 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.574392434 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.343214389 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.27909439 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.272040733 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.432803814 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.287212057 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.274691846 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.303540717 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.285392703 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.567098944 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.797995084 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.292816919 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.275766467 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.675502386 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.446658758 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.323445885 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.289327609 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.574948827 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.310020198 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.276298418 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.277842195 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.314509651 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.289533768 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.275207762 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.518038458 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.256315871 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.303311162 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.284641522 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.278384664 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.469076265 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.287539566 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.458035464 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.287481913 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.282445658 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.276555922 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.567866828 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.307534774 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.796192136 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.293796508 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.276522386 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.391865514 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.461838265 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.704868996 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.291868927 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.469644981 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.629199913 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.315895553 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.289370399 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.666460019 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.319732229 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.28930021 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.277220805 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.279057113 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.277700916 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.321161698 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.306019333 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.708299208 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.794797202 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.538076043 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.31762334 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.292742089 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.280248534 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.521370461 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.289804429 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.278633905 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.56311361 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.820874635 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.292704322 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.283940316 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.774141285 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.297065268 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.30966936 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.292467519 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.580022708 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.311895983 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.321076899 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.277259799 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.283635552 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.280684085 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.309124099 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.291881323 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.280028815 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.765499732 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.456363887 seconds)
  done (took 280.496100408 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.283345354 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.277418551 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.280276164 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.28011278 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.276496004 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.281228274 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.279866672 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.278564909 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.278481077 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.276584672 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.280145403 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.279833183 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.279716487 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.285025 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.328843452 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.280449933 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.767515405 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.277006735 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.280479081 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.281505385 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.851995017 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.286345168 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.279801511 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.281772722 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.278203552 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.284276948 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.285569645 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.323815654 seconds)
  done (took 179.208123569 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.282835636 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.329919242 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.296101931 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.328807318 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.29507678 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.279722101 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.300863706 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.2945873 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.287650597 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.283339484 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.282180241 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.310587759 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.292957698 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.3569485 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.312023583 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.310788447 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.357838042 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.287338632 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.282259961 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.283180274 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.331156122 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.298362076 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.311759172 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.339814142 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.298786623 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.330080348 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.29448176 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.28112534 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.281306395 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.373451791 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.30448113 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.313696571 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.320884516 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.303588148 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.37750026 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.376144803 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.364715053 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.310618805 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.284895441 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.28292317 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.284015284 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.28570796 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.333164264 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.29987318 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.28604589 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.375300854 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.302145293 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.282555732 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.305452653 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.284136792 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.297138607 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.301855421 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.318518072 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.387192629 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.334311021 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.309851786 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.304490475 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.30201775 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.282893265 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.358771771 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.293162815 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.377389544 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.305519343 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.287003681 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.287836595 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.2883386 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.332240253 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.320088191 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.360922023 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.293545637 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.360526726 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.34263493 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.301600384 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.286787317 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.286350642 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.334358733 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.372775473 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.34008002 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.346437735 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.32147209 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.295973693 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.285860372 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.28789576 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.315195841 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.294991038 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.3780825 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.380522964 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.295596043 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.285257451 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.284830055 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.284996721 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.308551322 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.344204194 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.330004014 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.371590106 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.324039523 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.323670357 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.295370343 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.298164276 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.29085553 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.316565244 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.29551061 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.299145908 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.630246859 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.325062715 seconds)
  done (took 245.453931288 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.66603345 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.340508587 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.355164568 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.559106176 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.6749802 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.449803981 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.327594489 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.34424587 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.333882833 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.456801403 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.399787246 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.384521809 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.323364365 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.308603362 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.336912197 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.346488712 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.370946771 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.638100115 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.43475755 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.133294806 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.328937822 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.586025222 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.626048591 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.677790596 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.376343439 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.716966206 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.973763494 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.425922035 seconds)
  done (took 74.103518744 seconds)
done (took 959.968709342 seconds)
SAVING RESULT...
DONE!
